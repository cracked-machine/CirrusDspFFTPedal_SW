/*
 * read_microsd_data.c
 *
 *  Created on: Nov 8, 2020
 *      Author: chris
 */

#include <use_microsd.h>
#include "fatfs.h"

//#define FORMAT_MICROSD

BYTE work[FF_MAX_SS];

void read_sdio_data()
{

#ifdef FORMAT_MICROSD
  fres = f_mkfs("", 0, work, sizeof(work));
  if (fres != FR_OK) {
    Error_Handler();
  }
#endif
	 // try to mount Micro-SD card

	  FRESULT fres = f_mount(&SDFatFS, SDPath, 0);
	  if(fres != FR_OK)
	  {
		  // FR_DISK_ERR (and HAL_SD_ERROR_RX_OVERRUN) is caused by SDIOCLK clock > 16MHz
		  // Fix by setting SDIOCLK clock divide factor to 3
		  error_sdio("mount");
	  }

	  DWORD free_clusters, free_sectors, total_sectors;

	  FATFS* getFreeFs;

	  fres = f_getfree("", &free_clusters, &getFreeFs);
	  if (fres != FR_OK) {
		  error_sdio("getfree");
	  }
	  else
	  {
		  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
		  free_sectors = free_clusters * getFreeFs->csize;

		  printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);

	  }



	  //Close file, don't forget this!
	  f_close(&SDFile);

	  //De-mount drive
	  f_mount(NULL, "", 0);
}

void write_sdio_data(char* filename, char* text)
{
	  fres = f_open(&SDFile, filename, FA_OPEN_APPEND | FA_WRITE);
	  if(fres == FR_OK) {
	    printf("I was able to open file for writing\r\n");
	  } else {
		  error_sdio("write");
	  }

	  strncpy((char*)readBuf, text, 19);
	  UINT bytesWrote;
	  fres = f_write(&fil, readBuf, 19, &bytesWrote);
	  if(fres == FR_OK) {
	    printf("Wrote %i bytes to %s!\r\n", bytesWrote, filename);
	  } else {
	    Error_Handler();
	  }
}

void error_sdio(char* opcode)
{
	printf("Error when performing SDIO %s\r\n", opcode);
}
