/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "fatfs.h"
#include "i2s.h"
#include "sdio.h"
#include "tim.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>

#include "arm_math.h"
#include "user_input.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define IIR_BIQUAD
//#define REAL_FFT

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

#ifdef REAL_FFT

	uint16_t rxBuf[16384];
	uint16_t txBuf[16384];
	float32_t fft_in_buf[2048];
	float32_t fft_out_buf[2048];


	arm_rfft_fast_instance_f32 fft_handler;

	float real_fsample = 46875;
	uint8_t callback_state = 0;
	uint8_t outarray[14];
	uint8_t uartfree = 1;

#endif // Real_FFT

#ifdef IIR_BIQUAD


	#define BLOCK_SIZE_FLOAT 512
	#define BLOCK_SIZE_U16 2048

	arm_biquad_casd_df1_inst_f32 iirsettings_l, iirsettings_r;

	//4 delayed samples per biquad
	float iir_l_state [4];
	float iir_r_state [4];


	//IIR low-pass, fs=48kHz, f_cut=1kHz, q=0.707
	float iir_coeffs [5] = {
					0.003916123487156427f,
					0.007832246974312854f,
					0.003916123487156427f,
					1.8153396116625289f,
					-0.8310041056111546
	};




	uint16_t rxBuf[BLOCK_SIZE_U16*2];
	uint16_t txBuf[BLOCK_SIZE_U16*2];
	float l_buf_in [BLOCK_SIZE_FLOAT*2];
	float r_buf_in [BLOCK_SIZE_FLOAT*2];
	float l_buf_out [BLOCK_SIZE_FLOAT*2];
	float r_buf_out [BLOCK_SIZE_FLOAT*2];

	uint8_t callback_state = 0;

	int offset_r_ptr;
	int offset_w_ptr, w_ptr;
#endif //IIR_BIQUAD

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
  (void) file;  /// Not used, avoid warning
  SEGGER_RTT_Write(0, ptr, len);
  return len;
}

#ifdef REAL_FFT

void real_fft_init()
{
	HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, 8192);

	arm_rfft_fast_init_f32(&fft_handler, 2048);

}

float complexABS(float real, float compl) {
	return sqrtf(real*real+compl*compl);
}

void do_fft() {
	//Do FFT
	arm_rfft_fast_f32(&fft_handler, fft_in_buf, fft_out_buf,0);

	int freqs[1024];
	int freqpoint = 0;
	int offset = 150; //variable noisefloor offset

	//calculate abs values and linear-to-dB
	for (int i=0; i<2048; i=i+2) {
		freqs[freqpoint] = (int)(20*log10f(complexABS(fft_out_buf[i], fft_out_buf[i+1])))-offset;
		if (freqs[freqpoint]<0) freqs[freqpoint]=0;
		freqpoint++;
	}


	//push out data to Uart
	outarray[0] = 0xff; //frame start
	outarray[1] = (uint8_t)freqs[1]; //31-5Hz
	outarray[2] = (uint8_t)freqs[3]; //63 Hz
	outarray[3] = (uint8_t)freqs[5]; //125 Hz
	outarray[4] = (uint8_t)freqs[11]; //250 Hz
	outarray[5] = (uint8_t)freqs[22]; //500 Hz
	outarray[6] = (uint8_t)freqs[44]; //1 kHz
	outarray[7] = (uint8_t)freqs[96]; //2.2 kHz
	outarray[8] = (uint8_t)freqs[197]; //4.5 kHz
	outarray[9] = (uint8_t)freqs[393]; //9 kHz
	outarray[10] = (uint8_t)freqs[655]; //15 lHz

	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
			outarray[0],
			outarray[1],
			outarray[2],
			outarray[3],
			outarray[4],
			outarray[5],
			outarray[6],
			outarray[7],
			outarray[8],
			outarray[9],
			outarray[10],
			outarray[11],
			outarray[12],
			outarray[13]
	);
//	if (uartfree==1) HAL_UART_Transmit_DMA(&huart2, &outarray[0], 11);
	uartfree = 0;
	callback_state=0;

}
/*
void HAL_UART_TxHalfCpltCallback (UART_HandleTypeDef *huart) {
	uartfree = 1;
	huart2.gState=HAL_UART_STATE_READY;
}
*/

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){

 	callback_state = 1;

}

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){

	callback_state = 2;

}

void real_fft_loop()
{
	//do audio loopback and push mono-sum to fft_in_buf

  int fft_in_ptr = 0;
  if (callback_state == 1) {
	  for (int i=0; i<8192; i=i+4) {
		  fft_in_buf[fft_in_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
		  fft_in_buf[fft_in_ptr] += (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
		  txBuf[i] = rxBuf[i];
		  txBuf[i+1] = rxBuf[i+1];
		  txBuf[i+2] = rxBuf[i+2];
		  txBuf[i+3] = rxBuf[i+3];
		  fft_in_ptr++;
	  }

	  do_fft();
  }

  if (callback_state == 2) {
	  for (int i=8192; i<16384; i=i+4) {
		  fft_in_buf[fft_in_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
		  fft_in_buf[fft_in_ptr] += (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
		  txBuf[i] = rxBuf[i];
		  txBuf[i+1] = rxBuf[i+1];
		  txBuf[i+2] = rxBuf[i+2];
		  txBuf[i+3] = rxBuf[i+3];
		  fft_in_ptr++;
	  }


	  do_fft();

  }
}

#endif // REAL_FFT

#ifdef IIR_BIQUAD
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){

	callback_state = 1;

}

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){

	callback_state = 2;

}

void do_iir_init()
{
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_l, 1, &iir_coeffs[0], &iir_l_state[0]);
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_r, 1, &iir_coeffs[0], &iir_r_state[0]);


  //int res = testfunc();
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);


}

void do_iir_loop()
{
  if (callback_state != 0) {

	  //decide if it was half or cplt callback
	  if (callback_state == 1)   {
			  offset_r_ptr = 0;
			  offset_w_ptr = 0;
			  w_ptr = 0;
	  }

	  else if (callback_state == 2) {
		  offset_r_ptr = BLOCK_SIZE_U16;
		  offset_w_ptr = BLOCK_SIZE_FLOAT;
		  w_ptr = BLOCK_SIZE_FLOAT;
	  }


	  //restore input sample buffer to float array
	  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
		  l_buf_in[w_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
		  r_buf_in[w_ptr] = (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
		  w_ptr++;
	  }


	  //process IIR
	  arm_biquad_cascade_df1_f32 (&iirsettings_l, &l_buf_in[offset_w_ptr], &l_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);
	  arm_biquad_cascade_df1_f32 (&iirsettings_r, &r_buf_in[offset_w_ptr], &r_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);


	  //restore processed float-array to output sample-buffer
	  w_ptr = offset_w_ptr;

	  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
			txBuf[i] =  (((int)l_buf_out[w_ptr])>>16)&0xFFFF;
			txBuf[i+1] = ((int)l_buf_out[w_ptr])&0xFFFF;
			txBuf[i+2] = (((int)l_buf_out[w_ptr])>>16)&0xFFFF;
			txBuf[i+3] = ((int)l_buf_out[w_ptr])&0xFFFF;
			w_ptr++;
	  }

	  callback_state = 0;

  }
}
#endif // IIR_BIQUAD

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_I2S2_Init();
  MX_TIM13_Init();
  MX_SDIO_SD_Init();
  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);

  HAL_ADC_Start_DMA(&hadc1, adc_input_data_buffer, ADC_DATA_BUFFER_SIZE);
  //HAL_TIM_Base_Start_IT(&htim13);

#ifdef IIR_BIQUAD
  do_iir_init();
#endif //IIR_BIQUAD

#ifdef REAL_FFT
  real_fft_init();
#endif // REAL_FFT

  // try to mount Micro-SD card
  FRESULT fres = f_mount(&SDFatFS, SDPath, 1);
  if(fres != FR_OK)
  {
	  Error_Handler();
  }

  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
  if (fres != FR_OK) {
    Error_Handler();
  }

  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
  free_sectors = free_clusters * getFreeFs->csize;

  printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// do dsp
	#ifdef IIR_BIQUAD
		do_iir_loop();
	#endif //IIR_BIQUAD

	#ifdef REAL_FFT
		real_fft_loop();
	#endif //REAL_FFT

	check_user_buttons_state();
	printf("%lu - %lu - %lu\r\n", user_input_data.exp_input, user_input_data.user_pot1, user_input_data.user_pot2 );
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
