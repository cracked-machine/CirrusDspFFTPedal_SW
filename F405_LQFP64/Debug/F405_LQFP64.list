
F405_LQFP64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005b9c  08005b9c  00015b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c78  08005c78  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005c78  08005c78  00015c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c80  08005c80  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c84  08005c84  00015c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008740  20000084  08005d0c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200087c4  08005d0c  000287c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a65  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036db  00000000  00000000  00038b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb8  00000000  00000000  0003c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  0003d1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023f94  00000000  00000000  0003dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001426b  00000000  00000000  00061f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c751f  00000000  00000000  000761bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00000164  00000000  00000000  0013d6de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004664  00000000  00000000  0013d844  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000005bb  00000000  00000000  00141ea8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b84 	.word	0x08005b84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08005b84 	.word	0x08005b84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800057a:	4b2f      	ldr	r3, [pc, #188]	; (8000638 <MX_ADC1_Init+0xd0>)
 800057c:	4a2f      	ldr	r2, [pc, #188]	; (800063c <MX_ADC1_Init+0xd4>)
 800057e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000580:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <MX_ADC1_Init+0xd0>)
 8000582:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000586:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000588:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <MX_ADC1_Init+0xd0>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800058e:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <MX_ADC1_Init+0xd0>)
 8000590:	2201      	movs	r2, #1
 8000592:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <MX_ADC1_Init+0xd0>)
 8000596:	2201      	movs	r2, #1
 8000598:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800059a:	4b27      	ldr	r3, [pc, #156]	; (8000638 <MX_ADC1_Init+0xd0>)
 800059c:	2200      	movs	r2, #0
 800059e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a8:	4b23      	ldr	r3, [pc, #140]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005aa:	4a25      	ldr	r2, [pc, #148]	; (8000640 <MX_ADC1_Init+0xd8>)
 80005ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005bc:	2201      	movs	r2, #1
 80005be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c8:	481b      	ldr	r0, [pc, #108]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005ca:	f000 ffa1 	bl	8001510 <HAL_ADC_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005d4:	f000 fcb4 	bl	8000f40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80005e0:	2307      	movs	r3, #7
 80005e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	4813      	ldr	r0, [pc, #76]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005ea:	f001 f8db 	bl	80017a4 <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005f4:	f000 fca4 	bl	8000f40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005f8:	2301      	movs	r3, #1
 80005fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <MX_ADC1_Init+0xd0>)
 8000606:	f001 f8cd 	bl	80017a4 <HAL_ADC_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000610:	f000 fc96 	bl	8000f40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000614:	2302      	movs	r3, #2
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000618:	2303      	movs	r3, #3
 800061a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_ADC1_Init+0xd0>)
 8000622:	f001 f8bf 	bl	80017a4 <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800062c:	f000 fc88 	bl	8000f40 <Error_Handler>
  }

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200004c4 	.word	0x200004c4
 800063c:	40012000 	.word	0x40012000
 8000640:	0f000001 	.word	0x0f000001

08000644 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a2f      	ldr	r2, [pc, #188]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d157      	bne.n	8000716 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	4a2d      	ldr	r2, [pc, #180]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 8000670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000674:	6453      	str	r3, [r2, #68]	; 0x44
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b27      	ldr	r3, [pc, #156]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a26      	ldr	r2, [pc, #152]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = FootExp_IN_Pin|UserPotA_IN_Pin|UserPotB_IN_Pin;
 800069e:	2307      	movs	r3, #7
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	481d      	ldr	r0, [pc, #116]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006b2:	f001 ff99 	bl	80025e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <HAL_ADC_MspInit+0xec>)
 80006ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006fc:	f001 fc04 	bl	8001f08 <HAL_DMA_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000706:	f000 fc1b 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a07      	ldr	r2, [pc, #28]	; (800072c <HAL_ADC_MspInit+0xe8>)
 800070e:	639a      	str	r2, [r3, #56]	; 0x38
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <HAL_ADC_MspInit+0xe8>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40012000 	.word	0x40012000
 8000724:	40023800 	.word	0x40023800
 8000728:	40020000 	.word	0x40020000
 800072c:	2000050c 	.word	0x2000050c
 8000730:	40026410 	.word	0x40026410

08000734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_DMA_Init+0x78>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <MX_DMA_Init+0x78>)
 8000744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_DMA_Init+0x78>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_DMA_Init+0x78>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_DMA_Init+0x78>)
 8000760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_DMA_Init+0x78>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	200e      	movs	r0, #14
 8000778:	f001 fb8f 	bl	8001e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800077c:	200e      	movs	r0, #14
 800077e:	f001 fba8 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	200f      	movs	r0, #15
 8000788:	f001 fb87 	bl	8001e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800078c:	200f      	movs	r0, #15
 800078e:	f001 fba0 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	2038      	movs	r0, #56	; 0x38
 8000798:	f001 fb7f 	bl	8001e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800079c:	2038      	movs	r0, #56	; 0x38
 800079e:	f001 fb98 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b44      	ldr	r3, [pc, #272]	; (80008dc <MX_GPIO_Init+0x12c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a43      	ldr	r2, [pc, #268]	; (80008dc <MX_GPIO_Init+0x12c>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b41      	ldr	r3, [pc, #260]	; (80008dc <MX_GPIO_Init+0x12c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b3d      	ldr	r3, [pc, #244]	; (80008dc <MX_GPIO_Init+0x12c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a3c      	ldr	r2, [pc, #240]	; (80008dc <MX_GPIO_Init+0x12c>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b3a      	ldr	r3, [pc, #232]	; (80008dc <MX_GPIO_Init+0x12c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b36      	ldr	r3, [pc, #216]	; (80008dc <MX_GPIO_Init+0x12c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a35      	ldr	r2, [pc, #212]	; (80008dc <MX_GPIO_Init+0x12c>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b33      	ldr	r3, [pc, #204]	; (80008dc <MX_GPIO_Init+0x12c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(relay_switch_GPIO_Port, relay_switch_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	4830      	ldr	r0, [pc, #192]	; (80008e0 <MX_GPIO_Init+0x130>)
 8000820:	f002 f87e 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_RED_Pin|LEDA_BLUE_Pin|LEDA_GREEN_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2107      	movs	r1, #7
 8000828:	482e      	ldr	r0, [pc, #184]	; (80008e4 <MX_GPIO_Init+0x134>)
 800082a:	f002 f879 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDB_RED_Pin|LEDB_BLUE_Pin|LEDB_GREEN_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000834:	482c      	ldr	r0, [pc, #176]	; (80008e8 <MX_GPIO_Init+0x138>)
 8000836:	f002 f873 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = foot_switch1_Pin|foot_switch2_Pin;
 800083a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <MX_GPIO_Init+0x13c>)
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000844:	2301      	movs	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	4824      	ldr	r0, [pc, #144]	; (80008e0 <MX_GPIO_Init+0x130>)
 8000850:	f001 feca 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = relay_switch_Pin;
 8000854:	2301      	movs	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(relay_switch_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	4619      	mov	r1, r3
 800086a:	481d      	ldr	r0, [pc, #116]	; (80008e0 <MX_GPIO_Init+0x130>)
 800086c:	f001 febc 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = user_switch2_Pin|user_switch1_Pin;
 8000870:	2306      	movs	r3, #6
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	4817      	ldr	r0, [pc, #92]	; (80008e0 <MX_GPIO_Init+0x130>)
 8000884:	f001 feb0 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEDA_RED_Pin|LEDA_BLUE_Pin|LEDA_GREEN_Pin;
 8000888:	2307      	movs	r3, #7
 800088a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4619      	mov	r1, r3
 800089e:	4811      	ldr	r0, [pc, #68]	; (80008e4 <MX_GPIO_Init+0x134>)
 80008a0:	f001 fea2 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LEDB_RED_Pin|LEDB_BLUE_Pin|LEDB_GREEN_Pin;
 80008a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	4619      	mov	r1, r3
 80008bc:	480a      	ldr	r0, [pc, #40]	; (80008e8 <MX_GPIO_Init+0x138>)
 80008be:	f001 fe93 	bl	80025e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2028      	movs	r0, #40	; 0x28
 80008c8:	f001 fae7 	bl	8001e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008cc:	2028      	movs	r0, #40	; 0x28
 80008ce:	f001 fb00 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020800 	.word	0x40020800
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40020000 	.word	0x40020000
 80008ec:	10210000 	.word	0x10210000

080008f0 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_i2s2_ext_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_I2S2_Init+0x54>)
 80008f6:	4a14      	ldr	r2, [pc, #80]	; (8000948 <MX_I2S2_Init+0x58>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2S2_Init+0x54>)
 80008fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000900:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_I2S2_Init+0x54>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_I2S2_Init+0x54>)
 800090a:	2203      	movs	r2, #3
 800090c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <MX_I2S2_Init+0x54>)
 8000910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000914:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_I2S2_Init+0x54>)
 8000918:	4a0c      	ldr	r2, [pc, #48]	; (800094c <MX_I2S2_Init+0x5c>)
 800091a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_I2S2_Init+0x54>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_I2S2_Init+0x54>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_I2S2_Init+0x54>)
 800092a:	2201      	movs	r2, #1
 800092c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_I2S2_Init+0x54>)
 8000930:	f002 f842 	bl	80029b8 <HAL_I2S_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800093a:	f000 fb01 	bl	8000f40 <Error_Handler>
  }

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000062c 	.word	0x2000062c
 8000948:	40003800 	.word	0x40003800
 800094c:	00017700 	.word	0x00017700

08000950 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a63      	ldr	r2, [pc, #396]	; (8000afc <HAL_I2S_MspInit+0x1ac>)
 800096e:	4293      	cmp	r3, r2
 8000970:	f040 80bf 	bne.w	8000af2 <HAL_I2S_MspInit+0x1a2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	4b61      	ldr	r3, [pc, #388]	; (8000b00 <HAL_I2S_MspInit+0x1b0>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a60      	ldr	r2, [pc, #384]	; (8000b00 <HAL_I2S_MspInit+0x1b0>)
 800097e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	4b5e      	ldr	r3, [pc, #376]	; (8000b00 <HAL_I2S_MspInit+0x1b0>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	4b5a      	ldr	r3, [pc, #360]	; (8000b00 <HAL_I2S_MspInit+0x1b0>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4a59      	ldr	r2, [pc, #356]	; (8000b00 <HAL_I2S_MspInit+0x1b0>)
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	6313      	str	r3, [r2, #48]	; 0x30
 80009a0:	4b57      	ldr	r3, [pc, #348]	; (8000b00 <HAL_I2S_MspInit+0x1b0>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <HAL_I2S_MspInit+0x1b0>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a52      	ldr	r2, [pc, #328]	; (8000b00 <HAL_I2S_MspInit+0x1b0>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b50      	ldr	r3, [pc, #320]	; (8000b00 <HAL_I2S_MspInit+0x1b0>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80009c8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009da:	2305      	movs	r3, #5
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4847      	ldr	r0, [pc, #284]	; (8000b04 <HAL_I2S_MspInit+0x1b4>)
 80009e6:	f001 fdff 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80009fc:	2306      	movs	r3, #6
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	483f      	ldr	r0, [pc, #252]	; (8000b04 <HAL_I2S_MspInit+0x1b4>)
 8000a08:	f001 fdee 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a0c:	2340      	movs	r3, #64	; 0x40
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4838      	ldr	r0, [pc, #224]	; (8000b08 <HAL_I2S_MspInit+0x1b8>)
 8000a28:	f001 fdde 	bl	80025e8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000a2c:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <HAL_I2S_MspInit+0x1bc>)
 8000a2e:	4a38      	ldr	r2, [pc, #224]	; (8000b10 <HAL_I2S_MspInit+0x1c0>)
 8000a30:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000a32:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <HAL_I2S_MspInit+0x1bc>)
 8000a34:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a38:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <HAL_I2S_MspInit+0x1bc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a40:	4b32      	ldr	r3, [pc, #200]	; (8000b0c <HAL_I2S_MspInit+0x1bc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a46:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <HAL_I2S_MspInit+0x1bc>)
 8000a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4c:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <HAL_I2S_MspInit+0x1bc>)
 8000a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a54:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a56:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <HAL_I2S_MspInit+0x1bc>)
 8000a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5c:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <HAL_I2S_MspInit+0x1bc>)
 8000a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a64:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a66:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <HAL_I2S_MspInit+0x1bc>)
 8000a68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <HAL_I2S_MspInit+0x1bc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000a74:	4825      	ldr	r0, [pc, #148]	; (8000b0c <HAL_I2S_MspInit+0x1bc>)
 8000a76:	f001 fa47 	bl	8001f08 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_I2S_MspInit+0x134>
    {
      Error_Handler();
 8000a80:	f000 fa5e 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s2_ext_rx);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a21      	ldr	r2, [pc, #132]	; (8000b0c <HAL_I2S_MspInit+0x1bc>)
 8000a88:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a8a:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <HAL_I2S_MspInit+0x1bc>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000a90:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <HAL_I2S_MspInit+0x1c4>)
 8000a92:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <HAL_I2S_MspInit+0x1c8>)
 8000a94:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <HAL_I2S_MspInit+0x1c4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <HAL_I2S_MspInit+0x1c4>)
 8000a9e:	2240      	movs	r2, #64	; 0x40
 8000aa0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <HAL_I2S_MspInit+0x1c4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <HAL_I2S_MspInit+0x1c4>)
 8000aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aae:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_I2S_MspInit+0x1c4>)
 8000ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ab6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_I2S_MspInit+0x1c4>)
 8000aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000abe:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_I2S_MspInit+0x1c4>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_I2S_MspInit+0x1c4>)
 8000aca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ace:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_I2S_MspInit+0x1c4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ad6:	480f      	ldr	r0, [pc, #60]	; (8000b14 <HAL_I2S_MspInit+0x1c4>)
 8000ad8:	f001 fa16 	bl	8001f08 <HAL_DMA_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_I2S_MspInit+0x196>
    {
      Error_Handler();
 8000ae2:	f000 fa2d 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_I2S_MspInit+0x1c4>)
 8000aea:	639a      	str	r2, [r3, #56]	; 0x38
 8000aec:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <HAL_I2S_MspInit+0x1c4>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40003800 	.word	0x40003800
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020400 	.word	0x40020400
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	2000056c 	.word	0x2000056c
 8000b10:	40026058 	.word	0x40026058
 8000b14:	200005cc 	.word	0x200005cc
 8000b18:	40026070 	.word	0x40026070

08000b1c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  (void) file;  /// Not used, avoid warning
  SEGGER_RTT_Write(0, ptr, len);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f003 ff20 	bl	8004974 <SEGGER_RTT_Write>
  return len;
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_I2SEx_TxRxHalfCpltCallback>:
}

#endif // REAL_FFT

#ifdef IIR_BIQUAD
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	callback_state = 1;
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]

}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	200000a0 	.word	0x200000a0

08000b60 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

	callback_state = 2;
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	701a      	strb	r2, [r3, #0]

}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200000a0 	.word	0x200000a0

08000b80 <do_iir_init>:

void do_iir_init()
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_l, 1, &iir_coeffs[0], &iir_l_state[0]);
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <do_iir_init+0x30>)
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <do_iir_init+0x34>)
 8000b88:	2101      	movs	r1, #1
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <do_iir_init+0x38>)
 8000b8c:	f003 ff88 	bl	8004aa0 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_r, 1, &iir_coeffs[0], &iir_r_state[0]);
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <do_iir_init+0x3c>)
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <do_iir_init+0x34>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <do_iir_init+0x40>)
 8000b98:	f003 ff82 	bl	8004aa0 <arm_biquad_cascade_df1_init_f32>


  //int res = testfunc();
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 8000b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ba0:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <do_iir_init+0x44>)
 8000ba2:	4909      	ldr	r1, [pc, #36]	; (8000bc8 <do_iir_init+0x48>)
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <do_iir_init+0x4c>)
 8000ba6:	f002 f94d 	bl	8002e44 <HAL_I2SEx_TransmitReceive_DMA>


}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20004684 	.word	0x20004684
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000674 	.word	0x20000674
 8000bbc:	200076a8 	.word	0x200076a8
 8000bc0:	200086bc 	.word	0x200086bc
 8000bc4:	20005694 	.word	0x20005694
 8000bc8:	20001684 	.word	0x20001684
 8000bcc:	2000062c 	.word	0x2000062c

08000bd0 <do_iir_loop>:

void do_iir_loop()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  if (callback_state != 0) {
 8000bd6:	4b72      	ldr	r3, [pc, #456]	; (8000da0 <do_iir_loop+0x1d0>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 80db 	beq.w	8000d96 <do_iir_loop+0x1c6>

	  //decide if it was half or cplt callback
	  if (callback_state == 1)   {
 8000be0:	4b6f      	ldr	r3, [pc, #444]	; (8000da0 <do_iir_loop+0x1d0>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d109      	bne.n	8000bfc <do_iir_loop+0x2c>
			  offset_r_ptr = 0;
 8000be8:	4b6e      	ldr	r3, [pc, #440]	; (8000da4 <do_iir_loop+0x1d4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
			  offset_w_ptr = 0;
 8000bee:	4b6e      	ldr	r3, [pc, #440]	; (8000da8 <do_iir_loop+0x1d8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
			  w_ptr = 0;
 8000bf4:	4b6d      	ldr	r3, [pc, #436]	; (8000dac <do_iir_loop+0x1dc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	e00f      	b.n	8000c1c <do_iir_loop+0x4c>
	  }

	  else if (callback_state == 2) {
 8000bfc:	4b68      	ldr	r3, [pc, #416]	; (8000da0 <do_iir_loop+0x1d0>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d10b      	bne.n	8000c1c <do_iir_loop+0x4c>
		  offset_r_ptr = BLOCK_SIZE_U16;
 8000c04:	4b67      	ldr	r3, [pc, #412]	; (8000da4 <do_iir_loop+0x1d4>)
 8000c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c0a:	601a      	str	r2, [r3, #0]
		  offset_w_ptr = BLOCK_SIZE_FLOAT;
 8000c0c:	4b66      	ldr	r3, [pc, #408]	; (8000da8 <do_iir_loop+0x1d8>)
 8000c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c12:	601a      	str	r2, [r3, #0]
		  w_ptr = BLOCK_SIZE_FLOAT;
 8000c14:	4b65      	ldr	r3, [pc, #404]	; (8000dac <do_iir_loop+0x1dc>)
 8000c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1a:	601a      	str	r2, [r3, #0]
	  }


	  //restore input sample buffer to float array
	  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8000c1c:	4b61      	ldr	r3, [pc, #388]	; (8000da4 <do_iir_loop+0x1d4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	e034      	b.n	8000c8e <do_iir_loop+0xbe>
		  l_buf_in[w_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
 8000c24:	4a62      	ldr	r2, [pc, #392]	; (8000db0 <do_iir_loop+0x1e0>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c2c:	041b      	lsls	r3, r3, #16
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	3201      	adds	r2, #1
 8000c32:	495f      	ldr	r1, [pc, #380]	; (8000db0 <do_iir_loop+0x1e0>)
 8000c34:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	4b5c      	ldr	r3, [pc, #368]	; (8000dac <do_iir_loop+0x1dc>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	ee07 2a90 	vmov	s15, r2
 8000c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c46:	4a5b      	ldr	r2, [pc, #364]	; (8000db4 <do_iir_loop+0x1e4>)
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	edc3 7a00 	vstr	s15, [r3]
		  r_buf_in[w_ptr] = (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3302      	adds	r3, #2
 8000c54:	4a56      	ldr	r2, [pc, #344]	; (8000db0 <do_iir_loop+0x1e0>)
 8000c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c5a:	041b      	lsls	r3, r3, #16
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	3203      	adds	r2, #3
 8000c60:	4953      	ldr	r1, [pc, #332]	; (8000db0 <do_iir_loop+0x1e0>)
 8000c62:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c66:	431a      	orrs	r2, r3
 8000c68:	4b50      	ldr	r3, [pc, #320]	; (8000dac <do_iir_loop+0x1dc>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	ee07 2a90 	vmov	s15, r2
 8000c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c74:	4a50      	ldr	r2, [pc, #320]	; (8000db8 <do_iir_loop+0x1e8>)
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	edc3 7a00 	vstr	s15, [r3]
		  w_ptr++;
 8000c7e:	4b4b      	ldr	r3, [pc, #300]	; (8000dac <do_iir_loop+0x1dc>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	4a49      	ldr	r2, [pc, #292]	; (8000dac <do_iir_loop+0x1dc>)
 8000c86:	6013      	str	r3, [r2, #0]
	  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <do_iir_loop+0x1d4>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	ddc3      	ble.n	8000c24 <do_iir_loop+0x54>
	  }


	  //process IIR
	  arm_biquad_cascade_df1_f32 (&iirsettings_l, &l_buf_in[offset_w_ptr], &l_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);
 8000c9c:	4b42      	ldr	r3, [pc, #264]	; (8000da8 <do_iir_loop+0x1d8>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4a44      	ldr	r2, [pc, #272]	; (8000db4 <do_iir_loop+0x1e4>)
 8000ca4:	1899      	adds	r1, r3, r2
 8000ca6:	4b40      	ldr	r3, [pc, #256]	; (8000da8 <do_iir_loop+0x1d8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4a43      	ldr	r2, [pc, #268]	; (8000dbc <do_iir_loop+0x1ec>)
 8000cae:	441a      	add	r2, r3
 8000cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb4:	4842      	ldr	r0, [pc, #264]	; (8000dc0 <do_iir_loop+0x1f0>)
 8000cb6:	f003 feff 	bl	8004ab8 <arm_biquad_cascade_df1_f32>
	  arm_biquad_cascade_df1_f32 (&iirsettings_r, &r_buf_in[offset_w_ptr], &r_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);
 8000cba:	4b3b      	ldr	r3, [pc, #236]	; (8000da8 <do_iir_loop+0x1d8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4a3d      	ldr	r2, [pc, #244]	; (8000db8 <do_iir_loop+0x1e8>)
 8000cc2:	1899      	adds	r1, r3, r2
 8000cc4:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <do_iir_loop+0x1d8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4a3e      	ldr	r2, [pc, #248]	; (8000dc4 <do_iir_loop+0x1f4>)
 8000ccc:	441a      	add	r2, r3
 8000cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd2:	483d      	ldr	r0, [pc, #244]	; (8000dc8 <do_iir_loop+0x1f8>)
 8000cd4:	f003 fef0 	bl	8004ab8 <arm_biquad_cascade_df1_f32>


	  //restore processed float-array to output sample-buffer
	  w_ptr = offset_w_ptr;
 8000cd8:	4b33      	ldr	r3, [pc, #204]	; (8000da8 <do_iir_loop+0x1d8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a33      	ldr	r2, [pc, #204]	; (8000dac <do_iir_loop+0x1dc>)
 8000cde:	6013      	str	r3, [r2, #0]

	  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8000ce0:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <do_iir_loop+0x1d4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	e04c      	b.n	8000d82 <do_iir_loop+0x1b2>
			txBuf[i] =  (((int)l_buf_out[w_ptr])>>16)&0xFFFF;
 8000ce8:	4b30      	ldr	r3, [pc, #192]	; (8000dac <do_iir_loop+0x1dc>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <do_iir_loop+0x1ec>)
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	edd3 7a00 	vldr	s15, [r3]
 8000cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cfa:	ee17 3a90 	vmov	r3, s15
 8000cfe:	0c1b      	lsrs	r3, r3, #16
 8000d00:	b299      	uxth	r1, r3
 8000d02:	4a32      	ldr	r2, [pc, #200]	; (8000dcc <do_iir_loop+0x1fc>)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			txBuf[i+1] = ((int)l_buf_out[w_ptr])&0xFFFF;
 8000d0a:	4b28      	ldr	r3, [pc, #160]	; (8000dac <do_iir_loop+0x1dc>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <do_iir_loop+0x1ec>)
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	edd3 7a00 	vldr	s15, [r3]
 8000d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	ee17 2a90 	vmov	r2, s15
 8000d24:	b291      	uxth	r1, r2
 8000d26:	4a29      	ldr	r2, [pc, #164]	; (8000dcc <do_iir_loop+0x1fc>)
 8000d28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			txBuf[i+2] = (((int)l_buf_out[w_ptr])>>16)&0xFFFF;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <do_iir_loop+0x1dc>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <do_iir_loop+0x1ec>)
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	edd3 7a00 	vldr	s15, [r3]
 8000d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d3e:	ee17 3a90 	vmov	r3, s15
 8000d42:	0c1a      	lsrs	r2, r3, #16
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	3302      	adds	r3, #2
 8000d48:	b291      	uxth	r1, r2
 8000d4a:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <do_iir_loop+0x1fc>)
 8000d4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			txBuf[i+3] = ((int)l_buf_out[w_ptr])&0xFFFF;
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <do_iir_loop+0x1dc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <do_iir_loop+0x1ec>)
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	edd3 7a00 	vldr	s15, [r3]
 8000d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	3303      	adds	r3, #3
 8000d66:	ee17 2a90 	vmov	r2, s15
 8000d6a:	b291      	uxth	r1, r2
 8000d6c:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <do_iir_loop+0x1fc>)
 8000d6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			w_ptr++;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <do_iir_loop+0x1dc>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <do_iir_loop+0x1dc>)
 8000d7a:	6013      	str	r3, [r2, #0]
	  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	3304      	adds	r3, #4
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <do_iir_loop+0x1d4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	ddab      	ble.n	8000ce8 <do_iir_loop+0x118>
	  }

	  callback_state = 0;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <do_iir_loop+0x1d0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]

  }
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000a0 	.word	0x200000a0
 8000da4:	200076b8 	.word	0x200076b8
 8000da8:	200076a4 	.word	0x200076a4
 8000dac:	20001680 	.word	0x20001680
 8000db0:	20005694 	.word	0x20005694
 8000db4:	20003684 	.word	0x20003684
 8000db8:	200076bc 	.word	0x200076bc
 8000dbc:	20004694 	.word	0x20004694
 8000dc0:	20000674 	.word	0x20000674
 8000dc4:	20000680 	.word	0x20000680
 8000dc8:	200086bc 	.word	0x200086bc
 8000dcc:	20001684 	.word	0x20001684

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd6:	f000 fb29 	bl	800142c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dda:	f000 f82f 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dde:	f7ff fce7 	bl	80007b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000de2:	f7ff fca7 	bl	8000734 <MX_DMA_Init>
  MX_ADC1_Init();
 8000de6:	f7ff fbbf 	bl	8000568 <MX_ADC1_Init>
  MX_I2S2_Init();
 8000dea:	f7ff fd81 	bl	80008f0 <MX_I2S2_Init>
  MX_TIM13_Init();
 8000dee:	f000 f9e3 	bl	80011b8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
 8000df2:	2301      	movs	r3, #1
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2300      	movs	r3, #0
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f003 fddf 	bl	80049c0 <SEGGER_RTT_ConfigUpBuffer>

  HAL_ADC_Start_DMA(&hadc1, adc_input_data_buffer, ADC_DATA_BUFFER_SIZE);
 8000e02:	2201      	movs	r2, #1
 8000e04:	4909      	ldr	r1, [pc, #36]	; (8000e2c <main+0x5c>)
 8000e06:	480a      	ldr	r0, [pc, #40]	; (8000e30 <main+0x60>)
 8000e08:	f000 fbc6 	bl	8001598 <HAL_ADC_Start_DMA>
  //HAL_TIM_Base_Start_IT(&htim13);

#ifdef IIR_BIQUAD
  do_iir_init();
 8000e0c:	f7ff feb8 	bl	8000b80 <do_iir_init>
  while (1)
  {

	// do dsp
	#ifdef IIR_BIQUAD
		do_iir_loop();
 8000e10:	f7ff fede 	bl	8000bd0 <do_iir_loop>

	#ifdef REAL_FFT
		real_fft_loop();
	#endif //REAL_FFT

	check_user_buttons_state();
 8000e14:	f000 fa1c 	bl	8001250 <check_user_buttons_state>
	printf("%lu - %lu - %lu\r\n", user_input_data.exp_input, user_input_data.user_pot1, user_input_data.user_pot2 );
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <main+0x64>)
 8000e1a:	6819      	ldr	r1, [r3, #0]
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <main+0x64>)
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <main+0x64>)
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <main+0x68>)
 8000e26:	f003 ff57 	bl	8004cd8 <iprintf>
		do_iir_loop();
 8000e2a:	e7f1      	b.n	8000e10 <main+0x40>
 8000e2c:	20007694 	.word	0x20007694
 8000e30:	200004c4 	.word	0x200004c4
 8000e34:	20007698 	.word	0x20007698
 8000e38:	08005b9c 	.word	0x08005b9c

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b098      	sub	sp, #96	; 0x60
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e46:	2230      	movs	r2, #48	; 0x30
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 ff3c 	bl	8004cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <SystemClock_Config+0xfc>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <SystemClock_Config+0xfc>)
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <SystemClock_Config+0xfc>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <SystemClock_Config+0x100>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a2a      	ldr	r2, [pc, #168]	; (8000f3c <SystemClock_Config+0x100>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <SystemClock_Config+0x100>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000eba:	2310      	movs	r3, #16
 8000ebc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ebe:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ec2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f002 fc7b 	bl	80037cc <HAL_RCC_OscConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000edc:	f000 f830 	bl	8000f40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000eec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	2105      	movs	r1, #5
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fed4 	bl	8003cac <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f0a:	f000 f819 	bl	8000f40 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
 8000f12:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f16:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4618      	mov	r0, r3
 8000f22:	f003 f85f 	bl	8003fe4 <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000f2c:	f000 f808 	bl	8000f40 <Error_Handler>
  }
}
 8000f30:	bf00      	nop
 8000f32:	3760      	adds	r7, #96	; 0x60
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40007000 	.word	0x40007000

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff4:	f000 fa6c 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <DMA1_Stream3_IRQHandler+0x10>)
 8001002:	f001 f887 	bl	8002114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000056c 	.word	0x2000056c

08001010 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <DMA1_Stream4_IRQHandler+0x10>)
 8001016:	f001 f87d 	bl	8002114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200005cc 	.word	0x200005cc

08001024 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001028:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800102c:	f001 fcac 	bl	8002988 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001030:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001034:	f001 fca8 	bl	8002988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	HAL_GPIO_TogglePin(relay_switch_GPIO_Port, relay_switch_Pin);
 8001040:	2101      	movs	r1, #1
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <TIM8_UP_TIM13_IRQHandler+0x20>)
 8001044:	f001 fc85 	bl	8002952 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDA_RED_GPIO_Port, LEDA_RED_Pin);
 8001048:	2101      	movs	r1, #1
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <TIM8_UP_TIM13_IRQHandler+0x24>)
 800104c:	f001 fc81 	bl	8002952 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <TIM8_UP_TIM13_IRQHandler+0x28>)
 8001052:	f003 f932 	bl	80042ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020800 	.word	0x40020800
 8001060:	40020400 	.word	0x40020400
 8001064:	200086c8 	.word	0x200086c8

08001068 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <DMA2_Stream0_IRQHandler+0x10>)
 800106e:	f001 f851 	bl	8002114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000050c 	.word	0x2000050c

0800107c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e00a      	b.n	80010a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800108e:	f3af 8000 	nop.w
 8001092:	4601      	mov	r1, r0
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	60ba      	str	r2, [r7, #8]
 800109a:	b2ca      	uxtb	r2, r1
 800109c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	dbf0      	blt.n	800108e <_read+0x12>
	}

return len;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_close>:
	return len;
}
*/

int _close(int file)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	return -1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010de:	605a      	str	r2, [r3, #4]
	return 0;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <_isatty>:

int _isatty(int file)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	return 1;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <_sbrk+0x5c>)
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <_sbrk+0x60>)
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <_sbrk+0x64>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <_sbrk+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001150:	f003 fd82 	bl	8004c58 <__errno>
 8001154:	4603      	mov	r3, r0
 8001156:	220c      	movs	r2, #12
 8001158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800115e:	e009      	b.n	8001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <_sbrk+0x64>)
 8001170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20020000 	.word	0x20020000
 8001180:	00000400 	.word	0x00000400
 8001184:	200000a4 	.word	0x200000a4
 8001188:	200087c8 	.word	0x200087c8

0800118c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <SystemInit+0x28>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <SystemInit+0x28>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SystemInit+0x28>)
 80011a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a6:	609a      	str	r2, [r3, #8]
#endif
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <MX_TIM13_Init>:

TIM_HandleTypeDef htim13;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_TIM13_Init+0x40>)
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <MX_TIM13_Init+0x44>)
 80011c0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 4096;
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <MX_TIM13_Init+0x40>)
 80011c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_TIM13_Init+0x40>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_TIM13_Init+0x40>)
 80011d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_TIM13_Init+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_TIM13_Init+0x40>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_TIM13_Init+0x40>)
 80011e6:	f003 f83d 	bl	8004264 <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80011f0:	f7ff fea6 	bl	8000f40 <Error_Handler>
  }

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200086c8 	.word	0x200086c8
 80011fc:	40001c00 	.word	0x40001c00

08001200 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <HAL_TIM_Base_MspInit+0x48>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d115      	bne.n	800123e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_TIM_Base_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_TIM_Base_MspInit+0x4c>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_TIM_Base_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	202c      	movs	r0, #44	; 0x2c
 8001234:	f000 fe31 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001238:	202c      	movs	r0, #44	; 0x2c
 800123a:	f000 fe4a 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40001c00 	.word	0x40001c00
 800124c:	40023800 	.word	0x40023800

08001250 <check_user_buttons_state>:
uint8_t active_adc_channel = 0;
uint8_t test = 0;


void check_user_buttons_state()
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	// process user switch input values
	if(user_switch1_GPIO_Port->IDR & user_switch1_Pin)
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <check_user_buttons_state+0x5c>)
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <check_user_buttons_state+0x1e>
	  LEDA_BLUE_GPIO_Port->ODR |= LEDA_BLUE_MASK;
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <check_user_buttons_state+0x60>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <check_user_buttons_state+0x60>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	6153      	str	r3, [r2, #20]
 800126c:	e005      	b.n	800127a <check_user_buttons_state+0x2a>
	else
	  LEDA_BLUE_GPIO_Port->ODR &= ~LEDA_BLUE_MASK;
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <check_user_buttons_state+0x60>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <check_user_buttons_state+0x60>)
 8001274:	f023 0302 	bic.w	r3, r3, #2
 8001278:	6153      	str	r3, [r2, #20]


	if(user_switch2_GPIO_Port->IDR & user_switch2_Pin)
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <check_user_buttons_state+0x5c>)
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <check_user_buttons_state+0x44>
	  LEDB_BLUE_GPIO_Port->ODR |= LEDB_BLUE_MASK;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <check_user_buttons_state+0x64>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <check_user_buttons_state+0x64>)
 800128c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001290:	6153      	str	r3, [r2, #20]
	  LEDB_BLUE_GPIO_Port->ODR &= ~LEDB_BLUE_MASK;


//	printf("%i\r\n", test);
//	test++;
}
 8001292:	e005      	b.n	80012a0 <check_user_buttons_state+0x50>
	  LEDB_BLUE_GPIO_Port->ODR &= ~LEDB_BLUE_MASK;
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <check_user_buttons_state+0x64>)
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <check_user_buttons_state+0x64>)
 800129a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800129e:	6153      	str	r3, [r2, #20]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020000 	.word	0x40020000

080012b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	80fb      	strh	r3, [r7, #6]
	// check origin of EXTI
	switch(GPIO_Pin){
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_EXTI_Callback+0x1a>
 80012ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012ce:	d01f      	beq.n	8001310 <HAL_GPIO_EXTI_Callback+0x58>
			LEDA_RED_GPIO_Port->ODR |= LEDA_RED_MASK;
			LEDB_GREEN_GPIO_Port->ODR &= ~LEDB_GREEN_MASK;
			LEDB_RED_GPIO_Port->ODR |= LEDB_RED_MASK;
			break;
	}
}
 80012d0:	e03d      	b.n	800134e <HAL_GPIO_EXTI_Callback+0x96>
			relay_switch_GPIO_Port->ODR |= RELAY_MASK;
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <HAL_GPIO_EXTI_Callback+0xa4>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a21      	ldr	r2, [pc, #132]	; (800135c <HAL_GPIO_EXTI_Callback+0xa4>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6153      	str	r3, [r2, #20]
			LEDA_GREEN_GPIO_Port->ODR |= LEDA_GREEN_MASK;
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <HAL_GPIO_EXTI_Callback+0xa8>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <HAL_GPIO_EXTI_Callback+0xa8>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6153      	str	r3, [r2, #20]
			LEDA_RED_GPIO_Port->ODR &= ~LEDA_RED_MASK;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <HAL_GPIO_EXTI_Callback+0xa8>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <HAL_GPIO_EXTI_Callback+0xa8>)
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	6153      	str	r3, [r2, #20]
			LEDB_GREEN_GPIO_Port->ODR |= LEDB_GREEN_MASK;
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_GPIO_EXTI_Callback+0xac>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <HAL_GPIO_EXTI_Callback+0xac>)
 80012fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001300:	6153      	str	r3, [r2, #20]
			LEDB_RED_GPIO_Port->ODR &= ~LEDB_RED_MASK;
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_GPIO_EXTI_Callback+0xac>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_GPIO_EXTI_Callback+0xac>)
 8001308:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800130c:	6153      	str	r3, [r2, #20]
			break;
 800130e:	e01e      	b.n	800134e <HAL_GPIO_EXTI_Callback+0x96>
			relay_switch_GPIO_Port->ODR &= ~RELAY_MASK;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	4a11      	ldr	r2, [pc, #68]	; (800135c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	6153      	str	r3, [r2, #20]
			LEDA_GREEN_GPIO_Port->ODR &= ~LEDA_GREEN_MASK;
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_GPIO_EXTI_Callback+0xa8>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001322:	f023 0304 	bic.w	r3, r3, #4
 8001326:	6153      	str	r3, [r2, #20]
			LEDA_RED_GPIO_Port->ODR |= LEDA_RED_MASK;
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_GPIO_EXTI_Callback+0xa8>)
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <HAL_GPIO_EXTI_Callback+0xa8>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6153      	str	r3, [r2, #20]
			LEDB_GREEN_GPIO_Port->ODR &= ~LEDB_GREEN_MASK;
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_GPIO_EXTI_Callback+0xac>)
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_GPIO_EXTI_Callback+0xac>)
 800133a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800133e:	6153      	str	r3, [r2, #20]
			LEDB_RED_GPIO_Port->ODR |= LEDB_RED_MASK;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_GPIO_EXTI_Callback+0xac>)
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_GPIO_EXTI_Callback+0xac>)
 8001346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800134a:	6153      	str	r3, [r2, #20]
			break;
 800134c:	bf00      	nop
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40020800 	.word	0x40020800
 8001360:	40020400 	.word	0x40020400
 8001364:	40020000 	.word	0x40020000

08001368 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

	//printf("%lu\r\n", adc_input_data_buffer[ADC_DATA_BUFFER_SIZE-1]);
	//	adc_input_data_demuxed[active_adc_channel] = adc_input_data_buffer[0];

	// demux interleaved ADC input
	switch(active_adc_channel)
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_ADC_ConvCpltCallback+0x64>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d010      	beq.n	800139a <HAL_ADC_ConvCpltCallback+0x32>
 8001378:	2b02      	cmp	r3, #2
 800137a:	dc13      	bgt.n	80013a4 <HAL_ADC_ConvCpltCallback+0x3c>
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <HAL_ADC_ConvCpltCallback+0x1e>
 8001380:	2b01      	cmp	r3, #1
 8001382:	d005      	beq.n	8001390 <HAL_ADC_ConvCpltCallback+0x28>
 8001384:	e00e      	b.n	80013a4 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		case 0:
			user_input_data.exp_input = (uint32_t)adc_input_data_buffer[0];
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_ADC_ConvCpltCallback+0x68>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <HAL_ADC_ConvCpltCallback+0x6c>)
 800138c:	6013      	str	r3, [r2, #0]
			break;
 800138e:	e009      	b.n	80013a4 <HAL_ADC_ConvCpltCallback+0x3c>

		case 1:
			user_input_data.user_pot1 = (uint32_t)adc_input_data_buffer[0];
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_ADC_ConvCpltCallback+0x68>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001396:	6053      	str	r3, [r2, #4]
			break;
 8001398:	e004      	b.n	80013a4 <HAL_ADC_ConvCpltCallback+0x3c>

		case 2:
			user_input_data.user_pot2 = (uint32_t)adc_input_data_buffer[0];
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_ADC_ConvCpltCallback+0x68>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <HAL_ADC_ConvCpltCallback+0x6c>)
 80013a0:	6093      	str	r3, [r2, #8]
			break;
 80013a2:	bf00      	nop
	}

	active_adc_channel++;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_ADC_ConvCpltCallback+0x64>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_ADC_ConvCpltCallback+0x64>)
 80013ae:	701a      	strb	r2, [r3, #0]
	if(active_adc_channel > ADC_DATA_DEMUX_SIZE-1)
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_ADC_ConvCpltCallback+0x64>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d902      	bls.n	80013be <HAL_ADC_ConvCpltCallback+0x56>
		active_adc_channel = 0;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <HAL_ADC_ConvCpltCallback+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]

}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200000a8 	.word	0x200000a8
 80013d0:	20007694 	.word	0x20007694
 80013d4:	20007698 	.word	0x20007698

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001410 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013de:	e003      	b.n	80013e8 <LoopCopyDataInit>

080013e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013e6:	3104      	adds	r1, #4

080013e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013e8:	480b      	ldr	r0, [pc, #44]	; (8001418 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013f0:	d3f6      	bcc.n	80013e0 <CopyDataInit>
  ldr  r2, =_sbss
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013f4:	e002      	b.n	80013fc <LoopFillZerobss>

080013f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013f8:	f842 3b04 	str.w	r3, [r2], #4

080013fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001400:	d3f9      	bcc.n	80013f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001402:	f7ff fec3 	bl	800118c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f003 fc2d 	bl	8004c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140a:	f7ff fce1 	bl	8000dd0 <main>
  bx  lr    
 800140e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001410:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001414:	08005c88 	.word	0x08005c88
  ldr  r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800141c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8001420:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8001424:	200087c4 	.word	0x200087c4

08001428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC_IRQHandler>
	...

0800142c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <HAL_Init+0x40>)
 8001436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_Init+0x40>)
 8001442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <HAL_Init+0x40>)
 800144e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 fd15 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145a:	2000      	movs	r0, #0
 800145c:	f000 f808 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001460:	f7ff fd76 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023c00 	.word	0x40023c00

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x54>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_InitTick+0x58>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 fd2d 	bl	8001eee <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014ac:	f000 fcf5 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	; (80014cc <HAL_InitTick+0x5c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000014 	.word	0x20000014
 80014c8:	2000001c 	.word	0x2000001c
 80014cc:	20000018 	.word	0x20000018

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	2000001c 	.word	0x2000001c
 80014f4:	20008708 	.word	0x20008708

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20008708 	.word	0x20008708

08001510 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e033      	b.n	800158e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	2b00      	cmp	r3, #0
 800152c:	d109      	bne.n	8001542 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff f888 	bl	8000644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001556:	f023 0302 	bic.w	r3, r3, #2
 800155a:	f043 0202 	orr.w	r2, r3, #2
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fa40 	bl	80019e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f023 0303 	bic.w	r3, r3, #3
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	641a      	str	r2, [r3, #64]	; 0x40
 800157e:	e001      	b.n	8001584 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_ADC_Start_DMA+0x1e>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e0cc      	b.n	8001750 <HAL_ADC_Start_DMA+0x1b8>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d018      	beq.n	80015fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015dc:	4b5e      	ldr	r3, [pc, #376]	; (8001758 <HAL_ADC_Start_DMA+0x1c0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a5e      	ldr	r2, [pc, #376]	; (800175c <HAL_ADC_Start_DMA+0x1c4>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0c9a      	lsrs	r2, r3, #18
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015f0:	e002      	b.n	80015f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f9      	bne.n	80015f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b01      	cmp	r3, #1
 800160a:	f040 80a0 	bne.w	800174e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	2b00      	cmp	r3, #0
 800162e:	d007      	beq.n	8001640 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001638:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164c:	d106      	bne.n	800165c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f023 0206 	bic.w	r2, r3, #6
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	645a      	str	r2, [r3, #68]	; 0x44
 800165a:	e002      	b.n	8001662 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166a:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <HAL_ADC_Start_DMA+0x1c8>)
 800166c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001672:	4a3c      	ldr	r2, [pc, #240]	; (8001764 <HAL_ADC_Start_DMA+0x1cc>)
 8001674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167a:	4a3b      	ldr	r2, [pc, #236]	; (8001768 <HAL_ADC_Start_DMA+0x1d0>)
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	4a3a      	ldr	r2, [pc, #232]	; (800176c <HAL_ADC_Start_DMA+0x1d4>)
 8001684:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800168e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800169e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	334c      	adds	r3, #76	; 0x4c
 80016ba:	4619      	mov	r1, r3
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f000 fcd0 	bl	8002064 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d12a      	bne.n	8001726 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a26      	ldr	r2, [pc, #152]	; (8001770 <HAL_ADC_Start_DMA+0x1d8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d015      	beq.n	8001706 <HAL_ADC_Start_DMA+0x16e>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a25      	ldr	r2, [pc, #148]	; (8001774 <HAL_ADC_Start_DMA+0x1dc>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d105      	bne.n	80016f0 <HAL_ADC_Start_DMA+0x158>
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_ADC_Start_DMA+0x1c8>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00a      	beq.n	8001706 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a20      	ldr	r2, [pc, #128]	; (8001778 <HAL_ADC_Start_DMA+0x1e0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d129      	bne.n	800174e <HAL_ADC_Start_DMA+0x1b6>
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_ADC_Start_DMA+0x1c8>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	d123      	bne.n	800174e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d11c      	bne.n	800174e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	e013      	b.n	800174e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a11      	ldr	r2, [pc, #68]	; (8001770 <HAL_ADC_Start_DMA+0x1d8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d10e      	bne.n	800174e <HAL_ADC_Start_DMA+0x1b6>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d107      	bne.n	800174e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800174c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000014 	.word	0x20000014
 800175c:	431bde83 	.word	0x431bde83
 8001760:	40012300 	.word	0x40012300
 8001764:	08001be1 	.word	0x08001be1
 8001768:	08001c9b 	.word	0x08001c9b
 800176c:	08001cb7 	.word	0x08001cb7
 8001770:	40012000 	.word	0x40012000
 8001774:	40012100 	.word	0x40012100
 8001778:	40012200 	.word	0x40012200

0800177c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x1c>
 80017bc:	2302      	movs	r3, #2
 80017be:	e105      	b.n	80019cc <HAL_ADC_ConfigChannel+0x228>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b09      	cmp	r3, #9
 80017ce:	d925      	bls.n	800181c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68d9      	ldr	r1, [r3, #12]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	3b1e      	subs	r3, #30
 80017e6:	2207      	movs	r2, #7
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43da      	mvns	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	400a      	ands	r2, r1
 80017f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68d9      	ldr	r1, [r3, #12]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	b29b      	uxth	r3, r3
 8001806:	4618      	mov	r0, r3
 8001808:	4603      	mov	r3, r0
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4403      	add	r3, r0
 800180e:	3b1e      	subs	r3, #30
 8001810:	409a      	lsls	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	e022      	b.n	8001862 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6919      	ldr	r1, [r3, #16]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	b29b      	uxth	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	4613      	mov	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	2207      	movs	r2, #7
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	400a      	ands	r2, r1
 800183e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6919      	ldr	r1, [r3, #16]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	4603      	mov	r3, r0
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4403      	add	r3, r0
 8001858:	409a      	lsls	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b06      	cmp	r3, #6
 8001868:	d824      	bhi.n	80018b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	3b05      	subs	r3, #5
 800187c:	221f      	movs	r2, #31
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	400a      	ands	r2, r1
 800188a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	4618      	mov	r0, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	3b05      	subs	r3, #5
 80018a6:	fa00 f203 	lsl.w	r2, r0, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	635a      	str	r2, [r3, #52]	; 0x34
 80018b2:	e04c      	b.n	800194e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b0c      	cmp	r3, #12
 80018ba:	d824      	bhi.n	8001906 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	3b23      	subs	r3, #35	; 0x23
 80018ce:	221f      	movs	r2, #31
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43da      	mvns	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	400a      	ands	r2, r1
 80018dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	3b23      	subs	r3, #35	; 0x23
 80018f8:	fa00 f203 	lsl.w	r2, r0, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
 8001904:	e023      	b.n	800194e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	3b41      	subs	r3, #65	; 0x41
 8001918:	221f      	movs	r2, #31
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	400a      	ands	r2, r1
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	4618      	mov	r0, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	3b41      	subs	r3, #65	; 0x41
 8001942:	fa00 f203 	lsl.w	r2, r0, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <HAL_ADC_ConfigChannel+0x234>)
 8001950:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a21      	ldr	r2, [pc, #132]	; (80019dc <HAL_ADC_ConfigChannel+0x238>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d109      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x1cc>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b12      	cmp	r3, #18
 8001962:	d105      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_ADC_ConfigChannel+0x238>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d123      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x21e>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b10      	cmp	r3, #16
 8001980:	d003      	beq.n	800198a <HAL_ADC_ConfigChannel+0x1e6>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b11      	cmp	r3, #17
 8001988:	d11b      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b10      	cmp	r3, #16
 800199c:	d111      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_ADC_ConfigChannel+0x23c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <HAL_ADC_ConfigChannel+0x240>)
 80019a4:	fba2 2303 	umull	r2, r3, r2, r3
 80019a8:	0c9a      	lsrs	r2, r3, #18
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019b4:	e002      	b.n	80019bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f9      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40012300 	.word	0x40012300
 80019dc:	40012000 	.word	0x40012000
 80019e0:	20000014 	.word	0x20000014
 80019e4:	431bde83 	.word	0x431bde83

080019e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019f0:	4b79      	ldr	r3, [pc, #484]	; (8001bd8 <ADC_Init+0x1f0>)
 80019f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	021a      	lsls	r2, r3, #8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6899      	ldr	r1, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	4a58      	ldr	r2, [pc, #352]	; (8001bdc <ADC_Init+0x1f4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d022      	beq.n	8001ac6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6899      	ldr	r1, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ab0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6899      	ldr	r1, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	e00f      	b.n	8001ae6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ae4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0202 	bic.w	r2, r2, #2
 8001af4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6899      	ldr	r1, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7e1b      	ldrb	r3, [r3, #24]
 8001b00:	005a      	lsls	r2, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d01b      	beq.n	8001b4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6859      	ldr	r1, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	035a      	lsls	r2, r3, #13
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	e007      	b.n	8001b5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	051a      	lsls	r2, r3, #20
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6899      	ldr	r1, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b9e:	025a      	lsls	r2, r3, #9
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6899      	ldr	r1, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	029a      	lsls	r2, r3, #10
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	609a      	str	r2, [r3, #8]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	40012300 	.word	0x40012300
 8001bdc:	0f000001 	.word	0x0f000001

08001be0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d13c      	bne.n	8001c74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d12b      	bne.n	8001c6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d127      	bne.n	8001c6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d006      	beq.n	8001c38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d119      	bne.n	8001c6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0220 	bic.w	r2, r2, #32
 8001c46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7ff fb7b 	bl	8001368 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c72:	e00e      	b.n	8001c92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7ff fd85 	bl	8001790 <HAL_ADC_ErrorCallback>
}
 8001c86:	e004      	b.n	8001c92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff fd67 	bl	800177c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f043 0204 	orr.w	r2, r3, #4
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff fd5a 	bl	8001790 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0b      	blt.n	8001d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4907      	ldr	r1, [pc, #28]	; (8001d80 <__NVIC_EnableIRQ+0x38>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e64:	f7ff ff8e 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff29 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff3e 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff8e 	bl	8001dd8 <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff31 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffa2 	bl	8001e40 <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff faf0 	bl	80014f8 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e099      	b.n	8002058 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f44:	e00f      	b.n	8001f66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f46:	f7ff fad7 	bl	80014f8 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d908      	bls.n	8001f66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e078      	b.n	8002058 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1e8      	bne.n	8001f46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <HAL_DMA_Init+0x158>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d107      	bne.n	8001fd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f023 0307 	bic.w	r3, r3, #7
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d117      	bne.n	800202a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00e      	beq.n	800202a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 fa6f 	bl	80024f0 <DMA_CheckFifoParam>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2240      	movs	r2, #64	; 0x40
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002026:	2301      	movs	r3, #1
 8002028:	e016      	b.n	8002058 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fa26 	bl	8002484 <DMA_CalcBaseAndBitshift>
 8002038:	4603      	mov	r3, r0
 800203a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	223f      	movs	r2, #63	; 0x3f
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	f010803f 	.word	0xf010803f

08002064 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_DMA_Start_IT+0x26>
 8002086:	2302      	movs	r3, #2
 8002088:	e040      	b.n	800210c <HAL_DMA_Start_IT+0xa8>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d12f      	bne.n	80020fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2202      	movs	r2, #2
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f9b8 	bl	8002428 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	223f      	movs	r2, #63	; 0x3f
 80020be:	409a      	lsls	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0216 	orr.w	r2, r2, #22
 80020d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0208 	orr.w	r2, r2, #8
 80020ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e005      	b.n	800210a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800210a:	7dfb      	ldrb	r3, [r7, #23]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002120:	4b92      	ldr	r3, [pc, #584]	; (800236c <HAL_DMA_IRQHandler+0x258>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a92      	ldr	r2, [pc, #584]	; (8002370 <HAL_DMA_IRQHandler+0x25c>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0a9b      	lsrs	r3, r3, #10
 800212c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	2208      	movs	r2, #8
 8002140:	409a      	lsls	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01a      	beq.n	8002180 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0204 	bic.w	r2, r2, #4
 8002166:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	2208      	movs	r2, #8
 800216e:	409a      	lsls	r2, r3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	f043 0201 	orr.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002184:	2201      	movs	r2, #1
 8002186:	409a      	lsls	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d012      	beq.n	80021b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00b      	beq.n	80021b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	2201      	movs	r2, #1
 80021a4:	409a      	lsls	r2, r3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	f043 0202 	orr.w	r2, r3, #2
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	2204      	movs	r2, #4
 80021bc:	409a      	lsls	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d012      	beq.n	80021ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00b      	beq.n	80021ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	2204      	movs	r2, #4
 80021da:	409a      	lsls	r2, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e4:	f043 0204 	orr.w	r2, r3, #4
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	2210      	movs	r2, #16
 80021f2:	409a      	lsls	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d043      	beq.n	8002284 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d03c      	beq.n	8002284 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	2210      	movs	r2, #16
 8002210:	409a      	lsls	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d018      	beq.n	8002256 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d024      	beq.n	8002284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	4798      	blx	r3
 8002242:	e01f      	b.n	8002284 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
 8002254:	e016      	b.n	8002284 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0208 	bic.w	r2, r2, #8
 8002272:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	2220      	movs	r2, #32
 800228a:	409a      	lsls	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 808e 	beq.w	80023b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 8086 	beq.w	80023b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022aa:	2220      	movs	r2, #32
 80022ac:	409a      	lsls	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	d136      	bne.n	800232c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0216 	bic.w	r2, r2, #22
 80022cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d103      	bne.n	80022ee <HAL_DMA_IRQHandler+0x1da>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0208 	bic.w	r2, r2, #8
 80022fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	223f      	movs	r2, #63	; 0x3f
 8002304:	409a      	lsls	r2, r3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231e:	2b00      	cmp	r3, #0
 8002320:	d07d      	beq.n	800241e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
        }
        return;
 800232a:	e078      	b.n	800241e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d01c      	beq.n	8002374 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d108      	bne.n	800235a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	2b00      	cmp	r3, #0
 800234e:	d030      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
 8002358:	e02b      	b.n	80023b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	2b00      	cmp	r3, #0
 8002360:	d027      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	4798      	blx	r3
 800236a:	e022      	b.n	80023b2 <HAL_DMA_IRQHandler+0x29e>
 800236c:	20000014 	.word	0x20000014
 8002370:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10f      	bne.n	80023a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0210 	bic.w	r2, r2, #16
 8002390:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d032      	beq.n	8002420 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d022      	beq.n	800240c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2205      	movs	r2, #5
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0201 	bic.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3301      	adds	r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d307      	bcc.n	80023fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f2      	bne.n	80023de <HAL_DMA_IRQHandler+0x2ca>
 80023f8:	e000      	b.n	80023fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80023fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	4798      	blx	r3
 800241c:	e000      	b.n	8002420 <HAL_DMA_IRQHandler+0x30c>
        return;
 800241e:	bf00      	nop
    }
  }
}
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop

08002428 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002444:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b40      	cmp	r3, #64	; 0x40
 8002454:	d108      	bne.n	8002468 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002466:	e007      	b.n	8002478 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	60da      	str	r2, [r3, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	3b10      	subs	r3, #16
 8002494:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800249e:	4a13      	ldr	r2, [pc, #76]	; (80024ec <DMA_CalcBaseAndBitshift+0x68>)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d909      	bls.n	80024c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ba:	f023 0303 	bic.w	r3, r3, #3
 80024be:	1d1a      	adds	r2, r3, #4
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	659a      	str	r2, [r3, #88]	; 0x58
 80024c4:	e007      	b.n	80024d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	aaaaaaab 	.word	0xaaaaaaab
 80024ec:	08005bd8 	.word	0x08005bd8

080024f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d11f      	bne.n	800254a <DMA_CheckFifoParam+0x5a>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d856      	bhi.n	80025be <DMA_CheckFifoParam+0xce>
 8002510:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <DMA_CheckFifoParam+0x28>)
 8002512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002516:	bf00      	nop
 8002518:	08002529 	.word	0x08002529
 800251c:	0800253b 	.word	0x0800253b
 8002520:	08002529 	.word	0x08002529
 8002524:	080025bf 	.word	0x080025bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d046      	beq.n	80025c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002538:	e043      	b.n	80025c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002542:	d140      	bne.n	80025c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002548:	e03d      	b.n	80025c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002552:	d121      	bne.n	8002598 <DMA_CheckFifoParam+0xa8>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b03      	cmp	r3, #3
 8002558:	d837      	bhi.n	80025ca <DMA_CheckFifoParam+0xda>
 800255a:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <DMA_CheckFifoParam+0x70>)
 800255c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002560:	08002571 	.word	0x08002571
 8002564:	08002577 	.word	0x08002577
 8002568:	08002571 	.word	0x08002571
 800256c:	08002589 	.word	0x08002589
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      break;
 8002574:	e030      	b.n	80025d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d025      	beq.n	80025ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002586:	e022      	b.n	80025ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002590:	d11f      	bne.n	80025d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002596:	e01c      	b.n	80025d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d903      	bls.n	80025a6 <DMA_CheckFifoParam+0xb6>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d003      	beq.n	80025ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025a4:	e018      	b.n	80025d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
      break;
 80025aa:	e015      	b.n	80025d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00e      	beq.n	80025d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      break;
 80025bc:	e00b      	b.n	80025d6 <DMA_CheckFifoParam+0xe6>
      break;
 80025be:	bf00      	nop
 80025c0:	e00a      	b.n	80025d8 <DMA_CheckFifoParam+0xe8>
      break;
 80025c2:	bf00      	nop
 80025c4:	e008      	b.n	80025d8 <DMA_CheckFifoParam+0xe8>
      break;
 80025c6:	bf00      	nop
 80025c8:	e006      	b.n	80025d8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ca:	bf00      	nop
 80025cc:	e004      	b.n	80025d8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ce:	bf00      	nop
 80025d0:	e002      	b.n	80025d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80025d2:	bf00      	nop
 80025d4:	e000      	b.n	80025d8 <DMA_CheckFifoParam+0xe8>
      break;
 80025d6:	bf00      	nop
    }
  } 
  
  return status; 
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	e16b      	b.n	80028dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002604:	2201      	movs	r2, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	429a      	cmp	r2, r3
 800261e:	f040 815a 	bne.w	80028d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d00b      	beq.n	8002642 <HAL_GPIO_Init+0x5a>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002636:	2b11      	cmp	r3, #17
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b12      	cmp	r3, #18
 8002640:	d130      	bne.n	80026a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	2203      	movs	r2, #3
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002678:	2201      	movs	r2, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 0201 	and.w	r2, r3, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0xfc>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b12      	cmp	r3, #18
 80026e2:	d123      	bne.n	800272c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	08da      	lsrs	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3208      	adds	r2, #8
 80026ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	220f      	movs	r2, #15
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	08da      	lsrs	r2, r3, #3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3208      	adds	r2, #8
 8002726:	69b9      	ldr	r1, [r7, #24]
 8002728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0203 	and.w	r2, r3, #3
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80b4 	beq.w	80028d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	4b60      	ldr	r3, [pc, #384]	; (80028f4 <HAL_GPIO_Init+0x30c>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a5f      	ldr	r2, [pc, #380]	; (80028f4 <HAL_GPIO_Init+0x30c>)
 8002778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b5d      	ldr	r3, [pc, #372]	; (80028f4 <HAL_GPIO_Init+0x30c>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800278a:	4a5b      	ldr	r2, [pc, #364]	; (80028f8 <HAL_GPIO_Init+0x310>)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a52      	ldr	r2, [pc, #328]	; (80028fc <HAL_GPIO_Init+0x314>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d02b      	beq.n	800280e <HAL_GPIO_Init+0x226>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a51      	ldr	r2, [pc, #324]	; (8002900 <HAL_GPIO_Init+0x318>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d025      	beq.n	800280a <HAL_GPIO_Init+0x222>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a50      	ldr	r2, [pc, #320]	; (8002904 <HAL_GPIO_Init+0x31c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01f      	beq.n	8002806 <HAL_GPIO_Init+0x21e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4f      	ldr	r2, [pc, #316]	; (8002908 <HAL_GPIO_Init+0x320>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d019      	beq.n	8002802 <HAL_GPIO_Init+0x21a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4e      	ldr	r2, [pc, #312]	; (800290c <HAL_GPIO_Init+0x324>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0x216>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4d      	ldr	r2, [pc, #308]	; (8002910 <HAL_GPIO_Init+0x328>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00d      	beq.n	80027fa <HAL_GPIO_Init+0x212>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4c      	ldr	r2, [pc, #304]	; (8002914 <HAL_GPIO_Init+0x32c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <HAL_GPIO_Init+0x20e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4b      	ldr	r2, [pc, #300]	; (8002918 <HAL_GPIO_Init+0x330>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_GPIO_Init+0x20a>
 80027ee:	2307      	movs	r3, #7
 80027f0:	e00e      	b.n	8002810 <HAL_GPIO_Init+0x228>
 80027f2:	2308      	movs	r3, #8
 80027f4:	e00c      	b.n	8002810 <HAL_GPIO_Init+0x228>
 80027f6:	2306      	movs	r3, #6
 80027f8:	e00a      	b.n	8002810 <HAL_GPIO_Init+0x228>
 80027fa:	2305      	movs	r3, #5
 80027fc:	e008      	b.n	8002810 <HAL_GPIO_Init+0x228>
 80027fe:	2304      	movs	r3, #4
 8002800:	e006      	b.n	8002810 <HAL_GPIO_Init+0x228>
 8002802:	2303      	movs	r3, #3
 8002804:	e004      	b.n	8002810 <HAL_GPIO_Init+0x228>
 8002806:	2302      	movs	r3, #2
 8002808:	e002      	b.n	8002810 <HAL_GPIO_Init+0x228>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_GPIO_Init+0x228>
 800280e:	2300      	movs	r3, #0
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	f002 0203 	and.w	r2, r2, #3
 8002816:	0092      	lsls	r2, r2, #2
 8002818:	4093      	lsls	r3, r2
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002820:	4935      	ldr	r1, [pc, #212]	; (80028f8 <HAL_GPIO_Init+0x310>)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	3302      	adds	r3, #2
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800282e:	4b3b      	ldr	r3, [pc, #236]	; (800291c <HAL_GPIO_Init+0x334>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002852:	4a32      	ldr	r2, [pc, #200]	; (800291c <HAL_GPIO_Init+0x334>)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002858:	4b30      	ldr	r3, [pc, #192]	; (800291c <HAL_GPIO_Init+0x334>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287c:	4a27      	ldr	r2, [pc, #156]	; (800291c <HAL_GPIO_Init+0x334>)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002882:	4b26      	ldr	r3, [pc, #152]	; (800291c <HAL_GPIO_Init+0x334>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028a6:	4a1d      	ldr	r2, [pc, #116]	; (800291c <HAL_GPIO_Init+0x334>)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_GPIO_Init+0x334>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028d0:	4a12      	ldr	r2, [pc, #72]	; (800291c <HAL_GPIO_Init+0x334>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3301      	adds	r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b0f      	cmp	r3, #15
 80028e0:	f67f ae90 	bls.w	8002604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3724      	adds	r7, #36	; 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40013800 	.word	0x40013800
 80028fc:	40020000 	.word	0x40020000
 8002900:	40020400 	.word	0x40020400
 8002904:	40020800 	.word	0x40020800
 8002908:	40020c00 	.word	0x40020c00
 800290c:	40021000 	.word	0x40021000
 8002910:	40021400 	.word	0x40021400
 8002914:	40021800 	.word	0x40021800
 8002918:	40021c00 	.word	0x40021c00
 800291c:	40013c00 	.word	0x40013c00

08002920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
 800292c:	4613      	mov	r3, r2
 800292e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002930:	787b      	ldrb	r3, [r7, #1]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800293c:	e003      	b.n	8002946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800293e:	887b      	ldrh	r3, [r7, #2]
 8002940:	041a      	lsls	r2, r3, #16
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	619a      	str	r2, [r3, #24]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	401a      	ands	r2, r3
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	429a      	cmp	r2, r3
 800296a:	d104      	bne.n	8002976 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800296c:	887b      	ldrh	r3, [r7, #2]
 800296e:	041a      	lsls	r2, r3, #16
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002974:	e002      	b.n	800297c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fc86 	bl	80012b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40013c00 	.word	0x40013c00

080029b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e128      	b.n	8002c1c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a90      	ldr	r2, [pc, #576]	; (8002c24 <HAL_I2S_Init+0x26c>)
 80029e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7fd ffb3 	bl	8000950 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a00:	f023 030f 	bic.w	r3, r3, #15
 8002a04:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d060      	beq.n	8002ad8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002a1e:	2310      	movs	r3, #16
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	e001      	b.n	8002a28 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d802      	bhi.n	8002a36 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002a36:	2001      	movs	r0, #1
 8002a38:	f001 fbb6 	bl	80041a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a3c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a46:	d125      	bne.n	8002a94 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d010      	beq.n	8002a72 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	461a      	mov	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	3305      	adds	r3, #5
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	e01f      	b.n	8002ab2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	461a      	mov	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8e:	3305      	adds	r3, #5
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	e00e      	b.n	8002ab2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aae:	3305      	adds	r3, #5
 8002ab0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4a5c      	ldr	r2, [pc, #368]	; (8002c28 <HAL_I2S_Init+0x270>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	08db      	lsrs	r3, r3, #3
 8002abc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	085b      	lsrs	r3, r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	e003      	b.n	8002ae0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d902      	bls.n	8002aec <HAL_I2S_Init+0x134>
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	2bff      	cmp	r3, #255	; 0xff
 8002aea:	d907      	bls.n	8002afc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af0:	f043 0210 	orr.w	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e08f      	b.n	8002c1c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	ea42 0103 	orr.w	r1, r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b1a:	f023 030f 	bic.w	r3, r3, #15
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6851      	ldr	r1, [r2, #4]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6892      	ldr	r2, [r2, #8]
 8002b26:	4311      	orrs	r1, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68d2      	ldr	r2, [r2, #12]
 8002b2c:	4311      	orrs	r1, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6992      	ldr	r2, [r2, #24]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d161      	bne.n	8002c0c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a38      	ldr	r2, [pc, #224]	; (8002c2c <HAL_I2S_Init+0x274>)
 8002b4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a37      	ldr	r2, [pc, #220]	; (8002c30 <HAL_I2S_Init+0x278>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d101      	bne.n	8002b5c <HAL_I2S_Init+0x1a4>
 8002b58:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <HAL_I2S_Init+0x27c>)
 8002b5a:	e001      	b.n	8002b60 <HAL_I2S_Init+0x1a8>
 8002b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	4932      	ldr	r1, [pc, #200]	; (8002c30 <HAL_I2S_Init+0x278>)
 8002b68:	428a      	cmp	r2, r1
 8002b6a:	d101      	bne.n	8002b70 <HAL_I2S_Init+0x1b8>
 8002b6c:	4a31      	ldr	r2, [pc, #196]	; (8002c34 <HAL_I2S_Init+0x27c>)
 8002b6e:	e001      	b.n	8002b74 <HAL_I2S_Init+0x1bc>
 8002b70:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002b74:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b78:	f023 030f 	bic.w	r3, r3, #15
 8002b7c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a2b      	ldr	r2, [pc, #172]	; (8002c30 <HAL_I2S_Init+0x278>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d101      	bne.n	8002b8c <HAL_I2S_Init+0x1d4>
 8002b88:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <HAL_I2S_Init+0x27c>)
 8002b8a:	e001      	b.n	8002b90 <HAL_I2S_Init+0x1d8>
 8002b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b90:	2202      	movs	r2, #2
 8002b92:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a25      	ldr	r2, [pc, #148]	; (8002c30 <HAL_I2S_Init+0x278>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2S_Init+0x1ea>
 8002b9e:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <HAL_I2S_Init+0x27c>)
 8002ba0:	e001      	b.n	8002ba6 <HAL_I2S_Init+0x1ee>
 8002ba2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb2:	d003      	beq.n	8002bbc <HAL_I2S_Init+0x204>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d103      	bne.n	8002bc4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	e001      	b.n	8002bc8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	b299      	uxth	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002bde:	4303      	orrs	r3, r0
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	430b      	orrs	r3, r1
 8002be4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002be6:	4313      	orrs	r3, r2
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	897b      	ldrh	r3, [r7, #10]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bf4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a0d      	ldr	r2, [pc, #52]	; (8002c30 <HAL_I2S_Init+0x278>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_I2S_Init+0x24c>
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_I2S_Init+0x27c>)
 8002c02:	e001      	b.n	8002c08 <HAL_I2S_Init+0x250>
 8002c04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c08:	897a      	ldrh	r2, [r7, #10]
 8002c0a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3720      	adds	r7, #32
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	08002d2f 	.word	0x08002d2f
 8002c28:	cccccccd 	.word	0xcccccccd
 8002c2c:	08003159 	.word	0x08003159
 8002c30:	40003800 	.word	0x40003800
 8002c34:	40003400 	.word	0x40003400

08002c38 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	881a      	ldrh	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	1c9a      	adds	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10e      	bne.n	8002cc8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cb8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ffb8 	bl	8002c38 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	b292      	uxth	r2, r2
 8002ce4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	1c9a      	adds	r2, r3, #2
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10e      	bne.n	8002d26 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d16:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ff93 	bl	8002c4c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d13a      	bne.n	8002dc0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d109      	bne.n	8002d68 <I2S_IRQHandler+0x3a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b40      	cmp	r3, #64	; 0x40
 8002d60:	d102      	bne.n	8002d68 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ffb4 	bl	8002cd0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	d126      	bne.n	8002dc0 <I2S_IRQHandler+0x92>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d11f      	bne.n	8002dc0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f043 0202 	orr.w	r2, r3, #2
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ff50 	bl	8002c60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d136      	bne.n	8002e3a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d109      	bne.n	8002dea <I2S_IRQHandler+0xbc>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	2b80      	cmp	r3, #128	; 0x80
 8002de2:	d102      	bne.n	8002dea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ff45 	bl	8002c74 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d122      	bne.n	8002e3a <I2S_IRQHandler+0x10c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d11b      	bne.n	8002e3a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e10:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2c:	f043 0204 	orr.w	r2, r3, #4
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ff13 	bl	8002c60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d002      	beq.n	8002e70 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e6e:	e160      	b.n	8003132 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e15a      	b.n	800313c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e152      	b.n	800313c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d002      	beq.n	8002ec2 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d114      	bne.n	8002eec <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002ecc:	887b      	ldrh	r3, [r7, #2]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002ed6:	887b      	ldrh	r3, [r7, #2]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002ee0:	887b      	ldrh	r3, [r7, #2]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	865a      	strh	r2, [r3, #50]	; 0x32
 8002eea:	e00b      	b.n	8002f04 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	887a      	ldrh	r2, [r7, #2]
 8002ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	887a      	ldrh	r2, [r7, #2]
 8002f02:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2205      	movs	r2, #5
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f16:	4a8b      	ldr	r2, [pc, #556]	; (8003144 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	4a8a      	ldr	r2, [pc, #552]	; (8003148 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	4a89      	ldr	r2, [pc, #548]	; (800314c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002f28:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	4a85      	ldr	r2, [pc, #532]	; (8003144 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	4a84      	ldr	r2, [pc, #528]	; (8003148 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002f38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	4a83      	ldr	r2, [pc, #524]	; (800314c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002f40:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4c:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f54:	d002      	beq.n	8002f5c <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d16b      	bne.n	8003034 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a79      	ldr	r2, [pc, #484]	; (8003150 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002f6e:	4b79      	ldr	r3, [pc, #484]	; (8003154 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f70:	e001      	b.n	8002f76 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f76:	330c      	adds	r3, #12
 8002f78:	4619      	mov	r1, r3
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f7ff f86e 	bl	8002064 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a70      	ldr	r2, [pc, #448]	; (8003150 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002f92:	4b70      	ldr	r3, [pc, #448]	; (8003154 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f94:	e001      	b.n	8002f9a <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	496b      	ldr	r1, [pc, #428]	; (8003150 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002fa2:	428b      	cmp	r3, r1
 8002fa4:	d101      	bne.n	8002faa <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002fa6:	4b6b      	ldr	r3, [pc, #428]	; (8003154 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002fa8:	e001      	b.n	8002fae <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002faa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002fb4:	f107 0308 	add.w	r3, r7, #8
 8002fb8:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f7ff f848 	bl	8002064 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0202 	orr.w	r2, r2, #2
 8002fe2:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff2:	f000 809e 	beq.w	8003132 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a55      	ldr	r2, [pc, #340]	; (8003150 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8003000:	4b54      	ldr	r3, [pc, #336]	; (8003154 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003002:	e001      	b.n	8003008 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8003004:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4950      	ldr	r1, [pc, #320]	; (8003150 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003010:	428b      	cmp	r3, r1
 8003012:	d101      	bne.n	8003018 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8003014:	4b4f      	ldr	r3, [pc, #316]	; (8003154 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003016:	e001      	b.n	800301c <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8003018:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800301c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003020:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003030:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003032:	e07e      	b.n	8003132 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003042:	d10a      	bne.n	800305a <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800305a:	f107 0308 	add.w	r3, r7, #8
 800305e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	6819      	ldr	r1, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a38      	ldr	r2, [pc, #224]	; (8003150 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8003072:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003074:	e001      	b.n	800307a <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8003076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800307a:	330c      	adds	r3, #12
 800307c:	461a      	mov	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003082:	b29b      	uxth	r3, r3
 8003084:	f7fe ffee 	bl	8002064 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a30      	ldr	r2, [pc, #192]	; (8003150 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d101      	bne.n	8003096 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8003092:	4b30      	ldr	r3, [pc, #192]	; (8003154 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003094:	e001      	b.n	800309a <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8003096:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	492b      	ldr	r1, [pc, #172]	; (8003150 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80030a2:	428b      	cmp	r3, r1
 80030a4:	d101      	bne.n	80030aa <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80030a6:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80030a8:	e001      	b.n	80030ae <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 80030aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ae:	f042 0202 	orr.w	r2, r2, #2
 80030b2:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	330c      	adds	r3, #12
 80030c2:	4619      	mov	r1, r3
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f7fe ffc9 	bl	8002064 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f0:	d01e      	beq.n	8003130 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a16      	ldr	r2, [pc, #88]	; (8003150 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d101      	bne.n	8003100 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80030fc:	4b15      	ldr	r3, [pc, #84]	; (8003154 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80030fe:	e001      	b.n	8003104 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8003100:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4911      	ldr	r1, [pc, #68]	; (8003150 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800310c:	428b      	cmp	r3, r1
 800310e:	d101      	bne.n	8003114 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003112:	e001      	b.n	8003118 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8003114:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003118:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800311c:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800312c:	61da      	str	r2, [r3, #28]
 800312e:	e000      	b.n	8003132 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8003130:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 800313a:	7ffb      	ldrb	r3, [r7, #31]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3720      	adds	r7, #32
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	08003401 	.word	0x08003401
 8003148:	0800341d 	.word	0x0800341d
 800314c:	08003555 	.word	0x08003555
 8003150:	40003800 	.word	0x40003800
 8003154:	40003400 	.word	0x40003400

08003158 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4aa2      	ldr	r2, [pc, #648]	; (80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003172:	4ba2      	ldr	r3, [pc, #648]	; (80033fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003174:	e001      	b.n	800317a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a9b      	ldr	r2, [pc, #620]	; (80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003190:	4b9a      	ldr	r3, [pc, #616]	; (80033fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003192:	e001      	b.n	8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a4:	d004      	beq.n	80031b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 8099 	bne.w	80032e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d107      	bne.n	80031ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fa05 	bl	80035d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 faa8 	bl	8003734 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d13a      	bne.n	8003264 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d035      	beq.n	8003264 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a7e      	ldr	r2, [pc, #504]	; (80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d101      	bne.n	8003206 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003202:	4b7e      	ldr	r3, [pc, #504]	; (80033fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003204:	e001      	b.n	800320a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003206:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4979      	ldr	r1, [pc, #484]	; (80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003212:	428b      	cmp	r3, r1
 8003214:	d101      	bne.n	800321a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003216:	4b79      	ldr	r3, [pc, #484]	; (80033fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003218:	e001      	b.n	800321e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800321a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800321e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003222:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003232:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f043 0202 	orr.w	r2, r3, #2
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff fcfe 	bl	8002c60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b08      	cmp	r3, #8
 800326c:	f040 80be 	bne.w	80033ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80b8 	beq.w	80033ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800328a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a59      	ldr	r2, [pc, #356]	; (80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d101      	bne.n	800329a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003296:	4b59      	ldr	r3, [pc, #356]	; (80033fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003298:	e001      	b.n	800329e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800329a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4954      	ldr	r1, [pc, #336]	; (80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80032a6:	428b      	cmp	r3, r1
 80032a8:	d101      	bne.n	80032ae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80032aa:	4b54      	ldr	r3, [pc, #336]	; (80033fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80032ac:	e001      	b.n	80032b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80032ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032b6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f043 0204 	orr.w	r2, r3, #4
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff fcc0 	bl	8002c60 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032e0:	e084      	b.n	80033ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d107      	bne.n	80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f99e 	bl	8003638 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d107      	bne.n	8003316 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f9dd 	bl	80036d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d12f      	bne.n	8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d02a      	beq.n	8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003338:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2e      	ldr	r2, [pc, #184]	; (80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d101      	bne.n	8003348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003344:	4b2d      	ldr	r3, [pc, #180]	; (80033fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003346:	e001      	b.n	800334c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003348:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4929      	ldr	r1, [pc, #164]	; (80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003354:	428b      	cmp	r3, r1
 8003356:	d101      	bne.n	800335c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003358:	4b28      	ldr	r3, [pc, #160]	; (80033fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800335a:	e001      	b.n	8003360 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800335c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003360:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003364:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f043 0202 	orr.w	r2, r3, #2
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff fc70 	bl	8002c60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b08      	cmp	r3, #8
 8003388:	d131      	bne.n	80033ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d02c      	beq.n	80033ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033a0:	e001      	b.n	80033a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80033a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4912      	ldr	r1, [pc, #72]	; (80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033ae:	428b      	cmp	r3, r1
 80033b0:	d101      	bne.n	80033b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033b4:	e001      	b.n	80033ba <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80033b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033ce:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	f043 0204 	orr.w	r2, r3, #4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff fc3b 	bl	8002c60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033ea:	e000      	b.n	80033ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033ec:	bf00      	nop
}
 80033ee:	bf00      	nop
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40003800 	.word	0x40003800
 80033fc:	40003400 	.word	0x40003400

08003400 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7fd fb96 	bl	8000b40 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f040 8084 	bne.w	800353c <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	429a      	cmp	r2, r3
 800343c:	d13c      	bne.n	80034b8 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344c:	d006      	beq.n	800345c <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003458:	2b00      	cmp	r3, #0
 800345a:	d116      	bne.n	800348a <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a3a      	ldr	r2, [pc, #232]	; (800354c <I2SEx_TxRxDMACplt+0x130>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d101      	bne.n	800346a <I2SEx_TxRxDMACplt+0x4e>
 8003466:	4b3a      	ldr	r3, [pc, #232]	; (8003550 <I2SEx_TxRxDMACplt+0x134>)
 8003468:	e001      	b.n	800346e <I2SEx_TxRxDMACplt+0x52>
 800346a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4935      	ldr	r1, [pc, #212]	; (800354c <I2SEx_TxRxDMACplt+0x130>)
 8003476:	428b      	cmp	r3, r1
 8003478:	d101      	bne.n	800347e <I2SEx_TxRxDMACplt+0x62>
 800347a:	4b35      	ldr	r3, [pc, #212]	; (8003550 <I2SEx_TxRxDMACplt+0x134>)
 800347c:	e001      	b.n	8003482 <I2SEx_TxRxDMACplt+0x66>
 800347e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	e007      	b.n	800349a <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7fd fb54 	bl	8000b60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d13c      	bne.n	800353c <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d0:	d006      	beq.n	80034e0 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d108      	bne.n	80034f2 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0202 	bic.w	r2, r2, #2
 80034ee:	605a      	str	r2, [r3, #4]
 80034f0:	e015      	b.n	800351e <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a15      	ldr	r2, [pc, #84]	; (800354c <I2SEx_TxRxDMACplt+0x130>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d101      	bne.n	8003500 <I2SEx_TxRxDMACplt+0xe4>
 80034fc:	4b14      	ldr	r3, [pc, #80]	; (8003550 <I2SEx_TxRxDMACplt+0x134>)
 80034fe:	e001      	b.n	8003504 <I2SEx_TxRxDMACplt+0xe8>
 8003500:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4910      	ldr	r1, [pc, #64]	; (800354c <I2SEx_TxRxDMACplt+0x130>)
 800350c:	428b      	cmp	r3, r1
 800350e:	d101      	bne.n	8003514 <I2SEx_TxRxDMACplt+0xf8>
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <I2SEx_TxRxDMACplt+0x134>)
 8003512:	e001      	b.n	8003518 <I2SEx_TxRxDMACplt+0xfc>
 8003514:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003518:	f022 0202 	bic.w	r2, r2, #2
 800351c:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7fd fb12 	bl	8000b60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7fd fb0f 	bl	8000b60 <HAL_I2SEx_TxRxCpltCallback>
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40003800 	.word	0x40003800
 8003550:	40003400 	.word	0x40003400

08003554 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0203 	bic.w	r2, r2, #3
 8003570:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a15      	ldr	r2, [pc, #84]	; (80035cc <I2SEx_TxRxDMAError+0x78>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <I2SEx_TxRxDMAError+0x2c>
 800357c:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <I2SEx_TxRxDMAError+0x7c>)
 800357e:	e001      	b.n	8003584 <I2SEx_TxRxDMAError+0x30>
 8003580:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4910      	ldr	r1, [pc, #64]	; (80035cc <I2SEx_TxRxDMAError+0x78>)
 800358c:	428b      	cmp	r3, r1
 800358e:	d101      	bne.n	8003594 <I2SEx_TxRxDMAError+0x40>
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <I2SEx_TxRxDMAError+0x7c>)
 8003592:	e001      	b.n	8003598 <I2SEx_TxRxDMAError+0x44>
 8003594:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003598:	f022 0203 	bic.w	r2, r2, #3
 800359c:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f043 0208 	orr.w	r2, r3, #8
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff fb4e 	bl	8002c60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40003800 	.word	0x40003800
 80035d0:	40003400 	.word	0x40003400

080035d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	1c99      	adds	r1, r3, #2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6251      	str	r1, [r2, #36]	; 0x24
 80035e6:	881a      	ldrh	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d113      	bne.n	800362e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003614:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d106      	bne.n	800362e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7fd fa99 	bl	8000b60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	1c99      	adds	r1, r3, #2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6251      	str	r1, [r2, #36]	; 0x24
 800364a:	8819      	ldrh	r1, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <I2SEx_TxISR_I2SExt+0x22>
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <I2SEx_TxISR_I2SExt+0x94>)
 8003658:	e001      	b.n	800365e <I2SEx_TxISR_I2SExt+0x26>
 800365a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365e:	460a      	mov	r2, r1
 8003660:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d121      	bne.n	80036be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <I2SEx_TxISR_I2SExt+0x50>
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <I2SEx_TxISR_I2SExt+0x94>)
 8003686:	e001      	b.n	800368c <I2SEx_TxISR_I2SExt+0x54>
 8003688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	490d      	ldr	r1, [pc, #52]	; (80036c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003694:	428b      	cmp	r3, r1
 8003696:	d101      	bne.n	800369c <I2SEx_TxISR_I2SExt+0x64>
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <I2SEx_TxISR_I2SExt+0x94>)
 800369a:	e001      	b.n	80036a0 <I2SEx_TxISR_I2SExt+0x68>
 800369c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fd fa51 	bl	8000b60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40003800 	.word	0x40003800
 80036cc:	40003400 	.word	0x40003400

080036d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68d8      	ldr	r0, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	1c99      	adds	r1, r3, #2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80036e8:	b282      	uxth	r2, r0
 80036ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d113      	bne.n	800372c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003712:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd fa1a 	bl	8000b60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a20      	ldr	r2, [pc, #128]	; (80037c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <I2SEx_RxISR_I2SExt+0x16>
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003748:	e001      	b.n	800374e <I2SEx_RxISR_I2SExt+0x1a>
 800374a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374e:	68d8      	ldr	r0, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	1c99      	adds	r1, r3, #2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	62d1      	str	r1, [r2, #44]	; 0x2c
 800375a:	b282      	uxth	r2, r0
 800375c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d121      	bne.n	80037ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a12      	ldr	r2, [pc, #72]	; (80037c4 <I2SEx_RxISR_I2SExt+0x90>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d101      	bne.n	8003784 <I2SEx_RxISR_I2SExt+0x50>
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003782:	e001      	b.n	8003788 <I2SEx_RxISR_I2SExt+0x54>
 8003784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	490d      	ldr	r1, [pc, #52]	; (80037c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003790:	428b      	cmp	r3, r1
 8003792:	d101      	bne.n	8003798 <I2SEx_RxISR_I2SExt+0x64>
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003796:	e001      	b.n	800379c <I2SEx_RxISR_I2SExt+0x68>
 8003798:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800379c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d106      	bne.n	80037ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7fd f9d3 	bl	8000b60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40003800 	.word	0x40003800
 80037c8:	40003400 	.word	0x40003400

080037cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e25b      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d075      	beq.n	80038d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ea:	4ba3      	ldr	r3, [pc, #652]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d00c      	beq.n	8003810 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f6:	4ba0      	ldr	r3, [pc, #640]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d112      	bne.n	8003828 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003802:	4b9d      	ldr	r3, [pc, #628]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380e:	d10b      	bne.n	8003828 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003810:	4b99      	ldr	r3, [pc, #612]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d05b      	beq.n	80038d4 <HAL_RCC_OscConfig+0x108>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d157      	bne.n	80038d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e236      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003830:	d106      	bne.n	8003840 <HAL_RCC_OscConfig+0x74>
 8003832:	4b91      	ldr	r3, [pc, #580]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a90      	ldr	r2, [pc, #576]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e01d      	b.n	800387c <HAL_RCC_OscConfig+0xb0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x98>
 800384a:	4b8b      	ldr	r3, [pc, #556]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a8a      	ldr	r2, [pc, #552]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	4b88      	ldr	r3, [pc, #544]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a87      	ldr	r2, [pc, #540]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0xb0>
 8003864:	4b84      	ldr	r3, [pc, #528]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a83      	ldr	r2, [pc, #524]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b81      	ldr	r3, [pc, #516]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a80      	ldr	r2, [pc, #512]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d013      	beq.n	80038ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7fd fe38 	bl	80014f8 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800388c:	f7fd fe34 	bl	80014f8 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e1fb      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	4b76      	ldr	r3, [pc, #472]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0xc0>
 80038aa:	e014      	b.n	80038d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fd fe24 	bl	80014f8 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b4:	f7fd fe20 	bl	80014f8 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e1e7      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c6:	4b6c      	ldr	r3, [pc, #432]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0xe8>
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d063      	beq.n	80039aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038e2:	4b65      	ldr	r3, [pc, #404]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ee:	4b62      	ldr	r3, [pc, #392]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d11c      	bne.n	8003934 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fa:	4b5f      	ldr	r3, [pc, #380]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d116      	bne.n	8003934 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003906:	4b5c      	ldr	r3, [pc, #368]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_RCC_OscConfig+0x152>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d001      	beq.n	800391e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e1bb      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391e:	4b56      	ldr	r3, [pc, #344]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4952      	ldr	r1, [pc, #328]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 800392e:	4313      	orrs	r3, r2
 8003930:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003932:	e03a      	b.n	80039aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d020      	beq.n	800397e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800393c:	4b4f      	ldr	r3, [pc, #316]	; (8003a7c <HAL_RCC_OscConfig+0x2b0>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003942:	f7fd fdd9 	bl	80014f8 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800394a:	f7fd fdd5 	bl	80014f8 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e19c      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395c:	4b46      	ldr	r3, [pc, #280]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003968:	4b43      	ldr	r3, [pc, #268]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4940      	ldr	r1, [pc, #256]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]
 800397c:	e015      	b.n	80039aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397e:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <HAL_RCC_OscConfig+0x2b0>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fd fdb8 	bl	80014f8 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398c:	f7fd fdb4 	bl	80014f8 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e17b      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399e:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d030      	beq.n	8003a18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d016      	beq.n	80039ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039be:	4b30      	ldr	r3, [pc, #192]	; (8003a80 <HAL_RCC_OscConfig+0x2b4>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c4:	f7fd fd98 	bl	80014f8 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039cc:	f7fd fd94 	bl	80014f8 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e15b      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039de:	4b26      	ldr	r3, [pc, #152]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x200>
 80039ea:	e015      	b.n	8003a18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ec:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <HAL_RCC_OscConfig+0x2b4>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f2:	f7fd fd81 	bl	80014f8 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039fa:	f7fd fd7d 	bl	80014f8 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e144      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f0      	bne.n	80039fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80a0 	beq.w	8003b66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a26:	2300      	movs	r3, #0
 8003a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a2a:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4a0e      	ldr	r2, [pc, #56]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6413      	str	r3, [r2, #64]	; 0x40
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	60bb      	str	r3, [r7, #8]
 8003a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a52:	2301      	movs	r3, #1
 8003a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCC_OscConfig+0x2b8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d121      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <HAL_RCC_OscConfig+0x2b8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a07      	ldr	r2, [pc, #28]	; (8003a84 <HAL_RCC_OscConfig+0x2b8>)
 8003a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6e:	f7fd fd43 	bl	80014f8 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a74:	e011      	b.n	8003a9a <HAL_RCC_OscConfig+0x2ce>
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	42470000 	.word	0x42470000
 8003a80:	42470e80 	.word	0x42470e80
 8003a84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a88:	f7fd fd36 	bl	80014f8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0fd      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9a:	4b81      	ldr	r3, [pc, #516]	; (8003ca0 <HAL_RCC_OscConfig+0x4d4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d106      	bne.n	8003abc <HAL_RCC_OscConfig+0x2f0>
 8003aae:	4b7d      	ldr	r3, [pc, #500]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	4a7c      	ldr	r2, [pc, #496]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aba:	e01c      	b.n	8003af6 <HAL_RCC_OscConfig+0x32a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b05      	cmp	r3, #5
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCC_OscConfig+0x312>
 8003ac4:	4b77      	ldr	r3, [pc, #476]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	4a76      	ldr	r2, [pc, #472]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003aca:	f043 0304 	orr.w	r3, r3, #4
 8003ace:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad0:	4b74      	ldr	r3, [pc, #464]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	4a73      	ldr	r2, [pc, #460]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6713      	str	r3, [r2, #112]	; 0x70
 8003adc:	e00b      	b.n	8003af6 <HAL_RCC_OscConfig+0x32a>
 8003ade:	4b71      	ldr	r3, [pc, #452]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a70      	ldr	r2, [pc, #448]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aea:	4b6e      	ldr	r3, [pc, #440]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	4a6d      	ldr	r2, [pc, #436]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d015      	beq.n	8003b2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fd fcfb 	bl	80014f8 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fd fcf7 	bl	80014f8 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e0bc      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1c:	4b61      	ldr	r3, [pc, #388]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ee      	beq.n	8003b06 <HAL_RCC_OscConfig+0x33a>
 8003b28:	e014      	b.n	8003b54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2a:	f7fd fce5 	bl	80014f8 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fd fce1 	bl	80014f8 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e0a6      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b48:	4b56      	ldr	r3, [pc, #344]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1ee      	bne.n	8003b32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d105      	bne.n	8003b66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5a:	4b52      	ldr	r3, [pc, #328]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a51      	ldr	r2, [pc, #324]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8092 	beq.w	8003c94 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b70:	4b4c      	ldr	r3, [pc, #304]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 030c 	and.w	r3, r3, #12
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d05c      	beq.n	8003c36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d141      	bne.n	8003c08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b84:	4b48      	ldr	r3, [pc, #288]	; (8003ca8 <HAL_RCC_OscConfig+0x4dc>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8a:	f7fd fcb5 	bl	80014f8 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b92:	f7fd fcb1 	bl	80014f8 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e078      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba4:	4b3f      	ldr	r3, [pc, #252]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f0      	bne.n	8003b92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	019b      	lsls	r3, r3, #6
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	061b      	lsls	r3, r3, #24
 8003bd4:	4933      	ldr	r1, [pc, #204]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bda:	4b33      	ldr	r3, [pc, #204]	; (8003ca8 <HAL_RCC_OscConfig+0x4dc>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fd fc8a 	bl	80014f8 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fd fc86 	bl	80014f8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e04d      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0x41c>
 8003c06:	e045      	b.n	8003c94 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c08:	4b27      	ldr	r3, [pc, #156]	; (8003ca8 <HAL_RCC_OscConfig+0x4dc>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7fd fc73 	bl	80014f8 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c16:	f7fd fc6f 	bl	80014f8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e036      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c28:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f0      	bne.n	8003c16 <HAL_RCC_OscConfig+0x44a>
 8003c34:	e02e      	b.n	8003c94 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e029      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c42:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <HAL_RCC_OscConfig+0x4d8>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d11c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d115      	bne.n	8003c90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d10d      	bne.n	8003c90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d106      	bne.n	8003c90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	42470060 	.word	0x42470060

08003cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0cc      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc0:	4b68      	ldr	r3, [pc, #416]	; (8003e64 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d90c      	bls.n	8003ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4b65      	ldr	r3, [pc, #404]	; (8003e64 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0b8      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d020      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d00:	4b59      	ldr	r3, [pc, #356]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4a58      	ldr	r2, [pc, #352]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d18:	4b53      	ldr	r3, [pc, #332]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4a52      	ldr	r2, [pc, #328]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d24:	4b50      	ldr	r3, [pc, #320]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	494d      	ldr	r1, [pc, #308]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d044      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d107      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d119      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e07f      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d003      	beq.n	8003d6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d107      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6a:	4b3f      	ldr	r3, [pc, #252]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e06f      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7a:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e067      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d8a:	4b37      	ldr	r3, [pc, #220]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f023 0203 	bic.w	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4934      	ldr	r1, [pc, #208]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d9c:	f7fd fbac 	bl	80014f8 <HAL_GetTick>
 8003da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da4:	f7fd fba8 	bl	80014f8 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e04f      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dba:	4b2b      	ldr	r3, [pc, #172]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 020c 	and.w	r2, r3, #12
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d1eb      	bne.n	8003da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b25      	ldr	r3, [pc, #148]	; (8003e64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d20c      	bcs.n	8003df4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b22      	ldr	r3, [pc, #136]	; (8003e64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <HAL_RCC_ClockConfig+0x1b8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e032      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e00:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4916      	ldr	r1, [pc, #88]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e1e:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	490e      	ldr	r1, [pc, #56]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e32:	f000 f821 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8003e36:	4602      	mov	r2, r0
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	490a      	ldr	r1, [pc, #40]	; (8003e6c <HAL_RCC_ClockConfig+0x1c0>)
 8003e44:	5ccb      	ldrb	r3, [r1, r3]
 8003e46:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4a:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x1c8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fd fb0c 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40023c00 	.word	0x40023c00
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	08005bc8 	.word	0x08005bc8
 8003e70:	20000014 	.word	0x20000014
 8003e74:	20000018 	.word	0x20000018

08003e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e78:	b5b0      	push	{r4, r5, r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e7e:	2100      	movs	r1, #0
 8003e80:	6079      	str	r1, [r7, #4]
 8003e82:	2100      	movs	r1, #0
 8003e84:	60f9      	str	r1, [r7, #12]
 8003e86:	2100      	movs	r1, #0
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e8e:	4952      	ldr	r1, [pc, #328]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e90:	6889      	ldr	r1, [r1, #8]
 8003e92:	f001 010c 	and.w	r1, r1, #12
 8003e96:	2908      	cmp	r1, #8
 8003e98:	d00d      	beq.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x3e>
 8003e9a:	2908      	cmp	r1, #8
 8003e9c:	f200 8094 	bhi.w	8003fc8 <HAL_RCC_GetSysClockFreq+0x150>
 8003ea0:	2900      	cmp	r1, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0x32>
 8003ea4:	2904      	cmp	r1, #4
 8003ea6:	d003      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x38>
 8003ea8:	e08e      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eaa:	4b4c      	ldr	r3, [pc, #304]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x164>)
 8003eac:	60bb      	str	r3, [r7, #8]
       break;
 8003eae:	e08e      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eb0:	4b4b      	ldr	r3, [pc, #300]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003eb2:	60bb      	str	r3, [r7, #8]
      break;
 8003eb4:	e08b      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eb6:	4948      	ldr	r1, [pc, #288]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003eb8:	6849      	ldr	r1, [r1, #4]
 8003eba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003ebe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ec0:	4945      	ldr	r1, [pc, #276]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ec2:	6849      	ldr	r1, [r1, #4]
 8003ec4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	d024      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ecc:	4942      	ldr	r1, [pc, #264]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ece:	6849      	ldr	r1, [r1, #4]
 8003ed0:	0989      	lsrs	r1, r1, #6
 8003ed2:	4608      	mov	r0, r1
 8003ed4:	f04f 0100 	mov.w	r1, #0
 8003ed8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003edc:	f04f 0500 	mov.w	r5, #0
 8003ee0:	ea00 0204 	and.w	r2, r0, r4
 8003ee4:	ea01 0305 	and.w	r3, r1, r5
 8003ee8:	493d      	ldr	r1, [pc, #244]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003eea:	fb01 f003 	mul.w	r0, r1, r3
 8003eee:	2100      	movs	r1, #0
 8003ef0:	fb01 f102 	mul.w	r1, r1, r2
 8003ef4:	1844      	adds	r4, r0, r1
 8003ef6:	493a      	ldr	r1, [pc, #232]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ef8:	fba2 0101 	umull	r0, r1, r2, r1
 8003efc:	1863      	adds	r3, r4, r1
 8003efe:	4619      	mov	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	461a      	mov	r2, r3
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	f7fc f9b2 	bl	8000270 <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4613      	mov	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	e04a      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f16:	4b30      	ldr	r3, [pc, #192]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	099b      	lsrs	r3, r3, #6
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f26:	f04f 0100 	mov.w	r1, #0
 8003f2a:	ea02 0400 	and.w	r4, r2, r0
 8003f2e:	ea03 0501 	and.w	r5, r3, r1
 8003f32:	4620      	mov	r0, r4
 8003f34:	4629      	mov	r1, r5
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	014b      	lsls	r3, r1, #5
 8003f40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f44:	0142      	lsls	r2, r0, #5
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	1b00      	subs	r0, r0, r4
 8003f4c:	eb61 0105 	sbc.w	r1, r1, r5
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	018b      	lsls	r3, r1, #6
 8003f5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f5e:	0182      	lsls	r2, r0, #6
 8003f60:	1a12      	subs	r2, r2, r0
 8003f62:	eb63 0301 	sbc.w	r3, r3, r1
 8003f66:	f04f 0000 	mov.w	r0, #0
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	00d9      	lsls	r1, r3, #3
 8003f70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f74:	00d0      	lsls	r0, r2, #3
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	1912      	adds	r2, r2, r4
 8003f7c:	eb45 0303 	adc.w	r3, r5, r3
 8003f80:	f04f 0000 	mov.w	r0, #0
 8003f84:	f04f 0100 	mov.w	r1, #0
 8003f88:	0299      	lsls	r1, r3, #10
 8003f8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f8e:	0290      	lsls	r0, r2, #10
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4610      	mov	r0, r2
 8003f96:	4619      	mov	r1, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	f7fc f966 	bl	8000270 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4613      	mov	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fac:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	60bb      	str	r3, [r7, #8]
      break;
 8003fc6:	e002      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fc8:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x164>)
 8003fca:	60bb      	str	r3, [r7, #8]
      break;
 8003fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fce:	68bb      	ldr	r3, [r7, #8]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	00f42400 	.word	0x00f42400
 8003fe0:	017d7840 	.word	0x017d7840

08003fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004008:	2b00      	cmp	r3, #0
 800400a:	d035      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800400c:	4b62      	ldr	r3, [pc, #392]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004012:	f7fd fa71 	bl	80014f8 <HAL_GetTick>
 8004016:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004018:	e008      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800401a:	f7fd fa6d 	bl	80014f8 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e0b0      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800402c:	4b5b      	ldr	r3, [pc, #364]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	019a      	lsls	r2, r3, #6
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	071b      	lsls	r3, r3, #28
 8004044:	4955      	ldr	r1, [pc, #340]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800404c:	4b52      	ldr	r3, [pc, #328]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004052:	f7fd fa51 	bl	80014f8 <HAL_GetTick>
 8004056:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004058:	e008      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800405a:	f7fd fa4d 	bl	80014f8 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e090      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800406c:	4b4b      	ldr	r3, [pc, #300]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8083 	beq.w	800418c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	4b44      	ldr	r3, [pc, #272]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	4a43      	ldr	r2, [pc, #268]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004094:	6413      	str	r3, [r2, #64]	; 0x40
 8004096:	4b41      	ldr	r3, [pc, #260]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80040a2:	4b3f      	ldr	r3, [pc, #252]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a3e      	ldr	r2, [pc, #248]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040ae:	f7fd fa23 	bl	80014f8 <HAL_GetTick>
 80040b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040b6:	f7fd fa1f 	bl	80014f8 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e062      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040c8:	4b35      	ldr	r3, [pc, #212]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040d4:	4b31      	ldr	r3, [pc, #196]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d02f      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d028      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040f2:	4b2a      	ldr	r3, [pc, #168]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040fc:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004102:	4b28      	ldr	r3, [pc, #160]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004108:	4a24      	ldr	r2, [pc, #144]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800410e:	4b23      	ldr	r3, [pc, #140]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b01      	cmp	r3, #1
 8004118:	d114      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800411a:	f7fd f9ed 	bl	80014f8 <HAL_GetTick>
 800411e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	e00a      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f7fd f9e9 	bl	80014f8 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e02a      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004138:	4b18      	ldr	r3, [pc, #96]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ee      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004150:	d10d      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004152:	4b12      	ldr	r3, [pc, #72]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004166:	490d      	ldr	r1, [pc, #52]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004168:	4313      	orrs	r3, r2
 800416a:	608b      	str	r3, [r1, #8]
 800416c:	e005      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800416e:	4b0b      	ldr	r3, [pc, #44]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	4a0a      	ldr	r2, [pc, #40]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004174:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004178:	6093      	str	r3, [r2, #8]
 800417a:	4b08      	ldr	r3, [pc, #32]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800417c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004186:	4905      	ldr	r1, [pc, #20]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004188:	4313      	orrs	r3, r2
 800418a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	42470068 	.word	0x42470068
 800419c:	40023800 	.word	0x40023800
 80041a0:	40007000 	.word	0x40007000
 80041a4:	42470e40 	.word	0x42470e40

080041a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d13e      	bne.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80041c6:	4b23      	ldr	r3, [pc, #140]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d12f      	bne.n	800423c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80041dc:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041de:	617b      	str	r3, [r7, #20]
          break;
 80041e0:	e02f      	b.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ee:	d108      	bne.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80041f0:	4b18      	ldr	r3, [pc, #96]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f8:	4a18      	ldr	r2, [pc, #96]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80041fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	e007      	b.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800420a:	4a15      	ldr	r2, [pc, #84]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004218:	099b      	lsrs	r3, r3, #6
 800421a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	fb02 f303 	mul.w	r3, r2, r3
 8004224:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422c:	0f1b      	lsrs	r3, r3, #28
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]
          break;
 800423a:	e002      	b.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
          break;
 8004240:	bf00      	nop
        }
      }
      break;
 8004242:	bf00      	nop
    }
  }
  return frequency;
 8004244:	697b      	ldr	r3, [r7, #20]
}
 8004246:	4618      	mov	r0, r3
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800
 8004258:	00bb8000 	.word	0x00bb8000
 800425c:	017d7840 	.word	0x017d7840
 8004260:	00f42400 	.word	0x00f42400

08004264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e01d      	b.n	80042b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fc ffb8 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f000 f944 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d122      	bne.n	8004316 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d11b      	bne.n	8004316 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f06f 0202 	mvn.w	r2, #2
 80042e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f8f8 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8004302:	e005      	b.n	8004310 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f8ea 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f8fb 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b04      	cmp	r3, #4
 8004322:	d122      	bne.n	800436a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b04      	cmp	r3, #4
 8004330:	d11b      	bne.n	800436a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f06f 0204 	mvn.w	r2, #4
 800433a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f8ce 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8004356:	e005      	b.n	8004364 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f8c0 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f8d1 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d122      	bne.n	80043be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b08      	cmp	r3, #8
 8004384:	d11b      	bne.n	80043be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f06f 0208 	mvn.w	r2, #8
 800438e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2204      	movs	r2, #4
 8004394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f003 0303 	and.w	r3, r3, #3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8a4 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 80043aa:	e005      	b.n	80043b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f896 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f8a7 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d122      	bne.n	8004412 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b10      	cmp	r3, #16
 80043d8:	d11b      	bne.n	8004412 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f06f 0210 	mvn.w	r2, #16
 80043e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2208      	movs	r2, #8
 80043e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f87a 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 80043fe:	e005      	b.n	800440c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f86c 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f87d 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d10e      	bne.n	800443e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b01      	cmp	r3, #1
 800442c:	d107      	bne.n	800443e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f06f 0201 	mvn.w	r2, #1
 8004436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f846 	bl	80044ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004448:	2b80      	cmp	r3, #128	; 0x80
 800444a:	d10e      	bne.n	800446a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	d107      	bne.n	800446a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f90d 	bl	8004684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d10e      	bne.n	8004496 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b40      	cmp	r3, #64	; 0x40
 8004484:	d107      	bne.n	8004496 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800448e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f842 	bl	800451a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d10e      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d107      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f06f 0220 	mvn.w	r2, #32
 80044ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f8d7 	bl	8004670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a40      	ldr	r2, [pc, #256]	; (8004644 <TIM_Base_SetConfig+0x114>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d013      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454e:	d00f      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a3d      	ldr	r2, [pc, #244]	; (8004648 <TIM_Base_SetConfig+0x118>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00b      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a3c      	ldr	r2, [pc, #240]	; (800464c <TIM_Base_SetConfig+0x11c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d007      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a3b      	ldr	r2, [pc, #236]	; (8004650 <TIM_Base_SetConfig+0x120>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a3a      	ldr	r2, [pc, #232]	; (8004654 <TIM_Base_SetConfig+0x124>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d108      	bne.n	8004582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2f      	ldr	r2, [pc, #188]	; (8004644 <TIM_Base_SetConfig+0x114>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d02b      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004590:	d027      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2c      	ldr	r2, [pc, #176]	; (8004648 <TIM_Base_SetConfig+0x118>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d023      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2b      	ldr	r2, [pc, #172]	; (800464c <TIM_Base_SetConfig+0x11c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01f      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a2a      	ldr	r2, [pc, #168]	; (8004650 <TIM_Base_SetConfig+0x120>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d01b      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a29      	ldr	r2, [pc, #164]	; (8004654 <TIM_Base_SetConfig+0x124>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d017      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a28      	ldr	r2, [pc, #160]	; (8004658 <TIM_Base_SetConfig+0x128>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a27      	ldr	r2, [pc, #156]	; (800465c <TIM_Base_SetConfig+0x12c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00f      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a26      	ldr	r2, [pc, #152]	; (8004660 <TIM_Base_SetConfig+0x130>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00b      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a25      	ldr	r2, [pc, #148]	; (8004664 <TIM_Base_SetConfig+0x134>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d007      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a24      	ldr	r2, [pc, #144]	; (8004668 <TIM_Base_SetConfig+0x138>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d003      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a23      	ldr	r2, [pc, #140]	; (800466c <TIM_Base_SetConfig+0x13c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d108      	bne.n	80045f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a0a      	ldr	r2, [pc, #40]	; (8004644 <TIM_Base_SetConfig+0x114>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <TIM_Base_SetConfig+0xf8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a0c      	ldr	r2, [pc, #48]	; (8004654 <TIM_Base_SetConfig+0x124>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d103      	bne.n	8004630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	615a      	str	r2, [r3, #20]
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40010000 	.word	0x40010000
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	40000c00 	.word	0x40000c00
 8004654:	40010400 	.word	0x40010400
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800
 8004664:	40001800 	.word	0x40001800
 8004668:	40001c00 	.word	0x40001c00
 800466c:	40002000 	.word	0x40002000

08004670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800469e:	4b24      	ldr	r3, [pc, #144]	; (8004730 <_DoInit+0x98>)
 80046a0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2203      	movs	r2, #3
 80046a6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2203      	movs	r2, #3
 80046ac:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a20      	ldr	r2, [pc, #128]	; (8004734 <_DoInit+0x9c>)
 80046b2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a20      	ldr	r2, [pc, #128]	; (8004738 <_DoInit+0xa0>)
 80046b8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046c0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a17      	ldr	r2, [pc, #92]	; (8004734 <_DoInit+0x9c>)
 80046d8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a17      	ldr	r2, [pc, #92]	; (800473c <_DoInit+0xa4>)
 80046de:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2210      	movs	r2, #16
 80046e4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3307      	adds	r3, #7
 80046fc:	4a10      	ldr	r2, [pc, #64]	; (8004740 <_DoInit+0xa8>)
 80046fe:	6810      	ldr	r0, [r2, #0]
 8004700:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004702:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <_DoInit+0xac>)
 800470a:	6810      	ldr	r0, [r2, #0]
 800470c:	6018      	str	r0, [r3, #0]
 800470e:	8891      	ldrh	r1, [r2, #4]
 8004710:	7992      	ldrb	r2, [r2, #6]
 8004712:	8099      	strh	r1, [r3, #4]
 8004714:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004716:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004720:	f3bf 8f5f 	dmb	sy
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	2000870c 	.word	0x2000870c
 8004734:	08005bb0 	.word	0x08005bb0
 8004738:	200000ac 	.word	0x200000ac
 800473c:	200004ac 	.word	0x200004ac
 8004740:	08005bbc 	.word	0x08005bbc
 8004744:	08005bc0 	.word	0x08005bc0

08004748 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004754:	2300      	movs	r3, #0
 8004756:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	429a      	cmp	r2, r3
 800476a:	d905      	bls.n	8004778 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
 8004776:	e007      	b.n	8004788 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	69b9      	ldr	r1, [r7, #24]
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	1acb      	subs	r3, r1, r3
 8004782:	4413      	add	r3, r2
 8004784:	3b01      	subs	r3, #1
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004792:	4293      	cmp	r3, r2
 8004794:	bf28      	it	cs
 8004796:	4613      	movcs	r3, r2
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800479a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4293      	cmp	r3, r2
 80047a0:	bf28      	it	cs
 80047a2:	4613      	movcs	r3, r2
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80047b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	6978      	ldr	r0, [r7, #20]
 80047b6:	f000 fa79 	bl	8004cac <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80047ba:	6a3a      	ldr	r2, [r7, #32]
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	4413      	add	r3, r2
 80047c0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	4413      	add	r3, r2
 80047c8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	4413      	add	r3, r2
 80047d8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d101      	bne.n	80047e8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80047e8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1b2      	bne.n	800475e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80047f8:	6a3b      	ldr	r3, [r7, #32]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3728      	adds	r7, #40	; 0x28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004802:	b580      	push	{r7, lr}
 8004804:	b088      	sub	sp, #32
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	d911      	bls.n	800484a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	4413      	add	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	6938      	ldr	r0, [r7, #16]
 8004836:	f000 fa39 	bl	8004cac <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800483a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	441a      	add	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004848:	e01f      	b.n	800488a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	4413      	add	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	6938      	ldr	r0, [r7, #16]
 800485e:	f000 fa25 	bl	8004cac <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	4413      	add	r3, r2
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4619      	mov	r1, r3
 800487a:	6938      	ldr	r0, [r7, #16]
 800487c:	f000 fa16 	bl	8004cac <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004880:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	60da      	str	r2, [r3, #12]
}
 800488a:	bf00      	nop
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004892:	b480      	push	{r7}
 8004894:	b087      	sub	sp, #28
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d808      	bhi.n	80048c0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad2      	subs	r2, r2, r3
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4413      	add	r3, r2
 80048ba:	3b01      	subs	r3, #1
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	e004      	b.n	80048ca <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80048ca:	697b      	ldr	r3, [r7, #20]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	4613      	mov	r3, r2
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	4413      	add	r3, r2
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4a1e      	ldr	r2, [pc, #120]	; (8004970 <SEGGER_RTT_WriteNoLock+0x98>)
 80048f6:	4413      	add	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d017      	beq.n	8004932 <SEGGER_RTT_WriteNoLock+0x5a>
 8004902:	2b01      	cmp	r3, #1
 8004904:	d302      	bcc.n	800490c <SEGGER_RTT_WriteNoLock+0x34>
 8004906:	2b02      	cmp	r3, #2
 8004908:	d023      	beq.n	8004952 <SEGGER_RTT_WriteNoLock+0x7a>
 800490a:	e029      	b.n	8004960 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800490c:	6978      	ldr	r0, [r7, #20]
 800490e:	f7ff ffc0 	bl	8004892 <_GetAvailWriteSpace>
 8004912:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	d202      	bcs.n	8004922 <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 800491c:	2300      	movs	r3, #0
 800491e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004920:	e021      	b.n	8004966 <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	69b9      	ldr	r1, [r7, #24]
 800492a:	6978      	ldr	r0, [r7, #20]
 800492c:	f7ff ff69 	bl	8004802 <_WriteNoCheck>
    break;
 8004930:	e019      	b.n	8004966 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f7ff ffad 	bl	8004892 <_GetAvailWriteSpace>
 8004938:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4293      	cmp	r3, r2
 8004940:	bf28      	it	cs
 8004942:	4613      	movcs	r3, r2
 8004944:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	69b9      	ldr	r1, [r7, #24]
 800494a:	6978      	ldr	r0, [r7, #20]
 800494c:	f7ff ff59 	bl	8004802 <_WriteNoCheck>
    break;
 8004950:	e009      	b.n	8004966 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	69b9      	ldr	r1, [r7, #24]
 8004956:	6978      	ldr	r0, [r7, #20]
 8004958:	f7ff fef6 	bl	8004748 <_WriteBlocking>
 800495c:	61f8      	str	r0, [r7, #28]
    break;
 800495e:	e002      	b.n	8004966 <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8004960:	2300      	movs	r3, #0
 8004962:	61fb      	str	r3, [r7, #28]
    break;
 8004964:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004966:	69fb      	ldr	r3, [r7, #28]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	2000870c 	.word	0x2000870c

08004974 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004980:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <SEGGER_RTT_Write+0x48>)
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <SEGGER_RTT_Write+0x1e>
 800498e:	f7ff fe83 	bl	8004698 <_DoInit>
  SEGGER_RTT_LOCK();
 8004992:	f3ef 8311 	mrs	r3, BASEPRI
 8004996:	f04f 0120 	mov.w	r1, #32
 800499a:	f381 8811 	msr	BASEPRI, r1
 800499e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff ff97 	bl	80048d8 <SEGGER_RTT_WriteNoLock>
 80049aa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80049b2:	697b      	ldr	r3, [r7, #20]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	2000870c 	.word	0x2000870c

080049c0 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80049ce:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <SEGGER_RTT_ConfigUpBuffer+0xdc>)
 80049d0:	61bb      	str	r3, [r7, #24]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <SEGGER_RTT_ConfigUpBuffer+0x20>
 80049dc:	f7ff fe5c 	bl	8004698 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80049e0:	4b2e      	ldr	r3, [pc, #184]	; (8004a9c <SEGGER_RTT_ConfigUpBuffer+0xdc>)
 80049e2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumUpBuffers) {
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	461a      	mov	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d24c      	bcs.n	8004a8a <SEGGER_RTT_ConfigUpBuffer+0xca>
    SEGGER_RTT_LOCK();
 80049f0:	f3ef 8311 	mrs	r3, BASEPRI
 80049f4:	f04f 0120 	mov.w	r1, #32
 80049f8:	f381 8811 	msr	BASEPRI, r1
 80049fc:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d032      	beq.n	8004a6a <SEGGER_RTT_ConfigUpBuffer+0xaa>
      pRTTCB->aUp[BufferIndex].sName        = sName;
 8004a04:	6979      	ldr	r1, [r7, #20]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	4413      	add	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	440b      	add	r3, r1
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004a18:	6979      	ldr	r1, [r7, #20]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	4613      	mov	r3, r2
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	4413      	add	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	440b      	add	r3, r1
 8004a28:	3304      	adds	r3, #4
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004a2e:	6979      	ldr	r1, [r7, #20]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4613      	mov	r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	4413      	add	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3320      	adds	r3, #32
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004a42:	6979      	ldr	r1, [r7, #20]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4613      	mov	r3, r2
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	4413      	add	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	440b      	add	r3, r1
 8004a50:	3328      	adds	r3, #40	; 0x28
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004a56:	6979      	ldr	r1, [r7, #20]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	4413      	add	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	440b      	add	r3, r1
 8004a64:	3324      	adds	r3, #36	; 0x24
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aUp[BufferIndex].Flags          = Flags;
 8004a6a:	6979      	ldr	r1, [r7, #20]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	4413      	add	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	440b      	add	r3, r1
 8004a78:	332c      	adds	r3, #44	; 0x2c
 8004a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a7c:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	e002      	b.n	8004a90 <SEGGER_RTT_ConfigUpBuffer+0xd0>
  } else {
    r = -1;
 8004a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a8e:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004a90:	69fb      	ldr	r3, [r7, #28]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3720      	adds	r7, #32
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	2000870c 	.word	0x2000870c

08004aa0 <arm_biquad_cascade_df1_init_f32>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	6082      	str	r2, [r0, #8]
 8004aa6:	6001      	str	r1, [r0, #0]
 8004aa8:	461d      	mov	r5, r3
 8004aaa:	010a      	lsls	r2, r1, #4
 8004aac:	4618      	mov	r0, r3
 8004aae:	2100      	movs	r1, #0
 8004ab0:	f000 f90a 	bl	8004cc8 <memset>
 8004ab4:	6065      	str	r5, [r4, #4]
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}

08004ab8 <arm_biquad_cascade_df1_f32>:
 8004ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004abc:	ed2d 8b02 	vpush	{d8}
 8004ac0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004ac4:	6886      	ldr	r6, [r0, #8]
 8004ac6:	6845      	ldr	r5, [r0, #4]
 8004ac8:	6807      	ldr	r7, [r0, #0]
 8004aca:	4696      	mov	lr, r2
 8004acc:	ea4f 180c 	mov.w	r8, ip, lsl #4
 8004ad0:	f003 0203 	and.w	r2, r3, #3
 8004ad4:	eb0e 0908 	add.w	r9, lr, r8
 8004ad8:	3614      	adds	r6, #20
 8004ada:	3510      	adds	r5, #16
 8004adc:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8004ae0:	ed56 1a04 	vldr	s3, [r6, #-16]
 8004ae4:	ed16 1a03 	vldr	s2, [r6, #-12]
 8004ae8:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004aec:	ed16 0a01 	vldr	s0, [r6, #-4]
 8004af0:	ed15 8a04 	vldr	s16, [r5, #-16]
 8004af4:	ed55 8a03 	vldr	s17, [r5, #-12]
 8004af8:	ed15 7a02 	vldr	s14, [r5, #-8]
 8004afc:	ed55 7a01 	vldr	s15, [r5, #-4]
 8004b00:	f1bc 0f00 	cmp.w	ip, #0
 8004b04:	f000 80a5 	beq.w	8004c52 <arm_biquad_cascade_df1_f32+0x19a>
 8004b08:	f101 0010 	add.w	r0, r1, #16
 8004b0c:	f10e 0310 	add.w	r3, lr, #16
 8004b10:	4664      	mov	r4, ip
 8004b12:	ed50 3a04 	vldr	s7, [r0, #-16]
 8004b16:	ee21 6a88 	vmul.f32	s12, s3, s16
 8004b1a:	ee22 5a23 	vmul.f32	s10, s4, s7
 8004b1e:	ee61 8a28 	vmul.f32	s17, s2, s17
 8004b22:	ee35 6a06 	vadd.f32	s12, s10, s12
 8004b26:	ee60 6a87 	vmul.f32	s13, s1, s14
 8004b2a:	ee36 6a28 	vadd.f32	s12, s12, s17
 8004b2e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004b32:	ee76 5a26 	vadd.f32	s11, s12, s13
 8004b36:	ee61 6aa3 	vmul.f32	s13, s3, s7
 8004b3a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8004b3e:	ee21 8a08 	vmul.f32	s16, s2, s16
 8004b42:	ed43 7a04 	vstr	s15, [r3, #-16]
 8004b46:	ed50 2a03 	vldr	s5, [r0, #-12]
 8004b4a:	ee22 6a22 	vmul.f32	s12, s4, s5
 8004b4e:	ee60 5aa7 	vmul.f32	s11, s1, s15
 8004b52:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004b56:	ee20 7a07 	vmul.f32	s14, s0, s14
 8004b5a:	ee76 6a08 	vadd.f32	s13, s12, s16
 8004b5e:	ee21 3aa2 	vmul.f32	s6, s3, s5
 8004b62:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8004b66:	ee21 8a23 	vmul.f32	s16, s2, s7
 8004b6a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8004b6e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004b72:	ed03 7a03 	vstr	s14, [r3, #-12]
 8004b76:	ed50 8a02 	vldr	s17, [r0, #-8]
 8004b7a:	ee62 3a28 	vmul.f32	s7, s4, s17
 8004b7e:	ee20 6a87 	vmul.f32	s12, s1, s14
 8004b82:	ee33 3a83 	vadd.f32	s6, s7, s6
 8004b86:	ee21 4aa8 	vmul.f32	s8, s3, s17
 8004b8a:	ee73 6a08 	vadd.f32	s13, s6, s16
 8004b8e:	ee61 2a22 	vmul.f32	s5, s2, s5
 8004b92:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004b96:	ee20 7a07 	vmul.f32	s14, s0, s14
 8004b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9e:	3c01      	subs	r4, #1
 8004ba0:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004ba4:	ed10 8a01 	vldr	s16, [r0, #-4]
 8004ba8:	ee62 3a08 	vmul.f32	s7, s4, s16
 8004bac:	ee60 6aa7 	vmul.f32	s13, s1, s15
 8004bb0:	ee73 3a84 	vadd.f32	s7, s7, s8
 8004bb4:	f100 0010 	add.w	r0, r0, #16
 8004bb8:	ee33 4aa2 	vadd.f32	s8, s7, s5
 8004bbc:	f103 0310 	add.w	r3, r3, #16
 8004bc0:	ee34 4a26 	vadd.f32	s8, s8, s13
 8004bc4:	ee34 7a07 	vadd.f32	s14, s8, s14
 8004bc8:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8004bcc:	d1a1      	bne.n	8004b12 <arm_biquad_cascade_df1_f32+0x5a>
 8004bce:	4441      	add	r1, r8
 8004bd0:	4648      	mov	r0, r9
 8004bd2:	b3aa      	cbz	r2, 8004c40 <arm_biquad_cascade_df1_f32+0x188>
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	e003      	b.n	8004be0 <arm_biquad_cascade_df1_f32+0x128>
 8004bd8:	eeb0 7a45 	vmov.f32	s14, s10
 8004bdc:	eeb0 8a43 	vmov.f32	s16, s6
 8004be0:	ecb1 3a01 	vldmia	r1!, {s6}
 8004be4:	ee21 6a88 	vmul.f32	s12, s3, s16
 8004be8:	ee62 3a03 	vmul.f32	s7, s4, s6
 8004bec:	ee61 8a28 	vmul.f32	s17, s2, s17
 8004bf0:	ee33 4a86 	vadd.f32	s8, s7, s12
 8004bf4:	ee60 4a87 	vmul.f32	s9, s1, s14
 8004bf8:	ee34 6a28 	vadd.f32	s12, s8, s17
 8004bfc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004c00:	ee76 4a24 	vadd.f32	s9, s12, s9
 8004c04:	3b01      	subs	r3, #1
 8004c06:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8004c0a:	eef0 8a48 	vmov.f32	s17, s16
 8004c0e:	eef0 7a47 	vmov.f32	s15, s14
 8004c12:	eca0 5a01 	vstmia	r0!, {s10}
 8004c16:	d1df      	bne.n	8004bd8 <arm_biquad_cascade_df1_f32+0x120>
 8004c18:	3f01      	subs	r7, #1
 8004c1a:	ed05 3a04 	vstr	s6, [r5, #-16]
 8004c1e:	ed05 8a03 	vstr	s16, [r5, #-12]
 8004c22:	ed05 5a02 	vstr	s10, [r5, #-8]
 8004c26:	ed05 7a01 	vstr	s14, [r5, #-4]
 8004c2a:	f106 0614 	add.w	r6, r6, #20
 8004c2e:	f105 0510 	add.w	r5, r5, #16
 8004c32:	4671      	mov	r1, lr
 8004c34:	f47f af52 	bne.w	8004adc <arm_biquad_cascade_df1_f32+0x24>
 8004c38:	ecbd 8b02 	vpop	{d8}
 8004c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c40:	eeb0 5a47 	vmov.f32	s10, s14
 8004c44:	eeb0 3a48 	vmov.f32	s6, s16
 8004c48:	eeb0 7a67 	vmov.f32	s14, s15
 8004c4c:	eeb0 8a68 	vmov.f32	s16, s17
 8004c50:	e7e2      	b.n	8004c18 <arm_biquad_cascade_df1_f32+0x160>
 8004c52:	4670      	mov	r0, lr
 8004c54:	e7bd      	b.n	8004bd2 <arm_biquad_cascade_df1_f32+0x11a>
 8004c56:	bf00      	nop

08004c58 <__errno>:
 8004c58:	4b01      	ldr	r3, [pc, #4]	; (8004c60 <__errno+0x8>)
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000020 	.word	0x20000020

08004c64 <__libc_init_array>:
 8004c64:	b570      	push	{r4, r5, r6, lr}
 8004c66:	4d0d      	ldr	r5, [pc, #52]	; (8004c9c <__libc_init_array+0x38>)
 8004c68:	4c0d      	ldr	r4, [pc, #52]	; (8004ca0 <__libc_init_array+0x3c>)
 8004c6a:	1b64      	subs	r4, r4, r5
 8004c6c:	10a4      	asrs	r4, r4, #2
 8004c6e:	2600      	movs	r6, #0
 8004c70:	42a6      	cmp	r6, r4
 8004c72:	d109      	bne.n	8004c88 <__libc_init_array+0x24>
 8004c74:	4d0b      	ldr	r5, [pc, #44]	; (8004ca4 <__libc_init_array+0x40>)
 8004c76:	4c0c      	ldr	r4, [pc, #48]	; (8004ca8 <__libc_init_array+0x44>)
 8004c78:	f000 ff84 	bl	8005b84 <_init>
 8004c7c:	1b64      	subs	r4, r4, r5
 8004c7e:	10a4      	asrs	r4, r4, #2
 8004c80:	2600      	movs	r6, #0
 8004c82:	42a6      	cmp	r6, r4
 8004c84:	d105      	bne.n	8004c92 <__libc_init_array+0x2e>
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8c:	4798      	blx	r3
 8004c8e:	3601      	adds	r6, #1
 8004c90:	e7ee      	b.n	8004c70 <__libc_init_array+0xc>
 8004c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c96:	4798      	blx	r3
 8004c98:	3601      	adds	r6, #1
 8004c9a:	e7f2      	b.n	8004c82 <__libc_init_array+0x1e>
 8004c9c:	08005c80 	.word	0x08005c80
 8004ca0:	08005c80 	.word	0x08005c80
 8004ca4:	08005c80 	.word	0x08005c80
 8004ca8:	08005c84 	.word	0x08005c84

08004cac <memcpy>:
 8004cac:	440a      	add	r2, r1
 8004cae:	4291      	cmp	r1, r2
 8004cb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004cb4:	d100      	bne.n	8004cb8 <memcpy+0xc>
 8004cb6:	4770      	bx	lr
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cc2:	4291      	cmp	r1, r2
 8004cc4:	d1f9      	bne.n	8004cba <memcpy+0xe>
 8004cc6:	bd10      	pop	{r4, pc}

08004cc8 <memset>:
 8004cc8:	4402      	add	r2, r0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d100      	bne.n	8004cd2 <memset+0xa>
 8004cd0:	4770      	bx	lr
 8004cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd6:	e7f9      	b.n	8004ccc <memset+0x4>

08004cd8 <iprintf>:
 8004cd8:	b40f      	push	{r0, r1, r2, r3}
 8004cda:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <iprintf+0x2c>)
 8004cdc:	b513      	push	{r0, r1, r4, lr}
 8004cde:	681c      	ldr	r4, [r3, #0]
 8004ce0:	b124      	cbz	r4, 8004cec <iprintf+0x14>
 8004ce2:	69a3      	ldr	r3, [r4, #24]
 8004ce4:	b913      	cbnz	r3, 8004cec <iprintf+0x14>
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f000 f866 	bl	8004db8 <__sinit>
 8004cec:	ab05      	add	r3, sp, #20
 8004cee:	9a04      	ldr	r2, [sp, #16]
 8004cf0:	68a1      	ldr	r1, [r4, #8]
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f000 f983 	bl	8005000 <_vfiprintf_r>
 8004cfa:	b002      	add	sp, #8
 8004cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d00:	b004      	add	sp, #16
 8004d02:	4770      	bx	lr
 8004d04:	20000020 	.word	0x20000020

08004d08 <std>:
 8004d08:	2300      	movs	r3, #0
 8004d0a:	b510      	push	{r4, lr}
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d16:	6083      	str	r3, [r0, #8]
 8004d18:	8181      	strh	r1, [r0, #12]
 8004d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d1c:	81c2      	strh	r2, [r0, #14]
 8004d1e:	6183      	str	r3, [r0, #24]
 8004d20:	4619      	mov	r1, r3
 8004d22:	2208      	movs	r2, #8
 8004d24:	305c      	adds	r0, #92	; 0x5c
 8004d26:	f7ff ffcf 	bl	8004cc8 <memset>
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <std+0x38>)
 8004d2c:	6263      	str	r3, [r4, #36]	; 0x24
 8004d2e:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <std+0x3c>)
 8004d30:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d32:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <std+0x40>)
 8004d34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <std+0x44>)
 8004d38:	6224      	str	r4, [r4, #32]
 8004d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	bf00      	nop
 8004d40:	080055a9 	.word	0x080055a9
 8004d44:	080055cb 	.word	0x080055cb
 8004d48:	08005603 	.word	0x08005603
 8004d4c:	08005627 	.word	0x08005627

08004d50 <_cleanup_r>:
 8004d50:	4901      	ldr	r1, [pc, #4]	; (8004d58 <_cleanup_r+0x8>)
 8004d52:	f000 b8af 	b.w	8004eb4 <_fwalk_reent>
 8004d56:	bf00      	nop
 8004d58:	08005901 	.word	0x08005901

08004d5c <__sfmoreglue>:
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	1e4a      	subs	r2, r1, #1
 8004d60:	2568      	movs	r5, #104	; 0x68
 8004d62:	4355      	muls	r5, r2
 8004d64:	460e      	mov	r6, r1
 8004d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d6a:	f000 f8c5 	bl	8004ef8 <_malloc_r>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	b140      	cbz	r0, 8004d84 <__sfmoreglue+0x28>
 8004d72:	2100      	movs	r1, #0
 8004d74:	e9c0 1600 	strd	r1, r6, [r0]
 8004d78:	300c      	adds	r0, #12
 8004d7a:	60a0      	str	r0, [r4, #8]
 8004d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d80:	f7ff ffa2 	bl	8004cc8 <memset>
 8004d84:	4620      	mov	r0, r4
 8004d86:	bd70      	pop	{r4, r5, r6, pc}

08004d88 <__sfp_lock_acquire>:
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__sfp_lock_acquire+0x8>)
 8004d8a:	f000 b8b3 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 8004d8e:	bf00      	nop
 8004d90:	200087bc 	.word	0x200087bc

08004d94 <__sfp_lock_release>:
 8004d94:	4801      	ldr	r0, [pc, #4]	; (8004d9c <__sfp_lock_release+0x8>)
 8004d96:	f000 b8ae 	b.w	8004ef6 <__retarget_lock_release_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	200087bc 	.word	0x200087bc

08004da0 <__sinit_lock_acquire>:
 8004da0:	4801      	ldr	r0, [pc, #4]	; (8004da8 <__sinit_lock_acquire+0x8>)
 8004da2:	f000 b8a7 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 8004da6:	bf00      	nop
 8004da8:	200087b7 	.word	0x200087b7

08004dac <__sinit_lock_release>:
 8004dac:	4801      	ldr	r0, [pc, #4]	; (8004db4 <__sinit_lock_release+0x8>)
 8004dae:	f000 b8a2 	b.w	8004ef6 <__retarget_lock_release_recursive>
 8004db2:	bf00      	nop
 8004db4:	200087b7 	.word	0x200087b7

08004db8 <__sinit>:
 8004db8:	b510      	push	{r4, lr}
 8004dba:	4604      	mov	r4, r0
 8004dbc:	f7ff fff0 	bl	8004da0 <__sinit_lock_acquire>
 8004dc0:	69a3      	ldr	r3, [r4, #24]
 8004dc2:	b11b      	cbz	r3, 8004dcc <__sinit+0x14>
 8004dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dc8:	f7ff bff0 	b.w	8004dac <__sinit_lock_release>
 8004dcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004dd0:	6523      	str	r3, [r4, #80]	; 0x50
 8004dd2:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <__sinit+0x68>)
 8004dd4:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <__sinit+0x6c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	bf04      	itt	eq
 8004dde:	2301      	moveq	r3, #1
 8004de0:	61a3      	streq	r3, [r4, #24]
 8004de2:	4620      	mov	r0, r4
 8004de4:	f000 f820 	bl	8004e28 <__sfp>
 8004de8:	6060      	str	r0, [r4, #4]
 8004dea:	4620      	mov	r0, r4
 8004dec:	f000 f81c 	bl	8004e28 <__sfp>
 8004df0:	60a0      	str	r0, [r4, #8]
 8004df2:	4620      	mov	r0, r4
 8004df4:	f000 f818 	bl	8004e28 <__sfp>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	60e0      	str	r0, [r4, #12]
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	6860      	ldr	r0, [r4, #4]
 8004e00:	f7ff ff82 	bl	8004d08 <std>
 8004e04:	68a0      	ldr	r0, [r4, #8]
 8004e06:	2201      	movs	r2, #1
 8004e08:	2109      	movs	r1, #9
 8004e0a:	f7ff ff7d 	bl	8004d08 <std>
 8004e0e:	68e0      	ldr	r0, [r4, #12]
 8004e10:	2202      	movs	r2, #2
 8004e12:	2112      	movs	r1, #18
 8004e14:	f7ff ff78 	bl	8004d08 <std>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	61a3      	str	r3, [r4, #24]
 8004e1c:	e7d2      	b.n	8004dc4 <__sinit+0xc>
 8004e1e:	bf00      	nop
 8004e20:	08005be0 	.word	0x08005be0
 8004e24:	08004d51 	.word	0x08004d51

08004e28 <__sfp>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	4607      	mov	r7, r0
 8004e2c:	f7ff ffac 	bl	8004d88 <__sfp_lock_acquire>
 8004e30:	4b1e      	ldr	r3, [pc, #120]	; (8004eac <__sfp+0x84>)
 8004e32:	681e      	ldr	r6, [r3, #0]
 8004e34:	69b3      	ldr	r3, [r6, #24]
 8004e36:	b913      	cbnz	r3, 8004e3e <__sfp+0x16>
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f7ff ffbd 	bl	8004db8 <__sinit>
 8004e3e:	3648      	adds	r6, #72	; 0x48
 8004e40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	d503      	bpl.n	8004e50 <__sfp+0x28>
 8004e48:	6833      	ldr	r3, [r6, #0]
 8004e4a:	b30b      	cbz	r3, 8004e90 <__sfp+0x68>
 8004e4c:	6836      	ldr	r6, [r6, #0]
 8004e4e:	e7f7      	b.n	8004e40 <__sfp+0x18>
 8004e50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e54:	b9d5      	cbnz	r5, 8004e8c <__sfp+0x64>
 8004e56:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <__sfp+0x88>)
 8004e58:	60e3      	str	r3, [r4, #12]
 8004e5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e5e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e60:	f000 f847 	bl	8004ef2 <__retarget_lock_init_recursive>
 8004e64:	f7ff ff96 	bl	8004d94 <__sfp_lock_release>
 8004e68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e70:	6025      	str	r5, [r4, #0]
 8004e72:	61a5      	str	r5, [r4, #24]
 8004e74:	2208      	movs	r2, #8
 8004e76:	4629      	mov	r1, r5
 8004e78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e7c:	f7ff ff24 	bl	8004cc8 <memset>
 8004e80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e88:	4620      	mov	r0, r4
 8004e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e8c:	3468      	adds	r4, #104	; 0x68
 8004e8e:	e7d9      	b.n	8004e44 <__sfp+0x1c>
 8004e90:	2104      	movs	r1, #4
 8004e92:	4638      	mov	r0, r7
 8004e94:	f7ff ff62 	bl	8004d5c <__sfmoreglue>
 8004e98:	4604      	mov	r4, r0
 8004e9a:	6030      	str	r0, [r6, #0]
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d1d5      	bne.n	8004e4c <__sfp+0x24>
 8004ea0:	f7ff ff78 	bl	8004d94 <__sfp_lock_release>
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	e7ee      	b.n	8004e88 <__sfp+0x60>
 8004eaa:	bf00      	nop
 8004eac:	08005be0 	.word	0x08005be0
 8004eb0:	ffff0001 	.word	0xffff0001

08004eb4 <_fwalk_reent>:
 8004eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb8:	4606      	mov	r6, r0
 8004eba:	4688      	mov	r8, r1
 8004ebc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ec0:	2700      	movs	r7, #0
 8004ec2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ec6:	f1b9 0901 	subs.w	r9, r9, #1
 8004eca:	d505      	bpl.n	8004ed8 <_fwalk_reent+0x24>
 8004ecc:	6824      	ldr	r4, [r4, #0]
 8004ece:	2c00      	cmp	r4, #0
 8004ed0:	d1f7      	bne.n	8004ec2 <_fwalk_reent+0xe>
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ed8:	89ab      	ldrh	r3, [r5, #12]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d907      	bls.n	8004eee <_fwalk_reent+0x3a>
 8004ede:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	d003      	beq.n	8004eee <_fwalk_reent+0x3a>
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	4630      	mov	r0, r6
 8004eea:	47c0      	blx	r8
 8004eec:	4307      	orrs	r7, r0
 8004eee:	3568      	adds	r5, #104	; 0x68
 8004ef0:	e7e9      	b.n	8004ec6 <_fwalk_reent+0x12>

08004ef2 <__retarget_lock_init_recursive>:
 8004ef2:	4770      	bx	lr

08004ef4 <__retarget_lock_acquire_recursive>:
 8004ef4:	4770      	bx	lr

08004ef6 <__retarget_lock_release_recursive>:
 8004ef6:	4770      	bx	lr

08004ef8 <_malloc_r>:
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	1ccd      	adds	r5, r1, #3
 8004efc:	f025 0503 	bic.w	r5, r5, #3
 8004f00:	3508      	adds	r5, #8
 8004f02:	2d0c      	cmp	r5, #12
 8004f04:	bf38      	it	cc
 8004f06:	250c      	movcc	r5, #12
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	db01      	blt.n	8004f12 <_malloc_r+0x1a>
 8004f0e:	42a9      	cmp	r1, r5
 8004f10:	d903      	bls.n	8004f1a <_malloc_r+0x22>
 8004f12:	230c      	movs	r3, #12
 8004f14:	6033      	str	r3, [r6, #0]
 8004f16:	2000      	movs	r0, #0
 8004f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f1a:	f000 fda3 	bl	8005a64 <__malloc_lock>
 8004f1e:	4921      	ldr	r1, [pc, #132]	; (8004fa4 <_malloc_r+0xac>)
 8004f20:	680a      	ldr	r2, [r1, #0]
 8004f22:	4614      	mov	r4, r2
 8004f24:	b99c      	cbnz	r4, 8004f4e <_malloc_r+0x56>
 8004f26:	4f20      	ldr	r7, [pc, #128]	; (8004fa8 <_malloc_r+0xb0>)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	b923      	cbnz	r3, 8004f36 <_malloc_r+0x3e>
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f000 fb2a 	bl	8005588 <_sbrk_r>
 8004f34:	6038      	str	r0, [r7, #0]
 8004f36:	4629      	mov	r1, r5
 8004f38:	4630      	mov	r0, r6
 8004f3a:	f000 fb25 	bl	8005588 <_sbrk_r>
 8004f3e:	1c43      	adds	r3, r0, #1
 8004f40:	d123      	bne.n	8004f8a <_malloc_r+0x92>
 8004f42:	230c      	movs	r3, #12
 8004f44:	6033      	str	r3, [r6, #0]
 8004f46:	4630      	mov	r0, r6
 8004f48:	f000 fd92 	bl	8005a70 <__malloc_unlock>
 8004f4c:	e7e3      	b.n	8004f16 <_malloc_r+0x1e>
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	1b5b      	subs	r3, r3, r5
 8004f52:	d417      	bmi.n	8004f84 <_malloc_r+0x8c>
 8004f54:	2b0b      	cmp	r3, #11
 8004f56:	d903      	bls.n	8004f60 <_malloc_r+0x68>
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	441c      	add	r4, r3
 8004f5c:	6025      	str	r5, [r4, #0]
 8004f5e:	e004      	b.n	8004f6a <_malloc_r+0x72>
 8004f60:	6863      	ldr	r3, [r4, #4]
 8004f62:	42a2      	cmp	r2, r4
 8004f64:	bf0c      	ite	eq
 8004f66:	600b      	streq	r3, [r1, #0]
 8004f68:	6053      	strne	r3, [r2, #4]
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f000 fd80 	bl	8005a70 <__malloc_unlock>
 8004f70:	f104 000b 	add.w	r0, r4, #11
 8004f74:	1d23      	adds	r3, r4, #4
 8004f76:	f020 0007 	bic.w	r0, r0, #7
 8004f7a:	1ac2      	subs	r2, r0, r3
 8004f7c:	d0cc      	beq.n	8004f18 <_malloc_r+0x20>
 8004f7e:	1a1b      	subs	r3, r3, r0
 8004f80:	50a3      	str	r3, [r4, r2]
 8004f82:	e7c9      	b.n	8004f18 <_malloc_r+0x20>
 8004f84:	4622      	mov	r2, r4
 8004f86:	6864      	ldr	r4, [r4, #4]
 8004f88:	e7cc      	b.n	8004f24 <_malloc_r+0x2c>
 8004f8a:	1cc4      	adds	r4, r0, #3
 8004f8c:	f024 0403 	bic.w	r4, r4, #3
 8004f90:	42a0      	cmp	r0, r4
 8004f92:	d0e3      	beq.n	8004f5c <_malloc_r+0x64>
 8004f94:	1a21      	subs	r1, r4, r0
 8004f96:	4630      	mov	r0, r6
 8004f98:	f000 faf6 	bl	8005588 <_sbrk_r>
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	d1dd      	bne.n	8004f5c <_malloc_r+0x64>
 8004fa0:	e7cf      	b.n	8004f42 <_malloc_r+0x4a>
 8004fa2:	bf00      	nop
 8004fa4:	200004bc 	.word	0x200004bc
 8004fa8:	200004c0 	.word	0x200004c0

08004fac <__sfputc_r>:
 8004fac:	6893      	ldr	r3, [r2, #8]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	b410      	push	{r4}
 8004fb4:	6093      	str	r3, [r2, #8]
 8004fb6:	da08      	bge.n	8004fca <__sfputc_r+0x1e>
 8004fb8:	6994      	ldr	r4, [r2, #24]
 8004fba:	42a3      	cmp	r3, r4
 8004fbc:	db01      	blt.n	8004fc2 <__sfputc_r+0x16>
 8004fbe:	290a      	cmp	r1, #10
 8004fc0:	d103      	bne.n	8004fca <__sfputc_r+0x1e>
 8004fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fc6:	f000 bb33 	b.w	8005630 <__swbuf_r>
 8004fca:	6813      	ldr	r3, [r2, #0]
 8004fcc:	1c58      	adds	r0, r3, #1
 8004fce:	6010      	str	r0, [r2, #0]
 8004fd0:	7019      	strb	r1, [r3, #0]
 8004fd2:	4608      	mov	r0, r1
 8004fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <__sfputs_r>:
 8004fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fdc:	4606      	mov	r6, r0
 8004fde:	460f      	mov	r7, r1
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	18d5      	adds	r5, r2, r3
 8004fe4:	42ac      	cmp	r4, r5
 8004fe6:	d101      	bne.n	8004fec <__sfputs_r+0x12>
 8004fe8:	2000      	movs	r0, #0
 8004fea:	e007      	b.n	8004ffc <__sfputs_r+0x22>
 8004fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff0:	463a      	mov	r2, r7
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f7ff ffda 	bl	8004fac <__sfputc_r>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d1f3      	bne.n	8004fe4 <__sfputs_r+0xa>
 8004ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005000 <_vfiprintf_r>:
 8005000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005004:	460d      	mov	r5, r1
 8005006:	b09d      	sub	sp, #116	; 0x74
 8005008:	4614      	mov	r4, r2
 800500a:	4698      	mov	r8, r3
 800500c:	4606      	mov	r6, r0
 800500e:	b118      	cbz	r0, 8005018 <_vfiprintf_r+0x18>
 8005010:	6983      	ldr	r3, [r0, #24]
 8005012:	b90b      	cbnz	r3, 8005018 <_vfiprintf_r+0x18>
 8005014:	f7ff fed0 	bl	8004db8 <__sinit>
 8005018:	4b89      	ldr	r3, [pc, #548]	; (8005240 <_vfiprintf_r+0x240>)
 800501a:	429d      	cmp	r5, r3
 800501c:	d11b      	bne.n	8005056 <_vfiprintf_r+0x56>
 800501e:	6875      	ldr	r5, [r6, #4]
 8005020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005022:	07d9      	lsls	r1, r3, #31
 8005024:	d405      	bmi.n	8005032 <_vfiprintf_r+0x32>
 8005026:	89ab      	ldrh	r3, [r5, #12]
 8005028:	059a      	lsls	r2, r3, #22
 800502a:	d402      	bmi.n	8005032 <_vfiprintf_r+0x32>
 800502c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800502e:	f7ff ff61 	bl	8004ef4 <__retarget_lock_acquire_recursive>
 8005032:	89ab      	ldrh	r3, [r5, #12]
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	d501      	bpl.n	800503c <_vfiprintf_r+0x3c>
 8005038:	692b      	ldr	r3, [r5, #16]
 800503a:	b9eb      	cbnz	r3, 8005078 <_vfiprintf_r+0x78>
 800503c:	4629      	mov	r1, r5
 800503e:	4630      	mov	r0, r6
 8005040:	f000 fb5a 	bl	80056f8 <__swsetup_r>
 8005044:	b1c0      	cbz	r0, 8005078 <_vfiprintf_r+0x78>
 8005046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005048:	07dc      	lsls	r4, r3, #31
 800504a:	d50e      	bpl.n	800506a <_vfiprintf_r+0x6a>
 800504c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005050:	b01d      	add	sp, #116	; 0x74
 8005052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005056:	4b7b      	ldr	r3, [pc, #492]	; (8005244 <_vfiprintf_r+0x244>)
 8005058:	429d      	cmp	r5, r3
 800505a:	d101      	bne.n	8005060 <_vfiprintf_r+0x60>
 800505c:	68b5      	ldr	r5, [r6, #8]
 800505e:	e7df      	b.n	8005020 <_vfiprintf_r+0x20>
 8005060:	4b79      	ldr	r3, [pc, #484]	; (8005248 <_vfiprintf_r+0x248>)
 8005062:	429d      	cmp	r5, r3
 8005064:	bf08      	it	eq
 8005066:	68f5      	ldreq	r5, [r6, #12]
 8005068:	e7da      	b.n	8005020 <_vfiprintf_r+0x20>
 800506a:	89ab      	ldrh	r3, [r5, #12]
 800506c:	0598      	lsls	r0, r3, #22
 800506e:	d4ed      	bmi.n	800504c <_vfiprintf_r+0x4c>
 8005070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005072:	f7ff ff40 	bl	8004ef6 <__retarget_lock_release_recursive>
 8005076:	e7e9      	b.n	800504c <_vfiprintf_r+0x4c>
 8005078:	2300      	movs	r3, #0
 800507a:	9309      	str	r3, [sp, #36]	; 0x24
 800507c:	2320      	movs	r3, #32
 800507e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005082:	f8cd 800c 	str.w	r8, [sp, #12]
 8005086:	2330      	movs	r3, #48	; 0x30
 8005088:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800524c <_vfiprintf_r+0x24c>
 800508c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005090:	f04f 0901 	mov.w	r9, #1
 8005094:	4623      	mov	r3, r4
 8005096:	469a      	mov	sl, r3
 8005098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800509c:	b10a      	cbz	r2, 80050a2 <_vfiprintf_r+0xa2>
 800509e:	2a25      	cmp	r2, #37	; 0x25
 80050a0:	d1f9      	bne.n	8005096 <_vfiprintf_r+0x96>
 80050a2:	ebba 0b04 	subs.w	fp, sl, r4
 80050a6:	d00b      	beq.n	80050c0 <_vfiprintf_r+0xc0>
 80050a8:	465b      	mov	r3, fp
 80050aa:	4622      	mov	r2, r4
 80050ac:	4629      	mov	r1, r5
 80050ae:	4630      	mov	r0, r6
 80050b0:	f7ff ff93 	bl	8004fda <__sfputs_r>
 80050b4:	3001      	adds	r0, #1
 80050b6:	f000 80aa 	beq.w	800520e <_vfiprintf_r+0x20e>
 80050ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050bc:	445a      	add	r2, fp
 80050be:	9209      	str	r2, [sp, #36]	; 0x24
 80050c0:	f89a 3000 	ldrb.w	r3, [sl]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 80a2 	beq.w	800520e <_vfiprintf_r+0x20e>
 80050ca:	2300      	movs	r3, #0
 80050cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050d4:	f10a 0a01 	add.w	sl, sl, #1
 80050d8:	9304      	str	r3, [sp, #16]
 80050da:	9307      	str	r3, [sp, #28]
 80050dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050e0:	931a      	str	r3, [sp, #104]	; 0x68
 80050e2:	4654      	mov	r4, sl
 80050e4:	2205      	movs	r2, #5
 80050e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ea:	4858      	ldr	r0, [pc, #352]	; (800524c <_vfiprintf_r+0x24c>)
 80050ec:	f7fb f870 	bl	80001d0 <memchr>
 80050f0:	9a04      	ldr	r2, [sp, #16]
 80050f2:	b9d8      	cbnz	r0, 800512c <_vfiprintf_r+0x12c>
 80050f4:	06d1      	lsls	r1, r2, #27
 80050f6:	bf44      	itt	mi
 80050f8:	2320      	movmi	r3, #32
 80050fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050fe:	0713      	lsls	r3, r2, #28
 8005100:	bf44      	itt	mi
 8005102:	232b      	movmi	r3, #43	; 0x2b
 8005104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005108:	f89a 3000 	ldrb.w	r3, [sl]
 800510c:	2b2a      	cmp	r3, #42	; 0x2a
 800510e:	d015      	beq.n	800513c <_vfiprintf_r+0x13c>
 8005110:	9a07      	ldr	r2, [sp, #28]
 8005112:	4654      	mov	r4, sl
 8005114:	2000      	movs	r0, #0
 8005116:	f04f 0c0a 	mov.w	ip, #10
 800511a:	4621      	mov	r1, r4
 800511c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005120:	3b30      	subs	r3, #48	; 0x30
 8005122:	2b09      	cmp	r3, #9
 8005124:	d94e      	bls.n	80051c4 <_vfiprintf_r+0x1c4>
 8005126:	b1b0      	cbz	r0, 8005156 <_vfiprintf_r+0x156>
 8005128:	9207      	str	r2, [sp, #28]
 800512a:	e014      	b.n	8005156 <_vfiprintf_r+0x156>
 800512c:	eba0 0308 	sub.w	r3, r0, r8
 8005130:	fa09 f303 	lsl.w	r3, r9, r3
 8005134:	4313      	orrs	r3, r2
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	46a2      	mov	sl, r4
 800513a:	e7d2      	b.n	80050e2 <_vfiprintf_r+0xe2>
 800513c:	9b03      	ldr	r3, [sp, #12]
 800513e:	1d19      	adds	r1, r3, #4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	9103      	str	r1, [sp, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	bfbb      	ittet	lt
 8005148:	425b      	neglt	r3, r3
 800514a:	f042 0202 	orrlt.w	r2, r2, #2
 800514e:	9307      	strge	r3, [sp, #28]
 8005150:	9307      	strlt	r3, [sp, #28]
 8005152:	bfb8      	it	lt
 8005154:	9204      	strlt	r2, [sp, #16]
 8005156:	7823      	ldrb	r3, [r4, #0]
 8005158:	2b2e      	cmp	r3, #46	; 0x2e
 800515a:	d10c      	bne.n	8005176 <_vfiprintf_r+0x176>
 800515c:	7863      	ldrb	r3, [r4, #1]
 800515e:	2b2a      	cmp	r3, #42	; 0x2a
 8005160:	d135      	bne.n	80051ce <_vfiprintf_r+0x1ce>
 8005162:	9b03      	ldr	r3, [sp, #12]
 8005164:	1d1a      	adds	r2, r3, #4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	9203      	str	r2, [sp, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	bfb8      	it	lt
 800516e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005172:	3402      	adds	r4, #2
 8005174:	9305      	str	r3, [sp, #20]
 8005176:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800525c <_vfiprintf_r+0x25c>
 800517a:	7821      	ldrb	r1, [r4, #0]
 800517c:	2203      	movs	r2, #3
 800517e:	4650      	mov	r0, sl
 8005180:	f7fb f826 	bl	80001d0 <memchr>
 8005184:	b140      	cbz	r0, 8005198 <_vfiprintf_r+0x198>
 8005186:	2340      	movs	r3, #64	; 0x40
 8005188:	eba0 000a 	sub.w	r0, r0, sl
 800518c:	fa03 f000 	lsl.w	r0, r3, r0
 8005190:	9b04      	ldr	r3, [sp, #16]
 8005192:	4303      	orrs	r3, r0
 8005194:	3401      	adds	r4, #1
 8005196:	9304      	str	r3, [sp, #16]
 8005198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800519c:	482c      	ldr	r0, [pc, #176]	; (8005250 <_vfiprintf_r+0x250>)
 800519e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051a2:	2206      	movs	r2, #6
 80051a4:	f7fb f814 	bl	80001d0 <memchr>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d03f      	beq.n	800522c <_vfiprintf_r+0x22c>
 80051ac:	4b29      	ldr	r3, [pc, #164]	; (8005254 <_vfiprintf_r+0x254>)
 80051ae:	bb1b      	cbnz	r3, 80051f8 <_vfiprintf_r+0x1f8>
 80051b0:	9b03      	ldr	r3, [sp, #12]
 80051b2:	3307      	adds	r3, #7
 80051b4:	f023 0307 	bic.w	r3, r3, #7
 80051b8:	3308      	adds	r3, #8
 80051ba:	9303      	str	r3, [sp, #12]
 80051bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051be:	443b      	add	r3, r7
 80051c0:	9309      	str	r3, [sp, #36]	; 0x24
 80051c2:	e767      	b.n	8005094 <_vfiprintf_r+0x94>
 80051c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80051c8:	460c      	mov	r4, r1
 80051ca:	2001      	movs	r0, #1
 80051cc:	e7a5      	b.n	800511a <_vfiprintf_r+0x11a>
 80051ce:	2300      	movs	r3, #0
 80051d0:	3401      	adds	r4, #1
 80051d2:	9305      	str	r3, [sp, #20]
 80051d4:	4619      	mov	r1, r3
 80051d6:	f04f 0c0a 	mov.w	ip, #10
 80051da:	4620      	mov	r0, r4
 80051dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051e0:	3a30      	subs	r2, #48	; 0x30
 80051e2:	2a09      	cmp	r2, #9
 80051e4:	d903      	bls.n	80051ee <_vfiprintf_r+0x1ee>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0c5      	beq.n	8005176 <_vfiprintf_r+0x176>
 80051ea:	9105      	str	r1, [sp, #20]
 80051ec:	e7c3      	b.n	8005176 <_vfiprintf_r+0x176>
 80051ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80051f2:	4604      	mov	r4, r0
 80051f4:	2301      	movs	r3, #1
 80051f6:	e7f0      	b.n	80051da <_vfiprintf_r+0x1da>
 80051f8:	ab03      	add	r3, sp, #12
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	462a      	mov	r2, r5
 80051fe:	4b16      	ldr	r3, [pc, #88]	; (8005258 <_vfiprintf_r+0x258>)
 8005200:	a904      	add	r1, sp, #16
 8005202:	4630      	mov	r0, r6
 8005204:	f3af 8000 	nop.w
 8005208:	4607      	mov	r7, r0
 800520a:	1c78      	adds	r0, r7, #1
 800520c:	d1d6      	bne.n	80051bc <_vfiprintf_r+0x1bc>
 800520e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005210:	07d9      	lsls	r1, r3, #31
 8005212:	d405      	bmi.n	8005220 <_vfiprintf_r+0x220>
 8005214:	89ab      	ldrh	r3, [r5, #12]
 8005216:	059a      	lsls	r2, r3, #22
 8005218:	d402      	bmi.n	8005220 <_vfiprintf_r+0x220>
 800521a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800521c:	f7ff fe6b 	bl	8004ef6 <__retarget_lock_release_recursive>
 8005220:	89ab      	ldrh	r3, [r5, #12]
 8005222:	065b      	lsls	r3, r3, #25
 8005224:	f53f af12 	bmi.w	800504c <_vfiprintf_r+0x4c>
 8005228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800522a:	e711      	b.n	8005050 <_vfiprintf_r+0x50>
 800522c:	ab03      	add	r3, sp, #12
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	462a      	mov	r2, r5
 8005232:	4b09      	ldr	r3, [pc, #36]	; (8005258 <_vfiprintf_r+0x258>)
 8005234:	a904      	add	r1, sp, #16
 8005236:	4630      	mov	r0, r6
 8005238:	f000 f880 	bl	800533c <_printf_i>
 800523c:	e7e4      	b.n	8005208 <_vfiprintf_r+0x208>
 800523e:	bf00      	nop
 8005240:	08005c04 	.word	0x08005c04
 8005244:	08005c24 	.word	0x08005c24
 8005248:	08005be4 	.word	0x08005be4
 800524c:	08005c44 	.word	0x08005c44
 8005250:	08005c4e 	.word	0x08005c4e
 8005254:	00000000 	.word	0x00000000
 8005258:	08004fdb 	.word	0x08004fdb
 800525c:	08005c4a 	.word	0x08005c4a

08005260 <_printf_common>:
 8005260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005264:	4616      	mov	r6, r2
 8005266:	4699      	mov	r9, r3
 8005268:	688a      	ldr	r2, [r1, #8]
 800526a:	690b      	ldr	r3, [r1, #16]
 800526c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005270:	4293      	cmp	r3, r2
 8005272:	bfb8      	it	lt
 8005274:	4613      	movlt	r3, r2
 8005276:	6033      	str	r3, [r6, #0]
 8005278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800527c:	4607      	mov	r7, r0
 800527e:	460c      	mov	r4, r1
 8005280:	b10a      	cbz	r2, 8005286 <_printf_common+0x26>
 8005282:	3301      	adds	r3, #1
 8005284:	6033      	str	r3, [r6, #0]
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	0699      	lsls	r1, r3, #26
 800528a:	bf42      	ittt	mi
 800528c:	6833      	ldrmi	r3, [r6, #0]
 800528e:	3302      	addmi	r3, #2
 8005290:	6033      	strmi	r3, [r6, #0]
 8005292:	6825      	ldr	r5, [r4, #0]
 8005294:	f015 0506 	ands.w	r5, r5, #6
 8005298:	d106      	bne.n	80052a8 <_printf_common+0x48>
 800529a:	f104 0a19 	add.w	sl, r4, #25
 800529e:	68e3      	ldr	r3, [r4, #12]
 80052a0:	6832      	ldr	r2, [r6, #0]
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	42ab      	cmp	r3, r5
 80052a6:	dc26      	bgt.n	80052f6 <_printf_common+0x96>
 80052a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052ac:	1e13      	subs	r3, r2, #0
 80052ae:	6822      	ldr	r2, [r4, #0]
 80052b0:	bf18      	it	ne
 80052b2:	2301      	movne	r3, #1
 80052b4:	0692      	lsls	r2, r2, #26
 80052b6:	d42b      	bmi.n	8005310 <_printf_common+0xb0>
 80052b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052bc:	4649      	mov	r1, r9
 80052be:	4638      	mov	r0, r7
 80052c0:	47c0      	blx	r8
 80052c2:	3001      	adds	r0, #1
 80052c4:	d01e      	beq.n	8005304 <_printf_common+0xa4>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	68e5      	ldr	r5, [r4, #12]
 80052ca:	6832      	ldr	r2, [r6, #0]
 80052cc:	f003 0306 	and.w	r3, r3, #6
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	bf08      	it	eq
 80052d4:	1aad      	subeq	r5, r5, r2
 80052d6:	68a3      	ldr	r3, [r4, #8]
 80052d8:	6922      	ldr	r2, [r4, #16]
 80052da:	bf0c      	ite	eq
 80052dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052e0:	2500      	movne	r5, #0
 80052e2:	4293      	cmp	r3, r2
 80052e4:	bfc4      	itt	gt
 80052e6:	1a9b      	subgt	r3, r3, r2
 80052e8:	18ed      	addgt	r5, r5, r3
 80052ea:	2600      	movs	r6, #0
 80052ec:	341a      	adds	r4, #26
 80052ee:	42b5      	cmp	r5, r6
 80052f0:	d11a      	bne.n	8005328 <_printf_common+0xc8>
 80052f2:	2000      	movs	r0, #0
 80052f4:	e008      	b.n	8005308 <_printf_common+0xa8>
 80052f6:	2301      	movs	r3, #1
 80052f8:	4652      	mov	r2, sl
 80052fa:	4649      	mov	r1, r9
 80052fc:	4638      	mov	r0, r7
 80052fe:	47c0      	blx	r8
 8005300:	3001      	adds	r0, #1
 8005302:	d103      	bne.n	800530c <_printf_common+0xac>
 8005304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530c:	3501      	adds	r5, #1
 800530e:	e7c6      	b.n	800529e <_printf_common+0x3e>
 8005310:	18e1      	adds	r1, r4, r3
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	2030      	movs	r0, #48	; 0x30
 8005316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800531a:	4422      	add	r2, r4
 800531c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005324:	3302      	adds	r3, #2
 8005326:	e7c7      	b.n	80052b8 <_printf_common+0x58>
 8005328:	2301      	movs	r3, #1
 800532a:	4622      	mov	r2, r4
 800532c:	4649      	mov	r1, r9
 800532e:	4638      	mov	r0, r7
 8005330:	47c0      	blx	r8
 8005332:	3001      	adds	r0, #1
 8005334:	d0e6      	beq.n	8005304 <_printf_common+0xa4>
 8005336:	3601      	adds	r6, #1
 8005338:	e7d9      	b.n	80052ee <_printf_common+0x8e>
	...

0800533c <_printf_i>:
 800533c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005340:	460c      	mov	r4, r1
 8005342:	4691      	mov	r9, r2
 8005344:	7e27      	ldrb	r7, [r4, #24]
 8005346:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005348:	2f78      	cmp	r7, #120	; 0x78
 800534a:	4680      	mov	r8, r0
 800534c:	469a      	mov	sl, r3
 800534e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005352:	d807      	bhi.n	8005364 <_printf_i+0x28>
 8005354:	2f62      	cmp	r7, #98	; 0x62
 8005356:	d80a      	bhi.n	800536e <_printf_i+0x32>
 8005358:	2f00      	cmp	r7, #0
 800535a:	f000 80d8 	beq.w	800550e <_printf_i+0x1d2>
 800535e:	2f58      	cmp	r7, #88	; 0x58
 8005360:	f000 80a3 	beq.w	80054aa <_printf_i+0x16e>
 8005364:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800536c:	e03a      	b.n	80053e4 <_printf_i+0xa8>
 800536e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005372:	2b15      	cmp	r3, #21
 8005374:	d8f6      	bhi.n	8005364 <_printf_i+0x28>
 8005376:	a001      	add	r0, pc, #4	; (adr r0, 800537c <_printf_i+0x40>)
 8005378:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800537c:	080053d5 	.word	0x080053d5
 8005380:	080053e9 	.word	0x080053e9
 8005384:	08005365 	.word	0x08005365
 8005388:	08005365 	.word	0x08005365
 800538c:	08005365 	.word	0x08005365
 8005390:	08005365 	.word	0x08005365
 8005394:	080053e9 	.word	0x080053e9
 8005398:	08005365 	.word	0x08005365
 800539c:	08005365 	.word	0x08005365
 80053a0:	08005365 	.word	0x08005365
 80053a4:	08005365 	.word	0x08005365
 80053a8:	080054f5 	.word	0x080054f5
 80053ac:	08005419 	.word	0x08005419
 80053b0:	080054d7 	.word	0x080054d7
 80053b4:	08005365 	.word	0x08005365
 80053b8:	08005365 	.word	0x08005365
 80053bc:	08005517 	.word	0x08005517
 80053c0:	08005365 	.word	0x08005365
 80053c4:	08005419 	.word	0x08005419
 80053c8:	08005365 	.word	0x08005365
 80053cc:	08005365 	.word	0x08005365
 80053d0:	080054df 	.word	0x080054df
 80053d4:	680b      	ldr	r3, [r1, #0]
 80053d6:	1d1a      	adds	r2, r3, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	600a      	str	r2, [r1, #0]
 80053dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0a3      	b.n	8005530 <_printf_i+0x1f4>
 80053e8:	6825      	ldr	r5, [r4, #0]
 80053ea:	6808      	ldr	r0, [r1, #0]
 80053ec:	062e      	lsls	r6, r5, #24
 80053ee:	f100 0304 	add.w	r3, r0, #4
 80053f2:	d50a      	bpl.n	800540a <_printf_i+0xce>
 80053f4:	6805      	ldr	r5, [r0, #0]
 80053f6:	600b      	str	r3, [r1, #0]
 80053f8:	2d00      	cmp	r5, #0
 80053fa:	da03      	bge.n	8005404 <_printf_i+0xc8>
 80053fc:	232d      	movs	r3, #45	; 0x2d
 80053fe:	426d      	negs	r5, r5
 8005400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005404:	485e      	ldr	r0, [pc, #376]	; (8005580 <_printf_i+0x244>)
 8005406:	230a      	movs	r3, #10
 8005408:	e019      	b.n	800543e <_printf_i+0x102>
 800540a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800540e:	6805      	ldr	r5, [r0, #0]
 8005410:	600b      	str	r3, [r1, #0]
 8005412:	bf18      	it	ne
 8005414:	b22d      	sxthne	r5, r5
 8005416:	e7ef      	b.n	80053f8 <_printf_i+0xbc>
 8005418:	680b      	ldr	r3, [r1, #0]
 800541a:	6825      	ldr	r5, [r4, #0]
 800541c:	1d18      	adds	r0, r3, #4
 800541e:	6008      	str	r0, [r1, #0]
 8005420:	0628      	lsls	r0, r5, #24
 8005422:	d501      	bpl.n	8005428 <_printf_i+0xec>
 8005424:	681d      	ldr	r5, [r3, #0]
 8005426:	e002      	b.n	800542e <_printf_i+0xf2>
 8005428:	0669      	lsls	r1, r5, #25
 800542a:	d5fb      	bpl.n	8005424 <_printf_i+0xe8>
 800542c:	881d      	ldrh	r5, [r3, #0]
 800542e:	4854      	ldr	r0, [pc, #336]	; (8005580 <_printf_i+0x244>)
 8005430:	2f6f      	cmp	r7, #111	; 0x6f
 8005432:	bf0c      	ite	eq
 8005434:	2308      	moveq	r3, #8
 8005436:	230a      	movne	r3, #10
 8005438:	2100      	movs	r1, #0
 800543a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800543e:	6866      	ldr	r6, [r4, #4]
 8005440:	60a6      	str	r6, [r4, #8]
 8005442:	2e00      	cmp	r6, #0
 8005444:	bfa2      	ittt	ge
 8005446:	6821      	ldrge	r1, [r4, #0]
 8005448:	f021 0104 	bicge.w	r1, r1, #4
 800544c:	6021      	strge	r1, [r4, #0]
 800544e:	b90d      	cbnz	r5, 8005454 <_printf_i+0x118>
 8005450:	2e00      	cmp	r6, #0
 8005452:	d04d      	beq.n	80054f0 <_printf_i+0x1b4>
 8005454:	4616      	mov	r6, r2
 8005456:	fbb5 f1f3 	udiv	r1, r5, r3
 800545a:	fb03 5711 	mls	r7, r3, r1, r5
 800545e:	5dc7      	ldrb	r7, [r0, r7]
 8005460:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005464:	462f      	mov	r7, r5
 8005466:	42bb      	cmp	r3, r7
 8005468:	460d      	mov	r5, r1
 800546a:	d9f4      	bls.n	8005456 <_printf_i+0x11a>
 800546c:	2b08      	cmp	r3, #8
 800546e:	d10b      	bne.n	8005488 <_printf_i+0x14c>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	07df      	lsls	r7, r3, #31
 8005474:	d508      	bpl.n	8005488 <_printf_i+0x14c>
 8005476:	6923      	ldr	r3, [r4, #16]
 8005478:	6861      	ldr	r1, [r4, #4]
 800547a:	4299      	cmp	r1, r3
 800547c:	bfde      	ittt	le
 800547e:	2330      	movle	r3, #48	; 0x30
 8005480:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005484:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005488:	1b92      	subs	r2, r2, r6
 800548a:	6122      	str	r2, [r4, #16]
 800548c:	f8cd a000 	str.w	sl, [sp]
 8005490:	464b      	mov	r3, r9
 8005492:	aa03      	add	r2, sp, #12
 8005494:	4621      	mov	r1, r4
 8005496:	4640      	mov	r0, r8
 8005498:	f7ff fee2 	bl	8005260 <_printf_common>
 800549c:	3001      	adds	r0, #1
 800549e:	d14c      	bne.n	800553a <_printf_i+0x1fe>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a4:	b004      	add	sp, #16
 80054a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054aa:	4835      	ldr	r0, [pc, #212]	; (8005580 <_printf_i+0x244>)
 80054ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	680e      	ldr	r6, [r1, #0]
 80054b4:	061f      	lsls	r7, r3, #24
 80054b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80054ba:	600e      	str	r6, [r1, #0]
 80054bc:	d514      	bpl.n	80054e8 <_printf_i+0x1ac>
 80054be:	07d9      	lsls	r1, r3, #31
 80054c0:	bf44      	itt	mi
 80054c2:	f043 0320 	orrmi.w	r3, r3, #32
 80054c6:	6023      	strmi	r3, [r4, #0]
 80054c8:	b91d      	cbnz	r5, 80054d2 <_printf_i+0x196>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	f023 0320 	bic.w	r3, r3, #32
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	2310      	movs	r3, #16
 80054d4:	e7b0      	b.n	8005438 <_printf_i+0xfc>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	f043 0320 	orr.w	r3, r3, #32
 80054dc:	6023      	str	r3, [r4, #0]
 80054de:	2378      	movs	r3, #120	; 0x78
 80054e0:	4828      	ldr	r0, [pc, #160]	; (8005584 <_printf_i+0x248>)
 80054e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054e6:	e7e3      	b.n	80054b0 <_printf_i+0x174>
 80054e8:	065e      	lsls	r6, r3, #25
 80054ea:	bf48      	it	mi
 80054ec:	b2ad      	uxthmi	r5, r5
 80054ee:	e7e6      	b.n	80054be <_printf_i+0x182>
 80054f0:	4616      	mov	r6, r2
 80054f2:	e7bb      	b.n	800546c <_printf_i+0x130>
 80054f4:	680b      	ldr	r3, [r1, #0]
 80054f6:	6826      	ldr	r6, [r4, #0]
 80054f8:	6960      	ldr	r0, [r4, #20]
 80054fa:	1d1d      	adds	r5, r3, #4
 80054fc:	600d      	str	r5, [r1, #0]
 80054fe:	0635      	lsls	r5, r6, #24
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	d501      	bpl.n	8005508 <_printf_i+0x1cc>
 8005504:	6018      	str	r0, [r3, #0]
 8005506:	e002      	b.n	800550e <_printf_i+0x1d2>
 8005508:	0671      	lsls	r1, r6, #25
 800550a:	d5fb      	bpl.n	8005504 <_printf_i+0x1c8>
 800550c:	8018      	strh	r0, [r3, #0]
 800550e:	2300      	movs	r3, #0
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	4616      	mov	r6, r2
 8005514:	e7ba      	b.n	800548c <_printf_i+0x150>
 8005516:	680b      	ldr	r3, [r1, #0]
 8005518:	1d1a      	adds	r2, r3, #4
 800551a:	600a      	str	r2, [r1, #0]
 800551c:	681e      	ldr	r6, [r3, #0]
 800551e:	6862      	ldr	r2, [r4, #4]
 8005520:	2100      	movs	r1, #0
 8005522:	4630      	mov	r0, r6
 8005524:	f7fa fe54 	bl	80001d0 <memchr>
 8005528:	b108      	cbz	r0, 800552e <_printf_i+0x1f2>
 800552a:	1b80      	subs	r0, r0, r6
 800552c:	6060      	str	r0, [r4, #4]
 800552e:	6863      	ldr	r3, [r4, #4]
 8005530:	6123      	str	r3, [r4, #16]
 8005532:	2300      	movs	r3, #0
 8005534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005538:	e7a8      	b.n	800548c <_printf_i+0x150>
 800553a:	6923      	ldr	r3, [r4, #16]
 800553c:	4632      	mov	r2, r6
 800553e:	4649      	mov	r1, r9
 8005540:	4640      	mov	r0, r8
 8005542:	47d0      	blx	sl
 8005544:	3001      	adds	r0, #1
 8005546:	d0ab      	beq.n	80054a0 <_printf_i+0x164>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	079b      	lsls	r3, r3, #30
 800554c:	d413      	bmi.n	8005576 <_printf_i+0x23a>
 800554e:	68e0      	ldr	r0, [r4, #12]
 8005550:	9b03      	ldr	r3, [sp, #12]
 8005552:	4298      	cmp	r0, r3
 8005554:	bfb8      	it	lt
 8005556:	4618      	movlt	r0, r3
 8005558:	e7a4      	b.n	80054a4 <_printf_i+0x168>
 800555a:	2301      	movs	r3, #1
 800555c:	4632      	mov	r2, r6
 800555e:	4649      	mov	r1, r9
 8005560:	4640      	mov	r0, r8
 8005562:	47d0      	blx	sl
 8005564:	3001      	adds	r0, #1
 8005566:	d09b      	beq.n	80054a0 <_printf_i+0x164>
 8005568:	3501      	adds	r5, #1
 800556a:	68e3      	ldr	r3, [r4, #12]
 800556c:	9903      	ldr	r1, [sp, #12]
 800556e:	1a5b      	subs	r3, r3, r1
 8005570:	42ab      	cmp	r3, r5
 8005572:	dcf2      	bgt.n	800555a <_printf_i+0x21e>
 8005574:	e7eb      	b.n	800554e <_printf_i+0x212>
 8005576:	2500      	movs	r5, #0
 8005578:	f104 0619 	add.w	r6, r4, #25
 800557c:	e7f5      	b.n	800556a <_printf_i+0x22e>
 800557e:	bf00      	nop
 8005580:	08005c55 	.word	0x08005c55
 8005584:	08005c66 	.word	0x08005c66

08005588 <_sbrk_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4d06      	ldr	r5, [pc, #24]	; (80055a4 <_sbrk_r+0x1c>)
 800558c:	2300      	movs	r3, #0
 800558e:	4604      	mov	r4, r0
 8005590:	4608      	mov	r0, r1
 8005592:	602b      	str	r3, [r5, #0]
 8005594:	f7fb fdc4 	bl	8001120 <_sbrk>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d102      	bne.n	80055a2 <_sbrk_r+0x1a>
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	b103      	cbz	r3, 80055a2 <_sbrk_r+0x1a>
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	200087c0 	.word	0x200087c0

080055a8 <__sread>:
 80055a8:	b510      	push	{r4, lr}
 80055aa:	460c      	mov	r4, r1
 80055ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b0:	f000 fab4 	bl	8005b1c <_read_r>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	bfab      	itete	ge
 80055b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055ba:	89a3      	ldrhlt	r3, [r4, #12]
 80055bc:	181b      	addge	r3, r3, r0
 80055be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055c2:	bfac      	ite	ge
 80055c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80055c6:	81a3      	strhlt	r3, [r4, #12]
 80055c8:	bd10      	pop	{r4, pc}

080055ca <__swrite>:
 80055ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ce:	461f      	mov	r7, r3
 80055d0:	898b      	ldrh	r3, [r1, #12]
 80055d2:	05db      	lsls	r3, r3, #23
 80055d4:	4605      	mov	r5, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	4616      	mov	r6, r2
 80055da:	d505      	bpl.n	80055e8 <__swrite+0x1e>
 80055dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e0:	2302      	movs	r3, #2
 80055e2:	2200      	movs	r2, #0
 80055e4:	f000 f9c8 	bl	8005978 <_lseek_r>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	4632      	mov	r2, r6
 80055f6:	463b      	mov	r3, r7
 80055f8:	4628      	mov	r0, r5
 80055fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055fe:	f000 b869 	b.w	80056d4 <_write_r>

08005602 <__sseek>:
 8005602:	b510      	push	{r4, lr}
 8005604:	460c      	mov	r4, r1
 8005606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800560a:	f000 f9b5 	bl	8005978 <_lseek_r>
 800560e:	1c43      	adds	r3, r0, #1
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	bf15      	itete	ne
 8005614:	6560      	strne	r0, [r4, #84]	; 0x54
 8005616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800561a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800561e:	81a3      	strheq	r3, [r4, #12]
 8005620:	bf18      	it	ne
 8005622:	81a3      	strhne	r3, [r4, #12]
 8005624:	bd10      	pop	{r4, pc}

08005626 <__sclose>:
 8005626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562a:	f000 b8d3 	b.w	80057d4 <_close_r>
	...

08005630 <__swbuf_r>:
 8005630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005632:	460e      	mov	r6, r1
 8005634:	4614      	mov	r4, r2
 8005636:	4605      	mov	r5, r0
 8005638:	b118      	cbz	r0, 8005642 <__swbuf_r+0x12>
 800563a:	6983      	ldr	r3, [r0, #24]
 800563c:	b90b      	cbnz	r3, 8005642 <__swbuf_r+0x12>
 800563e:	f7ff fbbb 	bl	8004db8 <__sinit>
 8005642:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <__swbuf_r+0x98>)
 8005644:	429c      	cmp	r4, r3
 8005646:	d12b      	bne.n	80056a0 <__swbuf_r+0x70>
 8005648:	686c      	ldr	r4, [r5, #4]
 800564a:	69a3      	ldr	r3, [r4, #24]
 800564c:	60a3      	str	r3, [r4, #8]
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	071a      	lsls	r2, r3, #28
 8005652:	d52f      	bpl.n	80056b4 <__swbuf_r+0x84>
 8005654:	6923      	ldr	r3, [r4, #16]
 8005656:	b36b      	cbz	r3, 80056b4 <__swbuf_r+0x84>
 8005658:	6923      	ldr	r3, [r4, #16]
 800565a:	6820      	ldr	r0, [r4, #0]
 800565c:	1ac0      	subs	r0, r0, r3
 800565e:	6963      	ldr	r3, [r4, #20]
 8005660:	b2f6      	uxtb	r6, r6
 8005662:	4283      	cmp	r3, r0
 8005664:	4637      	mov	r7, r6
 8005666:	dc04      	bgt.n	8005672 <__swbuf_r+0x42>
 8005668:	4621      	mov	r1, r4
 800566a:	4628      	mov	r0, r5
 800566c:	f000 f948 	bl	8005900 <_fflush_r>
 8005670:	bb30      	cbnz	r0, 80056c0 <__swbuf_r+0x90>
 8005672:	68a3      	ldr	r3, [r4, #8]
 8005674:	3b01      	subs	r3, #1
 8005676:	60a3      	str	r3, [r4, #8]
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	6022      	str	r2, [r4, #0]
 800567e:	701e      	strb	r6, [r3, #0]
 8005680:	6963      	ldr	r3, [r4, #20]
 8005682:	3001      	adds	r0, #1
 8005684:	4283      	cmp	r3, r0
 8005686:	d004      	beq.n	8005692 <__swbuf_r+0x62>
 8005688:	89a3      	ldrh	r3, [r4, #12]
 800568a:	07db      	lsls	r3, r3, #31
 800568c:	d506      	bpl.n	800569c <__swbuf_r+0x6c>
 800568e:	2e0a      	cmp	r6, #10
 8005690:	d104      	bne.n	800569c <__swbuf_r+0x6c>
 8005692:	4621      	mov	r1, r4
 8005694:	4628      	mov	r0, r5
 8005696:	f000 f933 	bl	8005900 <_fflush_r>
 800569a:	b988      	cbnz	r0, 80056c0 <__swbuf_r+0x90>
 800569c:	4638      	mov	r0, r7
 800569e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056a0:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <__swbuf_r+0x9c>)
 80056a2:	429c      	cmp	r4, r3
 80056a4:	d101      	bne.n	80056aa <__swbuf_r+0x7a>
 80056a6:	68ac      	ldr	r4, [r5, #8]
 80056a8:	e7cf      	b.n	800564a <__swbuf_r+0x1a>
 80056aa:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <__swbuf_r+0xa0>)
 80056ac:	429c      	cmp	r4, r3
 80056ae:	bf08      	it	eq
 80056b0:	68ec      	ldreq	r4, [r5, #12]
 80056b2:	e7ca      	b.n	800564a <__swbuf_r+0x1a>
 80056b4:	4621      	mov	r1, r4
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 f81e 	bl	80056f8 <__swsetup_r>
 80056bc:	2800      	cmp	r0, #0
 80056be:	d0cb      	beq.n	8005658 <__swbuf_r+0x28>
 80056c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80056c4:	e7ea      	b.n	800569c <__swbuf_r+0x6c>
 80056c6:	bf00      	nop
 80056c8:	08005c04 	.word	0x08005c04
 80056cc:	08005c24 	.word	0x08005c24
 80056d0:	08005be4 	.word	0x08005be4

080056d4 <_write_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4d07      	ldr	r5, [pc, #28]	; (80056f4 <_write_r+0x20>)
 80056d8:	4604      	mov	r4, r0
 80056da:	4608      	mov	r0, r1
 80056dc:	4611      	mov	r1, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	602a      	str	r2, [r5, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f7fb fa1a 	bl	8000b1c <_write>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d102      	bne.n	80056f2 <_write_r+0x1e>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	b103      	cbz	r3, 80056f2 <_write_r+0x1e>
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	200087c0 	.word	0x200087c0

080056f8 <__swsetup_r>:
 80056f8:	4b32      	ldr	r3, [pc, #200]	; (80057c4 <__swsetup_r+0xcc>)
 80056fa:	b570      	push	{r4, r5, r6, lr}
 80056fc:	681d      	ldr	r5, [r3, #0]
 80056fe:	4606      	mov	r6, r0
 8005700:	460c      	mov	r4, r1
 8005702:	b125      	cbz	r5, 800570e <__swsetup_r+0x16>
 8005704:	69ab      	ldr	r3, [r5, #24]
 8005706:	b913      	cbnz	r3, 800570e <__swsetup_r+0x16>
 8005708:	4628      	mov	r0, r5
 800570a:	f7ff fb55 	bl	8004db8 <__sinit>
 800570e:	4b2e      	ldr	r3, [pc, #184]	; (80057c8 <__swsetup_r+0xd0>)
 8005710:	429c      	cmp	r4, r3
 8005712:	d10f      	bne.n	8005734 <__swsetup_r+0x3c>
 8005714:	686c      	ldr	r4, [r5, #4]
 8005716:	89a3      	ldrh	r3, [r4, #12]
 8005718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800571c:	0719      	lsls	r1, r3, #28
 800571e:	d42c      	bmi.n	800577a <__swsetup_r+0x82>
 8005720:	06dd      	lsls	r5, r3, #27
 8005722:	d411      	bmi.n	8005748 <__swsetup_r+0x50>
 8005724:	2309      	movs	r3, #9
 8005726:	6033      	str	r3, [r6, #0]
 8005728:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005732:	e03e      	b.n	80057b2 <__swsetup_r+0xba>
 8005734:	4b25      	ldr	r3, [pc, #148]	; (80057cc <__swsetup_r+0xd4>)
 8005736:	429c      	cmp	r4, r3
 8005738:	d101      	bne.n	800573e <__swsetup_r+0x46>
 800573a:	68ac      	ldr	r4, [r5, #8]
 800573c:	e7eb      	b.n	8005716 <__swsetup_r+0x1e>
 800573e:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <__swsetup_r+0xd8>)
 8005740:	429c      	cmp	r4, r3
 8005742:	bf08      	it	eq
 8005744:	68ec      	ldreq	r4, [r5, #12]
 8005746:	e7e6      	b.n	8005716 <__swsetup_r+0x1e>
 8005748:	0758      	lsls	r0, r3, #29
 800574a:	d512      	bpl.n	8005772 <__swsetup_r+0x7a>
 800574c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800574e:	b141      	cbz	r1, 8005762 <__swsetup_r+0x6a>
 8005750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005754:	4299      	cmp	r1, r3
 8005756:	d002      	beq.n	800575e <__swsetup_r+0x66>
 8005758:	4630      	mov	r0, r6
 800575a:	f000 f98f 	bl	8005a7c <_free_r>
 800575e:	2300      	movs	r3, #0
 8005760:	6363      	str	r3, [r4, #52]	; 0x34
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	2300      	movs	r3, #0
 800576c:	6063      	str	r3, [r4, #4]
 800576e:	6923      	ldr	r3, [r4, #16]
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	f043 0308 	orr.w	r3, r3, #8
 8005778:	81a3      	strh	r3, [r4, #12]
 800577a:	6923      	ldr	r3, [r4, #16]
 800577c:	b94b      	cbnz	r3, 8005792 <__swsetup_r+0x9a>
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005788:	d003      	beq.n	8005792 <__swsetup_r+0x9a>
 800578a:	4621      	mov	r1, r4
 800578c:	4630      	mov	r0, r6
 800578e:	f000 f929 	bl	80059e4 <__smakebuf_r>
 8005792:	89a0      	ldrh	r0, [r4, #12]
 8005794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005798:	f010 0301 	ands.w	r3, r0, #1
 800579c:	d00a      	beq.n	80057b4 <__swsetup_r+0xbc>
 800579e:	2300      	movs	r3, #0
 80057a0:	60a3      	str	r3, [r4, #8]
 80057a2:	6963      	ldr	r3, [r4, #20]
 80057a4:	425b      	negs	r3, r3
 80057a6:	61a3      	str	r3, [r4, #24]
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	b943      	cbnz	r3, 80057be <__swsetup_r+0xc6>
 80057ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057b0:	d1ba      	bne.n	8005728 <__swsetup_r+0x30>
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	0781      	lsls	r1, r0, #30
 80057b6:	bf58      	it	pl
 80057b8:	6963      	ldrpl	r3, [r4, #20]
 80057ba:	60a3      	str	r3, [r4, #8]
 80057bc:	e7f4      	b.n	80057a8 <__swsetup_r+0xb0>
 80057be:	2000      	movs	r0, #0
 80057c0:	e7f7      	b.n	80057b2 <__swsetup_r+0xba>
 80057c2:	bf00      	nop
 80057c4:	20000020 	.word	0x20000020
 80057c8:	08005c04 	.word	0x08005c04
 80057cc:	08005c24 	.word	0x08005c24
 80057d0:	08005be4 	.word	0x08005be4

080057d4 <_close_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4d06      	ldr	r5, [pc, #24]	; (80057f0 <_close_r+0x1c>)
 80057d8:	2300      	movs	r3, #0
 80057da:	4604      	mov	r4, r0
 80057dc:	4608      	mov	r0, r1
 80057de:	602b      	str	r3, [r5, #0]
 80057e0:	f7fb fc69 	bl	80010b6 <_close>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d102      	bne.n	80057ee <_close_r+0x1a>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	b103      	cbz	r3, 80057ee <_close_r+0x1a>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	200087c0 	.word	0x200087c0

080057f4 <__sflush_r>:
 80057f4:	898a      	ldrh	r2, [r1, #12]
 80057f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fa:	4605      	mov	r5, r0
 80057fc:	0710      	lsls	r0, r2, #28
 80057fe:	460c      	mov	r4, r1
 8005800:	d458      	bmi.n	80058b4 <__sflush_r+0xc0>
 8005802:	684b      	ldr	r3, [r1, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	dc05      	bgt.n	8005814 <__sflush_r+0x20>
 8005808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	dc02      	bgt.n	8005814 <__sflush_r+0x20>
 800580e:	2000      	movs	r0, #0
 8005810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005816:	2e00      	cmp	r6, #0
 8005818:	d0f9      	beq.n	800580e <__sflush_r+0x1a>
 800581a:	2300      	movs	r3, #0
 800581c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005820:	682f      	ldr	r7, [r5, #0]
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	d032      	beq.n	800588c <__sflush_r+0x98>
 8005826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	075a      	lsls	r2, r3, #29
 800582c:	d505      	bpl.n	800583a <__sflush_r+0x46>
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	1ac0      	subs	r0, r0, r3
 8005832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005834:	b10b      	cbz	r3, 800583a <__sflush_r+0x46>
 8005836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005838:	1ac0      	subs	r0, r0, r3
 800583a:	2300      	movs	r3, #0
 800583c:	4602      	mov	r2, r0
 800583e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005840:	6a21      	ldr	r1, [r4, #32]
 8005842:	4628      	mov	r0, r5
 8005844:	47b0      	blx	r6
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	d106      	bne.n	800585a <__sflush_r+0x66>
 800584c:	6829      	ldr	r1, [r5, #0]
 800584e:	291d      	cmp	r1, #29
 8005850:	d82c      	bhi.n	80058ac <__sflush_r+0xb8>
 8005852:	4a2a      	ldr	r2, [pc, #168]	; (80058fc <__sflush_r+0x108>)
 8005854:	40ca      	lsrs	r2, r1
 8005856:	07d6      	lsls	r6, r2, #31
 8005858:	d528      	bpl.n	80058ac <__sflush_r+0xb8>
 800585a:	2200      	movs	r2, #0
 800585c:	6062      	str	r2, [r4, #4]
 800585e:	04d9      	lsls	r1, r3, #19
 8005860:	6922      	ldr	r2, [r4, #16]
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	d504      	bpl.n	8005870 <__sflush_r+0x7c>
 8005866:	1c42      	adds	r2, r0, #1
 8005868:	d101      	bne.n	800586e <__sflush_r+0x7a>
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	b903      	cbnz	r3, 8005870 <__sflush_r+0x7c>
 800586e:	6560      	str	r0, [r4, #84]	; 0x54
 8005870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005872:	602f      	str	r7, [r5, #0]
 8005874:	2900      	cmp	r1, #0
 8005876:	d0ca      	beq.n	800580e <__sflush_r+0x1a>
 8005878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800587c:	4299      	cmp	r1, r3
 800587e:	d002      	beq.n	8005886 <__sflush_r+0x92>
 8005880:	4628      	mov	r0, r5
 8005882:	f000 f8fb 	bl	8005a7c <_free_r>
 8005886:	2000      	movs	r0, #0
 8005888:	6360      	str	r0, [r4, #52]	; 0x34
 800588a:	e7c1      	b.n	8005810 <__sflush_r+0x1c>
 800588c:	6a21      	ldr	r1, [r4, #32]
 800588e:	2301      	movs	r3, #1
 8005890:	4628      	mov	r0, r5
 8005892:	47b0      	blx	r6
 8005894:	1c41      	adds	r1, r0, #1
 8005896:	d1c7      	bne.n	8005828 <__sflush_r+0x34>
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0c4      	beq.n	8005828 <__sflush_r+0x34>
 800589e:	2b1d      	cmp	r3, #29
 80058a0:	d001      	beq.n	80058a6 <__sflush_r+0xb2>
 80058a2:	2b16      	cmp	r3, #22
 80058a4:	d101      	bne.n	80058aa <__sflush_r+0xb6>
 80058a6:	602f      	str	r7, [r5, #0]
 80058a8:	e7b1      	b.n	800580e <__sflush_r+0x1a>
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	e7ad      	b.n	8005810 <__sflush_r+0x1c>
 80058b4:	690f      	ldr	r7, [r1, #16]
 80058b6:	2f00      	cmp	r7, #0
 80058b8:	d0a9      	beq.n	800580e <__sflush_r+0x1a>
 80058ba:	0793      	lsls	r3, r2, #30
 80058bc:	680e      	ldr	r6, [r1, #0]
 80058be:	bf08      	it	eq
 80058c0:	694b      	ldreq	r3, [r1, #20]
 80058c2:	600f      	str	r7, [r1, #0]
 80058c4:	bf18      	it	ne
 80058c6:	2300      	movne	r3, #0
 80058c8:	eba6 0807 	sub.w	r8, r6, r7
 80058cc:	608b      	str	r3, [r1, #8]
 80058ce:	f1b8 0f00 	cmp.w	r8, #0
 80058d2:	dd9c      	ble.n	800580e <__sflush_r+0x1a>
 80058d4:	6a21      	ldr	r1, [r4, #32]
 80058d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058d8:	4643      	mov	r3, r8
 80058da:	463a      	mov	r2, r7
 80058dc:	4628      	mov	r0, r5
 80058de:	47b0      	blx	r6
 80058e0:	2800      	cmp	r0, #0
 80058e2:	dc06      	bgt.n	80058f2 <__sflush_r+0xfe>
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ea:	81a3      	strh	r3, [r4, #12]
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f0:	e78e      	b.n	8005810 <__sflush_r+0x1c>
 80058f2:	4407      	add	r7, r0
 80058f4:	eba8 0800 	sub.w	r8, r8, r0
 80058f8:	e7e9      	b.n	80058ce <__sflush_r+0xda>
 80058fa:	bf00      	nop
 80058fc:	20400001 	.word	0x20400001

08005900 <_fflush_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	690b      	ldr	r3, [r1, #16]
 8005904:	4605      	mov	r5, r0
 8005906:	460c      	mov	r4, r1
 8005908:	b913      	cbnz	r3, 8005910 <_fflush_r+0x10>
 800590a:	2500      	movs	r5, #0
 800590c:	4628      	mov	r0, r5
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	b118      	cbz	r0, 800591a <_fflush_r+0x1a>
 8005912:	6983      	ldr	r3, [r0, #24]
 8005914:	b90b      	cbnz	r3, 800591a <_fflush_r+0x1a>
 8005916:	f7ff fa4f 	bl	8004db8 <__sinit>
 800591a:	4b14      	ldr	r3, [pc, #80]	; (800596c <_fflush_r+0x6c>)
 800591c:	429c      	cmp	r4, r3
 800591e:	d11b      	bne.n	8005958 <_fflush_r+0x58>
 8005920:	686c      	ldr	r4, [r5, #4]
 8005922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0ef      	beq.n	800590a <_fflush_r+0xa>
 800592a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800592c:	07d0      	lsls	r0, r2, #31
 800592e:	d404      	bmi.n	800593a <_fflush_r+0x3a>
 8005930:	0599      	lsls	r1, r3, #22
 8005932:	d402      	bmi.n	800593a <_fflush_r+0x3a>
 8005934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005936:	f7ff fadd 	bl	8004ef4 <__retarget_lock_acquire_recursive>
 800593a:	4628      	mov	r0, r5
 800593c:	4621      	mov	r1, r4
 800593e:	f7ff ff59 	bl	80057f4 <__sflush_r>
 8005942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005944:	07da      	lsls	r2, r3, #31
 8005946:	4605      	mov	r5, r0
 8005948:	d4e0      	bmi.n	800590c <_fflush_r+0xc>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	059b      	lsls	r3, r3, #22
 800594e:	d4dd      	bmi.n	800590c <_fflush_r+0xc>
 8005950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005952:	f7ff fad0 	bl	8004ef6 <__retarget_lock_release_recursive>
 8005956:	e7d9      	b.n	800590c <_fflush_r+0xc>
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <_fflush_r+0x70>)
 800595a:	429c      	cmp	r4, r3
 800595c:	d101      	bne.n	8005962 <_fflush_r+0x62>
 800595e:	68ac      	ldr	r4, [r5, #8]
 8005960:	e7df      	b.n	8005922 <_fflush_r+0x22>
 8005962:	4b04      	ldr	r3, [pc, #16]	; (8005974 <_fflush_r+0x74>)
 8005964:	429c      	cmp	r4, r3
 8005966:	bf08      	it	eq
 8005968:	68ec      	ldreq	r4, [r5, #12]
 800596a:	e7da      	b.n	8005922 <_fflush_r+0x22>
 800596c:	08005c04 	.word	0x08005c04
 8005970:	08005c24 	.word	0x08005c24
 8005974:	08005be4 	.word	0x08005be4

08005978 <_lseek_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4d07      	ldr	r5, [pc, #28]	; (8005998 <_lseek_r+0x20>)
 800597c:	4604      	mov	r4, r0
 800597e:	4608      	mov	r0, r1
 8005980:	4611      	mov	r1, r2
 8005982:	2200      	movs	r2, #0
 8005984:	602a      	str	r2, [r5, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	f7fb fbbc 	bl	8001104 <_lseek>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_lseek_r+0x1e>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_lseek_r+0x1e>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	200087c0 	.word	0x200087c0

0800599c <__swhatbuf_r>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	460e      	mov	r6, r1
 80059a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a4:	2900      	cmp	r1, #0
 80059a6:	b096      	sub	sp, #88	; 0x58
 80059a8:	4614      	mov	r4, r2
 80059aa:	461d      	mov	r5, r3
 80059ac:	da07      	bge.n	80059be <__swhatbuf_r+0x22>
 80059ae:	2300      	movs	r3, #0
 80059b0:	602b      	str	r3, [r5, #0]
 80059b2:	89b3      	ldrh	r3, [r6, #12]
 80059b4:	061a      	lsls	r2, r3, #24
 80059b6:	d410      	bmi.n	80059da <__swhatbuf_r+0x3e>
 80059b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059bc:	e00e      	b.n	80059dc <__swhatbuf_r+0x40>
 80059be:	466a      	mov	r2, sp
 80059c0:	f000 f8be 	bl	8005b40 <_fstat_r>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	dbf2      	blt.n	80059ae <__swhatbuf_r+0x12>
 80059c8:	9a01      	ldr	r2, [sp, #4]
 80059ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059d2:	425a      	negs	r2, r3
 80059d4:	415a      	adcs	r2, r3
 80059d6:	602a      	str	r2, [r5, #0]
 80059d8:	e7ee      	b.n	80059b8 <__swhatbuf_r+0x1c>
 80059da:	2340      	movs	r3, #64	; 0x40
 80059dc:	2000      	movs	r0, #0
 80059de:	6023      	str	r3, [r4, #0]
 80059e0:	b016      	add	sp, #88	; 0x58
 80059e2:	bd70      	pop	{r4, r5, r6, pc}

080059e4 <__smakebuf_r>:
 80059e4:	898b      	ldrh	r3, [r1, #12]
 80059e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059e8:	079d      	lsls	r5, r3, #30
 80059ea:	4606      	mov	r6, r0
 80059ec:	460c      	mov	r4, r1
 80059ee:	d507      	bpl.n	8005a00 <__smakebuf_r+0x1c>
 80059f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	6123      	str	r3, [r4, #16]
 80059f8:	2301      	movs	r3, #1
 80059fa:	6163      	str	r3, [r4, #20]
 80059fc:	b002      	add	sp, #8
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	ab01      	add	r3, sp, #4
 8005a02:	466a      	mov	r2, sp
 8005a04:	f7ff ffca 	bl	800599c <__swhatbuf_r>
 8005a08:	9900      	ldr	r1, [sp, #0]
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f7ff fa73 	bl	8004ef8 <_malloc_r>
 8005a12:	b948      	cbnz	r0, 8005a28 <__smakebuf_r+0x44>
 8005a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a18:	059a      	lsls	r2, r3, #22
 8005a1a:	d4ef      	bmi.n	80059fc <__smakebuf_r+0x18>
 8005a1c:	f023 0303 	bic.w	r3, r3, #3
 8005a20:	f043 0302 	orr.w	r3, r3, #2
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	e7e3      	b.n	80059f0 <__smakebuf_r+0xc>
 8005a28:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <__smakebuf_r+0x7c>)
 8005a2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	6020      	str	r0, [r4, #0]
 8005a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a34:	81a3      	strh	r3, [r4, #12]
 8005a36:	9b00      	ldr	r3, [sp, #0]
 8005a38:	6163      	str	r3, [r4, #20]
 8005a3a:	9b01      	ldr	r3, [sp, #4]
 8005a3c:	6120      	str	r0, [r4, #16]
 8005a3e:	b15b      	cbz	r3, 8005a58 <__smakebuf_r+0x74>
 8005a40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a44:	4630      	mov	r0, r6
 8005a46:	f000 f88d 	bl	8005b64 <_isatty_r>
 8005a4a:	b128      	cbz	r0, 8005a58 <__smakebuf_r+0x74>
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	f023 0303 	bic.w	r3, r3, #3
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	81a3      	strh	r3, [r4, #12]
 8005a58:	89a0      	ldrh	r0, [r4, #12]
 8005a5a:	4305      	orrs	r5, r0
 8005a5c:	81a5      	strh	r5, [r4, #12]
 8005a5e:	e7cd      	b.n	80059fc <__smakebuf_r+0x18>
 8005a60:	08004d51 	.word	0x08004d51

08005a64 <__malloc_lock>:
 8005a64:	4801      	ldr	r0, [pc, #4]	; (8005a6c <__malloc_lock+0x8>)
 8005a66:	f7ff ba45 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 8005a6a:	bf00      	nop
 8005a6c:	200087b8 	.word	0x200087b8

08005a70 <__malloc_unlock>:
 8005a70:	4801      	ldr	r0, [pc, #4]	; (8005a78 <__malloc_unlock+0x8>)
 8005a72:	f7ff ba40 	b.w	8004ef6 <__retarget_lock_release_recursive>
 8005a76:	bf00      	nop
 8005a78:	200087b8 	.word	0x200087b8

08005a7c <_free_r>:
 8005a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a7e:	2900      	cmp	r1, #0
 8005a80:	d048      	beq.n	8005b14 <_free_r+0x98>
 8005a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a86:	9001      	str	r0, [sp, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f1a1 0404 	sub.w	r4, r1, #4
 8005a8e:	bfb8      	it	lt
 8005a90:	18e4      	addlt	r4, r4, r3
 8005a92:	f7ff ffe7 	bl	8005a64 <__malloc_lock>
 8005a96:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <_free_r+0x9c>)
 8005a98:	9801      	ldr	r0, [sp, #4]
 8005a9a:	6813      	ldr	r3, [r2, #0]
 8005a9c:	4615      	mov	r5, r2
 8005a9e:	b933      	cbnz	r3, 8005aae <_free_r+0x32>
 8005aa0:	6063      	str	r3, [r4, #4]
 8005aa2:	6014      	str	r4, [r2, #0]
 8005aa4:	b003      	add	sp, #12
 8005aa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aaa:	f7ff bfe1 	b.w	8005a70 <__malloc_unlock>
 8005aae:	42a3      	cmp	r3, r4
 8005ab0:	d90b      	bls.n	8005aca <_free_r+0x4e>
 8005ab2:	6821      	ldr	r1, [r4, #0]
 8005ab4:	1862      	adds	r2, r4, r1
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	bf04      	itt	eq
 8005aba:	681a      	ldreq	r2, [r3, #0]
 8005abc:	685b      	ldreq	r3, [r3, #4]
 8005abe:	6063      	str	r3, [r4, #4]
 8005ac0:	bf04      	itt	eq
 8005ac2:	1852      	addeq	r2, r2, r1
 8005ac4:	6022      	streq	r2, [r4, #0]
 8005ac6:	602c      	str	r4, [r5, #0]
 8005ac8:	e7ec      	b.n	8005aa4 <_free_r+0x28>
 8005aca:	461a      	mov	r2, r3
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	b10b      	cbz	r3, 8005ad4 <_free_r+0x58>
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	d9fa      	bls.n	8005aca <_free_r+0x4e>
 8005ad4:	6811      	ldr	r1, [r2, #0]
 8005ad6:	1855      	adds	r5, r2, r1
 8005ad8:	42a5      	cmp	r5, r4
 8005ada:	d10b      	bne.n	8005af4 <_free_r+0x78>
 8005adc:	6824      	ldr	r4, [r4, #0]
 8005ade:	4421      	add	r1, r4
 8005ae0:	1854      	adds	r4, r2, r1
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	6011      	str	r1, [r2, #0]
 8005ae6:	d1dd      	bne.n	8005aa4 <_free_r+0x28>
 8005ae8:	681c      	ldr	r4, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	6053      	str	r3, [r2, #4]
 8005aee:	4421      	add	r1, r4
 8005af0:	6011      	str	r1, [r2, #0]
 8005af2:	e7d7      	b.n	8005aa4 <_free_r+0x28>
 8005af4:	d902      	bls.n	8005afc <_free_r+0x80>
 8005af6:	230c      	movs	r3, #12
 8005af8:	6003      	str	r3, [r0, #0]
 8005afa:	e7d3      	b.n	8005aa4 <_free_r+0x28>
 8005afc:	6825      	ldr	r5, [r4, #0]
 8005afe:	1961      	adds	r1, r4, r5
 8005b00:	428b      	cmp	r3, r1
 8005b02:	bf04      	itt	eq
 8005b04:	6819      	ldreq	r1, [r3, #0]
 8005b06:	685b      	ldreq	r3, [r3, #4]
 8005b08:	6063      	str	r3, [r4, #4]
 8005b0a:	bf04      	itt	eq
 8005b0c:	1949      	addeq	r1, r1, r5
 8005b0e:	6021      	streq	r1, [r4, #0]
 8005b10:	6054      	str	r4, [r2, #4]
 8005b12:	e7c7      	b.n	8005aa4 <_free_r+0x28>
 8005b14:	b003      	add	sp, #12
 8005b16:	bd30      	pop	{r4, r5, pc}
 8005b18:	200004bc 	.word	0x200004bc

08005b1c <_read_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	4d07      	ldr	r5, [pc, #28]	; (8005b3c <_read_r+0x20>)
 8005b20:	4604      	mov	r4, r0
 8005b22:	4608      	mov	r0, r1
 8005b24:	4611      	mov	r1, r2
 8005b26:	2200      	movs	r2, #0
 8005b28:	602a      	str	r2, [r5, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f7fb faa6 	bl	800107c <_read>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d102      	bne.n	8005b3a <_read_r+0x1e>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	b103      	cbz	r3, 8005b3a <_read_r+0x1e>
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	200087c0 	.word	0x200087c0

08005b40 <_fstat_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d07      	ldr	r5, [pc, #28]	; (8005b60 <_fstat_r+0x20>)
 8005b44:	2300      	movs	r3, #0
 8005b46:	4604      	mov	r4, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	602b      	str	r3, [r5, #0]
 8005b4e:	f7fb fabe 	bl	80010ce <_fstat>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	d102      	bne.n	8005b5c <_fstat_r+0x1c>
 8005b56:	682b      	ldr	r3, [r5, #0]
 8005b58:	b103      	cbz	r3, 8005b5c <_fstat_r+0x1c>
 8005b5a:	6023      	str	r3, [r4, #0]
 8005b5c:	bd38      	pop	{r3, r4, r5, pc}
 8005b5e:	bf00      	nop
 8005b60:	200087c0 	.word	0x200087c0

08005b64 <_isatty_r>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	4d06      	ldr	r5, [pc, #24]	; (8005b80 <_isatty_r+0x1c>)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	4608      	mov	r0, r1
 8005b6e:	602b      	str	r3, [r5, #0]
 8005b70:	f7fb fabd 	bl	80010ee <_isatty>
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	d102      	bne.n	8005b7e <_isatty_r+0x1a>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	b103      	cbz	r3, 8005b7e <_isatty_r+0x1a>
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	bd38      	pop	{r3, r4, r5, pc}
 8005b80:	200087c0 	.word	0x200087c0

08005b84 <_init>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	bf00      	nop
 8005b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8a:	bc08      	pop	{r3}
 8005b8c:	469e      	mov	lr, r3
 8005b8e:	4770      	bx	lr

08005b90 <_fini>:
 8005b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b92:	bf00      	nop
 8005b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b96:	bc08      	pop	{r3}
 8005b98:	469e      	mov	lr, r3
 8005b9a:	4770      	bx	lr
