
F405_LQFP64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800a478  0800a478  0001a478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a728  0800a728  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a728  0800a728  0001a728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a730  0800a730  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a730  0800a730  0001a730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a734  0800a734  0001a734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800a738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c60  20000084  0800a7bc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008ce4  0800a7bc  00028ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000262df  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f66  00000000  00000000  00046393  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016b8  00000000  00000000  0004b300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001460  00000000  00000000  0004c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000278b8  00000000  00000000  0004de18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fe0f  00000000  00000000  000756d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce79b  00000000  00000000  000954df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00000164  00000000  00000000  00163c7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062fc  00000000  00000000  00163de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000005bb  00000000  00000000  0016a0dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a460 	.word	0x0800a460

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800a460 	.word	0x0800a460

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800057a:	4b2f      	ldr	r3, [pc, #188]	; (8000638 <MX_ADC1_Init+0xd0>)
 800057c:	4a2f      	ldr	r2, [pc, #188]	; (800063c <MX_ADC1_Init+0xd4>)
 800057e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000580:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <MX_ADC1_Init+0xd0>)
 8000582:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000586:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000588:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <MX_ADC1_Init+0xd0>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800058e:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <MX_ADC1_Init+0xd0>)
 8000590:	2201      	movs	r2, #1
 8000592:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <MX_ADC1_Init+0xd0>)
 8000596:	2201      	movs	r2, #1
 8000598:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800059a:	4b27      	ldr	r3, [pc, #156]	; (8000638 <MX_ADC1_Init+0xd0>)
 800059c:	2200      	movs	r2, #0
 800059e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a8:	4b23      	ldr	r3, [pc, #140]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005aa:	4a25      	ldr	r2, [pc, #148]	; (8000640 <MX_ADC1_Init+0xd8>)
 80005ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005bc:	2201      	movs	r2, #1
 80005be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c8:	481b      	ldr	r0, [pc, #108]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005ca:	f001 f8ff 	bl	80017cc <HAL_ADC_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005d4:	f000 fcd8 	bl	8000f88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80005e0:	2307      	movs	r3, #7
 80005e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	4813      	ldr	r0, [pc, #76]	; (8000638 <MX_ADC1_Init+0xd0>)
 80005ea:	f001 fa39 	bl	8001a60 <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005f4:	f000 fcc8 	bl	8000f88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005f8:	2301      	movs	r3, #1
 80005fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <MX_ADC1_Init+0xd0>)
 8000606:	f001 fa2b 	bl	8001a60 <HAL_ADC_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000610:	f000 fcba 	bl	8000f88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000614:	2302      	movs	r3, #2
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000618:	2303      	movs	r3, #3
 800061a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_ADC1_Init+0xd0>)
 8000622:	f001 fa1d 	bl	8001a60 <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800062c:	f000 fcac 	bl	8000f88 <Error_Handler>
  }

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200004f8 	.word	0x200004f8
 800063c:	40012000 	.word	0x40012000
 8000640:	0f000001 	.word	0x0f000001

08000644 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a2f      	ldr	r2, [pc, #188]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d157      	bne.n	8000716 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	4a2d      	ldr	r2, [pc, #180]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 8000670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000674:	6453      	str	r3, [r2, #68]	; 0x44
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b27      	ldr	r3, [pc, #156]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a26      	ldr	r2, [pc, #152]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = FootExp_IN_Pin|UserPotA_IN_Pin|UserPotB_IN_Pin;
 800069e:	2307      	movs	r3, #7
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	481d      	ldr	r0, [pc, #116]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006b2:	f002 f8f7 	bl	80028a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <HAL_ADC_MspInit+0xec>)
 80006ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006fc:	f001 fd62 	bl	80021c4 <HAL_DMA_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000706:	f000 fc3f 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a07      	ldr	r2, [pc, #28]	; (800072c <HAL_ADC_MspInit+0xe8>)
 800070e:	639a      	str	r2, [r3, #56]	; 0x38
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <HAL_ADC_MspInit+0xe8>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40012000 	.word	0x40012000
 8000724:	40023800 	.word	0x40023800
 8000728:	40020000 	.word	0x40020000
 800072c:	20000540 	.word	0x20000540
 8000730:	40026410 	.word	0x40026410

08000734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_DMA_Init+0x78>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <MX_DMA_Init+0x78>)
 8000744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_DMA_Init+0x78>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_DMA_Init+0x78>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_DMA_Init+0x78>)
 8000760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_DMA_Init+0x78>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	200e      	movs	r0, #14
 8000778:	f001 fced 	bl	8002156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800077c:	200e      	movs	r0, #14
 800077e:	f001 fd06 	bl	800218e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	200f      	movs	r0, #15
 8000788:	f001 fce5 	bl	8002156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800078c:	200f      	movs	r0, #15
 800078e:	f001 fcfe 	bl	800218e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	2038      	movs	r0, #56	; 0x38
 8000798:	f001 fcdd 	bl	8002156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800079c:	2038      	movs	r0, #56	; 0x38
 800079e:	f001 fcf6 	bl	800218e <HAL_NVIC_EnableIRQ>

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b51      	ldr	r3, [pc, #324]	; (8000910 <MX_GPIO_Init+0x160>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a50      	ldr	r2, [pc, #320]	; (8000910 <MX_GPIO_Init+0x160>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b4e      	ldr	r3, [pc, #312]	; (8000910 <MX_GPIO_Init+0x160>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b4a      	ldr	r3, [pc, #296]	; (8000910 <MX_GPIO_Init+0x160>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a49      	ldr	r2, [pc, #292]	; (8000910 <MX_GPIO_Init+0x160>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b47      	ldr	r3, [pc, #284]	; (8000910 <MX_GPIO_Init+0x160>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b43      	ldr	r3, [pc, #268]	; (8000910 <MX_GPIO_Init+0x160>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a42      	ldr	r2, [pc, #264]	; (8000910 <MX_GPIO_Init+0x160>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b40      	ldr	r3, [pc, #256]	; (8000910 <MX_GPIO_Init+0x160>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b3c      	ldr	r3, [pc, #240]	; (8000910 <MX_GPIO_Init+0x160>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a3b      	ldr	r2, [pc, #236]	; (8000910 <MX_GPIO_Init+0x160>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b39      	ldr	r3, [pc, #228]	; (8000910 <MX_GPIO_Init+0x160>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(relay_switch_GPIO_Port, relay_switch_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2101      	movs	r1, #1
 800083a:	4836      	ldr	r0, [pc, #216]	; (8000914 <MX_GPIO_Init+0x164>)
 800083c:	f002 f9e6 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_RED_Pin|LEDA_BLUE_Pin|LEDA_GREEN_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2107      	movs	r1, #7
 8000844:	4834      	ldr	r0, [pc, #208]	; (8000918 <MX_GPIO_Init+0x168>)
 8000846:	f002 f9e1 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDB_RED_Pin|LEDB_BLUE_Pin|LEDB_GREEN_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000850:	4832      	ldr	r0, [pc, #200]	; (800091c <MX_GPIO_Init+0x16c>)
 8000852:	f002 f9db 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = foot_switch1_Pin|foot_switch2_Pin;
 8000856:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085c:	4b30      	ldr	r3, [pc, #192]	; (8000920 <MX_GPIO_Init+0x170>)
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000860:	2301      	movs	r3, #1
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	482a      	ldr	r0, [pc, #168]	; (8000914 <MX_GPIO_Init+0x164>)
 800086c:	f002 f81a 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = relay_switch_Pin;
 8000870:	2301      	movs	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(relay_switch_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4823      	ldr	r0, [pc, #140]	; (8000914 <MX_GPIO_Init+0x164>)
 8000888:	f002 f80c 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = user_switch2_Pin|user_switch1_Pin;
 800088c:	2306      	movs	r3, #6
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	481d      	ldr	r0, [pc, #116]	; (8000914 <MX_GPIO_Init+0x164>)
 80008a0:	f002 f800 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEDA_RED_Pin|LEDA_BLUE_Pin|LEDA_GREEN_Pin;
 80008a4:	2307      	movs	r3, #7
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4817      	ldr	r0, [pc, #92]	; (8000918 <MX_GPIO_Init+0x168>)
 80008bc:	f001 fff2 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_Detect_Pin;
 80008c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_Detect_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4811      	ldr	r0, [pc, #68]	; (800091c <MX_GPIO_Init+0x16c>)
 80008d6:	f001 ffe5 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LEDB_RED_Pin|LEDB_BLUE_Pin|LEDB_GREEN_Pin;
 80008da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	480a      	ldr	r0, [pc, #40]	; (800091c <MX_GPIO_Init+0x16c>)
 80008f4:	f001 ffd6 	bl	80028a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	2028      	movs	r0, #40	; 0x28
 80008fe:	f001 fc2a 	bl	8002156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000902:	2028      	movs	r0, #40	; 0x28
 8000904:	f001 fc43 	bl	800218e <HAL_NVIC_EnableIRQ>

}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40020800 	.word	0x40020800
 8000918:	40020400 	.word	0x40020400
 800091c:	40020000 	.word	0x40020000
 8000920:	10210000 	.word	0x10210000

08000924 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_i2s2_ext_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_I2S2_Init+0x54>)
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <MX_I2S2_Init+0x58>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_I2S2_Init+0x54>)
 8000930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000934:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_I2S2_Init+0x54>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_I2S2_Init+0x54>)
 800093e:	2203      	movs	r2, #3
 8000940:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_I2S2_Init+0x54>)
 8000944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000948:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_I2S2_Init+0x54>)
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <MX_I2S2_Init+0x5c>)
 800094e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_I2S2_Init+0x54>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_I2S2_Init+0x54>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_I2S2_Init+0x54>)
 800095e:	2201      	movs	r2, #1
 8000960:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_I2S2_Init+0x54>)
 8000964:	f002 f99e 	bl	8002ca4 <HAL_I2S_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800096e:	f000 fb0b 	bl	8000f88 <Error_Handler>
  }

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000660 	.word	0x20000660
 800097c:	40003800 	.word	0x40003800
 8000980:	00017700 	.word	0x00017700

08000984 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a63      	ldr	r2, [pc, #396]	; (8000b30 <HAL_I2S_MspInit+0x1ac>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	f040 80bf 	bne.w	8000b26 <HAL_I2S_MspInit+0x1a2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	4b61      	ldr	r3, [pc, #388]	; (8000b34 <HAL_I2S_MspInit+0x1b0>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	4a60      	ldr	r2, [pc, #384]	; (8000b34 <HAL_I2S_MspInit+0x1b0>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b6:	6413      	str	r3, [r2, #64]	; 0x40
 80009b8:	4b5e      	ldr	r3, [pc, #376]	; (8000b34 <HAL_I2S_MspInit+0x1b0>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	4b5a      	ldr	r3, [pc, #360]	; (8000b34 <HAL_I2S_MspInit+0x1b0>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	4a59      	ldr	r2, [pc, #356]	; (8000b34 <HAL_I2S_MspInit+0x1b0>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	6313      	str	r3, [r2, #48]	; 0x30
 80009d4:	4b57      	ldr	r3, [pc, #348]	; (8000b34 <HAL_I2S_MspInit+0x1b0>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	4b53      	ldr	r3, [pc, #332]	; (8000b34 <HAL_I2S_MspInit+0x1b0>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	4a52      	ldr	r2, [pc, #328]	; (8000b34 <HAL_I2S_MspInit+0x1b0>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6313      	str	r3, [r2, #48]	; 0x30
 80009f0:	4b50      	ldr	r3, [pc, #320]	; (8000b34 <HAL_I2S_MspInit+0x1b0>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80009fc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4847      	ldr	r0, [pc, #284]	; (8000b38 <HAL_I2S_MspInit+0x1b4>)
 8000a1a:	f001 ff43 	bl	80028a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000a30:	2306      	movs	r3, #6
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	483f      	ldr	r0, [pc, #252]	; (8000b38 <HAL_I2S_MspInit+0x1b4>)
 8000a3c:	f001 ff32 	bl	80028a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a40:	2340      	movs	r3, #64	; 0x40
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a50:	2305      	movs	r3, #5
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4838      	ldr	r0, [pc, #224]	; (8000b3c <HAL_I2S_MspInit+0x1b8>)
 8000a5c:	f001 ff22 	bl	80028a4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000a60:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <HAL_I2S_MspInit+0x1bc>)
 8000a62:	4a38      	ldr	r2, [pc, #224]	; (8000b44 <HAL_I2S_MspInit+0x1c0>)
 8000a64:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000a66:	4b36      	ldr	r3, [pc, #216]	; (8000b40 <HAL_I2S_MspInit+0x1bc>)
 8000a68:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a6c:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a6e:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <HAL_I2S_MspInit+0x1bc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a74:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <HAL_I2S_MspInit+0x1bc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <HAL_I2S_MspInit+0x1bc>)
 8000a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a80:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a82:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <HAL_I2S_MspInit+0x1bc>)
 8000a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a88:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a8a:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <HAL_I2S_MspInit+0x1bc>)
 8000a8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a90:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <HAL_I2S_MspInit+0x1bc>)
 8000a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a98:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <HAL_I2S_MspInit+0x1bc>)
 8000a9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000aa0:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aa2:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <HAL_I2S_MspInit+0x1bc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000aa8:	4825      	ldr	r0, [pc, #148]	; (8000b40 <HAL_I2S_MspInit+0x1bc>)
 8000aaa:	f001 fb8b 	bl	80021c4 <HAL_DMA_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_I2S_MspInit+0x134>
    {
      Error_Handler();
 8000ab4:	f000 fa68 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s2_ext_rx);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <HAL_I2S_MspInit+0x1bc>)
 8000abc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000abe:	4a20      	ldr	r2, [pc, #128]	; (8000b40 <HAL_I2S_MspInit+0x1bc>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <HAL_I2S_MspInit+0x1c4>)
 8000ac6:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <HAL_I2S_MspInit+0x1c8>)
 8000ac8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <HAL_I2S_MspInit+0x1c4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_I2S_MspInit+0x1c4>)
 8000ad2:	2240      	movs	r2, #64	; 0x40
 8000ad4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <HAL_I2S_MspInit+0x1c4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <HAL_I2S_MspInit+0x1c4>)
 8000ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_I2S_MspInit+0x1c4>)
 8000ae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aea:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_I2S_MspInit+0x1c4>)
 8000aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_I2S_MspInit+0x1c4>)
 8000af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000afa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_I2S_MspInit+0x1c4>)
 8000afe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b02:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_I2S_MspInit+0x1c4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b0a:	480f      	ldr	r0, [pc, #60]	; (8000b48 <HAL_I2S_MspInit+0x1c4>)
 8000b0c:	f001 fb5a 	bl	80021c4 <HAL_DMA_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_I2S_MspInit+0x196>
    {
      Error_Handler();
 8000b16:	f000 fa37 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_I2S_MspInit+0x1c4>)
 8000b1e:	639a      	str	r2, [r3, #56]	; 0x38
 8000b20:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <HAL_I2S_MspInit+0x1c4>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	; 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40003800 	.word	0x40003800
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	200005a0 	.word	0x200005a0
 8000b44:	40026058 	.word	0x40026058
 8000b48:	20000600 	.word	0x20000600
 8000b4c:	40026070 	.word	0x40026070

08000b50 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  (void) file;  /// Not used, avoid warning
  SEGGER_RTT_Write(0, ptr, len);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	2000      	movs	r0, #0
 8000b64:	f008 fb74 	bl	8009250 <SEGGER_RTT_Write>
  return len;
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_I2SEx_TxRxHalfCpltCallback>:
}

#endif // REAL_FFT

#ifdef IIR_BIQUAD
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

	callback_state = 1;
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]

}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	200000a0 	.word	0x200000a0

08000b94 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

	callback_state = 2;
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	701a      	strb	r2, [r3, #0]

}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200000a0 	.word	0x200000a0

08000bb4 <do_iir_init>:

void do_iir_init()
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_l, 1, &iir_coeffs[0], &iir_l_state[0]);
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <do_iir_init+0x30>)
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <do_iir_init+0x34>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	480b      	ldr	r0, [pc, #44]	; (8000bec <do_iir_init+0x38>)
 8000bc0:	f008 fbdc 	bl	800937c <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_r, 1, &iir_coeffs[0], &iir_r_state[0]);
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <do_iir_init+0x3c>)
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <do_iir_init+0x34>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <do_iir_init+0x40>)
 8000bcc:	f008 fbd6 	bl	800937c <arm_biquad_cascade_df1_init_f32>


  //int res = testfunc();
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 8000bd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bd4:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <do_iir_init+0x44>)
 8000bd6:	4909      	ldr	r1, [pc, #36]	; (8000bfc <do_iir_init+0x48>)
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <do_iir_init+0x4c>)
 8000bda:	f002 faa9 	bl	8003130 <HAL_I2SEx_TransmitReceive_DMA>


}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200046b8 	.word	0x200046b8
 8000be8:	20000000 	.word	0x20000000
 8000bec:	200006a8 	.word	0x200006a8
 8000bf0:	200076dc 	.word	0x200076dc
 8000bf4:	200086f0 	.word	0x200086f0
 8000bf8:	200056c8 	.word	0x200056c8
 8000bfc:	200016b8 	.word	0x200016b8
 8000c00:	20000660 	.word	0x20000660

08000c04 <do_iir_loop>:

void do_iir_loop()
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  if (callback_state != 0) {
 8000c0a:	4b72      	ldr	r3, [pc, #456]	; (8000dd4 <do_iir_loop+0x1d0>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f000 80db 	beq.w	8000dca <do_iir_loop+0x1c6>

	  //decide if it was half or cplt callback
	  if (callback_state == 1)   {
 8000c14:	4b6f      	ldr	r3, [pc, #444]	; (8000dd4 <do_iir_loop+0x1d0>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d109      	bne.n	8000c30 <do_iir_loop+0x2c>
			  offset_r_ptr = 0;
 8000c1c:	4b6e      	ldr	r3, [pc, #440]	; (8000dd8 <do_iir_loop+0x1d4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
			  offset_w_ptr = 0;
 8000c22:	4b6e      	ldr	r3, [pc, #440]	; (8000ddc <do_iir_loop+0x1d8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
			  w_ptr = 0;
 8000c28:	4b6d      	ldr	r3, [pc, #436]	; (8000de0 <do_iir_loop+0x1dc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	e00f      	b.n	8000c50 <do_iir_loop+0x4c>
	  }

	  else if (callback_state == 2) {
 8000c30:	4b68      	ldr	r3, [pc, #416]	; (8000dd4 <do_iir_loop+0x1d0>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d10b      	bne.n	8000c50 <do_iir_loop+0x4c>
		  offset_r_ptr = BLOCK_SIZE_U16;
 8000c38:	4b67      	ldr	r3, [pc, #412]	; (8000dd8 <do_iir_loop+0x1d4>)
 8000c3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c3e:	601a      	str	r2, [r3, #0]
		  offset_w_ptr = BLOCK_SIZE_FLOAT;
 8000c40:	4b66      	ldr	r3, [pc, #408]	; (8000ddc <do_iir_loop+0x1d8>)
 8000c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c46:	601a      	str	r2, [r3, #0]
		  w_ptr = BLOCK_SIZE_FLOAT;
 8000c48:	4b65      	ldr	r3, [pc, #404]	; (8000de0 <do_iir_loop+0x1dc>)
 8000c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4e:	601a      	str	r2, [r3, #0]
	  }


	  //restore input sample buffer to float array
	  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8000c50:	4b61      	ldr	r3, [pc, #388]	; (8000dd8 <do_iir_loop+0x1d4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	e034      	b.n	8000cc2 <do_iir_loop+0xbe>
		  l_buf_in[w_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
 8000c58:	4a62      	ldr	r2, [pc, #392]	; (8000de4 <do_iir_loop+0x1e0>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c60:	041b      	lsls	r3, r3, #16
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	3201      	adds	r2, #1
 8000c66:	495f      	ldr	r1, [pc, #380]	; (8000de4 <do_iir_loop+0x1e0>)
 8000c68:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	4b5c      	ldr	r3, [pc, #368]	; (8000de0 <do_iir_loop+0x1dc>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	ee07 2a90 	vmov	s15, r2
 8000c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c7a:	4a5b      	ldr	r2, [pc, #364]	; (8000de8 <do_iir_loop+0x1e4>)
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	edc3 7a00 	vstr	s15, [r3]
		  r_buf_in[w_ptr] = (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3302      	adds	r3, #2
 8000c88:	4a56      	ldr	r2, [pc, #344]	; (8000de4 <do_iir_loop+0x1e0>)
 8000c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c8e:	041b      	lsls	r3, r3, #16
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	3203      	adds	r2, #3
 8000c94:	4953      	ldr	r1, [pc, #332]	; (8000de4 <do_iir_loop+0x1e0>)
 8000c96:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	4b50      	ldr	r3, [pc, #320]	; (8000de0 <do_iir_loop+0x1dc>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	ee07 2a90 	vmov	s15, r2
 8000ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca8:	4a50      	ldr	r2, [pc, #320]	; (8000dec <do_iir_loop+0x1e8>)
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	edc3 7a00 	vstr	s15, [r3]
		  w_ptr++;
 8000cb2:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <do_iir_loop+0x1dc>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a49      	ldr	r2, [pc, #292]	; (8000de0 <do_iir_loop+0x1dc>)
 8000cba:	6013      	str	r3, [r2, #0]
	  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b45      	ldr	r3, [pc, #276]	; (8000dd8 <do_iir_loop+0x1d4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	ddc3      	ble.n	8000c58 <do_iir_loop+0x54>
	  }


	  //process IIR
	  arm_biquad_cascade_df1_f32 (&iirsettings_l, &l_buf_in[offset_w_ptr], &l_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);
 8000cd0:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <do_iir_loop+0x1d8>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4a44      	ldr	r2, [pc, #272]	; (8000de8 <do_iir_loop+0x1e4>)
 8000cd8:	1899      	adds	r1, r3, r2
 8000cda:	4b40      	ldr	r3, [pc, #256]	; (8000ddc <do_iir_loop+0x1d8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4a43      	ldr	r2, [pc, #268]	; (8000df0 <do_iir_loop+0x1ec>)
 8000ce2:	441a      	add	r2, r3
 8000ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce8:	4842      	ldr	r0, [pc, #264]	; (8000df4 <do_iir_loop+0x1f0>)
 8000cea:	f008 fb53 	bl	8009394 <arm_biquad_cascade_df1_f32>
	  arm_biquad_cascade_df1_f32 (&iirsettings_r, &r_buf_in[offset_w_ptr], &r_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);
 8000cee:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <do_iir_loop+0x1d8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4a3d      	ldr	r2, [pc, #244]	; (8000dec <do_iir_loop+0x1e8>)
 8000cf6:	1899      	adds	r1, r3, r2
 8000cf8:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <do_iir_loop+0x1d8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4a3e      	ldr	r2, [pc, #248]	; (8000df8 <do_iir_loop+0x1f4>)
 8000d00:	441a      	add	r2, r3
 8000d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d06:	483d      	ldr	r0, [pc, #244]	; (8000dfc <do_iir_loop+0x1f8>)
 8000d08:	f008 fb44 	bl	8009394 <arm_biquad_cascade_df1_f32>


	  //restore processed float-array to output sample-buffer
	  w_ptr = offset_w_ptr;
 8000d0c:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <do_iir_loop+0x1d8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a33      	ldr	r2, [pc, #204]	; (8000de0 <do_iir_loop+0x1dc>)
 8000d12:	6013      	str	r3, [r2, #0]

	  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8000d14:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <do_iir_loop+0x1d4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	e04c      	b.n	8000db6 <do_iir_loop+0x1b2>
			txBuf[i] =  (((int)l_buf_out[w_ptr])>>16)&0xFFFF;
 8000d1c:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <do_iir_loop+0x1dc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a33      	ldr	r2, [pc, #204]	; (8000df0 <do_iir_loop+0x1ec>)
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	edd3 7a00 	vldr	s15, [r3]
 8000d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d2e:	ee17 3a90 	vmov	r3, s15
 8000d32:	0c1b      	lsrs	r3, r3, #16
 8000d34:	b299      	uxth	r1, r3
 8000d36:	4a32      	ldr	r2, [pc, #200]	; (8000e00 <do_iir_loop+0x1fc>)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			txBuf[i+1] = ((int)l_buf_out[w_ptr])&0xFFFF;
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <do_iir_loop+0x1dc>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a2b      	ldr	r2, [pc, #172]	; (8000df0 <do_iir_loop+0x1ec>)
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	edd3 7a00 	vldr	s15, [r3]
 8000d4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	ee17 2a90 	vmov	r2, s15
 8000d58:	b291      	uxth	r1, r2
 8000d5a:	4a29      	ldr	r2, [pc, #164]	; (8000e00 <do_iir_loop+0x1fc>)
 8000d5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			txBuf[i+2] = (((int)l_buf_out[w_ptr])>>16)&0xFFFF;
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <do_iir_loop+0x1dc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a22      	ldr	r2, [pc, #136]	; (8000df0 <do_iir_loop+0x1ec>)
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	edd3 7a00 	vldr	s15, [r3]
 8000d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d72:	ee17 3a90 	vmov	r3, s15
 8000d76:	0c1a      	lsrs	r2, r3, #16
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	b291      	uxth	r1, r2
 8000d7e:	4a20      	ldr	r2, [pc, #128]	; (8000e00 <do_iir_loop+0x1fc>)
 8000d80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			txBuf[i+3] = ((int)l_buf_out[w_ptr])&0xFFFF;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <do_iir_loop+0x1dc>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <do_iir_loop+0x1ec>)
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	edd3 7a00 	vldr	s15, [r3]
 8000d92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	3303      	adds	r3, #3
 8000d9a:	ee17 2a90 	vmov	r2, s15
 8000d9e:	b291      	uxth	r1, r2
 8000da0:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <do_iir_loop+0x1fc>)
 8000da2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			w_ptr++;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <do_iir_loop+0x1dc>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	4a0c      	ldr	r2, [pc, #48]	; (8000de0 <do_iir_loop+0x1dc>)
 8000dae:	6013      	str	r3, [r2, #0]
	  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	3304      	adds	r3, #4
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <do_iir_loop+0x1d4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	ddab      	ble.n	8000d1c <do_iir_loop+0x118>
	  }

	  callback_state = 0;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <do_iir_loop+0x1d0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]

  }
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200000a0 	.word	0x200000a0
 8000dd8:	200076ec 	.word	0x200076ec
 8000ddc:	200076d8 	.word	0x200076d8
 8000de0:	200016b4 	.word	0x200016b4
 8000de4:	200056c8 	.word	0x200056c8
 8000de8:	200036b8 	.word	0x200036b8
 8000dec:	200076f0 	.word	0x200076f0
 8000df0:	200046c8 	.word	0x200046c8
 8000df4:	200006a8 	.word	0x200006a8
 8000df8:	200006b4 	.word	0x200006b4
 8000dfc:	200086f0 	.word	0x200086f0
 8000e00:	200016b8 	.word	0x200016b8

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0a:	f000 fc49 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0e:	f000 f839 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e12:	f7ff fccd 	bl	80007b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e16:	f7ff fc8d 	bl	8000734 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e1a:	f7ff fba5 	bl	8000568 <MX_ADC1_Init>
  MX_I2S2_Init();
 8000e1e:	f7ff fd81 	bl	8000924 <MX_I2S2_Init>
  MX_TIM13_Init();
 8000e22:	f000 fa75 	bl	8001310 <MX_TIM13_Init>
  MX_SDIO_SD_Init();
 8000e26:	f000 f8b7 	bl	8000f98 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000e2a:	f005 fc85 	bl	8006738 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
 8000e2e:	2301      	movs	r3, #1
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2300      	movs	r3, #0
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f008 fa2f 	bl	800929c <SEGGER_RTT_ConfigUpBuffer>

  HAL_ADC_Start_DMA(&hadc1, adc_input_data_buffer, ADC_DATA_BUFFER_SIZE);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <main+0x70>)
 8000e42:	480d      	ldr	r0, [pc, #52]	; (8000e78 <main+0x74>)
 8000e44:	f000 fd06 	bl	8001854 <HAL_ADC_Start_DMA>
  //HAL_TIM_Base_Start_IT(&htim13);

  read_sdio_data();
 8000e48:	f000 faae 	bl	80013a8 <read_sdio_data>
  HAL_Delay(5000);
 8000e4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e50:	f000 fc98 	bl	8001784 <HAL_Delay>

#ifdef IIR_BIQUAD
  do_iir_init();
 8000e54:	f7ff feae 	bl	8000bb4 <do_iir_init>
  while (1)
  {

	// do dsp
	#ifdef IIR_BIQUAD
		do_iir_loop();
 8000e58:	f7ff fed4 	bl	8000c04 <do_iir_loop>

	#ifdef REAL_FFT
		real_fft_loop();
	#endif //REAL_FFT

	check_user_buttons_state();
 8000e5c:	f000 fb32 	bl	80014c4 <check_user_buttons_state>
	printf("%lu - %lu - %lu\r\n", user_input_data.exp_input, user_input_data.user_pot1, user_input_data.user_pot2 );
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <main+0x78>)
 8000e62:	6819      	ldr	r1, [r3, #0]
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <main+0x78>)
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <main+0x78>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <main+0x7c>)
 8000e6e:	f008 fba1 	bl	80095b4 <iprintf>
		do_iir_loop();
 8000e72:	e7f1      	b.n	8000e58 <main+0x54>
 8000e74:	200076c8 	.word	0x200076c8
 8000e78:	200004f8 	.word	0x200004f8
 8000e7c:	200076cc 	.word	0x200076cc
 8000e80:	0800a478 	.word	0x0800a478

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b098      	sub	sp, #96	; 0x60
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e8e:	2230      	movs	r2, #48	; 0x30
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f008 fb86 	bl	80095a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	4b31      	ldr	r3, [pc, #196]	; (8000f80 <SystemClock_Config+0xfc>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a30      	ldr	r2, [pc, #192]	; (8000f80 <SystemClock_Config+0xfc>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <SystemClock_Config+0xfc>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <SystemClock_Config+0x100>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <SystemClock_Config+0x100>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <SystemClock_Config+0x100>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efa:	2302      	movs	r3, #2
 8000efc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000efe:	2300      	movs	r3, #0
 8000f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f02:	2310      	movs	r3, #16
 8000f04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f06:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f0a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f10:	2307      	movs	r3, #7
 8000f12:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fdc9 	bl	8003ab0 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f24:	f000 f830 	bl	8000f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	2105      	movs	r1, #5
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 f822 	bl	8003f90 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f52:	f000 f819 	bl	8000f88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f56:	2301      	movs	r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
 8000f5a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f5e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f003 f9ad 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000f74:	f000 f808 	bl	8000f88 <Error_Handler>
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3760      	adds	r7, #96	; 0x60
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40007000 	.word	0x40007000

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_SDIO_SD_Init+0x38>)
 8000f9e:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <MX_SDIO_SD_Init+0x3c>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_SDIO_SD_Init+0x38>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_SDIO_SD_Init+0x38>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_SDIO_SD_Init+0x38>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_SDIO_SD_Init+0x38>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <MX_SDIO_SD_Init+0x38>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <MX_SDIO_SD_Init+0x38>)
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	619a      	str	r2, [r3, #24]

}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	200086fc 	.word	0x200086fc
 8000fd4:	40012c00 	.word	0x40012c00

08000fd8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a28      	ldr	r2, [pc, #160]	; (8001098 <HAL_SD_MspInit+0xc0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d14a      	bne.n	8001090 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_SD_MspInit+0xc4>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a26      	ldr	r2, [pc, #152]	; (800109c <HAL_SD_MspInit+0xc4>)
 8001004:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <HAL_SD_MspInit+0xc4>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_SD_MspInit+0xc4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <HAL_SD_MspInit+0xc4>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_SD_MspInit+0xc4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_SD_MspInit+0xc4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a18      	ldr	r2, [pc, #96]	; (800109c <HAL_SD_MspInit+0xc4>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_SD_MspInit+0xc4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800104e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001052:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001060:	230c      	movs	r3, #12
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <HAL_SD_MspInit+0xc8>)
 800106c:	f001 fc1a 	bl	80028a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001070:	2304      	movs	r3, #4
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001080:	230c      	movs	r3, #12
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <HAL_SD_MspInit+0xcc>)
 800108c:	f001 fc0a 	bl	80028a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40012c00 	.word	0x40012c00
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler+0x4>

08001112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <UsageFault_Handler+0x4>

0800111e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114c:	f000 fafa 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <DMA1_Stream3_IRQHandler+0x10>)
 800115a:	f001 f939 	bl	80023d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200005a0 	.word	0x200005a0

08001168 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <DMA1_Stream4_IRQHandler+0x10>)
 800116e:	f001 f92f 	bl	80023d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000600 	.word	0x20000600

0800117c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001180:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001184:	f001 fd76 	bl	8002c74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001188:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800118c:	f001 fd72 	bl	8002c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	HAL_GPIO_TogglePin(relay_switch_GPIO_Port, relay_switch_Pin);
 8001198:	2101      	movs	r1, #1
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <TIM8_UP_TIM13_IRQHandler+0x20>)
 800119c:	f001 fd4f 	bl	8002c3e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDA_RED_GPIO_Port, LEDA_RED_Pin);
 80011a0:	2101      	movs	r1, #1
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <TIM8_UP_TIM13_IRQHandler+0x24>)
 80011a4:	f001 fd4b 	bl	8002c3e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <TIM8_UP_TIM13_IRQHandler+0x28>)
 80011aa:	f004 fb72 	bl	8005892 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020400 	.word	0x40020400
 80011bc:	20008780 	.word	0x20008780

080011c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <DMA2_Stream0_IRQHandler+0x10>)
 80011c6:	f001 f903 	bl	80023d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000540 	.word	0x20000540

080011d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	e00a      	b.n	80011fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011e6:	f3af 8000 	nop.w
 80011ea:	4601      	mov	r1, r0
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	60ba      	str	r2, [r7, #8]
 80011f2:	b2ca      	uxtb	r2, r1
 80011f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	dbf0      	blt.n	80011e6 <_read+0x12>
	}

return len;
 8001204:	687b      	ldr	r3, [r7, #4]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <_close>:
	return len;
}
*/

int _close(int file)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
	return -1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001236:	605a      	str	r2, [r3, #4]
	return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_isatty>:

int _isatty(int file)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	return 1;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
	return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f008 f944 	bl	8009534 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20020000 	.word	0x20020000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	200000a4 	.word	0x200000a4
 80012e0:	20008ce8 	.word	0x20008ce8

080012e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <SystemInit+0x28>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a07      	ldr	r2, [pc, #28]	; (800130c <SystemInit+0x28>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <SystemInit+0x28>)
 80012fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <MX_TIM13_Init>:

TIM_HandleTypeDef htim13;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_TIM13_Init+0x40>)
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <MX_TIM13_Init+0x44>)
 8001318:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1;
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_TIM13_Init+0x40>)
 800131c:	2201      	movs	r2, #1
 800131e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_TIM13_Init+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <MX_TIM13_Init+0x40>)
 8001328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_TIM13_Init+0x40>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_TIM13_Init+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_TIM13_Init+0x40>)
 800133c:	f004 fa7e 	bl	800583c <HAL_TIM_Base_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001346:	f7ff fe1f 	bl	8000f88 <Error_Handler>
  }

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20008780 	.word	0x20008780
 8001354:	40001c00 	.word	0x40001c00

08001358 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_TIM_Base_MspInit+0x48>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d115      	bne.n	8001396 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <HAL_TIM_Base_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	202c      	movs	r0, #44	; 0x2c
 800138c:	f000 fee3 	bl	8002156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001390:	202c      	movs	r0, #44	; 0x2c
 8001392:	f000 fefc 	bl	800218e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40001c00 	.word	0x40001c00
 80013a4:	40023800 	.word	0x40023800

080013a8 <read_sdio_data>:

// f_write
BYTE readBuf[30];

void read_sdio_data()
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b09e      	sub	sp, #120	; 0x78
 80013ac:	af00      	add	r7, sp, #0
    Error_Handler();
  }
#endif
	 // try to mount Micro-SD card

	  FRESULT fres = f_mount(&SDFatFS, SDPath, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	4930      	ldr	r1, [pc, #192]	; (8001474 <read_sdio_data+0xcc>)
 80013b2:	4831      	ldr	r0, [pc, #196]	; (8001478 <read_sdio_data+0xd0>)
 80013b4:	f007 f8a4 	bl	8008500 <f_mount>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	  if(fres != FR_OK)
 80013be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <read_sdio_data+0x24>
	  {
		  // FR_DISK_ERR (and HAL_SD_ERROR_RX_OVERRUN)
		  // Fix by setting SDIOCLK clock divide factor to 3
		  error_sdio("mount");
 80013c6:	482d      	ldr	r0, [pc, #180]	; (800147c <read_sdio_data+0xd4>)
 80013c8:	f000 f868 	bl	800149c <error_sdio>

	  DWORD free_clusters, free_sectors, total_sectors;

	  FATFS* getFreeFs;

	  fres = f_getfree("", &free_clusters, &getFreeFs);
 80013cc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013d4:	4619      	mov	r1, r3
 80013d6:	482a      	ldr	r0, [pc, #168]	; (8001480 <read_sdio_data+0xd8>)
 80013d8:	f007 fc7d 	bl	8008cd6 <f_getfree>
 80013dc:	4603      	mov	r3, r0
 80013de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	  if (fres != FR_OK) {
 80013e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <read_sdio_data+0x4a>
		  error_sdio("getfree");
 80013ea:	4826      	ldr	r0, [pc, #152]	; (8001484 <read_sdio_data+0xdc>)
 80013ec:	f000 f856 	bl	800149c <error_sdio>
 80013f0:	e016      	b.n	8001420 <read_sdio_data+0x78>
	  }
	  else
	  {
		  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80013f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	3b02      	subs	r3, #2
 80013f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80013fa:	8952      	ldrh	r2, [r2, #10]
 80013fc:	fb02 f303 	mul.w	r3, r2, r3
 8001400:	673b      	str	r3, [r7, #112]	; 0x70
		  free_sectors = free_clusters * getFreeFs->csize;
 8001402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001404:	895b      	ldrh	r3, [r3, #10]
 8001406:	461a      	mov	r2, r3
 8001408:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800140a:	fb03 f302 	mul.w	r3, r3, r2
 800140e:	66fb      	str	r3, [r7, #108]	; 0x6c

		  printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8001410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001412:	0859      	lsrs	r1, r3, #1
 8001414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001416:	085b      	lsrs	r3, r3, #1
 8001418:	461a      	mov	r2, r3
 800141a:	481b      	ldr	r0, [pc, #108]	; (8001488 <read_sdio_data+0xe0>)
 800141c:	f008 f8ca 	bl	80095b4 <iprintf>

	  }

	  char line[100];
	   /* Open a text file */
	  fres = f_open(&SDFile, "TEST.TXT", FA_READ);
 8001420:	2201      	movs	r2, #1
 8001422:	491a      	ldr	r1, [pc, #104]	; (800148c <read_sdio_data+0xe4>)
 8001424:	481a      	ldr	r0, [pc, #104]	; (8001490 <read_sdio_data+0xe8>)
 8001426:	f007 f8b1 	bl	800858c <f_open>
 800142a:	4603      	mov	r3, r0
 800142c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	    if (fres) error_sdio("open file");
 8001430:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <read_sdio_data+0xa2>
 8001438:	4816      	ldr	r0, [pc, #88]	; (8001494 <read_sdio_data+0xec>)
 800143a:	f000 f82f 	bl	800149c <error_sdio>

	    /* Read every line and display it */
	    while (f_gets(line, sizeof line, &SDFile)) {
 800143e:	e004      	b.n	800144a <read_sdio_data+0xa2>
	        printf("%s\r\n", line);
 8001440:	463b      	mov	r3, r7
 8001442:	4619      	mov	r1, r3
 8001444:	4814      	ldr	r0, [pc, #80]	; (8001498 <read_sdio_data+0xf0>)
 8001446:	f008 f8b5 	bl	80095b4 <iprintf>
	    while (f_gets(line, sizeof line, &SDFile)) {
 800144a:	463b      	mov	r3, r7
 800144c:	4a10      	ldr	r2, [pc, #64]	; (8001490 <read_sdio_data+0xe8>)
 800144e:	2164      	movs	r1, #100	; 0x64
 8001450:	4618      	mov	r0, r3
 8001452:	f007 fcf5 	bl	8008e40 <f_gets>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f1      	bne.n	8001440 <read_sdio_data+0x98>
	    }

	  //write_sdio_data("test.txt", "Hello, from STM32F405");

	  //Close file, don't forget this!
	  f_close(&SDFile);
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <read_sdio_data+0xe8>)
 800145e:	f007 fc10 	bl	8008c82 <f_close>

	  //De-mount drive
	  f_mount(NULL, "", 0);
 8001462:	2200      	movs	r2, #0
 8001464:	4906      	ldr	r1, [pc, #24]	; (8001480 <read_sdio_data+0xd8>)
 8001466:	2000      	movs	r0, #0
 8001468:	f007 f84a 	bl	8008500 <f_mount>


}
 800146c:	bf00      	nop
 800146e:	3778      	adds	r7, #120	; 0x78
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200087c8 	.word	0x200087c8
 8001478:	200089fc 	.word	0x200089fc
 800147c:	0800a48c 	.word	0x0800a48c
 8001480:	0800a494 	.word	0x0800a494
 8001484:	0800a498 	.word	0x0800a498
 8001488:	0800a4a0 	.word	0x0800a4a0
 800148c:	0800a4e8 	.word	0x0800a4e8
 8001490:	200087cc 	.word	0x200087cc
 8001494:	0800a4f4 	.word	0x0800a4f4
 8001498:	0800a500 	.word	0x0800a500

0800149c <error_sdio>:
		  error_sdio("write file");
	  }
}

void error_sdio(char* opcode)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	printf("Error when performing SDIO %s (%lu)\r\n", opcode, hsd.ErrorCode);
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <error_sdio+0x20>)
 80014a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a8:	461a      	mov	r2, r3
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <error_sdio+0x24>)
 80014ae:	f008 f881 	bl	80095b4 <iprintf>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200086fc 	.word	0x200086fc
 80014c0:	0800a560 	.word	0x0800a560

080014c4 <check_user_buttons_state>:
uint8_t active_adc_channel = 0;
uint8_t test = 0;


void check_user_buttons_state()
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	// process user switch input values
	if(user_switch1_GPIO_Port->IDR & user_switch1_Pin)
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <check_user_buttons_state+0x5c>)
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <check_user_buttons_state+0x1e>
	  LEDA_BLUE_GPIO_Port->ODR |= LEDA_BLUE_MASK;
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <check_user_buttons_state+0x60>)
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <check_user_buttons_state+0x60>)
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	6153      	str	r3, [r2, #20]
 80014e0:	e005      	b.n	80014ee <check_user_buttons_state+0x2a>
	else
	  LEDA_BLUE_GPIO_Port->ODR &= ~LEDA_BLUE_MASK;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <check_user_buttons_state+0x60>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <check_user_buttons_state+0x60>)
 80014e8:	f023 0302 	bic.w	r3, r3, #2
 80014ec:	6153      	str	r3, [r2, #20]


	if(user_switch2_GPIO_Port->IDR & user_switch2_Pin)
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <check_user_buttons_state+0x5c>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <check_user_buttons_state+0x44>
	  LEDB_BLUE_GPIO_Port->ODR |= LEDB_BLUE_MASK;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <check_user_buttons_state+0x64>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <check_user_buttons_state+0x64>)
 8001500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001504:	6153      	str	r3, [r2, #20]
	  LEDB_BLUE_GPIO_Port->ODR &= ~LEDB_BLUE_MASK;


//	printf("%i\r\n", test);
//	test++;
}
 8001506:	e005      	b.n	8001514 <check_user_buttons_state+0x50>
	  LEDB_BLUE_GPIO_Port->ODR &= ~LEDB_BLUE_MASK;
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <check_user_buttons_state+0x64>)
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <check_user_buttons_state+0x64>)
 800150e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001512:	6153      	str	r3, [r2, #20]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40020800 	.word	0x40020800
 8001524:	40020400 	.word	0x40020400
 8001528:	40020000 	.word	0x40020000

0800152c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
	// check origin of EXTI
	switch(GPIO_Pin){
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_EXTI_Callback+0x1a>
 800153e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001542:	d01f      	beq.n	8001584 <HAL_GPIO_EXTI_Callback+0x58>
			LEDA_RED_GPIO_Port->ODR |= LEDA_RED_MASK;
			LEDB_GREEN_GPIO_Port->ODR &= ~LEDB_GREEN_MASK;
			LEDB_RED_GPIO_Port->ODR |= LEDB_RED_MASK;
			break;
	}
}
 8001544:	e03d      	b.n	80015c2 <HAL_GPIO_EXTI_Callback+0x96>
			relay_switch_GPIO_Port->ODR |= RELAY_MASK;
 8001546:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6153      	str	r3, [r2, #20]
			LEDA_GREEN_GPIO_Port->ODR |= LEDA_GREEN_MASK;
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6153      	str	r3, [r2, #20]
			LEDA_RED_GPIO_Port->ODR &= ~LEDA_RED_MASK;
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6153      	str	r3, [r2, #20]
			LEDB_GREEN_GPIO_Port->ODR |= LEDB_GREEN_MASK;
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_GPIO_EXTI_Callback+0xac>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <HAL_GPIO_EXTI_Callback+0xac>)
 8001570:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001574:	6153      	str	r3, [r2, #20]
			LEDB_RED_GPIO_Port->ODR &= ~LEDB_RED_MASK;
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_GPIO_EXTI_Callback+0xac>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <HAL_GPIO_EXTI_Callback+0xac>)
 800157c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001580:	6153      	str	r3, [r2, #20]
			break;
 8001582:	e01e      	b.n	80015c2 <HAL_GPIO_EXTI_Callback+0x96>
			relay_switch_GPIO_Port->ODR &= ~RELAY_MASK;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	6153      	str	r3, [r2, #20]
			LEDA_GREEN_GPIO_Port->ODR &= ~LEDA_GREEN_MASK;
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001596:	f023 0304 	bic.w	r3, r3, #4
 800159a:	6153      	str	r3, [r2, #20]
			LEDA_RED_GPIO_Port->ODR |= LEDA_RED_MASK;
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <HAL_GPIO_EXTI_Callback+0xa8>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6153      	str	r3, [r2, #20]
			LEDB_GREEN_GPIO_Port->ODR &= ~LEDB_GREEN_MASK;
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_GPIO_EXTI_Callback+0xac>)
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_GPIO_EXTI_Callback+0xac>)
 80015ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015b2:	6153      	str	r3, [r2, #20]
			LEDB_RED_GPIO_Port->ODR |= LEDB_RED_MASK;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_GPIO_EXTI_Callback+0xac>)
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_GPIO_EXTI_Callback+0xac>)
 80015ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015be:	6153      	str	r3, [r2, #20]
			break;
 80015c0:	bf00      	nop
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020000 	.word	0x40020000

080015dc <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

	//printf("%lu\r\n", adc_input_data_buffer[ADC_DATA_BUFFER_SIZE-1]);
	//	adc_input_data_demuxed[active_adc_channel] = adc_input_data_buffer[0];

	// demux interleaved ADC input
	switch(active_adc_channel)
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_ADC_ConvCpltCallback+0x64>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d010      	beq.n	800160e <HAL_ADC_ConvCpltCallback+0x32>
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	dc13      	bgt.n	8001618 <HAL_ADC_ConvCpltCallback+0x3c>
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <HAL_ADC_ConvCpltCallback+0x1e>
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d005      	beq.n	8001604 <HAL_ADC_ConvCpltCallback+0x28>
 80015f8:	e00e      	b.n	8001618 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		case 0:
			user_input_data.exp_input = (uint32_t)adc_input_data_buffer[0];
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_ADC_ConvCpltCallback+0x68>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001600:	6013      	str	r3, [r2, #0]
			break;
 8001602:	e009      	b.n	8001618 <HAL_ADC_ConvCpltCallback+0x3c>

		case 1:
			user_input_data.user_pot1 = (uint32_t)adc_input_data_buffer[0];
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <HAL_ADC_ConvCpltCallback+0x68>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_ADC_ConvCpltCallback+0x6c>)
 800160a:	6053      	str	r3, [r2, #4]
			break;
 800160c:	e004      	b.n	8001618 <HAL_ADC_ConvCpltCallback+0x3c>

		case 2:
			user_input_data.user_pot2 = (uint32_t)adc_input_data_buffer[0];
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_ADC_ConvCpltCallback+0x68>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001614:	6093      	str	r3, [r2, #8]
			break;
 8001616:	bf00      	nop
	}

	active_adc_channel++;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_ADC_ConvCpltCallback+0x64>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <HAL_ADC_ConvCpltCallback+0x64>)
 8001622:	701a      	strb	r2, [r3, #0]
	if(active_adc_channel > ADC_DATA_DEMUX_SIZE-1)
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_ADC_ConvCpltCallback+0x64>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d902      	bls.n	8001632 <HAL_ADC_ConvCpltCallback+0x56>
		active_adc_channel = 0;
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <HAL_ADC_ConvCpltCallback+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]

}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	200000a8 	.word	0x200000a8
 8001644:	200076c8 	.word	0x200076c8
 8001648:	200076cc 	.word	0x200076cc

0800164c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001684 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001650:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001652:	e003      	b.n	800165c <LoopCopyDataInit>

08001654 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001656:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001658:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800165a:	3104      	adds	r1, #4

0800165c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800165c:	480b      	ldr	r0, [pc, #44]	; (800168c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001660:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001662:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001664:	d3f6      	bcc.n	8001654 <CopyDataInit>
  ldr  r2, =_sbss
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001668:	e002      	b.n	8001670 <LoopFillZerobss>

0800166a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800166a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800166c:	f842 3b04 	str.w	r3, [r2], #4

08001670 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001672:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001674:	d3f9      	bcc.n	800166a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001676:	f7ff fe35 	bl	80012e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167a:	f007 ff61 	bl	8009540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167e:	f7ff fbc1 	bl	8000e04 <main>
  bx  lr    
 8001682:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001684:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001688:	0800a738 	.word	0x0800a738
  ldr  r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001690:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8001694:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8001698:	20008ce4 	.word	0x20008ce4

0800169c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <HAL_Init+0x40>)
 80016aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <HAL_Init+0x40>)
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_Init+0x40>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 fd39 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 f808 	bl	80016e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d4:	f7ff fce8 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x54>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x58>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fd51 	bl	80021aa <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001720:	f000 fd19 	bl	8002156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_InitTick+0x5c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000014 	.word	0x20000014
 800173c:	2000001c 	.word	0x2000001c
 8001740:	20000018 	.word	0x20000018

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	2000001c 	.word	0x2000001c
 8001768:	200087c0 	.word	0x200087c0

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	200087c0 	.word	0x200087c0

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff ffee 	bl	800176c <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_Delay+0x44>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffde 	bl	800176c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000001c 	.word	0x2000001c

080017cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e033      	b.n	800184a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7fe ff2a 	bl	8000644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b00      	cmp	r3, #0
 8001808:	d118      	bne.n	800183c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001812:	f023 0302 	bic.w	r3, r3, #2
 8001816:	f043 0202 	orr.w	r2, r3, #2
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fa40 	bl	8001ca4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f023 0303 	bic.w	r3, r3, #3
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	641a      	str	r2, [r3, #64]	; 0x40
 800183a:	e001      	b.n	8001840 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_ADC_Start_DMA+0x1e>
 800186e:	2302      	movs	r3, #2
 8001870:	e0cc      	b.n	8001a0c <HAL_ADC_Start_DMA+0x1b8>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b01      	cmp	r3, #1
 8001886:	d018      	beq.n	80018ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001898:	4b5e      	ldr	r3, [pc, #376]	; (8001a14 <HAL_ADC_Start_DMA+0x1c0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a5e      	ldr	r2, [pc, #376]	; (8001a18 <HAL_ADC_Start_DMA+0x1c4>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	0c9a      	lsrs	r2, r3, #18
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80018ac:	e002      	b.n	80018b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f9      	bne.n	80018ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	f040 80a0 	bne.w	8001a0a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d007      	beq.n	80018fc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001908:	d106      	bne.n	8001918 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f023 0206 	bic.w	r2, r3, #6
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	645a      	str	r2, [r3, #68]	; 0x44
 8001916:	e002      	b.n	800191e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_ADC_Start_DMA+0x1c8>)
 8001928:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192e:	4a3c      	ldr	r2, [pc, #240]	; (8001a20 <HAL_ADC_Start_DMA+0x1cc>)
 8001930:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001936:	4a3b      	ldr	r2, [pc, #236]	; (8001a24 <HAL_ADC_Start_DMA+0x1d0>)
 8001938:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193e:	4a3a      	ldr	r2, [pc, #232]	; (8001a28 <HAL_ADC_Start_DMA+0x1d4>)
 8001940:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800194a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800195a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800196a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	334c      	adds	r3, #76	; 0x4c
 8001976:	4619      	mov	r1, r3
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f000 fcd0 	bl	8002320 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 031f 	and.w	r3, r3, #31
 8001988:	2b00      	cmp	r3, #0
 800198a:	d12a      	bne.n	80019e2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a26      	ldr	r2, [pc, #152]	; (8001a2c <HAL_ADC_Start_DMA+0x1d8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d015      	beq.n	80019c2 <HAL_ADC_Start_DMA+0x16e>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a25      	ldr	r2, [pc, #148]	; (8001a30 <HAL_ADC_Start_DMA+0x1dc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d105      	bne.n	80019ac <HAL_ADC_Start_DMA+0x158>
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <HAL_ADC_Start_DMA+0x1c8>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 031f 	and.w	r3, r3, #31
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00a      	beq.n	80019c2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <HAL_ADC_Start_DMA+0x1e0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d129      	bne.n	8001a0a <HAL_ADC_Start_DMA+0x1b6>
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_ADC_Start_DMA+0x1c8>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d123      	bne.n	8001a0a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d11c      	bne.n	8001a0a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	e013      	b.n	8001a0a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <HAL_ADC_Start_DMA+0x1d8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d10e      	bne.n	8001a0a <HAL_ADC_Start_DMA+0x1b6>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d107      	bne.n	8001a0a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a08:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000014 	.word	0x20000014
 8001a18:	431bde83 	.word	0x431bde83
 8001a1c:	40012300 	.word	0x40012300
 8001a20:	08001e9d 	.word	0x08001e9d
 8001a24:	08001f57 	.word	0x08001f57
 8001a28:	08001f73 	.word	0x08001f73
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	40012100 	.word	0x40012100
 8001a34:	40012200 	.word	0x40012200

08001a38 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x1c>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e105      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x228>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b09      	cmp	r3, #9
 8001a8a:	d925      	bls.n	8001ad8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68d9      	ldr	r1, [r3, #12]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b1e      	subs	r3, #30
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43da      	mvns	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	400a      	ands	r2, r1
 8001ab0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68d9      	ldr	r1, [r3, #12]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4403      	add	r3, r0
 8001aca:	3b1e      	subs	r3, #30
 8001acc:	409a      	lsls	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	e022      	b.n	8001b1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6919      	ldr	r1, [r3, #16]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	2207      	movs	r2, #7
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	400a      	ands	r2, r1
 8001afa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6919      	ldr	r1, [r3, #16]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4403      	add	r3, r0
 8001b14:	409a      	lsls	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d824      	bhi.n	8001b70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	3b05      	subs	r3, #5
 8001b38:	221f      	movs	r2, #31
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	400a      	ands	r2, r1
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b05      	subs	r3, #5
 8001b62:	fa00 f203 	lsl.w	r2, r0, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b6e:	e04c      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b0c      	cmp	r3, #12
 8001b76:	d824      	bhi.n	8001bc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	3b23      	subs	r3, #35	; 0x23
 8001b8a:	221f      	movs	r2, #31
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43da      	mvns	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	400a      	ands	r2, r1
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b23      	subs	r3, #35	; 0x23
 8001bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc0:	e023      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3b41      	subs	r3, #65	; 0x41
 8001bd4:	221f      	movs	r2, #31
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	400a      	ands	r2, r1
 8001be2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3b41      	subs	r3, #65	; 0x41
 8001bfe:	fa00 f203 	lsl.w	r2, r0, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_ADC_ConfigChannel+0x234>)
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <HAL_ADC_ConfigChannel+0x238>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d109      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1cc>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b12      	cmp	r3, #18
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_ADC_ConfigChannel+0x238>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d123      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x21e>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b10      	cmp	r3, #16
 8001c3c:	d003      	beq.n	8001c46 <HAL_ADC_ConfigChannel+0x1e6>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b11      	cmp	r3, #17
 8001c44:	d11b      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b10      	cmp	r3, #16
 8001c58:	d111      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_ADC_ConfigChannel+0x23c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_ADC_ConfigChannel+0x240>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	0c9a      	lsrs	r2, r3, #18
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c70:	e002      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f9      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	40012300 	.word	0x40012300
 8001c98:	40012000 	.word	0x40012000
 8001c9c:	20000014 	.word	0x20000014
 8001ca0:	431bde83 	.word	0x431bde83

08001ca4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cac:	4b79      	ldr	r3, [pc, #484]	; (8001e94 <ADC_Init+0x1f0>)
 8001cae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	021a      	lsls	r2, r3, #8
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6899      	ldr	r1, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	4a58      	ldr	r2, [pc, #352]	; (8001e98 <ADC_Init+0x1f4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d022      	beq.n	8001d82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6899      	ldr	r1, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6899      	ldr	r1, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	e00f      	b.n	8001da2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001da0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0202 	bic.w	r2, r2, #2
 8001db0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6899      	ldr	r1, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7e1b      	ldrb	r3, [r3, #24]
 8001dbc:	005a      	lsls	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01b      	beq.n	8001e08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dde:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6859      	ldr	r1, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	035a      	lsls	r2, r3, #13
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	e007      	b.n	8001e18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	051a      	lsls	r2, r3, #20
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6899      	ldr	r1, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e5a:	025a      	lsls	r2, r3, #9
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6899      	ldr	r1, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	029a      	lsls	r2, r3, #10
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	609a      	str	r2, [r3, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40012300 	.word	0x40012300
 8001e98:	0f000001 	.word	0x0f000001

08001e9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d13c      	bne.n	8001f30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d12b      	bne.n	8001f28 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d127      	bne.n	8001f28 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d119      	bne.n	8001f28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0220 	bic.w	r2, r2, #32
 8001f02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d105      	bne.n	8001f28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f7ff fb57 	bl	80015dc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f2e:	e00e      	b.n	8001f4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f7ff fd85 	bl	8001a4c <HAL_ADC_ErrorCallback>
}
 8001f42:	e004      	b.n	8001f4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	4798      	blx	r3
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff fd67 	bl	8001a38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2240      	movs	r2, #64	; 0x40
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f043 0204 	orr.w	r2, r3, #4
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff fd5a 	bl	8001a4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800210c:	d301      	bcc.n	8002112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2301      	movs	r3, #1
 8002110:	e00f      	b.n	8002132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <SysTick_Config+0x40>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211a:	210f      	movs	r1, #15
 800211c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002120:	f7ff ff8e 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <SysTick_Config+0x40>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <SysTick_Config+0x40>)
 800212c:	2207      	movs	r2, #7
 800212e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff29 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff3e 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff8e 	bl	8002094 <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff5d 	bl	8002040 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff31 	bl	8002004 <__NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ffa2 	bl	80020fc <SysTick_Config>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff facc 	bl	800176c <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e099      	b.n	8002314 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002200:	e00f      	b.n	8002222 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002202:	f7ff fab3 	bl	800176c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b05      	cmp	r3, #5
 800220e:	d908      	bls.n	8002222 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2203      	movs	r2, #3
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e078      	b.n	8002314 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1e8      	bne.n	8002202 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4b38      	ldr	r3, [pc, #224]	; (800231c <HAL_DMA_Init+0x158>)
 800223c:	4013      	ands	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800224e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800225a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002266:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	2b04      	cmp	r3, #4
 800227a:	d107      	bne.n	800228c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	4313      	orrs	r3, r2
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f023 0307 	bic.w	r3, r3, #7
 80022a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d117      	bne.n	80022e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00e      	beq.n	80022e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fa6f 	bl	80027ac <DMA_CheckFifoParam>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2240      	movs	r2, #64	; 0x40
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022e2:	2301      	movs	r3, #1
 80022e4:	e016      	b.n	8002314 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fa26 	bl	8002740 <DMA_CalcBaseAndBitshift>
 80022f4:	4603      	mov	r3, r0
 80022f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	223f      	movs	r2, #63	; 0x3f
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	f010803f 	.word	0xf010803f

08002320 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_DMA_Start_IT+0x26>
 8002342:	2302      	movs	r3, #2
 8002344:	e040      	b.n	80023c8 <HAL_DMA_Start_IT+0xa8>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d12f      	bne.n	80023ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2202      	movs	r2, #2
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f9b8 	bl	80026e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002378:	223f      	movs	r2, #63	; 0x3f
 800237a:	409a      	lsls	r2, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0216 	orr.w	r2, r2, #22
 800238e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0208 	orr.w	r2, r2, #8
 80023a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e005      	b.n	80023c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023dc:	4b92      	ldr	r3, [pc, #584]	; (8002628 <HAL_DMA_IRQHandler+0x258>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a92      	ldr	r2, [pc, #584]	; (800262c <HAL_DMA_IRQHandler+0x25c>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0a9b      	lsrs	r3, r3, #10
 80023e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	2208      	movs	r2, #8
 80023fc:	409a      	lsls	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d01a      	beq.n	800243c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0204 	bic.w	r2, r2, #4
 8002422:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2208      	movs	r2, #8
 800242a:	409a      	lsls	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	2201      	movs	r2, #1
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	2201      	movs	r2, #1
 8002460:	409a      	lsls	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f043 0202 	orr.w	r2, r3, #2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	2204      	movs	r2, #4
 8002478:	409a      	lsls	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d012      	beq.n	80024a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00b      	beq.n	80024a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	2204      	movs	r2, #4
 8002496:	409a      	lsls	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	f043 0204 	orr.w	r2, r3, #4
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	2210      	movs	r2, #16
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d043      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d03c      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	2210      	movs	r2, #16
 80024cc:	409a      	lsls	r2, r3
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d018      	beq.n	8002512 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d108      	bne.n	8002500 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d024      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4798      	blx	r3
 80024fe:	e01f      	b.n	8002540 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01b      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4798      	blx	r3
 8002510:	e016      	b.n	8002540 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0208 	bic.w	r2, r2, #8
 800252e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002544:	2220      	movs	r2, #32
 8002546:	409a      	lsls	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 808e 	beq.w	800266e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8086 	beq.w	800266e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	2220      	movs	r2, #32
 8002568:	409a      	lsls	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b05      	cmp	r3, #5
 8002578:	d136      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0216 	bic.w	r2, r2, #22
 8002588:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695a      	ldr	r2, [r3, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002598:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d103      	bne.n	80025aa <HAL_DMA_IRQHandler+0x1da>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d007      	beq.n	80025ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0208 	bic.w	r2, r2, #8
 80025b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	223f      	movs	r2, #63	; 0x3f
 80025c0:	409a      	lsls	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d07d      	beq.n	80026da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
        }
        return;
 80025e6:	e078      	b.n	80026da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01c      	beq.n	8002630 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d108      	bne.n	8002616 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	2b00      	cmp	r3, #0
 800260a:	d030      	beq.n	800266e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
 8002614:	e02b      	b.n	800266e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	2b00      	cmp	r3, #0
 800261c:	d027      	beq.n	800266e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
 8002626:	e022      	b.n	800266e <HAL_DMA_IRQHandler+0x29e>
 8002628:	20000014 	.word	0x20000014
 800262c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10f      	bne.n	800265e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0210 	bic.w	r2, r2, #16
 800264c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	2b00      	cmp	r3, #0
 8002674:	d032      	beq.n	80026dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d022      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2205      	movs	r2, #5
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3301      	adds	r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d307      	bcc.n	80026b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f2      	bne.n	800269a <HAL_DMA_IRQHandler+0x2ca>
 80026b4:	e000      	b.n	80026b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
 80026d8:	e000      	b.n	80026dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80026da:	bf00      	nop
    }
  }
}
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop

080026e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002700:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d108      	bne.n	8002724 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002722:	e007      	b.n	8002734 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	60da      	str	r2, [r3, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	3b10      	subs	r3, #16
 8002750:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800275a:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <DMA_CalcBaseAndBitshift+0x68>)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d909      	bls.n	8002782 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002776:	f023 0303 	bic.w	r3, r3, #3
 800277a:	1d1a      	adds	r2, r3, #4
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	659a      	str	r2, [r3, #88]	; 0x58
 8002780:	e007      	b.n	8002792 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	aaaaaaab 	.word	0xaaaaaaab
 80027a8:	0800a5f4 	.word	0x0800a5f4

080027ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d11f      	bne.n	8002806 <DMA_CheckFifoParam+0x5a>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d856      	bhi.n	800287a <DMA_CheckFifoParam+0xce>
 80027cc:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <DMA_CheckFifoParam+0x28>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	080027e5 	.word	0x080027e5
 80027d8:	080027f7 	.word	0x080027f7
 80027dc:	080027e5 	.word	0x080027e5
 80027e0:	0800287b 	.word	0x0800287b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d046      	beq.n	800287e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f4:	e043      	b.n	800287e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027fe:	d140      	bne.n	8002882 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002804:	e03d      	b.n	8002882 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280e:	d121      	bne.n	8002854 <DMA_CheckFifoParam+0xa8>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d837      	bhi.n	8002886 <DMA_CheckFifoParam+0xda>
 8002816:	a201      	add	r2, pc, #4	; (adr r2, 800281c <DMA_CheckFifoParam+0x70>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	0800282d 	.word	0x0800282d
 8002820:	08002833 	.word	0x08002833
 8002824:	0800282d 	.word	0x0800282d
 8002828:	08002845 	.word	0x08002845
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      break;
 8002830:	e030      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d025      	beq.n	800288a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002842:	e022      	b.n	800288a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800284c:	d11f      	bne.n	800288e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002852:	e01c      	b.n	800288e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d903      	bls.n	8002862 <DMA_CheckFifoParam+0xb6>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b03      	cmp	r3, #3
 800285e:	d003      	beq.n	8002868 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002860:	e018      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
      break;
 8002866:	e015      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00e      	beq.n	8002892 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
      break;
 8002878:	e00b      	b.n	8002892 <DMA_CheckFifoParam+0xe6>
      break;
 800287a:	bf00      	nop
 800287c:	e00a      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      break;
 800287e:	bf00      	nop
 8002880:	e008      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      break;
 8002882:	bf00      	nop
 8002884:	e006      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      break;
 8002886:	bf00      	nop
 8002888:	e004      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      break;
 800288a:	bf00      	nop
 800288c:	e002      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      break;   
 800288e:	bf00      	nop
 8002890:	e000      	b.n	8002894 <DMA_CheckFifoParam+0xe8>
      break;
 8002892:	bf00      	nop
    }
  } 
  
  return status; 
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop

080028a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	e16b      	b.n	8002b98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	429a      	cmp	r2, r3
 80028da:	f040 815a 	bne.w	8002b92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d00b      	beq.n	80028fe <HAL_GPIO_Init+0x5a>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d007      	beq.n	80028fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028f2:	2b11      	cmp	r3, #17
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b12      	cmp	r3, #18
 80028fc:	d130      	bne.n	8002960 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	2203      	movs	r2, #3
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002934:	2201      	movs	r2, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 0201 	and.w	r2, r3, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0xfc>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b12      	cmp	r3, #18
 800299e:	d123      	bne.n	80029e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	08da      	lsrs	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3208      	adds	r2, #8
 80029a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	220f      	movs	r2, #15
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	08da      	lsrs	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3208      	adds	r2, #8
 80029e2:	69b9      	ldr	r1, [r7, #24]
 80029e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0203 	and.w	r2, r3, #3
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80b4 	beq.w	8002b92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b60      	ldr	r3, [pc, #384]	; (8002bb0 <HAL_GPIO_Init+0x30c>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	4a5f      	ldr	r2, [pc, #380]	; (8002bb0 <HAL_GPIO_Init+0x30c>)
 8002a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a38:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3a:	4b5d      	ldr	r3, [pc, #372]	; (8002bb0 <HAL_GPIO_Init+0x30c>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a46:	4a5b      	ldr	r2, [pc, #364]	; (8002bb4 <HAL_GPIO_Init+0x310>)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	220f      	movs	r2, #15
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a52      	ldr	r2, [pc, #328]	; (8002bb8 <HAL_GPIO_Init+0x314>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d02b      	beq.n	8002aca <HAL_GPIO_Init+0x226>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a51      	ldr	r2, [pc, #324]	; (8002bbc <HAL_GPIO_Init+0x318>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d025      	beq.n	8002ac6 <HAL_GPIO_Init+0x222>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a50      	ldr	r2, [pc, #320]	; (8002bc0 <HAL_GPIO_Init+0x31c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01f      	beq.n	8002ac2 <HAL_GPIO_Init+0x21e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4f      	ldr	r2, [pc, #316]	; (8002bc4 <HAL_GPIO_Init+0x320>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d019      	beq.n	8002abe <HAL_GPIO_Init+0x21a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4e      	ldr	r2, [pc, #312]	; (8002bc8 <HAL_GPIO_Init+0x324>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_GPIO_Init+0x216>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4d      	ldr	r2, [pc, #308]	; (8002bcc <HAL_GPIO_Init+0x328>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00d      	beq.n	8002ab6 <HAL_GPIO_Init+0x212>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4c      	ldr	r2, [pc, #304]	; (8002bd0 <HAL_GPIO_Init+0x32c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <HAL_GPIO_Init+0x20e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4b      	ldr	r2, [pc, #300]	; (8002bd4 <HAL_GPIO_Init+0x330>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <HAL_GPIO_Init+0x20a>
 8002aaa:	2307      	movs	r3, #7
 8002aac:	e00e      	b.n	8002acc <HAL_GPIO_Init+0x228>
 8002aae:	2308      	movs	r3, #8
 8002ab0:	e00c      	b.n	8002acc <HAL_GPIO_Init+0x228>
 8002ab2:	2306      	movs	r3, #6
 8002ab4:	e00a      	b.n	8002acc <HAL_GPIO_Init+0x228>
 8002ab6:	2305      	movs	r3, #5
 8002ab8:	e008      	b.n	8002acc <HAL_GPIO_Init+0x228>
 8002aba:	2304      	movs	r3, #4
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x228>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e004      	b.n	8002acc <HAL_GPIO_Init+0x228>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_Init+0x228>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_GPIO_Init+0x228>
 8002aca:	2300      	movs	r3, #0
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	f002 0203 	and.w	r2, r2, #3
 8002ad2:	0092      	lsls	r2, r2, #2
 8002ad4:	4093      	lsls	r3, r2
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002adc:	4935      	ldr	r1, [pc, #212]	; (8002bb4 <HAL_GPIO_Init+0x310>)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aea:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <HAL_GPIO_Init+0x334>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b0e:	4a32      	ldr	r2, [pc, #200]	; (8002bd8 <HAL_GPIO_Init+0x334>)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b14:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <HAL_GPIO_Init+0x334>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b38:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <HAL_GPIO_Init+0x334>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <HAL_GPIO_Init+0x334>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b62:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_GPIO_Init+0x334>)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <HAL_GPIO_Init+0x334>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b8c:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <HAL_GPIO_Init+0x334>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3301      	adds	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b0f      	cmp	r3, #15
 8002b9c:	f67f ae90 	bls.w	80028c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3724      	adds	r7, #36	; 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40013800 	.word	0x40013800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	40020400 	.word	0x40020400
 8002bc0:	40020800 	.word	0x40020800
 8002bc4:	40020c00 	.word	0x40020c00
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40021400 	.word	0x40021400
 8002bd0:	40021800 	.word	0x40021800
 8002bd4:	40021c00 	.word	0x40021c00
 8002bd8:	40013c00 	.word	0x40013c00

08002bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	887b      	ldrh	r3, [r7, #2]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	e001      	b.n	8002bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c1c:	787b      	ldrb	r3, [r7, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c28:	e003      	b.n	8002c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c2a:	887b      	ldrh	r3, [r7, #2]
 8002c2c:	041a      	lsls	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	619a      	str	r2, [r3, #24]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	401a      	ands	r2, r3
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d104      	bne.n	8002c62 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c58:	887b      	ldrh	r3, [r7, #2]
 8002c5a:	041a      	lsls	r2, r3, #16
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002c60:	e002      	b.n	8002c68 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	619a      	str	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c8a:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fc4a 	bl	800152c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40013c00 	.word	0x40013c00

08002ca4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e128      	b.n	8002f08 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a90      	ldr	r2, [pc, #576]	; (8002f10 <HAL_I2S_Init+0x26c>)
 8002cce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7fd fe57 	bl	8000984 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002cec:	f023 030f 	bic.w	r3, r3, #15
 8002cf0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d060      	beq.n	8002dc4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002d0a:	2310      	movs	r3, #16
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e001      	b.n	8002d14 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002d10:	2320      	movs	r3, #32
 8002d12:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d802      	bhi.n	8002d22 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002d22:	2001      	movs	r0, #1
 8002d24:	f001 fbb2 	bl	800448c <HAL_RCCEx_GetPeriphCLKFreq>
 8002d28:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d32:	d125      	bne.n	8002d80 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d010      	beq.n	8002d5e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	461a      	mov	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d58:	3305      	adds	r3, #5
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	e01f      	b.n	8002d9e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	461a      	mov	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7a:	3305      	adds	r3, #5
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	e00e      	b.n	8002d9e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	461a      	mov	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9a:	3305      	adds	r3, #5
 8002d9c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4a5c      	ldr	r2, [pc, #368]	; (8002f14 <HAL_I2S_Init+0x270>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	08db      	lsrs	r3, r3, #3
 8002da8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	e003      	b.n	8002dcc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d902      	bls.n	8002dd8 <HAL_I2S_Init+0x134>
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	2bff      	cmp	r3, #255	; 0xff
 8002dd6:	d907      	bls.n	8002de8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	f043 0210 	orr.w	r2, r3, #16
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e08f      	b.n	8002f08 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	ea42 0103 	orr.w	r1, r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e06:	f023 030f 	bic.w	r3, r3, #15
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6851      	ldr	r1, [r2, #4]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6892      	ldr	r2, [r2, #8]
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68d2      	ldr	r2, [r2, #12]
 8002e18:	4311      	orrs	r1, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6992      	ldr	r2, [r2, #24]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e2a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d161      	bne.n	8002ef8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a38      	ldr	r2, [pc, #224]	; (8002f18 <HAL_I2S_Init+0x274>)
 8002e38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a37      	ldr	r2, [pc, #220]	; (8002f1c <HAL_I2S_Init+0x278>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_I2S_Init+0x1a4>
 8002e44:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <HAL_I2S_Init+0x27c>)
 8002e46:	e001      	b.n	8002e4c <HAL_I2S_Init+0x1a8>
 8002e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	4932      	ldr	r1, [pc, #200]	; (8002f1c <HAL_I2S_Init+0x278>)
 8002e54:	428a      	cmp	r2, r1
 8002e56:	d101      	bne.n	8002e5c <HAL_I2S_Init+0x1b8>
 8002e58:	4a31      	ldr	r2, [pc, #196]	; (8002f20 <HAL_I2S_Init+0x27c>)
 8002e5a:	e001      	b.n	8002e60 <HAL_I2S_Init+0x1bc>
 8002e5c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002e60:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e64:	f023 030f 	bic.w	r3, r3, #15
 8002e68:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2b      	ldr	r2, [pc, #172]	; (8002f1c <HAL_I2S_Init+0x278>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d101      	bne.n	8002e78 <HAL_I2S_Init+0x1d4>
 8002e74:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <HAL_I2S_Init+0x27c>)
 8002e76:	e001      	b.n	8002e7c <HAL_I2S_Init+0x1d8>
 8002e78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a25      	ldr	r2, [pc, #148]	; (8002f1c <HAL_I2S_Init+0x278>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d101      	bne.n	8002e8e <HAL_I2S_Init+0x1ea>
 8002e8a:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_I2S_Init+0x27c>)
 8002e8c:	e001      	b.n	8002e92 <HAL_I2S_Init+0x1ee>
 8002e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e9e:	d003      	beq.n	8002ea8 <HAL_I2S_Init+0x204>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	e001      	b.n	8002eb4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	b299      	uxth	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002eca:	4303      	orrs	r3, r0
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	897b      	ldrh	r3, [r7, #10]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ee0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <HAL_I2S_Init+0x278>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d101      	bne.n	8002ef0 <HAL_I2S_Init+0x24c>
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <HAL_I2S_Init+0x27c>)
 8002eee:	e001      	b.n	8002ef4 <HAL_I2S_Init+0x250>
 8002ef0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ef4:	897a      	ldrh	r2, [r7, #10]
 8002ef6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3720      	adds	r7, #32
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	0800301b 	.word	0x0800301b
 8002f14:	cccccccd 	.word	0xcccccccd
 8002f18:	08003445 	.word	0x08003445
 8002f1c:	40003800 	.word	0x40003800
 8002f20:	40003400 	.word	0x40003400

08002f24 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	881a      	ldrh	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	1c9a      	adds	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10e      	bne.n	8002fb4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fa4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ffb8 	bl	8002f24 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	b292      	uxth	r2, r2
 8002fd0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	1c9a      	adds	r2, r3, #2
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10e      	bne.n	8003012 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003002:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ff93 	bl	8002f38 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b04      	cmp	r3, #4
 8003034:	d13a      	bne.n	80030ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d109      	bne.n	8003054 <I2S_IRQHandler+0x3a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	d102      	bne.n	8003054 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ffb4 	bl	8002fbc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	d126      	bne.n	80030ac <I2S_IRQHandler+0x92>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b20      	cmp	r3, #32
 800306a:	d11f      	bne.n	80030ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800307a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800307c:	2300      	movs	r3, #0
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	f043 0202 	orr.w	r2, r3, #2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ff50 	bl	8002f4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d136      	bne.n	8003126 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d109      	bne.n	80030d6 <I2S_IRQHandler+0xbc>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030cc:	2b80      	cmp	r3, #128	; 0x80
 80030ce:	d102      	bne.n	80030d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff45 	bl	8002f60 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d122      	bne.n	8003126 <I2S_IRQHandler+0x10c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d11b      	bne.n	8003126 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003118:	f043 0204 	orr.w	r2, r3, #4
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ff13 	bl	8002f4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003126:	bf00      	nop
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d002      	beq.n	800315c <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003156:	2302      	movs	r3, #2
 8003158:	77fb      	strb	r3, [r7, #31]
    goto error;
 800315a:	e160      	b.n	800341e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003168:	887b      	ldrh	r3, [r7, #2]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e15a      	b.n	8003428 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800317e:	2302      	movs	r3, #2
 8003180:	e152      	b.n	8003428 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d002      	beq.n	80031ae <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d114      	bne.n	80031d8 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80031cc:	887b      	ldrh	r3, [r7, #2]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	865a      	strh	r2, [r3, #50]	; 0x32
 80031d6:	e00b      	b.n	80031f0 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	887a      	ldrh	r2, [r7, #2]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	887a      	ldrh	r2, [r7, #2]
 80031ee:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2205      	movs	r2, #5
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	4a8b      	ldr	r2, [pc, #556]	; (8003430 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003204:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	4a8a      	ldr	r2, [pc, #552]	; (8003434 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	4a89      	ldr	r2, [pc, #548]	; (8003438 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003214:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	4a85      	ldr	r2, [pc, #532]	; (8003430 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 800321c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	4a84      	ldr	r2, [pc, #528]	; (8003434 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003224:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	4a83      	ldr	r2, [pc, #524]	; (8003438 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 800322c:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003238:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003240:	d002      	beq.n	8003248 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d16b      	bne.n	8003320 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a79      	ldr	r2, [pc, #484]	; (800343c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d101      	bne.n	800325e <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800325a:	4b79      	ldr	r3, [pc, #484]	; (8003440 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800325c:	e001      	b.n	8003262 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800325e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003262:	330c      	adds	r3, #12
 8003264:	4619      	mov	r1, r3
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800326e:	b29b      	uxth	r3, r3
 8003270:	f7ff f856 	bl	8002320 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a70      	ldr	r2, [pc, #448]	; (800343c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d101      	bne.n	8003282 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800327e:	4b70      	ldr	r3, [pc, #448]	; (8003440 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003280:	e001      	b.n	8003286 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8003282:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	496b      	ldr	r1, [pc, #428]	; (800343c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800328e:	428b      	cmp	r3, r1
 8003290:	d101      	bne.n	8003296 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8003292:	4b6b      	ldr	r3, [pc, #428]	; (8003440 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003294:	e001      	b.n	800329a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8003296:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80032a0:	f107 0308 	add.w	r3, r7, #8
 80032a4:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	6819      	ldr	r1, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	330c      	adds	r3, #12
 80032b4:	461a      	mov	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f7ff f830 	bl	8002320 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0202 	orr.w	r2, r2, #2
 80032ce:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032de:	f000 809e 	beq.w	800341e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a55      	ldr	r2, [pc, #340]	; (800343c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d101      	bne.n	80032f0 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80032ec:	4b54      	ldr	r3, [pc, #336]	; (8003440 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80032ee:	e001      	b.n	80032f4 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80032f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4950      	ldr	r1, [pc, #320]	; (800343c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80032fc:	428b      	cmp	r3, r1
 80032fe:	d101      	bne.n	8003304 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8003300:	4b4f      	ldr	r3, [pc, #316]	; (8003440 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003302:	e001      	b.n	8003308 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8003304:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800330c:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800331c:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800331e:	e07e      	b.n	800341e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800332e:	d10a      	bne.n	8003346 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003346:	f107 0308 	add.w	r3, r7, #8
 800334a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	6819      	ldr	r1, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a38      	ldr	r2, [pc, #224]	; (800343c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003360:	e001      	b.n	8003366 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8003362:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003366:	330c      	adds	r3, #12
 8003368:	461a      	mov	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	b29b      	uxth	r3, r3
 8003370:	f7fe ffd6 	bl	8002320 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a30      	ldr	r2, [pc, #192]	; (800343c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800337e:	4b30      	ldr	r3, [pc, #192]	; (8003440 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003380:	e001      	b.n	8003386 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8003382:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	492b      	ldr	r1, [pc, #172]	; (800343c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800338e:	428b      	cmp	r3, r1
 8003390:	d101      	bne.n	8003396 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8003392:	4b2b      	ldr	r3, [pc, #172]	; (8003440 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003394:	e001      	b.n	800339a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8003396:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800339a:	f042 0202 	orr.w	r2, r2, #2
 800339e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	4619      	mov	r1, r3
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f7fe ffb1 	bl	8002320 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033dc:	d01e      	beq.n	800341c <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a16      	ldr	r2, [pc, #88]	; (800343c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d101      	bne.n	80033ec <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80033ea:	e001      	b.n	80033f0 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80033ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4911      	ldr	r1, [pc, #68]	; (800343c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80033f8:	428b      	cmp	r3, r1
 80033fa:	d101      	bne.n	8003400 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80033fe:	e001      	b.n	8003404 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8003400:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003408:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003418:	61da      	str	r2, [r3, #28]
 800341a:	e000      	b.n	800341e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 800341c:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8003426:	7ffb      	ldrb	r3, [r7, #31]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	080036ed 	.word	0x080036ed
 8003434:	08003709 	.word	0x08003709
 8003438:	08003839 	.word	0x08003839
 800343c:	40003800 	.word	0x40003800
 8003440:	40003400 	.word	0x40003400

08003444 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4aa2      	ldr	r2, [pc, #648]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800345e:	4ba2      	ldr	r3, [pc, #648]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003460:	e001      	b.n	8003466 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003462:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a9b      	ldr	r2, [pc, #620]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800347c:	4b9a      	ldr	r3, [pc, #616]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800347e:	e001      	b.n	8003484 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003480:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003490:	d004      	beq.n	800349c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 8099 	bne.w	80035ce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d107      	bne.n	80034b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fa01 	bl	80038b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d107      	bne.n	80034d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 faa4 	bl	8003a18 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d6:	2b40      	cmp	r3, #64	; 0x40
 80034d8:	d13a      	bne.n	8003550 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f003 0320 	and.w	r3, r3, #32
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d035      	beq.n	8003550 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a7e      	ldr	r2, [pc, #504]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034ee:	4b7e      	ldr	r3, [pc, #504]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034f0:	e001      	b.n	80034f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4979      	ldr	r1, [pc, #484]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034fe:	428b      	cmp	r3, r1
 8003500:	d101      	bne.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003502:	4b79      	ldr	r3, [pc, #484]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003504:	e001      	b.n	800350a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003506:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800350a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800350e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800351e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f043 0202 	orr.w	r2, r3, #2
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fcfe 	bl	8002f4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b08      	cmp	r3, #8
 8003558:	f040 80be 	bne.w	80036d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80b8 	beq.w	80036d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003576:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a59      	ldr	r2, [pc, #356]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003582:	4b59      	ldr	r3, [pc, #356]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003584:	e001      	b.n	800358a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003586:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4954      	ldr	r1, [pc, #336]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003592:	428b      	cmp	r3, r1
 8003594:	d101      	bne.n	800359a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003596:	4b54      	ldr	r3, [pc, #336]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003598:	e001      	b.n	800359e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800359a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035a2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035a4:	2300      	movs	r3, #0
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f043 0204 	orr.w	r2, r3, #4
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff fcc0 	bl	8002f4c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035cc:	e084      	b.n	80036d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d107      	bne.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f99a 	bl	800391c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d107      	bne.n	8003602 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f9d9 	bl	80039b4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b40      	cmp	r3, #64	; 0x40
 800360a:	d12f      	bne.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d02a      	beq.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003624:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003630:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003632:	e001      	b.n	8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003634:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4929      	ldr	r1, [pc, #164]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003640:	428b      	cmp	r3, r1
 8003642:	d101      	bne.n	8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003644:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003646:	e001      	b.n	800364c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003648:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003650:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f043 0202 	orr.w	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff fc70 	bl	8002f4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b08      	cmp	r3, #8
 8003674:	d131      	bne.n	80036da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d02c      	beq.n	80036da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800368a:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800368c:	e001      	b.n	8003692 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800368e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4912      	ldr	r1, [pc, #72]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800369a:	428b      	cmp	r3, r1
 800369c:	d101      	bne.n	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036a0:	e001      	b.n	80036a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80036a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ba:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	f043 0204 	orr.w	r2, r3, #4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fc3b 	bl	8002f4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036d6:	e000      	b.n	80036da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036d8:	bf00      	nop
}
 80036da:	bf00      	nop
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40003800 	.word	0x40003800
 80036e8:	40003400 	.word	0x40003400

080036ec <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7fd fa3a 	bl	8000b74 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 8084 	bne.w	8003828 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	429a      	cmp	r2, r3
 8003728:	d13c      	bne.n	80037a4 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003738:	d006      	beq.n	8003748 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003744:	2b00      	cmp	r3, #0
 8003746:	d116      	bne.n	8003776 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a38      	ldr	r2, [pc, #224]	; (8003830 <I2SEx_TxRxDMACplt+0x128>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d101      	bne.n	8003756 <I2SEx_TxRxDMACplt+0x4e>
 8003752:	4b38      	ldr	r3, [pc, #224]	; (8003834 <I2SEx_TxRxDMACplt+0x12c>)
 8003754:	e001      	b.n	800375a <I2SEx_TxRxDMACplt+0x52>
 8003756:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4933      	ldr	r1, [pc, #204]	; (8003830 <I2SEx_TxRxDMACplt+0x128>)
 8003762:	428b      	cmp	r3, r1
 8003764:	d101      	bne.n	800376a <I2SEx_TxRxDMACplt+0x62>
 8003766:	4b33      	ldr	r3, [pc, #204]	; (8003834 <I2SEx_TxRxDMACplt+0x12c>)
 8003768:	e001      	b.n	800376e <I2SEx_TxRxDMACplt+0x66>
 800376a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	e007      	b.n	8003786 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7fd f9f8 	bl	8000b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d13c      	bne.n	8003828 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037bc:	d006      	beq.n	80037cc <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d108      	bne.n	80037de <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0202 	bic.w	r2, r2, #2
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	e015      	b.n	800380a <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a13      	ldr	r2, [pc, #76]	; (8003830 <I2SEx_TxRxDMACplt+0x128>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d101      	bne.n	80037ec <I2SEx_TxRxDMACplt+0xe4>
 80037e8:	4b12      	ldr	r3, [pc, #72]	; (8003834 <I2SEx_TxRxDMACplt+0x12c>)
 80037ea:	e001      	b.n	80037f0 <I2SEx_TxRxDMACplt+0xe8>
 80037ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	490e      	ldr	r1, [pc, #56]	; (8003830 <I2SEx_TxRxDMACplt+0x128>)
 80037f8:	428b      	cmp	r3, r1
 80037fa:	d101      	bne.n	8003800 <I2SEx_TxRxDMACplt+0xf8>
 80037fc:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <I2SEx_TxRxDMACplt+0x12c>)
 80037fe:	e001      	b.n	8003804 <I2SEx_TxRxDMACplt+0xfc>
 8003800:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003804:	f022 0202 	bic.w	r2, r2, #2
 8003808:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7fd f9b6 	bl	8000b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40003800 	.word	0x40003800
 8003834:	40003400 	.word	0x40003400

08003838 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0203 	bic.w	r2, r2, #3
 8003854:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a15      	ldr	r2, [pc, #84]	; (80038b0 <I2SEx_TxRxDMAError+0x78>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d101      	bne.n	8003864 <I2SEx_TxRxDMAError+0x2c>
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <I2SEx_TxRxDMAError+0x7c>)
 8003862:	e001      	b.n	8003868 <I2SEx_TxRxDMAError+0x30>
 8003864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4910      	ldr	r1, [pc, #64]	; (80038b0 <I2SEx_TxRxDMAError+0x78>)
 8003870:	428b      	cmp	r3, r1
 8003872:	d101      	bne.n	8003878 <I2SEx_TxRxDMAError+0x40>
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <I2SEx_TxRxDMAError+0x7c>)
 8003876:	e001      	b.n	800387c <I2SEx_TxRxDMAError+0x44>
 8003878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387c:	f022 0203 	bic.w	r2, r2, #3
 8003880:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f043 0208 	orr.w	r2, r3, #8
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff fb52 	bl	8002f4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40003800 	.word	0x40003800
 80038b4:	40003400 	.word	0x40003400

080038b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c99      	adds	r1, r3, #2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6251      	str	r1, [r2, #36]	; 0x24
 80038ca:	881a      	ldrh	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d113      	bne.n	8003912 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d106      	bne.n	8003912 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7fd f941 	bl	8000b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c99      	adds	r1, r3, #2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6251      	str	r1, [r2, #36]	; 0x24
 800392e:	8819      	ldrh	r1, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <I2SEx_TxISR_I2SExt+0x90>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <I2SEx_TxISR_I2SExt+0x22>
 800393a:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <I2SEx_TxISR_I2SExt+0x94>)
 800393c:	e001      	b.n	8003942 <I2SEx_TxISR_I2SExt+0x26>
 800393e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003942:	460a      	mov	r2, r1
 8003944:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d121      	bne.n	80039a2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a12      	ldr	r2, [pc, #72]	; (80039ac <I2SEx_TxISR_I2SExt+0x90>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <I2SEx_TxISR_I2SExt+0x50>
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <I2SEx_TxISR_I2SExt+0x94>)
 800396a:	e001      	b.n	8003970 <I2SEx_TxISR_I2SExt+0x54>
 800396c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	490d      	ldr	r1, [pc, #52]	; (80039ac <I2SEx_TxISR_I2SExt+0x90>)
 8003978:	428b      	cmp	r3, r1
 800397a:	d101      	bne.n	8003980 <I2SEx_TxISR_I2SExt+0x64>
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <I2SEx_TxISR_I2SExt+0x94>)
 800397e:	e001      	b.n	8003984 <I2SEx_TxISR_I2SExt+0x68>
 8003980:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003984:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003988:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d106      	bne.n	80039a2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7fd f8f9 	bl	8000b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40003800 	.word	0x40003800
 80039b0:	40003400 	.word	0x40003400

080039b4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68d8      	ldr	r0, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	1c99      	adds	r1, r3, #2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039cc:	b282      	uxth	r2, r0
 80039ce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d113      	bne.n	8003a10 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039f6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd f8c2 	bl	8000b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a20      	ldr	r2, [pc, #128]	; (8003aa8 <I2SEx_RxISR_I2SExt+0x90>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <I2SEx_RxISR_I2SExt+0x16>
 8003a2a:	4b20      	ldr	r3, [pc, #128]	; (8003aac <I2SEx_RxISR_I2SExt+0x94>)
 8003a2c:	e001      	b.n	8003a32 <I2SEx_RxISR_I2SExt+0x1a>
 8003a2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a32:	68d8      	ldr	r0, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	1c99      	adds	r1, r3, #2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a3e:	b282      	uxth	r2, r0
 8003a40:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d121      	bne.n	8003a9e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <I2SEx_RxISR_I2SExt+0x90>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d101      	bne.n	8003a68 <I2SEx_RxISR_I2SExt+0x50>
 8003a64:	4b11      	ldr	r3, [pc, #68]	; (8003aac <I2SEx_RxISR_I2SExt+0x94>)
 8003a66:	e001      	b.n	8003a6c <I2SEx_RxISR_I2SExt+0x54>
 8003a68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	490d      	ldr	r1, [pc, #52]	; (8003aa8 <I2SEx_RxISR_I2SExt+0x90>)
 8003a74:	428b      	cmp	r3, r1
 8003a76:	d101      	bne.n	8003a7c <I2SEx_RxISR_I2SExt+0x64>
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <I2SEx_RxISR_I2SExt+0x94>)
 8003a7a:	e001      	b.n	8003a80 <I2SEx_RxISR_I2SExt+0x68>
 8003a7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a84:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d106      	bne.n	8003a9e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7fd f87b 	bl	8000b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40003800 	.word	0x40003800
 8003aac:	40003400 	.word	0x40003400

08003ab0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e25b      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d075      	beq.n	8003bba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ace:	4ba3      	ldr	r3, [pc, #652]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d00c      	beq.n	8003af4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ada:	4ba0      	ldr	r3, [pc, #640]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d112      	bne.n	8003b0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ae6:	4b9d      	ldr	r3, [pc, #628]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af2:	d10b      	bne.n	8003b0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	4b99      	ldr	r3, [pc, #612]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d05b      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x108>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d157      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e236      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d106      	bne.n	8003b24 <HAL_RCC_OscConfig+0x74>
 8003b16:	4b91      	ldr	r3, [pc, #580]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a90      	ldr	r2, [pc, #576]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e01d      	b.n	8003b60 <HAL_RCC_OscConfig+0xb0>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x98>
 8003b2e:	4b8b      	ldr	r3, [pc, #556]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a8a      	ldr	r2, [pc, #552]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	4b88      	ldr	r3, [pc, #544]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a87      	ldr	r2, [pc, #540]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e00b      	b.n	8003b60 <HAL_RCC_OscConfig+0xb0>
 8003b48:	4b84      	ldr	r3, [pc, #528]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a83      	ldr	r2, [pc, #524]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b81      	ldr	r3, [pc, #516]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a80      	ldr	r2, [pc, #512]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d013      	beq.n	8003b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd fe00 	bl	800176c <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fd fdfc 	bl	800176c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1fb      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	4b76      	ldr	r3, [pc, #472]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0xc0>
 8003b8e:	e014      	b.n	8003bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fd fdec 	bl	800176c <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fd fde8 	bl	800176c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1e7      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	4b6c      	ldr	r3, [pc, #432]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0xe8>
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d063      	beq.n	8003c8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bc6:	4b65      	ldr	r3, [pc, #404]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd2:	4b62      	ldr	r3, [pc, #392]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d11c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bde:	4b5f      	ldr	r3, [pc, #380]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d116      	bne.n	8003c18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bea:	4b5c      	ldr	r3, [pc, #368]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_RCC_OscConfig+0x152>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e1bb      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c02:	4b56      	ldr	r3, [pc, #344]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4952      	ldr	r1, [pc, #328]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c16:	e03a      	b.n	8003c8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d020      	beq.n	8003c62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c20:	4b4f      	ldr	r3, [pc, #316]	; (8003d60 <HAL_RCC_OscConfig+0x2b0>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c26:	f7fd fda1 	bl	800176c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c2e:	f7fd fd9d 	bl	800176c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e19c      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c40:	4b46      	ldr	r3, [pc, #280]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4c:	4b43      	ldr	r3, [pc, #268]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4940      	ldr	r1, [pc, #256]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	600b      	str	r3, [r1, #0]
 8003c60:	e015      	b.n	8003c8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c62:	4b3f      	ldr	r3, [pc, #252]	; (8003d60 <HAL_RCC_OscConfig+0x2b0>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd fd80 	bl	800176c <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c70:	f7fd fd7c 	bl	800176c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e17b      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d030      	beq.n	8003cfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d016      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca2:	4b30      	ldr	r3, [pc, #192]	; (8003d64 <HAL_RCC_OscConfig+0x2b4>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca8:	f7fd fd60 	bl	800176c <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb0:	f7fd fd5c 	bl	800176c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e15b      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc2:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x200>
 8003cce:	e015      	b.n	8003cfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd0:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_RCC_OscConfig+0x2b4>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd6:	f7fd fd49 	bl	800176c <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cde:	f7fd fd45 	bl	800176c <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e144      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80a0 	beq.w	8003e4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10f      	bne.n	8003d3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	4a0e      	ldr	r2, [pc, #56]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d28:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCC_OscConfig+0x2b8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d121      	bne.n	8003d8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <HAL_RCC_OscConfig+0x2b8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a07      	ldr	r2, [pc, #28]	; (8003d68 <HAL_RCC_OscConfig+0x2b8>)
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d52:	f7fd fd0b 	bl	800176c <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d58:	e011      	b.n	8003d7e <HAL_RCC_OscConfig+0x2ce>
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	42470000 	.word	0x42470000
 8003d64:	42470e80 	.word	0x42470e80
 8003d68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6c:	f7fd fcfe 	bl	800176c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0fd      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7e:	4b81      	ldr	r3, [pc, #516]	; (8003f84 <HAL_RCC_OscConfig+0x4d4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d106      	bne.n	8003da0 <HAL_RCC_OscConfig+0x2f0>
 8003d92:	4b7d      	ldr	r3, [pc, #500]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	4a7c      	ldr	r2, [pc, #496]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9e:	e01c      	b.n	8003dda <HAL_RCC_OscConfig+0x32a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b05      	cmp	r3, #5
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x312>
 8003da8:	4b77      	ldr	r3, [pc, #476]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dac:	4a76      	ldr	r2, [pc, #472]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003dae:	f043 0304 	orr.w	r3, r3, #4
 8003db2:	6713      	str	r3, [r2, #112]	; 0x70
 8003db4:	4b74      	ldr	r3, [pc, #464]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	4a73      	ldr	r2, [pc, #460]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc0:	e00b      	b.n	8003dda <HAL_RCC_OscConfig+0x32a>
 8003dc2:	4b71      	ldr	r3, [pc, #452]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a70      	ldr	r2, [pc, #448]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dce:	4b6e      	ldr	r3, [pc, #440]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	4a6d      	ldr	r2, [pc, #436]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003dd4:	f023 0304 	bic.w	r3, r3, #4
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d015      	beq.n	8003e0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de2:	f7fd fcc3 	bl	800176c <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fd fcbf 	bl	800176c <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e0bc      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e00:	4b61      	ldr	r3, [pc, #388]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ee      	beq.n	8003dea <HAL_RCC_OscConfig+0x33a>
 8003e0c:	e014      	b.n	8003e38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0e:	f7fd fcad 	bl	800176c <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e14:	e00a      	b.n	8003e2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fd fca9 	bl	800176c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e0a6      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2c:	4b56      	ldr	r3, [pc, #344]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1ee      	bne.n	8003e16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d105      	bne.n	8003e4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3e:	4b52      	ldr	r3, [pc, #328]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	4a51      	ldr	r2, [pc, #324]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 8092 	beq.w	8003f78 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e54:	4b4c      	ldr	r3, [pc, #304]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d05c      	beq.n	8003f1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d141      	bne.n	8003eec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e68:	4b48      	ldr	r3, [pc, #288]	; (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6e:	f7fd fc7d 	bl	800176c <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e76:	f7fd fc79 	bl	800176c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e078      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e88:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f0      	bne.n	8003e76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	019b      	lsls	r3, r3, #6
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	3b01      	subs	r3, #1
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	061b      	lsls	r3, r3, #24
 8003eb8:	4933      	ldr	r1, [pc, #204]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ebe:	4b33      	ldr	r3, [pc, #204]	; (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fd fc52 	bl	800176c <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fd fc4e 	bl	800176c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e04d      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ede:	4b2a      	ldr	r3, [pc, #168]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x41c>
 8003eea:	e045      	b.n	8003f78 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eec:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef2:	f7fd fc3b 	bl	800176c <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fd fc37 	bl	800176c <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e036      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x44a>
 8003f18:	e02e      	b.n	8003f78 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e029      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f26:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d11c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d115      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f4e:	4013      	ands	r3, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d10d      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d106      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40007000 	.word	0x40007000
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	42470060 	.word	0x42470060

08003f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0cc      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b68      	ldr	r3, [pc, #416]	; (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d90c      	bls.n	8003fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b65      	ldr	r3, [pc, #404]	; (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b63      	ldr	r3, [pc, #396]	; (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0b8      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d020      	beq.n	800401a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe4:	4b59      	ldr	r3, [pc, #356]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a58      	ldr	r2, [pc, #352]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ffc:	4b53      	ldr	r3, [pc, #332]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	4a52      	ldr	r2, [pc, #328]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004008:	4b50      	ldr	r3, [pc, #320]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	494d      	ldr	r1, [pc, #308]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d044      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	4b47      	ldr	r3, [pc, #284]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d119      	bne.n	800406e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e07f      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d003      	beq.n	800404e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800404a:	2b03      	cmp	r3, #3
 800404c:	d107      	bne.n	800405e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404e:	4b3f      	ldr	r3, [pc, #252]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e06f      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405e:	4b3b      	ldr	r3, [pc, #236]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e067      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800406e:	4b37      	ldr	r3, [pc, #220]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f023 0203 	bic.w	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4934      	ldr	r1, [pc, #208]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	4313      	orrs	r3, r2
 800407e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004080:	f7fd fb74 	bl	800176c <HAL_GetTick>
 8004084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	e00a      	b.n	800409e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004088:	f7fd fb70 	bl	800176c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e04f      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409e:	4b2b      	ldr	r3, [pc, #172]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 020c 	and.w	r2, r3, #12
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d1eb      	bne.n	8004088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b0:	4b25      	ldr	r3, [pc, #148]	; (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d20c      	bcs.n	80040d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040be:	4b22      	ldr	r3, [pc, #136]	; (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b20      	ldr	r3, [pc, #128]	; (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e032      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e4:	4b19      	ldr	r3, [pc, #100]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4916      	ldr	r1, [pc, #88]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	490e      	ldr	r1, [pc, #56]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004116:	f000 f821 	bl	800415c <HAL_RCC_GetSysClockFreq>
 800411a:	4602      	mov	r2, r0
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	490a      	ldr	r1, [pc, #40]	; (8004150 <HAL_RCC_ClockConfig+0x1c0>)
 8004128:	5ccb      	ldrb	r3, [r1, r3]
 800412a:	fa22 f303 	lsr.w	r3, r2, r3
 800412e:	4a09      	ldr	r2, [pc, #36]	; (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004132:	4b09      	ldr	r3, [pc, #36]	; (8004158 <HAL_RCC_ClockConfig+0x1c8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7fd fad4 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40023c00 	.word	0x40023c00
 800414c:	40023800 	.word	0x40023800
 8004150:	0800a5e4 	.word	0x0800a5e4
 8004154:	20000014 	.word	0x20000014
 8004158:	20000018 	.word	0x20000018

0800415c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800415c:	b5b0      	push	{r4, r5, r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004162:	2100      	movs	r1, #0
 8004164:	6079      	str	r1, [r7, #4]
 8004166:	2100      	movs	r1, #0
 8004168:	60f9      	str	r1, [r7, #12]
 800416a:	2100      	movs	r1, #0
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800416e:	2100      	movs	r1, #0
 8004170:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004172:	4952      	ldr	r1, [pc, #328]	; (80042bc <HAL_RCC_GetSysClockFreq+0x160>)
 8004174:	6889      	ldr	r1, [r1, #8]
 8004176:	f001 010c 	and.w	r1, r1, #12
 800417a:	2908      	cmp	r1, #8
 800417c:	d00d      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0x3e>
 800417e:	2908      	cmp	r1, #8
 8004180:	f200 8094 	bhi.w	80042ac <HAL_RCC_GetSysClockFreq+0x150>
 8004184:	2900      	cmp	r1, #0
 8004186:	d002      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x32>
 8004188:	2904      	cmp	r1, #4
 800418a:	d003      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x38>
 800418c:	e08e      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800418e:	4b4c      	ldr	r3, [pc, #304]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004190:	60bb      	str	r3, [r7, #8]
       break;
 8004192:	e08e      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004194:	4b4b      	ldr	r3, [pc, #300]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004196:	60bb      	str	r3, [r7, #8]
      break;
 8004198:	e08b      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800419a:	4948      	ldr	r1, [pc, #288]	; (80042bc <HAL_RCC_GetSysClockFreq+0x160>)
 800419c:	6849      	ldr	r1, [r1, #4]
 800419e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80041a2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041a4:	4945      	ldr	r1, [pc, #276]	; (80042bc <HAL_RCC_GetSysClockFreq+0x160>)
 80041a6:	6849      	ldr	r1, [r1, #4]
 80041a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80041ac:	2900      	cmp	r1, #0
 80041ae:	d024      	beq.n	80041fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b0:	4942      	ldr	r1, [pc, #264]	; (80042bc <HAL_RCC_GetSysClockFreq+0x160>)
 80041b2:	6849      	ldr	r1, [r1, #4]
 80041b4:	0989      	lsrs	r1, r1, #6
 80041b6:	4608      	mov	r0, r1
 80041b8:	f04f 0100 	mov.w	r1, #0
 80041bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80041c0:	f04f 0500 	mov.w	r5, #0
 80041c4:	ea00 0204 	and.w	r2, r0, r4
 80041c8:	ea01 0305 	and.w	r3, r1, r5
 80041cc:	493d      	ldr	r1, [pc, #244]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80041ce:	fb01 f003 	mul.w	r0, r1, r3
 80041d2:	2100      	movs	r1, #0
 80041d4:	fb01 f102 	mul.w	r1, r1, r2
 80041d8:	1844      	adds	r4, r0, r1
 80041da:	493a      	ldr	r1, [pc, #232]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80041dc:	fba2 0101 	umull	r0, r1, r2, r1
 80041e0:	1863      	adds	r3, r4, r1
 80041e2:	4619      	mov	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	f7fc f840 	bl	8000270 <__aeabi_uldivmod>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4613      	mov	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e04a      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041fa:	4b30      	ldr	r3, [pc, #192]	; (80042bc <HAL_RCC_GetSysClockFreq+0x160>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	099b      	lsrs	r3, r3, #6
 8004200:	461a      	mov	r2, r3
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	f240 10ff 	movw	r0, #511	; 0x1ff
 800420a:	f04f 0100 	mov.w	r1, #0
 800420e:	ea02 0400 	and.w	r4, r2, r0
 8004212:	ea03 0501 	and.w	r5, r3, r1
 8004216:	4620      	mov	r0, r4
 8004218:	4629      	mov	r1, r5
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	014b      	lsls	r3, r1, #5
 8004224:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004228:	0142      	lsls	r2, r0, #5
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	1b00      	subs	r0, r0, r4
 8004230:	eb61 0105 	sbc.w	r1, r1, r5
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	018b      	lsls	r3, r1, #6
 800423e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004242:	0182      	lsls	r2, r0, #6
 8004244:	1a12      	subs	r2, r2, r0
 8004246:	eb63 0301 	sbc.w	r3, r3, r1
 800424a:	f04f 0000 	mov.w	r0, #0
 800424e:	f04f 0100 	mov.w	r1, #0
 8004252:	00d9      	lsls	r1, r3, #3
 8004254:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004258:	00d0      	lsls	r0, r2, #3
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	1912      	adds	r2, r2, r4
 8004260:	eb45 0303 	adc.w	r3, r5, r3
 8004264:	f04f 0000 	mov.w	r0, #0
 8004268:	f04f 0100 	mov.w	r1, #0
 800426c:	0299      	lsls	r1, r3, #10
 800426e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004272:	0290      	lsls	r0, r2, #10
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	461a      	mov	r2, r3
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	f7fb fff4 	bl	8000270 <__aeabi_uldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4613      	mov	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004290:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <HAL_RCC_GetSysClockFreq+0x160>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	3301      	adds	r3, #1
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	60bb      	str	r3, [r7, #8]
      break;
 80042aa:	e002      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ac:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80042ae:	60bb      	str	r3, [r7, #8]
      break;
 80042b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042b2:	68bb      	ldr	r3, [r7, #8]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bdb0      	pop	{r4, r5, r7, pc}
 80042bc:	40023800 	.word	0x40023800
 80042c0:	00f42400 	.word	0x00f42400
 80042c4:	017d7840 	.word	0x017d7840

080042c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d105      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d035      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042f0:	4b62      	ldr	r3, [pc, #392]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042f6:	f7fd fa39 	bl	800176c <HAL_GetTick>
 80042fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042fe:	f7fd fa35 	bl	800176c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e0b0      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004310:	4b5b      	ldr	r3, [pc, #364]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f0      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	019a      	lsls	r2, r3, #6
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	071b      	lsls	r3, r3, #28
 8004328:	4955      	ldr	r1, [pc, #340]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004330:	4b52      	ldr	r3, [pc, #328]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004336:	f7fd fa19 	bl	800176c <HAL_GetTick>
 800433a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800433e:	f7fd fa15 	bl	800176c <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e090      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004350:	4b4b      	ldr	r3, [pc, #300]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8083 	beq.w	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	4b44      	ldr	r3, [pc, #272]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	4a43      	ldr	r2, [pc, #268]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
 800437a:	4b41      	ldr	r3, [pc, #260]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004386:	4b3f      	ldr	r3, [pc, #252]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a3e      	ldr	r2, [pc, #248]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800438c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004390:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004392:	f7fd f9eb 	bl	800176c <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800439a:	f7fd f9e7 	bl	800176c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e062      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043ac:	4b35      	ldr	r3, [pc, #212]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043b8:	4b31      	ldr	r3, [pc, #196]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d02f      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d028      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043d6:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043e0:	4b29      	ldr	r3, [pc, #164]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043e6:	4b28      	ldr	r3, [pc, #160]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043ec:	4a24      	ldr	r2, [pc, #144]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043f2:	4b23      	ldr	r3, [pc, #140]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d114      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043fe:	f7fd f9b5 	bl	800176c <HAL_GetTick>
 8004402:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004404:	e00a      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7fd f9b1 	bl	800176c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	; 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e02a      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441c:	4b18      	ldr	r3, [pc, #96]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0ee      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004434:	d10d      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444a:	490d      	ldr	r1, [pc, #52]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444c:	4313      	orrs	r3, r2
 800444e:	608b      	str	r3, [r1, #8]
 8004450:	e005      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004452:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004458:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800445c:	6093      	str	r3, [r2, #8]
 800445e:	4b08      	ldr	r3, [pc, #32]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004460:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446a:	4905      	ldr	r1, [pc, #20]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446c:	4313      	orrs	r3, r2
 800446e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	42470068 	.word	0x42470068
 8004480:	40023800 	.word	0x40023800
 8004484:	40007000 	.word	0x40007000
 8004488:	42470e40 	.word	0x42470e40

0800448c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d13e      	bne.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044aa:	4b23      	ldr	r3, [pc, #140]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d12f      	bne.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044c0:	4b1e      	ldr	r3, [pc, #120]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044c2:	617b      	str	r3, [r7, #20]
          break;
 80044c4:	e02f      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044c6:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d2:	d108      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044d4:	4b18      	ldr	r3, [pc, #96]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044dc:	4a18      	ldr	r2, [pc, #96]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044de:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	e007      	b.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044e6:	4b14      	ldr	r3, [pc, #80]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ee:	4a15      	ldr	r2, [pc, #84]	; (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fc:	099b      	lsrs	r3, r3, #6
 80044fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	fb02 f303 	mul.w	r3, r2, r3
 8004508:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800450c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004510:	0f1b      	lsrs	r3, r3, #28
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	617b      	str	r3, [r7, #20]
          break;
 800451e:	e002      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
          break;
 8004524:	bf00      	nop
        }
      }
      break;
 8004526:	bf00      	nop
    }
  }
  return frequency;
 8004528:	697b      	ldr	r3, [r7, #20]
}
 800452a:	4618      	mov	r0, r3
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40023800 	.word	0x40023800
 800453c:	00bb8000 	.word	0x00bb8000
 8004540:	017d7840 	.word	0x017d7840
 8004544:	00f42400 	.word	0x00f42400

08004548 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e022      	b.n	80045a0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d105      	bne.n	8004572 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7fc fd33 	bl	8000fd8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2203      	movs	r2, #3
 8004576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f814 	bl	80045a8 <HAL_SD_InitCard>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e00a      	b.n	80045a0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80045a8:	b5b0      	push	{r4, r5, r7, lr}
 80045aa:	b08e      	sub	sp, #56	; 0x38
 80045ac:	af04      	add	r7, sp, #16
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80045c4:	2376      	movs	r3, #118	; 0x76
 80045c6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681d      	ldr	r5, [r3, #0]
 80045cc:	466c      	mov	r4, sp
 80045ce:	f107 0314 	add.w	r3, r7, #20
 80045d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045da:	f107 0308 	add.w	r3, r7, #8
 80045de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045e0:	4628      	mov	r0, r5
 80045e2:	f001 fb45 	bl	8005c70 <SDIO_Init>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80045ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e031      	b.n	800465c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80045f8:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <HAL_SD_InitCard+0xbc>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f001 fb7d 	bl	8005d02 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004608:	4b16      	ldr	r3, [pc, #88]	; (8004664 <HAL_SD_InitCard+0xbc>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fefe 	bl	8005410 <SD_PowerON>
 8004614:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00b      	beq.n	8004634 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e013      	b.n	800465c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fe1f 	bl	8005278 <SD_InitCard>
 800463a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00b      	beq.n	800465a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3728      	adds	r7, #40	; 0x28
 8004660:	46bd      	mov	sp, r7
 8004662:	bdb0      	pop	{r4, r5, r7, pc}
 8004664:	422580a0 	.word	0x422580a0

08004668 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b092      	sub	sp, #72	; 0x48
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004676:	f7fd f879 	bl	800176c <HAL_GetTick>
 800467a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d107      	bne.n	800469a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e1d9      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	f040 81cc 	bne.w	8004a40 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80046ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	441a      	add	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d907      	bls.n	80046cc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e1c0      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2203      	movs	r2, #3
 80046d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2200      	movs	r2, #0
 80046da:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d002      	beq.n	80046ea <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80046e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e6:	025b      	lsls	r3, r3, #9
 80046e8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046f2:	4618      	mov	r0, r3
 80046f4:	f001 fb98 	bl	8005e28 <SDMMC_CmdBlockLength>
 80046f8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80046fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00f      	beq.n	8004720 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a9b      	ldr	r2, [pc, #620]	; (8004974 <HAL_SD_ReadBlocks+0x30c>)
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800470c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470e:	431a      	orrs	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e196      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004724:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	025b      	lsls	r3, r3, #9
 800472a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800472c:	2390      	movs	r3, #144	; 0x90
 800472e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004730:	2302      	movs	r3, #2
 8004732:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004734:	2300      	movs	r3, #0
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004738:	2301      	movs	r3, #1
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f107 0214 	add.w	r2, r7, #20
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f001 fb42 	bl	8005dd0 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d90a      	bls.n	8004768 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2202      	movs	r2, #2
 8004756:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800475e:	4618      	mov	r0, r3
 8004760:	f001 fba6 	bl	8005eb0 <SDMMC_CmdReadMultiBlock>
 8004764:	6478      	str	r0, [r7, #68]	; 0x44
 8004766:	e009      	b.n	800477c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004774:	4618      	mov	r0, r3
 8004776:	f001 fb79 	bl	8005e6c <SDMMC_CmdReadSingleBlock>
 800477a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800477c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477e:	2b00      	cmp	r3, #0
 8004780:	d012      	beq.n	80047a8 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a7b      	ldr	r2, [pc, #492]	; (8004974 <HAL_SD_ReadBlocks+0x30c>)
 8004788:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800478e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004790:	431a      	orrs	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e152      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80047ac:	e061      	b.n	8004872 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d03c      	beq.n	8004836 <HAL_SD_ReadBlocks+0x1ce>
 80047bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d039      	beq.n	8004836 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80047c2:	2300      	movs	r3, #0
 80047c4:	643b      	str	r3, [r7, #64]	; 0x40
 80047c6:	e033      	b.n	8004830 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f001 fa7a 	bl	8005cc6 <SDIO_ReadFIFO>
 80047d2:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047de:	3301      	adds	r3, #1
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80047e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e4:	3b01      	subs	r3, #1
 80047e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80047f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f4:	3301      	adds	r3, #1
 80047f6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fa:	3b01      	subs	r3, #1
 80047fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	b2da      	uxtb	r2, r3
 8004804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004806:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	3301      	adds	r3, #1
 800480c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800480e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004810:	3b01      	subs	r3, #1
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004816:	0e1b      	lsrs	r3, r3, #24
 8004818:	b2da      	uxtb	r2, r3
 800481a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800481e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004820:	3301      	adds	r3, #1
 8004822:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004826:	3b01      	subs	r3, #1
 8004828:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800482a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800482c:	3301      	adds	r3, #1
 800482e:	643b      	str	r3, [r7, #64]	; 0x40
 8004830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004832:	2b07      	cmp	r3, #7
 8004834:	d9c8      	bls.n	80047c8 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004836:	f7fc ff99 	bl	800176c <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004842:	429a      	cmp	r2, r3
 8004844:	d902      	bls.n	800484c <HAL_SD_ReadBlocks+0x1e4>
 8004846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004848:	2b00      	cmp	r3, #0
 800484a:	d112      	bne.n	8004872 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a48      	ldr	r2, [pc, #288]	; (8004974 <HAL_SD_ReadBlocks+0x30c>)
 8004852:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004858:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e0ed      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004878:	f240 332a 	movw	r3, #810	; 0x32a
 800487c:	4013      	ands	r3, r2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d095      	beq.n	80047ae <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d022      	beq.n	80048d6 <HAL_SD_ReadBlocks+0x26e>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d91f      	bls.n	80048d6 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	2b03      	cmp	r3, #3
 800489c:	d01b      	beq.n	80048d6 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f001 fb6a 	bl	8005f7c <SDMMC_CmdStopTransfer>
 80048a8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80048aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d012      	beq.n	80048d6 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a2f      	ldr	r2, [pc, #188]	; (8004974 <HAL_SD_ReadBlocks+0x30c>)
 80048b6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048be:	431a      	orrs	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e0bb      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d012      	beq.n	800490a <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a22      	ldr	r2, [pc, #136]	; (8004974 <HAL_SD_ReadBlocks+0x30c>)
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	f043 0208 	orr.w	r2, r3, #8
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e0a1      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d012      	beq.n	800493e <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a15      	ldr	r2, [pc, #84]	; (8004974 <HAL_SD_ReadBlocks+0x30c>)
 800491e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	f043 0202 	orr.w	r2, r3, #2
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e087      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d064      	beq.n	8004a16 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a08      	ldr	r2, [pc, #32]	; (8004974 <HAL_SD_ReadBlocks+0x30c>)
 8004952:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	f043 0220 	orr.w	r2, r3, #32
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e06d      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3e6>
 8004972:	bf00      	nop
 8004974:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f001 f9a2 	bl	8005cc6 <SDIO_ReadFIFO>
 8004982:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	b2da      	uxtb	r2, r3
 8004988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498e:	3301      	adds	r3, #1
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004994:	3b01      	subs	r3, #1
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	b2da      	uxtb	r2, r3
 800499e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80049a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a4:	3301      	adds	r3, #1
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80049a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049aa:	3b01      	subs	r3, #1
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80049b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ba:	3301      	adds	r3, #1
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80049be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c0:	3b01      	subs	r3, #1
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c6:	0e1b      	lsrs	r3, r3, #24
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049cc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80049ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d0:	3301      	adds	r3, #1
 80049d2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80049d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d6:	3b01      	subs	r3, #1
 80049d8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80049da:	f7fc fec7 	bl	800176c <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d902      	bls.n	80049f0 <HAL_SD_ReadBlocks+0x388>
 80049ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d112      	bne.n	8004a16 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <HAL_SD_ReadBlocks+0x3f0>)
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e01b      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_SD_ReadBlocks+0x3c2>
 8004a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1a6      	bne.n	8004978 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e006      	b.n	8004a4e <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
  }
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3748      	adds	r7, #72	; 0x48
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	004005ff 	.word	0x004005ff

08004a5c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b092      	sub	sp, #72	; 0x48
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004a6a:	f7fc fe7f 	bl	800176c <HAL_GetTick>
 8004a6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d107      	bne.n	8004a8e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e184      	b.n	8004d98 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	f040 8177 	bne.w	8004d8a <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	441a      	add	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d907      	bls.n	8004ac0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e16b      	b.n	8004d98 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2200      	movs	r2, #0
 8004ace:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d002      	beq.n	8004ade <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	025b      	lsls	r3, r3, #9
 8004adc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 f99e 	bl	8005e28 <SDMMC_CmdBlockLength>
 8004aec:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00f      	beq.n	8004b14 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a9d      	ldr	r2, [pc, #628]	; (8004d70 <HAL_SD_WriteBlocks+0x314>)
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b02:	431a      	orrs	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e141      	b.n	8004d98 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b18:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	025b      	lsls	r3, r3, #9
 8004b1e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004b20:	2390      	movs	r3, #144	; 0x90
 8004b22:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004b24:	2300      	movs	r3, #0
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f107 0218 	add.w	r2, r7, #24
 8004b38:	4611      	mov	r1, r2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 f948 	bl	8005dd0 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d90a      	bls.n	8004b5c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 f9f0 	bl	8005f38 <SDMMC_CmdWriteMultiBlock>
 8004b58:	6478      	str	r0, [r7, #68]	; 0x44
 8004b5a:	e009      	b.n	8004b70 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2210      	movs	r2, #16
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 f9c3 	bl	8005ef4 <SDMMC_CmdWriteSingleBlock>
 8004b6e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d012      	beq.n	8004b9c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a7d      	ldr	r2, [pc, #500]	; (8004d70 <HAL_SD_WriteBlocks+0x314>)
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b84:	431a      	orrs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0fd      	b.n	8004d98 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004ba0:	e065      	b.n	8004c6e <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d040      	beq.n	8004c32 <HAL_SD_WriteBlocks+0x1d6>
 8004bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d03d      	beq.n	8004c32 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bba:	e037      	b.n	8004c2c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	021a      	lsls	r2, r3, #8
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bdc:	3301      	adds	r3, #1
 8004bde:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be2:	3b01      	subs	r3, #1
 8004be4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	041a      	lsls	r2, r3, #16
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	061a      	lsls	r2, r3, #24
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c12:	3b01      	subs	r3, #1
 8004c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f107 0214 	add.w	r2, r7, #20
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 f85d 	bl	8005ce0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c28:	3301      	adds	r3, #1
 8004c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2e:	2b07      	cmp	r3, #7
 8004c30:	d9c4      	bls.n	8004bbc <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004c32:	f7fc fd9b 	bl	800176c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d902      	bls.n	8004c48 <HAL_SD_WriteBlocks+0x1ec>
 8004c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d112      	bne.n	8004c6e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a48      	ldr	r2, [pc, #288]	; (8004d70 <HAL_SD_WriteBlocks+0x314>)
 8004c4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c56:	431a      	orrs	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e094      	b.n	8004d98 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c74:	f240 331a 	movw	r3, #794	; 0x31a
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d091      	beq.n	8004ba2 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d022      	beq.n	8004cd2 <HAL_SD_WriteBlocks+0x276>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d91f      	bls.n	8004cd2 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d01b      	beq.n	8004cd2 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f001 f96c 	bl	8005f7c <SDMMC_CmdStopTransfer>
 8004ca4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d012      	beq.n	8004cd2 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a2f      	ldr	r2, [pc, #188]	; (8004d70 <HAL_SD_WriteBlocks+0x314>)
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e062      	b.n	8004d98 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d012      	beq.n	8004d06 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a22      	ldr	r2, [pc, #136]	; (8004d70 <HAL_SD_WriteBlocks+0x314>)
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	f043 0208 	orr.w	r2, r3, #8
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e048      	b.n	8004d98 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d012      	beq.n	8004d3a <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <HAL_SD_WriteBlocks+0x314>)
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	f043 0202 	orr.w	r2, r3, #2
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e02e      	b.n	8004d98 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d015      	beq.n	8004d74 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a08      	ldr	r2, [pc, #32]	; (8004d70 <HAL_SD_WriteBlocks+0x314>)
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	f043 0210 	orr.w	r2, r3, #16
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e014      	b.n	8004d98 <HAL_SD_WriteBlocks+0x33c>
 8004d6e:	bf00      	nop
 8004d70:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f240 523a 	movw	r2, #1338	; 0x53a
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e006      	b.n	8004d98 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3748      	adds	r7, #72	; 0x48
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dae:	0f9b      	lsrs	r3, r3, #30
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dba:	0e9b      	lsrs	r3, r3, #26
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dcc:	0e1b      	lsrs	r3, r3, #24
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dde:	0c1b      	lsrs	r3, r3, #16
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e00:	0d1b      	lsrs	r3, r3, #20
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e0c:	0c1b      	lsrs	r3, r3, #16
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e1e:	0bdb      	lsrs	r3, r3, #15
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e30:	0b9b      	lsrs	r3, r3, #14
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e42:	0b5b      	lsrs	r3, r3, #13
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e54:	0b1b      	lsrs	r3, r3, #12
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2200      	movs	r2, #0
 8004e66:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d163      	bne.n	8004f38 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e74:	009a      	lsls	r2, r3, #2
 8004e76:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004e80:	0f92      	lsrs	r2, r2, #30
 8004e82:	431a      	orrs	r2, r3
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e8c:	0edb      	lsrs	r3, r3, #27
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e9e:	0e1b      	lsrs	r3, r3, #24
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eb0:	0d5b      	lsrs	r3, r3, #21
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec2:	0c9b      	lsrs	r3, r3, #18
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed4:	0bdb      	lsrs	r3, r3, #15
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	7e1b      	ldrb	r3, [r3, #24]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	3302      	adds	r3, #2
 8004ef8:	2201      	movs	r2, #1
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004f02:	fb02 f203 	mul.w	r2, r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	7a1b      	ldrb	r3, [r3, #8]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	2201      	movs	r2, #1
 8004f16:	409a      	lsls	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004f24:	0a52      	lsrs	r2, r2, #9
 8004f26:	fb02 f203 	mul.w	r2, r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f34:	661a      	str	r2, [r3, #96]	; 0x60
 8004f36:	e031      	b.n	8004f9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d11d      	bne.n	8004f7c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f44:	041b      	lsls	r3, r3, #16
 8004f46:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f4e:	0c1b      	lsrs	r3, r3, #16
 8004f50:	431a      	orrs	r2, r3
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	029a      	lsls	r2, r3, #10
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f70:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	661a      	str	r2, [r3, #96]	; 0x60
 8004f7a:	e00f      	b.n	8004f9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a58      	ldr	r2, [pc, #352]	; (80050e4 <HAL_SD_GetCardCSD+0x344>)
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e09d      	b.n	80050d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa0:	0b9b      	lsrs	r3, r3, #14
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb2:	09db      	lsrs	r3, r3, #7
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd4:	0fdb      	lsrs	r3, r3, #31
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe0:	0f5b      	lsrs	r3, r3, #29
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	0e9b      	lsrs	r3, r3, #26
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005004:	0d9b      	lsrs	r3, r3, #22
 8005006:	b2db      	uxtb	r3, r3
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	b2da      	uxtb	r2, r3
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005016:	0d5b      	lsrs	r3, r3, #21
 8005018:	b2db      	uxtb	r3, r3
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	b2da      	uxtb	r2, r3
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	0c1b      	lsrs	r3, r3, #16
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	b2da      	uxtb	r2, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005046:	0bdb      	lsrs	r3, r3, #15
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	b2da      	uxtb	r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	0b9b      	lsrs	r3, r3, #14
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	b2da      	uxtb	r2, r3
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	0b5b      	lsrs	r3, r3, #13
 8005070:	b2db      	uxtb	r3, r3
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	b2da      	uxtb	r2, r3
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005082:	0b1b      	lsrs	r3, r3, #12
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	b2da      	uxtb	r2, r3
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005096:	0a9b      	lsrs	r3, r3, #10
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	0a1b      	lsrs	r3, r3, #8
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	004005ff 	.word	0x004005ff

080050e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005140:	b5b0      	push	{r4, r5, r7, lr}
 8005142:	b08e      	sub	sp, #56	; 0x38
 8005144:	af04      	add	r7, sp, #16
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2203      	movs	r2, #3
 800514e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	2b03      	cmp	r3, #3
 8005158:	d02e      	beq.n	80051b8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005160:	d106      	bne.n	8005170 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
 800516e:	e029      	b.n	80051c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005176:	d10a      	bne.n	800518e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f9ff 	bl	800557c <SD_WideBus_Enable>
 800517e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	639a      	str	r2, [r3, #56]	; 0x38
 800518c:	e01a      	b.n	80051c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fa3c 	bl	8005612 <SD_WideBus_Disable>
 800519a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38
 80051a8:	e00c      	b.n	80051c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38
 80051b6:	e005      	b.n	80051c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a18      	ldr	r2, [pc, #96]	; (8005234 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e024      	b.n	800522a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681d      	ldr	r5, [r3, #0]
 8005206:	466c      	mov	r4, sp
 8005208:	f107 0318 	add.w	r3, r7, #24
 800520c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005210:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005214:	f107 030c 	add.w	r3, r7, #12
 8005218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800521a:	4628      	mov	r0, r5
 800521c:	f000 fd28 	bl	8005c70 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3728      	adds	r7, #40	; 0x28
 800522e:	46bd      	mov	sp, r7
 8005230:	bdb0      	pop	{r4, r5, r7, pc}
 8005232:	bf00      	nop
 8005234:	004005ff 	.word	0x004005ff

08005238 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005244:	f107 030c 	add.w	r3, r7, #12
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f96e 	bl	800552c <SD_SendStatus>
 8005250:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	0a5b      	lsrs	r3, r3, #9
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800526e:	693b      	ldr	r3, [r7, #16]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005278:	b5b0      	push	{r4, r5, r7, lr}
 800527a:	b094      	sub	sp, #80	; 0x50
 800527c:	af04      	add	r7, sp, #16
 800527e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005280:	2301      	movs	r3, #1
 8005282:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fd49 	bl	8005d20 <SDIO_GetPowerState>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005294:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005298:	e0b6      	b.n	8005408 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d02f      	beq.n	8005302 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 ff72 	bl	8006190 <SDMMC_CmdSendCID>
 80052ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80052ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <SD_InitCard+0x40>
    {
      return errorstate;
 80052b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b6:	e0a7      	b.n	8005408 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2100      	movs	r1, #0
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fd73 	bl	8005daa <SDIO_GetResponse>
 80052c4:	4602      	mov	r2, r0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2104      	movs	r1, #4
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fd6a 	bl	8005daa <SDIO_GetResponse>
 80052d6:	4602      	mov	r2, r0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2108      	movs	r1, #8
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fd61 	bl	8005daa <SDIO_GetResponse>
 80052e8:	4602      	mov	r2, r0
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	210c      	movs	r1, #12
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fd58 	bl	8005daa <SDIO_GetResponse>
 80052fa:	4602      	mov	r2, r0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	2b03      	cmp	r3, #3
 8005308:	d00d      	beq.n	8005326 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f107 020e 	add.w	r2, r7, #14
 8005312:	4611      	mov	r1, r2
 8005314:	4618      	mov	r0, r3
 8005316:	f000 ff78 	bl	800620a <SDMMC_CmdSetRelAdd>
 800531a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800531c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <SD_InitCard+0xae>
    {
      return errorstate;
 8005322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005324:	e070      	b.n	8005408 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532a:	2b03      	cmp	r3, #3
 800532c:	d036      	beq.n	800539c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800532e:	89fb      	ldrh	r3, [r7, #14]
 8005330:	461a      	mov	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533e:	041b      	lsls	r3, r3, #16
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f000 ff42 	bl	80061cc <SDMMC_CmdSendCSD>
 8005348:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800534a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005352:	e059      	b.n	8005408 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2100      	movs	r1, #0
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fd25 	bl	8005daa <SDIO_GetResponse>
 8005360:	4602      	mov	r2, r0
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2104      	movs	r1, #4
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fd1c 	bl	8005daa <SDIO_GetResponse>
 8005372:	4602      	mov	r2, r0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2108      	movs	r1, #8
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fd13 	bl	8005daa <SDIO_GetResponse>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	210c      	movs	r1, #12
 8005390:	4618      	mov	r0, r3
 8005392:	f000 fd0a 	bl	8005daa <SDIO_GetResponse>
 8005396:	4602      	mov	r2, r0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2104      	movs	r1, #4
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fd01 	bl	8005daa <SDIO_GetResponse>
 80053a8:	4603      	mov	r3, r0
 80053aa:	0d1a      	lsrs	r2, r3, #20
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80053b0:	f107 0310 	add.w	r3, r7, #16
 80053b4:	4619      	mov	r1, r3
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff fcf2 	bl	8004da0 <HAL_SD_GetCardCSD>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80053c6:	e01f      	b.n	8005408 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6819      	ldr	r1, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d0:	041b      	lsls	r3, r3, #16
 80053d2:	461a      	mov	r2, r3
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	4608      	mov	r0, r1
 80053da:	f000 fdf1 	bl	8005fc0 <SDMMC_CmdSelDesel>
 80053de:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80053e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <SD_InitCard+0x172>
  {
    return errorstate;
 80053e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e8:	e00e      	b.n	8005408 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681d      	ldr	r5, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	466c      	mov	r4, sp
 80053f2:	f103 0210 	add.w	r2, r3, #16
 80053f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80053f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053fc:	3304      	adds	r3, #4
 80053fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005400:	4628      	mov	r0, r5
 8005402:	f000 fc35 	bl	8005c70 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3740      	adds	r7, #64	; 0x40
 800540c:	46bd      	mov	sp, r7
 800540e:	bdb0      	pop	{r4, r5, r7, pc}

08005410 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fdec 	bl	8006006 <SDMMC_CmdGoIdleState>
 800542e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	e072      	b.n	8005520 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fdff 	bl	8006042 <SDMMC_CmdOperCond>
 8005444:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00d      	beq.n	8005468 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fdd5 	bl	8006006 <SDMMC_CmdGoIdleState>
 800545c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d004      	beq.n	800546e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	e05b      	b.n	8005520 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005472:	2b01      	cmp	r3, #1
 8005474:	d137      	bne.n	80054e6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2100      	movs	r1, #0
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fdff 	bl	8006080 <SDMMC_CmdAppCommand>
 8005482:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d02d      	beq.n	80054e6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800548a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800548e:	e047      	b.n	8005520 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2100      	movs	r1, #0
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fdf2 	bl	8006080 <SDMMC_CmdAppCommand>
 800549c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <SD_PowerON+0x98>
    {
      return errorstate;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	e03b      	b.n	8005520 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	491e      	ldr	r1, [pc, #120]	; (8005528 <SD_PowerON+0x118>)
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fe08 	bl	80060c4 <SDMMC_CmdAppOperCommand>
 80054b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054c0:	e02e      	b.n	8005520 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2100      	movs	r1, #0
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fc6e 	bl	8005daa <SDIO_GetResponse>
 80054ce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	0fdb      	lsrs	r3, r3, #31
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <SD_PowerON+0xcc>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <SD_PowerON+0xce>
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]

    count++;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	3301      	adds	r3, #1
 80054e4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d802      	bhi.n	80054f6 <SD_PowerON+0xe6>
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0cc      	beq.n	8005490 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d902      	bls.n	8005506 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005504:	e00c      	b.n	8005520 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	645a      	str	r2, [r3, #68]	; 0x44
 8005516:	e002      	b.n	800551e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	c1100000 	.word	0xc1100000

0800552c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d102      	bne.n	8005542 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800553c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005540:	e018      	b.n	8005574 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f000 fe7c 	bl	800624c <SDMMC_CmdSendStatus>
 8005554:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <SD_SendStatus+0x34>
  {
    return errorstate;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	e009      	b.n	8005574 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fc1f 	bl	8005daa <SDIO_GetResponse>
 800556c:	4602      	mov	r2, r0
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2100      	movs	r1, #0
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fc09 	bl	8005daa <SDIO_GetResponse>
 8005598:	4603      	mov	r3, r0
 800559a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055a2:	d102      	bne.n	80055aa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80055a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055a8:	e02f      	b.n	800560a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80055aa:	f107 030c 	add.w	r3, r7, #12
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f879 	bl	80056a8 <SD_FindSCR>
 80055b6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	e023      	b.n	800560a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01c      	beq.n	8005606 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d4:	041b      	lsls	r3, r3, #16
 80055d6:	4619      	mov	r1, r3
 80055d8:	4610      	mov	r0, r2
 80055da:	f000 fd51 	bl	8006080 <SDMMC_CmdAppCommand>
 80055de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	e00f      	b.n	800560a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2102      	movs	r1, #2
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fd8a 	bl	800610a <SDMMC_CmdBusWidth>
 80055f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	e003      	b.n	800560a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005602:	2300      	movs	r3, #0
 8005604:	e001      	b.n	800560a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005606:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b086      	sub	sp, #24
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2100      	movs	r1, #0
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fbbe 	bl	8005daa <SDIO_GetResponse>
 800562e:	4603      	mov	r3, r0
 8005630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005634:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005638:	d102      	bne.n	8005640 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800563a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800563e:	e02f      	b.n	80056a0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005640:	f107 030c 	add.w	r3, r7, #12
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f82e 	bl	80056a8 <SD_FindSCR>
 800564c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	e023      	b.n	80056a0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d01c      	beq.n	800569c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566a:	041b      	lsls	r3, r3, #16
 800566c:	4619      	mov	r1, r3
 800566e:	4610      	mov	r0, r2
 8005670:	f000 fd06 	bl	8006080 <SDMMC_CmdAppCommand>
 8005674:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	e00f      	b.n	80056a0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2100      	movs	r1, #0
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fd3f 	bl	800610a <SDMMC_CmdBusWidth>
 800568c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	e003      	b.n	80056a0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005698:	2300      	movs	r3, #0
 800569a:	e001      	b.n	80056a0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800569c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b08f      	sub	sp, #60	; 0x3c
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80056b2:	f7fc f85b 	bl	800176c <HAL_GetTick>
 80056b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80056bc:	2300      	movs	r3, #0
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2108      	movs	r1, #8
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fbaa 	bl	8005e28 <SDMMC_CmdBlockLength>
 80056d4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	e0a9      	b.n	8005834 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f000 fcc7 	bl	8006080 <SDMMC_CmdAppCommand>
 80056f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <SD_FindSCR+0x56>
  {
    return errorstate;
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	e09a      	b.n	8005834 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005702:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005704:	2308      	movs	r3, #8
 8005706:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005708:	2330      	movs	r3, #48	; 0x30
 800570a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800570c:	2302      	movs	r3, #2
 800570e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005710:	2300      	movs	r3, #0
 8005712:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005714:	2301      	movs	r3, #1
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f107 0210 	add.w	r2, r7, #16
 8005720:	4611      	mov	r1, r2
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fb54 	bl	8005dd0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fd0e 	bl	800614e <SDMMC_CmdSendSCR>
 8005732:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	2b00      	cmp	r3, #0
 8005738:	d022      	beq.n	8005780 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	e07a      	b.n	8005834 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00e      	beq.n	800576a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6819      	ldr	r1, [r3, #0]
 8005750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	f107 0208 	add.w	r2, r7, #8
 8005758:	18d4      	adds	r4, r2, r3
 800575a:	4608      	mov	r0, r1
 800575c:	f000 fab3 	bl	8005cc6 <SDIO_ReadFIFO>
 8005760:	4603      	mov	r3, r0
 8005762:	6023      	str	r3, [r4, #0]
      index++;
 8005764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005766:	3301      	adds	r3, #1
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800576a:	f7fb ffff 	bl	800176c <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005778:	d102      	bne.n	8005780 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800577a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800577e:	e059      	b.n	8005834 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005786:	f240 432a 	movw	r3, #1066	; 0x42a
 800578a:	4013      	ands	r3, r2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0d6      	beq.n	800573e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2208      	movs	r2, #8
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80057a6:	2308      	movs	r3, #8
 80057a8:	e044      	b.n	8005834 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2202      	movs	r2, #2
 80057be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80057c0:	2302      	movs	r3, #2
 80057c2:	e037      	b.n	8005834 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2220      	movs	r2, #32
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80057da:	2320      	movs	r3, #32
 80057dc:	e02a      	b.n	8005834 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f240 523a 	movw	r2, #1338	; 0x53a
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	061a      	lsls	r2, r3, #24
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	0a1b      	lsrs	r3, r3, #8
 80057fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80057fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	0e1b      	lsrs	r3, r3, #24
 8005804:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	601a      	str	r2, [r3, #0]
    scr++;
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	3304      	adds	r3, #4
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	061a      	lsls	r2, r3, #24
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800581c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	0a1b      	lsrs	r3, r3, #8
 8005822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005826:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	0e1b      	lsrs	r3, r3, #24
 800582c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	373c      	adds	r7, #60	; 0x3c
 8005838:	46bd      	mov	sp, r7
 800583a:	bd90      	pop	{r4, r7, pc}

0800583c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e01d      	b.n	800588a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fb fd78 	bl	8001358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3304      	adds	r3, #4
 8005878:	4619      	mov	r1, r3
 800587a:	4610      	mov	r0, r2
 800587c:	f000 f944 	bl	8005b08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d122      	bne.n	80058ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d11b      	bne.n	80058ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f06f 0202 	mvn.w	r2, #2
 80058be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f8f8 	bl	8005aca <HAL_TIM_IC_CaptureCallback>
 80058da:	e005      	b.n	80058e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f8ea 	bl	8005ab6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f8fb 	bl	8005ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d122      	bne.n	8005942 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b04      	cmp	r3, #4
 8005908:	d11b      	bne.n	8005942 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f06f 0204 	mvn.w	r2, #4
 8005912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f8ce 	bl	8005aca <HAL_TIM_IC_CaptureCallback>
 800592e:	e005      	b.n	800593c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f8c0 	bl	8005ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f8d1 	bl	8005ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b08      	cmp	r3, #8
 800594e:	d122      	bne.n	8005996 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b08      	cmp	r3, #8
 800595c:	d11b      	bne.n	8005996 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f06f 0208 	mvn.w	r2, #8
 8005966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2204      	movs	r2, #4
 800596c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f8a4 	bl	8005aca <HAL_TIM_IC_CaptureCallback>
 8005982:	e005      	b.n	8005990 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f896 	bl	8005ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f8a7 	bl	8005ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f003 0310 	and.w	r3, r3, #16
 80059a0:	2b10      	cmp	r3, #16
 80059a2:	d122      	bne.n	80059ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	2b10      	cmp	r3, #16
 80059b0:	d11b      	bne.n	80059ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f06f 0210 	mvn.w	r2, #16
 80059ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2208      	movs	r2, #8
 80059c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f87a 	bl	8005aca <HAL_TIM_IC_CaptureCallback>
 80059d6:	e005      	b.n	80059e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f86c 	bl	8005ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f87d 	bl	8005ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d10e      	bne.n	8005a16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d107      	bne.n	8005a16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f06f 0201 	mvn.w	r2, #1
 8005a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f846 	bl	8005aa2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a20:	2b80      	cmp	r3, #128	; 0x80
 8005a22:	d10e      	bne.n	8005a42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2e:	2b80      	cmp	r3, #128	; 0x80
 8005a30:	d107      	bne.n	8005a42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f90d 	bl	8005c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b40      	cmp	r3, #64	; 0x40
 8005a4e:	d10e      	bne.n	8005a6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b40      	cmp	r3, #64	; 0x40
 8005a5c:	d107      	bne.n	8005a6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f842 	bl	8005af2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	d10e      	bne.n	8005a9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	d107      	bne.n	8005a9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f06f 0220 	mvn.w	r2, #32
 8005a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f8d7 	bl	8005c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a40      	ldr	r2, [pc, #256]	; (8005c1c <TIM_Base_SetConfig+0x114>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b26:	d00f      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a3d      	ldr	r2, [pc, #244]	; (8005c20 <TIM_Base_SetConfig+0x118>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00b      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a3c      	ldr	r2, [pc, #240]	; (8005c24 <TIM_Base_SetConfig+0x11c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d007      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a3b      	ldr	r2, [pc, #236]	; (8005c28 <TIM_Base_SetConfig+0x120>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a3a      	ldr	r2, [pc, #232]	; (8005c2c <TIM_Base_SetConfig+0x124>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d108      	bne.n	8005b5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2f      	ldr	r2, [pc, #188]	; (8005c1c <TIM_Base_SetConfig+0x114>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d02b      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b68:	d027      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2c      	ldr	r2, [pc, #176]	; (8005c20 <TIM_Base_SetConfig+0x118>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d023      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2b      	ldr	r2, [pc, #172]	; (8005c24 <TIM_Base_SetConfig+0x11c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01f      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2a      	ldr	r2, [pc, #168]	; (8005c28 <TIM_Base_SetConfig+0x120>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d01b      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a29      	ldr	r2, [pc, #164]	; (8005c2c <TIM_Base_SetConfig+0x124>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d017      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a28      	ldr	r2, [pc, #160]	; (8005c30 <TIM_Base_SetConfig+0x128>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a27      	ldr	r2, [pc, #156]	; (8005c34 <TIM_Base_SetConfig+0x12c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00f      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a26      	ldr	r2, [pc, #152]	; (8005c38 <TIM_Base_SetConfig+0x130>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00b      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a25      	ldr	r2, [pc, #148]	; (8005c3c <TIM_Base_SetConfig+0x134>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d007      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a24      	ldr	r2, [pc, #144]	; (8005c40 <TIM_Base_SetConfig+0x138>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a23      	ldr	r2, [pc, #140]	; (8005c44 <TIM_Base_SetConfig+0x13c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d108      	bne.n	8005bcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <TIM_Base_SetConfig+0x114>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_Base_SetConfig+0xf8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <TIM_Base_SetConfig+0x124>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d103      	bne.n	8005c08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	615a      	str	r2, [r3, #20]
}
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40010000 	.word	0x40010000
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40000c00 	.word	0x40000c00
 8005c2c:	40010400 	.word	0x40010400
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	40014800 	.word	0x40014800
 8005c3c:	40001800 	.word	0x40001800
 8005c40:	40001c00 	.word	0x40001c00
 8005c44:	40002000 	.word	0x40002000

08005c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005c70:	b084      	sub	sp, #16
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	f107 001c 	add.w	r0, r7, #28
 8005c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005c86:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005c88:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005c8a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005c8e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005c92:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005c96:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005c9a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005caa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	b004      	add	sp, #16
 8005cc4:	4770      	bx	lr

08005cc6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b082      	sub	sp, #8
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2203      	movs	r2, #3
 8005d0e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005d10:	2002      	movs	r0, #2
 8005d12:	f7fb fd37 	bl	8001784 <HAL_Delay>
  
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0303 	and.w	r3, r3, #3
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005d5a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005d60:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005d66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005d76:	f023 030f 	bic.w	r3, r3, #15
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	b2db      	uxtb	r3, r3
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3314      	adds	r3, #20
 8005db8:	461a      	mov	r2, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
}  
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005df6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005dfc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005e02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0

}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005e36:	2310      	movs	r3, #16
 8005e38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e3a:	2340      	movs	r3, #64	; 0x40
 8005e3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e48:	f107 0308 	add.w	r3, r7, #8
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff ff74 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e58:	2110      	movs	r1, #16
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fa40 	bl	80062e0 <SDMMC_GetCmdResp1>
 8005e60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e62:	69fb      	ldr	r3, [r7, #28]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005e7a:	2311      	movs	r3, #17
 8005e7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e7e:	2340      	movs	r3, #64	; 0x40
 8005e80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e8c:	f107 0308 	add.w	r3, r7, #8
 8005e90:	4619      	mov	r1, r3
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff ff52 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9c:	2111      	movs	r1, #17
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fa1e 	bl	80062e0 <SDMMC_GetCmdResp1>
 8005ea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ea6:	69fb      	ldr	r3, [r7, #28]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3720      	adds	r7, #32
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005ebe:	2312      	movs	r3, #18
 8005ec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ec2:	2340      	movs	r3, #64	; 0x40
 8005ec4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ece:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ed0:	f107 0308 	add.w	r3, r7, #8
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff ff30 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee0:	2112      	movs	r1, #18
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f9fc 	bl	80062e0 <SDMMC_GetCmdResp1>
 8005ee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eea:	69fb      	ldr	r3, [r7, #28]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005f02:	2318      	movs	r3, #24
 8005f04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f06:	2340      	movs	r3, #64	; 0x40
 8005f08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f14:	f107 0308 	add.w	r3, r7, #8
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ff0e 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f24:	2118      	movs	r1, #24
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f9da 	bl	80062e0 <SDMMC_GetCmdResp1>
 8005f2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f2e:	69fb      	ldr	r3, [r7, #28]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3720      	adds	r7, #32
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005f46:	2319      	movs	r3, #25
 8005f48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f4a:	2340      	movs	r3, #64	; 0x40
 8005f4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f58:	f107 0308 	add.w	r3, r7, #8
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff feec 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f68:	2119      	movs	r1, #25
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f9b8 	bl	80062e0 <SDMMC_GetCmdResp1>
 8005f70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f72:	69fb      	ldr	r3, [r7, #28]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3720      	adds	r7, #32
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005f88:	230c      	movs	r3, #12
 8005f8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f8c:	2340      	movs	r3, #64	; 0x40
 8005f8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f9a:	f107 0308 	add.w	r3, r7, #8
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fecb 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005fa6:	4a05      	ldr	r2, [pc, #20]	; (8005fbc <SDMMC_CmdStopTransfer+0x40>)
 8005fa8:	210c      	movs	r1, #12
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f998 	bl	80062e0 <SDMMC_GetCmdResp1>
 8005fb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fb2:	69fb      	ldr	r3, [r7, #28]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3720      	adds	r7, #32
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	05f5e100 	.word	0x05f5e100

08005fc0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	; 0x28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005fd0:	2307      	movs	r3, #7
 8005fd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fd4:	2340      	movs	r3, #64	; 0x40
 8005fd6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fe0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fe2:	f107 0310 	add.w	r3, r7, #16
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f7ff fea7 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff2:	2107      	movs	r1, #7
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f973 	bl	80062e0 <SDMMC_GetCmdResp1>
 8005ffa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3728      	adds	r7, #40	; 0x28
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b088      	sub	sp, #32
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006016:	2300      	movs	r3, #0
 8006018:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800601e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006022:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006024:	f107 0308 	add.w	r3, r7, #8
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff fe86 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f92d 	bl	8006290 <SDMMC_GetCmdError>
 8006036:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006038:	69fb      	ldr	r3, [r7, #28]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3720      	adds	r7, #32
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b088      	sub	sp, #32
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800604a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800604e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006050:	2308      	movs	r3, #8
 8006052:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006054:	2340      	movs	r3, #64	; 0x40
 8006056:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800605c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006060:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006062:	f107 0308 	add.w	r3, r7, #8
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff fe67 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fb16 	bl	80066a0 <SDMMC_GetCmdResp7>
 8006074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006076:	69fb      	ldr	r3, [r7, #28]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800608e:	2337      	movs	r3, #55	; 0x37
 8006090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006092:	2340      	movs	r3, #64	; 0x40
 8006094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006096:	2300      	movs	r3, #0
 8006098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800609a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800609e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060a0:	f107 0308 	add.w	r3, r7, #8
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fe48 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80060ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b0:	2137      	movs	r1, #55	; 0x37
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f914 	bl	80062e0 <SDMMC_GetCmdResp1>
 80060b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ba:	69fb      	ldr	r3, [r7, #28]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3720      	adds	r7, #32
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80060da:	2329      	movs	r3, #41	; 0x29
 80060dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060de:	2340      	movs	r3, #64	; 0x40
 80060e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060ec:	f107 0308 	add.w	r3, r7, #8
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff fe22 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fa23 	bl	8006544 <SDMMC_GetCmdResp3>
 80060fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006100:	69fb      	ldr	r3, [r7, #28]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3720      	adds	r7, #32
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b088      	sub	sp, #32
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006118:	2306      	movs	r3, #6
 800611a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800611c:	2340      	movs	r3, #64	; 0x40
 800611e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006128:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800612a:	f107 0308 	add.w	r3, r7, #8
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff fe03 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006136:	f241 3288 	movw	r2, #5000	; 0x1388
 800613a:	2106      	movs	r1, #6
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f8cf 	bl	80062e0 <SDMMC_GetCmdResp1>
 8006142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006144:	69fb      	ldr	r3, [r7, #28]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3720      	adds	r7, #32
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b088      	sub	sp, #32
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800615a:	2333      	movs	r3, #51	; 0x33
 800615c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800615e:	2340      	movs	r3, #64	; 0x40
 8006160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800616a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800616c:	f107 0308 	add.w	r3, r7, #8
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7ff fde2 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006178:	f241 3288 	movw	r2, #5000	; 0x1388
 800617c:	2133      	movs	r1, #51	; 0x33
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f8ae 	bl	80062e0 <SDMMC_GetCmdResp1>
 8006184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006186:	69fb      	ldr	r3, [r7, #28]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3720      	adds	r7, #32
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800619c:	2302      	movs	r3, #2
 800619e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80061a0:	23c0      	movs	r3, #192	; 0xc0
 80061a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061ae:	f107 0308 	add.w	r3, r7, #8
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff fdc1 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f97c 	bl	80064b8 <SDMMC_GetCmdResp2>
 80061c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061c2:	69fb      	ldr	r3, [r7, #28]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3720      	adds	r7, #32
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80061da:	2309      	movs	r3, #9
 80061dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80061de:	23c0      	movs	r3, #192	; 0xc0
 80061e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061ec:	f107 0308 	add.w	r3, r7, #8
 80061f0:	4619      	mov	r1, r3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff fda2 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f95d 	bl	80064b8 <SDMMC_GetCmdResp2>
 80061fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006200:	69fb      	ldr	r3, [r7, #28]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b088      	sub	sp, #32
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006218:	2303      	movs	r3, #3
 800621a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800621c:	2340      	movs	r3, #64	; 0x40
 800621e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006220:	2300      	movs	r3, #0
 8006222:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006228:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800622a:	f107 0308 	add.w	r3, r7, #8
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff fd83 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	2103      	movs	r1, #3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f9bc 	bl	80065b8 <SDMMC_GetCmdResp6>
 8006240:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006242:	69fb      	ldr	r3, [r7, #28]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3720      	adds	r7, #32
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800625a:	230d      	movs	r3, #13
 800625c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800625e:	2340      	movs	r3, #64	; 0x40
 8006260:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800626a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800626c:	f107 0308 	add.w	r3, r7, #8
 8006270:	4619      	mov	r1, r3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff fd62 	bl	8005d3c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006278:	f241 3288 	movw	r2, #5000	; 0x1388
 800627c:	210d      	movs	r1, #13
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f82e 	bl	80062e0 <SDMMC_GetCmdResp1>
 8006284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006286:	69fb      	ldr	r3, [r7, #28]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3720      	adds	r7, #32
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006290:	b490      	push	{r4, r7}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <SDMMC_GetCmdError+0x48>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a0f      	ldr	r2, [pc, #60]	; (80062dc <SDMMC_GetCmdError+0x4c>)
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	0a5b      	lsrs	r3, r3, #9
 80062a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80062ac:	4623      	mov	r3, r4
 80062ae:	1e5c      	subs	r4, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062b8:	e009      	b.n	80062ce <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0f2      	beq.n	80062ac <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	22c5      	movs	r2, #197	; 0xc5
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc90      	pop	{r4, r7}
 80062d6:	4770      	bx	lr
 80062d8:	20000014 	.word	0x20000014
 80062dc:	10624dd3 	.word	0x10624dd3

080062e0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80062e0:	b590      	push	{r4, r7, lr}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	460b      	mov	r3, r1
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80062ee:	4b6f      	ldr	r3, [pc, #444]	; (80064ac <SDMMC_GetCmdResp1+0x1cc>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a6f      	ldr	r2, [pc, #444]	; (80064b0 <SDMMC_GetCmdResp1+0x1d0>)
 80062f4:	fba2 2303 	umull	r2, r3, r2, r3
 80062f8:	0a5b      	lsrs	r3, r3, #9
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006300:	4623      	mov	r3, r4
 8006302:	1e5c      	subs	r4, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006308:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800630c:	e0c9      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006312:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0f0      	beq.n	8006300 <SDMMC_GetCmdResp1+0x20>
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1eb      	bne.n	8006300 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d004      	beq.n	800633e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2204      	movs	r2, #4
 8006338:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800633a:	2304      	movs	r3, #4
 800633c:	e0b1      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006350:	2301      	movs	r3, #1
 8006352:	e0a6      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	22c5      	movs	r2, #197	; 0xc5
 8006358:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f7ff fd18 	bl	8005d90 <SDIO_GetCommandResponse>
 8006360:	4603      	mov	r3, r0
 8006362:	461a      	mov	r2, r3
 8006364:	7afb      	ldrb	r3, [r7, #11]
 8006366:	4293      	cmp	r3, r2
 8006368:	d001      	beq.n	800636e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800636a:	2301      	movs	r3, #1
 800636c:	e099      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800636e:	2100      	movs	r1, #0
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff fd1a 	bl	8005daa <SDIO_GetResponse>
 8006376:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4b4e      	ldr	r3, [pc, #312]	; (80064b4 <SDMMC_GetCmdResp1+0x1d4>)
 800637c:	4013      	ands	r3, r2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006382:	2300      	movs	r3, #0
 8006384:	e08d      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	da02      	bge.n	8006392 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800638c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006390:	e087      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800639c:	2340      	movs	r3, #64	; 0x40
 800639e:	e080      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80063aa:	2380      	movs	r3, #128	; 0x80
 80063ac:	e079      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80063b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063bc:	e071      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80063c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063cc:	e069      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80063d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063dc:	e061      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80063e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063ec:	e059      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80063f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063fc:	e051      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800640c:	e049      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006418:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800641c:	e041      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642c:	e039      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800643c:	e031      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006448:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800644c:	e029      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006458:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800645c:	e021      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006468:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800646c:	e019      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006478:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800647c:	e011      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006488:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800648c:	e009      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006498:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800649c:	e001      	b.n	80064a2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800649e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd90      	pop	{r4, r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000014 	.word	0x20000014
 80064b0:	10624dd3 	.word	0x10624dd3
 80064b4:	fdffe008 	.word	0xfdffe008

080064b8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80064b8:	b490      	push	{r4, r7}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064c0:	4b1e      	ldr	r3, [pc, #120]	; (800653c <SDMMC_GetCmdResp2+0x84>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1e      	ldr	r2, [pc, #120]	; (8006540 <SDMMC_GetCmdResp2+0x88>)
 80064c6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ca:	0a5b      	lsrs	r3, r3, #9
 80064cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80064d4:	4623      	mov	r3, r4
 80064d6:	1e5c      	subs	r4, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064e0:	e026      	b.n	8006530 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0f0      	beq.n	80064d4 <SDMMC_GetCmdResp2+0x1c>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1eb      	bne.n	80064d4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2204      	movs	r2, #4
 800650c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800650e:	2304      	movs	r3, #4
 8006510:	e00e      	b.n	8006530 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d004      	beq.n	8006528 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006524:	2301      	movs	r3, #1
 8006526:	e003      	b.n	8006530 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	22c5      	movs	r2, #197	; 0xc5
 800652c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bc90      	pop	{r4, r7}
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	20000014 	.word	0x20000014
 8006540:	10624dd3 	.word	0x10624dd3

08006544 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006544:	b490      	push	{r4, r7}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800654c:	4b18      	ldr	r3, [pc, #96]	; (80065b0 <SDMMC_GetCmdResp3+0x6c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <SDMMC_GetCmdResp3+0x70>)
 8006552:	fba2 2303 	umull	r2, r3, r2, r3
 8006556:	0a5b      	lsrs	r3, r3, #9
 8006558:	f241 3288 	movw	r2, #5000	; 0x1388
 800655c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006560:	4623      	mov	r3, r4
 8006562:	1e5c      	subs	r4, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d102      	bne.n	800656e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006568:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800656c:	e01b      	b.n	80065a6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006572:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0f0      	beq.n	8006560 <SDMMC_GetCmdResp3+0x1c>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1eb      	bne.n	8006560 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d004      	beq.n	800659e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2204      	movs	r2, #4
 8006598:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800659a:	2304      	movs	r3, #4
 800659c:	e003      	b.n	80065a6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	22c5      	movs	r2, #197	; 0xc5
 80065a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bc90      	pop	{r4, r7}
 80065ae:	4770      	bx	lr
 80065b0:	20000014 	.word	0x20000014
 80065b4:	10624dd3 	.word	0x10624dd3

080065b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80065b8:	b590      	push	{r4, r7, lr}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	460b      	mov	r3, r1
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065c6:	4b34      	ldr	r3, [pc, #208]	; (8006698 <SDMMC_GetCmdResp6+0xe0>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a34      	ldr	r2, [pc, #208]	; (800669c <SDMMC_GetCmdResp6+0xe4>)
 80065cc:	fba2 2303 	umull	r2, r3, r2, r3
 80065d0:	0a5b      	lsrs	r3, r3, #9
 80065d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80065da:	4623      	mov	r3, r4
 80065dc:	1e5c      	subs	r4, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065e6:	e052      	b.n	800668e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ec:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0f0      	beq.n	80065da <SDMMC_GetCmdResp6+0x22>
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1eb      	bne.n	80065da <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2204      	movs	r2, #4
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006614:	2304      	movs	r3, #4
 8006616:	e03a      	b.n	800668e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d004      	beq.n	800662e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800662a:	2301      	movs	r3, #1
 800662c:	e02f      	b.n	800668e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7ff fbae 	bl	8005d90 <SDIO_GetCommandResponse>
 8006634:	4603      	mov	r3, r0
 8006636:	461a      	mov	r2, r3
 8006638:	7afb      	ldrb	r3, [r7, #11]
 800663a:	4293      	cmp	r3, r2
 800663c:	d001      	beq.n	8006642 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800663e:	2301      	movs	r3, #1
 8006640:	e025      	b.n	800668e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	22c5      	movs	r2, #197	; 0xc5
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006648:	2100      	movs	r1, #0
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7ff fbad 	bl	8005daa <SDIO_GetResponse>
 8006650:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d106      	bne.n	800666a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	0c1b      	lsrs	r3, r3, #16
 8006660:	b29a      	uxth	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006666:	2300      	movs	r3, #0
 8006668:	e011      	b.n	800668e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006678:	e009      	b.n	800668e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006688:	e001      	b.n	800668e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800668a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800668e:	4618      	mov	r0, r3
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	bd90      	pop	{r4, r7, pc}
 8006696:	bf00      	nop
 8006698:	20000014 	.word	0x20000014
 800669c:	10624dd3 	.word	0x10624dd3

080066a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80066a0:	b490      	push	{r4, r7}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066a8:	4b21      	ldr	r3, [pc, #132]	; (8006730 <SDMMC_GetCmdResp7+0x90>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a21      	ldr	r2, [pc, #132]	; (8006734 <SDMMC_GetCmdResp7+0x94>)
 80066ae:	fba2 2303 	umull	r2, r3, r2, r3
 80066b2:	0a5b      	lsrs	r3, r3, #9
 80066b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80066bc:	4623      	mov	r3, r4
 80066be:	1e5c      	subs	r4, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066c8:	e02c      	b.n	8006724 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ce:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <SDMMC_GetCmdResp7+0x1c>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1eb      	bne.n	80066bc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2204      	movs	r2, #4
 80066f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066f6:	2304      	movs	r3, #4
 80066f8:	e014      	b.n	8006724 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d004      	beq.n	8006710 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800670c:	2301      	movs	r3, #1
 800670e:	e009      	b.n	8006724 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2240      	movs	r2, #64	; 0x40
 8006720:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006722:	2300      	movs	r3, #0
  
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bc90      	pop	{r4, r7}
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	20000014 	.word	0x20000014
 8006734:	10624dd3 	.word	0x10624dd3

08006738 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800673c:	4904      	ldr	r1, [pc, #16]	; (8006750 <MX_FATFS_Init+0x18>)
 800673e:	4805      	ldr	r0, [pc, #20]	; (8006754 <MX_FATFS_Init+0x1c>)
 8006740:	f002 fc08 	bl	8008f54 <FATFS_LinkDriver>
 8006744:	4603      	mov	r3, r0
 8006746:	461a      	mov	r2, r3
 8006748:	4b03      	ldr	r3, [pc, #12]	; (8006758 <MX_FATFS_Init+0x20>)
 800674a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800674c:	bf00      	nop
 800674e:	bd80      	pop	{r7, pc}
 8006750:	200087c8 	.word	0x200087c8
 8006754:	0800a5fc 	.word	0x0800a5fc
 8006758:	200087c4 	.word	0x200087c4

0800675c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006760:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006762:	4618      	mov	r0, r3
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006776:	f000 f879 	bl	800686c <BSP_SD_IsDetected>
 800677a:	4603      	mov	r3, r0
 800677c:	2b01      	cmp	r3, #1
 800677e:	d001      	beq.n	8006784 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e012      	b.n	80067aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006784:	480b      	ldr	r0, [pc, #44]	; (80067b4 <BSP_SD_Init+0x48>)
 8006786:	f7fd fedf 	bl	8004548 <HAL_SD_Init>
 800678a:	4603      	mov	r3, r0
 800678c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d109      	bne.n	80067a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006798:	4806      	ldr	r0, [pc, #24]	; (80067b4 <BSP_SD_Init+0x48>)
 800679a:	f7fe fcd1 	bl	8005140 <HAL_SD_ConfigWideBusOperation>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80067a8:	79fb      	ldrb	r3, [r7, #7]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	200086fc 	.word	0x200086fc

080067b8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af02      	add	r7, sp, #8
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	68f9      	ldr	r1, [r7, #12]
 80067d4:	4806      	ldr	r0, [pc, #24]	; (80067f0 <BSP_SD_ReadBlocks+0x38>)
 80067d6:	f7fd ff47 	bl	8004668 <HAL_SD_ReadBlocks>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80067e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	200086fc 	.word	0x200086fc

080067f4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	68f9      	ldr	r1, [r7, #12]
 8006810:	4806      	ldr	r0, [pc, #24]	; (800682c <BSP_SD_WriteBlocks+0x38>)
 8006812:	f7fe f923 	bl	8004a5c <HAL_SD_WriteBlocks>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006820:	7dfb      	ldrb	r3, [r7, #23]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	200086fc 	.word	0x200086fc

08006830 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006834:	4805      	ldr	r0, [pc, #20]	; (800684c <BSP_SD_GetCardState+0x1c>)
 8006836:	f7fe fcff 	bl	8005238 <HAL_SD_GetCardState>
 800683a:	4603      	mov	r3, r0
 800683c:	2b04      	cmp	r3, #4
 800683e:	bf14      	ite	ne
 8006840:	2301      	movne	r3, #1
 8006842:	2300      	moveq	r3, #0
 8006844:	b2db      	uxtb	r3, r3
}
 8006846:	4618      	mov	r0, r3
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	200086fc 	.word	0x200086fc

08006850 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	4803      	ldr	r0, [pc, #12]	; (8006868 <BSP_SD_GetCardInfo+0x18>)
 800685c:	f7fe fc44 	bl	80050e8 <HAL_SD_GetCardInfo>
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	200086fc 	.word	0x200086fc

0800686c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006872:	2301      	movs	r3, #1
 8006874:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006876:	f000 f80b 	bl	8006890 <BSP_PlatformIsDetected>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006880:	2300      	movs	r3, #0
 8006882:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	b2db      	uxtb	r3, r3
}
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006896:	2301      	movs	r3, #1
 8006898:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800689a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800689e:	4806      	ldr	r0, [pc, #24]	; (80068b8 <BSP_PlatformIsDetected+0x28>)
 80068a0:	f7fc f99c 	bl	8002bdc <HAL_GPIO_ReadPin>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80068aa:	2300      	movs	r3, #0
 80068ac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80068ae:	79fb      	ldrb	r3, [r7, #7]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	40020000 	.word	0x40020000

080068bc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80068c6:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <SD_CheckStatus+0x38>)
 80068c8:	2201      	movs	r2, #1
 80068ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80068cc:	f7ff ffb0 	bl	8006830 <BSP_SD_GetCardState>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d107      	bne.n	80068e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80068d6:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <SD_CheckStatus+0x38>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <SD_CheckStatus+0x38>)
 80068e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80068e6:	4b03      	ldr	r3, [pc, #12]	; (80068f4 <SD_CheckStatus+0x38>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	b2db      	uxtb	r3, r3
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	2000001d 	.word	0x2000001d

080068f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006902:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <SD_initialize+0x38>)
 8006904:	2201      	movs	r2, #1
 8006906:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006908:	f7ff ff30 	bl	800676c <BSP_SD_Init>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d107      	bne.n	8006922 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006912:	79fb      	ldrb	r3, [r7, #7]
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff ffd1 	bl	80068bc <SD_CheckStatus>
 800691a:	4603      	mov	r3, r0
 800691c:	461a      	mov	r2, r3
 800691e:	4b04      	ldr	r3, [pc, #16]	; (8006930 <SD_initialize+0x38>)
 8006920:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006922:	4b03      	ldr	r3, [pc, #12]	; (8006930 <SD_initialize+0x38>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	b2db      	uxtb	r3, r3
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	2000001d 	.word	0x2000001d

08006934 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff ffbb 	bl	80068bc <SD_CheckStatus>
 8006946:	4603      	mov	r3, r0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	68b8      	ldr	r0, [r7, #8]
 800696e:	f7ff ff23 	bl	80067b8 <BSP_SD_ReadBlocks>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d107      	bne.n	8006988 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006978:	bf00      	nop
 800697a:	f7ff ff59 	bl	8006830 <BSP_SD_GetCardState>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1fa      	bne.n	800697a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006988:	7dfb      	ldrb	r3, [r7, #23]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b086      	sub	sp, #24
 8006996:	af00      	add	r7, sp, #0
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	603b      	str	r3, [r7, #0]
 800699e:	4603      	mov	r3, r0
 80069a0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80069a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	68b8      	ldr	r0, [r7, #8]
 80069b0:	f7ff ff20 	bl	80067f4 <BSP_SD_WriteBlocks>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d107      	bne.n	80069ca <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80069ba:	bf00      	nop
 80069bc:	f7ff ff38 	bl	8006830 <BSP_SD_GetCardState>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1fa      	bne.n	80069bc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08c      	sub	sp, #48	; 0x30
 80069d8:	af00      	add	r7, sp, #0
 80069da:	4603      	mov	r3, r0
 80069dc:	603a      	str	r2, [r7, #0]
 80069de:	71fb      	strb	r3, [r7, #7]
 80069e0:	460b      	mov	r3, r1
 80069e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80069ea:	4b25      	ldr	r3, [pc, #148]	; (8006a80 <SD_ioctl+0xac>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <SD_ioctl+0x28>
 80069f8:	2303      	movs	r3, #3
 80069fa:	e03c      	b.n	8006a76 <SD_ioctl+0xa2>

  switch (cmd)
 80069fc:	79bb      	ldrb	r3, [r7, #6]
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d834      	bhi.n	8006a6c <SD_ioctl+0x98>
 8006a02:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <SD_ioctl+0x34>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a19 	.word	0x08006a19
 8006a0c:	08006a21 	.word	0x08006a21
 8006a10:	08006a39 	.word	0x08006a39
 8006a14:	08006a53 	.word	0x08006a53
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a1e:	e028      	b.n	8006a72 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006a20:	f107 030c 	add.w	r3, r7, #12
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7ff ff13 	bl	8006850 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a36:	e01c      	b.n	8006a72 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006a38:	f107 030c 	add.w	r3, r7, #12
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff ff07 	bl	8006850 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a50:	e00f      	b.n	8006a72 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006a52:	f107 030c 	add.w	r3, r7, #12
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff fefa 	bl	8006850 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	0a5a      	lsrs	r2, r3, #9
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a6a:	e002      	b.n	8006a72 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3730      	adds	r7, #48	; 0x30
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	2000001d 	.word	0x2000001d

08006a84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	4a08      	ldr	r2, [pc, #32]	; (8006ab4 <disk_status+0x30>)
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	79fa      	ldrb	r2, [r7, #7]
 8006a9c:	4905      	ldr	r1, [pc, #20]	; (8006ab4 <disk_status+0x30>)
 8006a9e:	440a      	add	r2, r1
 8006aa0:	7a12      	ldrb	r2, [r2, #8]
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4798      	blx	r3
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	200000d4 	.word	0x200000d4

08006ab8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	4a0d      	ldr	r2, [pc, #52]	; (8006b00 <disk_initialize+0x48>)
 8006aca:	5cd3      	ldrb	r3, [r2, r3]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d111      	bne.n	8006af4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	4a0b      	ldr	r2, [pc, #44]	; (8006b00 <disk_initialize+0x48>)
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	4a09      	ldr	r2, [pc, #36]	; (8006b00 <disk_initialize+0x48>)
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	79fa      	ldrb	r2, [r7, #7]
 8006ae6:	4906      	ldr	r1, [pc, #24]	; (8006b00 <disk_initialize+0x48>)
 8006ae8:	440a      	add	r2, r1
 8006aea:	7a12      	ldrb	r2, [r2, #8]
 8006aec:	4610      	mov	r0, r2
 8006aee:	4798      	blx	r3
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	200000d4 	.word	0x200000d4

08006b04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006b04:	b590      	push	{r4, r7, lr}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	4603      	mov	r3, r0
 8006b12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	4a0a      	ldr	r2, [pc, #40]	; (8006b40 <disk_read+0x3c>)
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	689c      	ldr	r4, [r3, #8]
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
 8006b22:	4a07      	ldr	r2, [pc, #28]	; (8006b40 <disk_read+0x3c>)
 8006b24:	4413      	add	r3, r2
 8006b26:	7a18      	ldrb	r0, [r3, #8]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	47a0      	blx	r4
 8006b30:	4603      	mov	r3, r0
 8006b32:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd90      	pop	{r4, r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	200000d4 	.word	0x200000d4

08006b44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006b44:	b590      	push	{r4, r7, lr}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
 8006b4e:	603b      	str	r3, [r7, #0]
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	4a0a      	ldr	r2, [pc, #40]	; (8006b80 <disk_write+0x3c>)
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	68dc      	ldr	r4, [r3, #12]
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	4a07      	ldr	r2, [pc, #28]	; (8006b80 <disk_write+0x3c>)
 8006b64:	4413      	add	r3, r2
 8006b66:	7a18      	ldrb	r0, [r3, #8]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	47a0      	blx	r4
 8006b70:	4603      	mov	r3, r0
 8006b72:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd90      	pop	{r4, r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	200000d4 	.word	0x200000d4

08006b84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	603a      	str	r2, [r7, #0]
 8006b8e:	71fb      	strb	r3, [r7, #7]
 8006b90:	460b      	mov	r3, r1
 8006b92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006b94:	79fb      	ldrb	r3, [r7, #7]
 8006b96:	4a09      	ldr	r2, [pc, #36]	; (8006bbc <disk_ioctl+0x38>)
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	79fa      	ldrb	r2, [r7, #7]
 8006ba2:	4906      	ldr	r1, [pc, #24]	; (8006bbc <disk_ioctl+0x38>)
 8006ba4:	440a      	add	r2, r1
 8006ba6:	7a10      	ldrb	r0, [r2, #8]
 8006ba8:	79b9      	ldrb	r1, [r7, #6]
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	4798      	blx	r3
 8006bae:	4603      	mov	r3, r0
 8006bb0:	73fb      	strb	r3, [r7, #15]
  return res;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	200000d4 	.word	0x200000d4

08006bc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006bd0:	89fb      	ldrh	r3, [r7, #14]
 8006bd2:	021b      	lsls	r3, r3, #8
 8006bd4:	b21a      	sxth	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	b21b      	sxth	r3, r3
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	b21b      	sxth	r3, r3
 8006be0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006be2:	89fb      	ldrh	r3, [r7, #14]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3303      	adds	r3, #3
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	3202      	adds	r2, #2
 8006c08:	7812      	ldrb	r2, [r2, #0]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	3201      	adds	r2, #1
 8006c16:	7812      	ldrb	r2, [r2, #0]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	021b      	lsls	r3, r3, #8
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	7812      	ldrb	r2, [r2, #0]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
	return rv;
 8006c28:	68fb      	ldr	r3, [r7, #12]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	887a      	ldrh	r2, [r7, #2]
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	887b      	ldrh	r3, [r7, #2]
 8006c50:	0a1b      	lsrs	r3, r3, #8
 8006c52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	607a      	str	r2, [r7, #4]
 8006c5a:	887a      	ldrh	r2, [r7, #2]
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	607a      	str	r2, [r7, #4]
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	701a      	strb	r2, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	0a1b      	lsrs	r3, r3, #8
 8006c86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	607a      	str	r2, [r7, #4]
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	0a1b      	lsrs	r3, r3, #8
 8006c98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	0a1b      	lsrs	r3, r3, #8
 8006caa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	607a      	str	r2, [r7, #4]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	b2d2      	uxtb	r2, r2
 8006cb6:	701a      	strb	r2, [r3, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00d      	beq.n	8006cfa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	1c53      	adds	r3, r2, #1
 8006ce2:	613b      	str	r3, [r7, #16]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	1c59      	adds	r1, r3, #1
 8006ce8:	6179      	str	r1, [r7, #20]
 8006cea:	7812      	ldrb	r2, [r2, #0]
 8006cec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	607b      	str	r3, [r7, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f1      	bne.n	8006cde <mem_cpy+0x1a>
	}
}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006d06:	b480      	push	{r7}
 8006d08:	b087      	sub	sp, #28
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	617a      	str	r2, [r7, #20]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1f3      	bne.n	8006d16 <mem_set+0x10>
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	371c      	adds	r7, #28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006d3c:	b480      	push	{r7}
 8006d3e:	b089      	sub	sp, #36	; 0x24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	61fb      	str	r3, [r7, #28]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	61fa      	str	r2, [r7, #28]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	61ba      	str	r2, [r7, #24]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	1acb      	subs	r3, r1, r3
 8006d68:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <mem_cmp+0x40>
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0eb      	beq.n	8006d54 <mem_cmp+0x18>

	return r;
 8006d7c:	697b      	ldr	r3, [r7, #20]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3724      	adds	r7, #36	; 0x24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006d94:	e002      	b.n	8006d9c <chk_chr+0x12>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	607b      	str	r3, [r7, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <chk_chr+0x26>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d1f2      	bne.n	8006d96 <chk_chr+0xc>
	return *str;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	781b      	ldrb	r3, [r3, #0]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60bb      	str	r3, [r7, #8]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	e029      	b.n	8006e28 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006dd4:	4a27      	ldr	r2, [pc, #156]	; (8006e74 <chk_lock+0xb4>)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	4413      	add	r3, r2
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d01d      	beq.n	8006e1e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006de2:	4a24      	ldr	r2, [pc, #144]	; (8006e74 <chk_lock+0xb4>)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	011b      	lsls	r3, r3, #4
 8006de8:	4413      	add	r3, r2
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d116      	bne.n	8006e22 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006df4:	4a1f      	ldr	r2, [pc, #124]	; (8006e74 <chk_lock+0xb4>)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	011b      	lsls	r3, r3, #4
 8006dfa:	4413      	add	r3, r2
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d10c      	bne.n	8006e22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e08:	4a1a      	ldr	r2, [pc, #104]	; (8006e74 <chk_lock+0xb4>)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	4413      	add	r3, r2
 8006e10:	3308      	adds	r3, #8
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d102      	bne.n	8006e22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e1c:	e007      	b.n	8006e2e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3301      	adds	r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d9d2      	bls.n	8006dd4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d109      	bne.n	8006e48 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d102      	bne.n	8006e40 <chk_lock+0x80>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d101      	bne.n	8006e44 <chk_lock+0x84>
 8006e40:	2300      	movs	r3, #0
 8006e42:	e010      	b.n	8006e66 <chk_lock+0xa6>
 8006e44:	2312      	movs	r3, #18
 8006e46:	e00e      	b.n	8006e66 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d108      	bne.n	8006e60 <chk_lock+0xa0>
 8006e4e:	4a09      	ldr	r2, [pc, #36]	; (8006e74 <chk_lock+0xb4>)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	4413      	add	r3, r2
 8006e56:	330c      	adds	r3, #12
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5e:	d101      	bne.n	8006e64 <chk_lock+0xa4>
 8006e60:	2310      	movs	r3, #16
 8006e62:	e000      	b.n	8006e66 <chk_lock+0xa6>
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	200000b4 	.word	0x200000b4

08006e78 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	607b      	str	r3, [r7, #4]
 8006e82:	e002      	b.n	8006e8a <enq_lock+0x12>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3301      	adds	r3, #1
 8006e88:	607b      	str	r3, [r7, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d806      	bhi.n	8006e9e <enq_lock+0x26>
 8006e90:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <enq_lock+0x40>)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	4413      	add	r3, r2
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1f2      	bne.n	8006e84 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	bf14      	ite	ne
 8006ea4:	2301      	movne	r3, #1
 8006ea6:	2300      	moveq	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	200000b4 	.word	0x200000b4

08006ebc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	e01f      	b.n	8006f0c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006ecc:	4a41      	ldr	r2, [pc, #260]	; (8006fd4 <inc_lock+0x118>)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	011b      	lsls	r3, r3, #4
 8006ed2:	4413      	add	r3, r2
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d113      	bne.n	8006f06 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006ede:	4a3d      	ldr	r2, [pc, #244]	; (8006fd4 <inc_lock+0x118>)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d109      	bne.n	8006f06 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006ef2:	4a38      	ldr	r2, [pc, #224]	; (8006fd4 <inc_lock+0x118>)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	011b      	lsls	r3, r3, #4
 8006ef8:	4413      	add	r3, r2
 8006efa:	3308      	adds	r3, #8
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d006      	beq.n	8006f14 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d9dc      	bls.n	8006ecc <inc_lock+0x10>
 8006f12:	e000      	b.n	8006f16 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006f14:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d132      	bne.n	8006f82 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	e002      	b.n	8006f28 <inc_lock+0x6c>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3301      	adds	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d806      	bhi.n	8006f3c <inc_lock+0x80>
 8006f2e:	4a29      	ldr	r2, [pc, #164]	; (8006fd4 <inc_lock+0x118>)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	4413      	add	r3, r2
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1f2      	bne.n	8006f22 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d101      	bne.n	8006f46 <inc_lock+0x8a>
 8006f42:	2300      	movs	r3, #0
 8006f44:	e040      	b.n	8006fc8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4922      	ldr	r1, [pc, #136]	; (8006fd4 <inc_lock+0x118>)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	011b      	lsls	r3, r3, #4
 8006f50:	440b      	add	r3, r1
 8006f52:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	491e      	ldr	r1, [pc, #120]	; (8006fd4 <inc_lock+0x118>)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	440b      	add	r3, r1
 8006f60:	3304      	adds	r3, #4
 8006f62:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	695a      	ldr	r2, [r3, #20]
 8006f68:	491a      	ldr	r1, [pc, #104]	; (8006fd4 <inc_lock+0x118>)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	440b      	add	r3, r1
 8006f70:	3308      	adds	r3, #8
 8006f72:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006f74:	4a17      	ldr	r2, [pc, #92]	; (8006fd4 <inc_lock+0x118>)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	4413      	add	r3, r2
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	2200      	movs	r2, #0
 8006f80:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d009      	beq.n	8006f9c <inc_lock+0xe0>
 8006f88:	4a12      	ldr	r2, [pc, #72]	; (8006fd4 <inc_lock+0x118>)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	4413      	add	r3, r2
 8006f90:	330c      	adds	r3, #12
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <inc_lock+0xe0>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e015      	b.n	8006fc8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d108      	bne.n	8006fb4 <inc_lock+0xf8>
 8006fa2:	4a0c      	ldr	r2, [pc, #48]	; (8006fd4 <inc_lock+0x118>)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	4413      	add	r3, r2
 8006faa:	330c      	adds	r3, #12
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	e001      	b.n	8006fb8 <inc_lock+0xfc>
 8006fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fb8:	4906      	ldr	r1, [pc, #24]	; (8006fd4 <inc_lock+0x118>)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	440b      	add	r3, r1
 8006fc0:	330c      	adds	r3, #12
 8006fc2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3301      	adds	r3, #1
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	200000b4 	.word	0x200000b4

08006fd8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	607b      	str	r3, [r7, #4]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d825      	bhi.n	8007038 <dec_lock+0x60>
		n = Files[i].ctr;
 8006fec:	4a17      	ldr	r2, [pc, #92]	; (800704c <dec_lock+0x74>)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	4413      	add	r3, r2
 8006ff4:	330c      	adds	r3, #12
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006ffa:	89fb      	ldrh	r3, [r7, #14]
 8006ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007000:	d101      	bne.n	8007006 <dec_lock+0x2e>
 8007002:	2300      	movs	r3, #0
 8007004:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007006:	89fb      	ldrh	r3, [r7, #14]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <dec_lock+0x3a>
 800700c:	89fb      	ldrh	r3, [r7, #14]
 800700e:	3b01      	subs	r3, #1
 8007010:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007012:	4a0e      	ldr	r2, [pc, #56]	; (800704c <dec_lock+0x74>)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	011b      	lsls	r3, r3, #4
 8007018:	4413      	add	r3, r2
 800701a:	330c      	adds	r3, #12
 800701c:	89fa      	ldrh	r2, [r7, #14]
 800701e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007020:	89fb      	ldrh	r3, [r7, #14]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d105      	bne.n	8007032 <dec_lock+0x5a>
 8007026:	4a09      	ldr	r2, [pc, #36]	; (800704c <dec_lock+0x74>)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	4413      	add	r3, r2
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	737b      	strb	r3, [r7, #13]
 8007036:	e001      	b.n	800703c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007038:	2302      	movs	r3, #2
 800703a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800703c:	7b7b      	ldrb	r3, [r7, #13]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	200000b4 	.word	0x200000b4

08007050 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	e010      	b.n	8007080 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800705e:	4a0d      	ldr	r2, [pc, #52]	; (8007094 <clear_lock+0x44>)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	011b      	lsls	r3, r3, #4
 8007064:	4413      	add	r3, r2
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	429a      	cmp	r2, r3
 800706c:	d105      	bne.n	800707a <clear_lock+0x2a>
 800706e:	4a09      	ldr	r2, [pc, #36]	; (8007094 <clear_lock+0x44>)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	4413      	add	r3, r2
 8007076:	2200      	movs	r2, #0
 8007078:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3301      	adds	r3, #1
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d9eb      	bls.n	800705e <clear_lock+0xe>
	}
}
 8007086:	bf00      	nop
 8007088:	bf00      	nop
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	200000b4 	.word	0x200000b4

08007098 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	78db      	ldrb	r3, [r3, #3]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d034      	beq.n	8007116 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	7858      	ldrb	r0, [r3, #1]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070bc:	2301      	movs	r3, #1
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	f7ff fd40 	bl	8006b44 <disk_write>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	73fb      	strb	r3, [r7, #15]
 80070ce:	e022      	b.n	8007116 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	1ad2      	subs	r2, r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d217      	bcs.n	8007116 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	789b      	ldrb	r3, [r3, #2]
 80070ea:	613b      	str	r3, [r7, #16]
 80070ec:	e010      	b.n	8007110 <sync_window+0x78>
					wsect += fs->fsize;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4413      	add	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	7858      	ldrb	r0, [r3, #1]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007102:	2301      	movs	r3, #1
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	f7ff fd1d 	bl	8006b44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	3b01      	subs	r3, #1
 800710e:	613b      	str	r3, [r7, #16]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d8eb      	bhi.n	80070ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007116:	7bfb      	ldrb	r3, [r7, #15]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d01b      	beq.n	8007170 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff ffad 	bl	8007098 <sync_window>
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d113      	bne.n	8007170 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	7858      	ldrb	r0, [r3, #1]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007152:	2301      	movs	r3, #1
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	f7ff fcd5 	bl	8006b04 <disk_read>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007164:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007166:	2301      	movs	r3, #1
 8007168:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff ff87 	bl	8007098 <sync_window>
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d158      	bne.n	8007246 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b03      	cmp	r3, #3
 800719a:	d148      	bne.n	800722e <sync_fs+0xb2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	791b      	ldrb	r3, [r3, #4]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d144      	bne.n	800722e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3330      	adds	r3, #48	; 0x30
 80071a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff fda9 	bl	8006d06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3330      	adds	r3, #48	; 0x30
 80071b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff fd38 	bl	8006c36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3330      	adds	r3, #48	; 0x30
 80071ca:	4921      	ldr	r1, [pc, #132]	; (8007250 <sync_fs+0xd4>)
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff fd4d 	bl	8006c6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3330      	adds	r3, #48	; 0x30
 80071d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80071da:	491e      	ldr	r1, [pc, #120]	; (8007254 <sync_fs+0xd8>)
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff fd45 	bl	8006c6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3330      	adds	r3, #48	; 0x30
 80071e6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f7ff fd3b 	bl	8006c6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3330      	adds	r3, #48	; 0x30
 80071fa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	4619      	mov	r1, r3
 8007204:	4610      	mov	r0, r2
 8007206:	f7ff fd31 	bl	8006c6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	7858      	ldrb	r0, [r3, #1]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007222:	2301      	movs	r3, #1
 8007224:	f7ff fc8e 	bl	8006b44 <disk_write>
			fs->fsi_flag = 0;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2200      	movs	r2, #0
 8007234:	2100      	movs	r1, #0
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff fca4 	bl	8006b84 <disk_ioctl>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <sync_fs+0xca>
 8007242:	2301      	movs	r3, #1
 8007244:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	41615252 	.word	0x41615252
 8007254:	61417272 	.word	0x61417272

08007258 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	3b02      	subs	r3, #2
 8007266:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	3b02      	subs	r3, #2
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d301      	bcc.n	8007278 <clust2sect+0x20>
 8007274:	2300      	movs	r3, #0
 8007276:	e008      	b.n	800728a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	895b      	ldrh	r3, [r3, #10]
 800727c:	461a      	mov	r2, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	fb03 f202 	mul.w	r2, r3, r2
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007288:	4413      	add	r3, r2
}
 800728a:	4618      	mov	r0, r3
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b086      	sub	sp, #24
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d904      	bls.n	80072b6 <get_fat+0x20>
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d302      	bcc.n	80072bc <get_fat+0x26>
		val = 1;	/* Internal error */
 80072b6:	2301      	movs	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	e08f      	b.n	80073dc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80072bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d062      	beq.n	8007390 <get_fat+0xfa>
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	dc7c      	bgt.n	80073c8 <get_fat+0x132>
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d002      	beq.n	80072d8 <get_fat+0x42>
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d042      	beq.n	800735c <get_fat+0xc6>
 80072d6:	e077      	b.n	80073c8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	6a1a      	ldr	r2, [r3, #32]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	0a5b      	lsrs	r3, r3, #9
 80072ee:	4413      	add	r3, r2
 80072f0:	4619      	mov	r1, r3
 80072f2:	6938      	ldr	r0, [r7, #16]
 80072f4:	f7ff ff14 	bl	8007120 <move_window>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d167      	bne.n	80073ce <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	60fa      	str	r2, [r7, #12]
 8007304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4413      	add	r3, r2
 800730c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007310:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	6a1a      	ldr	r2, [r3, #32]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	0a5b      	lsrs	r3, r3, #9
 800731a:	4413      	add	r3, r2
 800731c:	4619      	mov	r1, r3
 800731e:	6938      	ldr	r0, [r7, #16]
 8007320:	f7ff fefe 	bl	8007120 <move_window>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d153      	bne.n	80073d2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	4413      	add	r3, r2
 8007334:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	461a      	mov	r2, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	4313      	orrs	r3, r2
 8007340:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <get_fat+0xbc>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	091b      	lsrs	r3, r3, #4
 8007350:	e002      	b.n	8007358 <get_fat+0xc2>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007358:	617b      	str	r3, [r7, #20]
			break;
 800735a:	e03f      	b.n	80073dc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	6a1a      	ldr	r2, [r3, #32]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	0a1b      	lsrs	r3, r3, #8
 8007364:	4413      	add	r3, r2
 8007366:	4619      	mov	r1, r3
 8007368:	6938      	ldr	r0, [r7, #16]
 800736a:	f7ff fed9 	bl	8007120 <move_window>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d130      	bne.n	80073d6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007382:	4413      	add	r3, r2
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff fc1b 	bl	8006bc0 <ld_word>
 800738a:	4603      	mov	r3, r0
 800738c:	617b      	str	r3, [r7, #20]
			break;
 800738e:	e025      	b.n	80073dc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	6a1a      	ldr	r2, [r3, #32]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	09db      	lsrs	r3, r3, #7
 8007398:	4413      	add	r3, r2
 800739a:	4619      	mov	r1, r3
 800739c:	6938      	ldr	r0, [r7, #16]
 800739e:	f7ff febf 	bl	8007120 <move_window>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d118      	bne.n	80073da <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80073b6:	4413      	add	r3, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff fc19 	bl	8006bf0 <ld_dword>
 80073be:	4603      	mov	r3, r0
 80073c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80073c4:	617b      	str	r3, [r7, #20]
			break;
 80073c6:	e009      	b.n	80073dc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80073c8:	2301      	movs	r3, #1
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	e006      	b.n	80073dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073ce:	bf00      	nop
 80073d0:	e004      	b.n	80073dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073d2:	bf00      	nop
 80073d4:	e002      	b.n	80073dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80073d6:	bf00      	nop
 80073d8:	e000      	b.n	80073dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80073da:	bf00      	nop
		}
	}

	return val;
 80073dc:	697b      	ldr	r3, [r7, #20]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80073e6:	b590      	push	{r4, r7, lr}
 80073e8:	b089      	sub	sp, #36	; 0x24
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80073f2:	2302      	movs	r3, #2
 80073f4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	f240 80d2 	bls.w	80075a2 <put_fat+0x1bc>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	429a      	cmp	r2, r3
 8007406:	f080 80cc 	bcs.w	80075a2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b03      	cmp	r3, #3
 8007410:	f000 8096 	beq.w	8007540 <put_fat+0x15a>
 8007414:	2b03      	cmp	r3, #3
 8007416:	f300 80cd 	bgt.w	80075b4 <put_fat+0x1ce>
 800741a:	2b01      	cmp	r3, #1
 800741c:	d002      	beq.n	8007424 <put_fat+0x3e>
 800741e:	2b02      	cmp	r3, #2
 8007420:	d06e      	beq.n	8007500 <put_fat+0x11a>
 8007422:	e0c7      	b.n	80075b4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	61bb      	str	r3, [r7, #24]
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	4413      	add	r3, r2
 8007430:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a1a      	ldr	r2, [r3, #32]
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	0a5b      	lsrs	r3, r3, #9
 800743a:	4413      	add	r3, r2
 800743c:	4619      	mov	r1, r3
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7ff fe6e 	bl	8007120 <move_window>
 8007444:	4603      	mov	r3, r0
 8007446:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007448:	7ffb      	ldrb	r3, [r7, #31]
 800744a:	2b00      	cmp	r3, #0
 800744c:	f040 80ab 	bne.w	80075a6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	1c59      	adds	r1, r3, #1
 800745a:	61b9      	str	r1, [r7, #24]
 800745c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007460:	4413      	add	r3, r2
 8007462:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00d      	beq.n	800748a <put_fat+0xa4>
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	b25b      	sxtb	r3, r3
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	b25a      	sxtb	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	b2db      	uxtb	r3, r3
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	b25b      	sxtb	r3, r3
 8007482:	4313      	orrs	r3, r2
 8007484:	b25b      	sxtb	r3, r3
 8007486:	b2db      	uxtb	r3, r3
 8007488:	e001      	b.n	800748e <put_fat+0xa8>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	b2db      	uxtb	r3, r3
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6a1a      	ldr	r2, [r3, #32]
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	0a5b      	lsrs	r3, r3, #9
 80074a0:	4413      	add	r3, r2
 80074a2:	4619      	mov	r1, r3
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f7ff fe3b 	bl	8007120 <move_window>
 80074aa:	4603      	mov	r3, r0
 80074ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074ae:	7ffb      	ldrb	r3, [r7, #31]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d17a      	bne.n	80075aa <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c0:	4413      	add	r3, r2
 80074c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <put_fat+0xf0>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	091b      	lsrs	r3, r3, #4
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	e00e      	b.n	80074f4 <put_fat+0x10e>
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	b25b      	sxtb	r3, r3
 80074dc:	f023 030f 	bic.w	r3, r3, #15
 80074e0:	b25a      	sxtb	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	0a1b      	lsrs	r3, r3, #8
 80074e6:	b25b      	sxtb	r3, r3
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	b25b      	sxtb	r3, r3
 80074ee:	4313      	orrs	r3, r2
 80074f0:	b25b      	sxtb	r3, r3
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2201      	movs	r2, #1
 80074fc:	70da      	strb	r2, [r3, #3]
			break;
 80074fe:	e059      	b.n	80075b4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a1a      	ldr	r2, [r3, #32]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	0a1b      	lsrs	r3, r3, #8
 8007508:	4413      	add	r3, r2
 800750a:	4619      	mov	r1, r3
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff fe07 	bl	8007120 <move_window>
 8007512:	4603      	mov	r3, r0
 8007514:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007516:	7ffb      	ldrb	r3, [r7, #31]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d148      	bne.n	80075ae <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800752a:	4413      	add	r3, r2
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	b292      	uxth	r2, r2
 8007530:	4611      	mov	r1, r2
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff fb7f 	bl	8006c36 <st_word>
			fs->wflag = 1;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	70da      	strb	r2, [r3, #3]
			break;
 800753e:	e039      	b.n	80075b4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a1a      	ldr	r2, [r3, #32]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	09db      	lsrs	r3, r3, #7
 8007548:	4413      	add	r3, r2
 800754a:	4619      	mov	r1, r3
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7ff fde7 	bl	8007120 <move_window>
 8007552:	4603      	mov	r3, r0
 8007554:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007556:	7ffb      	ldrb	r3, [r7, #31]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d12a      	bne.n	80075b2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007570:	4413      	add	r3, r2
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff fb3c 	bl	8006bf0 <ld_dword>
 8007578:	4603      	mov	r3, r0
 800757a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800757e:	4323      	orrs	r3, r4
 8007580:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007590:	4413      	add	r3, r2
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff fb69 	bl	8006c6c <st_dword>
			fs->wflag = 1;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	70da      	strb	r2, [r3, #3]
			break;
 80075a0:	e008      	b.n	80075b4 <put_fat+0x1ce>
		}
	}
 80075a2:	bf00      	nop
 80075a4:	e006      	b.n	80075b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80075a6:	bf00      	nop
 80075a8:	e004      	b.n	80075b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80075aa:	bf00      	nop
 80075ac:	e002      	b.n	80075b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80075ae:	bf00      	nop
 80075b0:	e000      	b.n	80075b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80075b2:	bf00      	nop
	return res;
 80075b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3724      	adds	r7, #36	; 0x24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd90      	pop	{r4, r7, pc}

080075be <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b088      	sub	sp, #32
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d904      	bls.n	80075e4 <remove_chain+0x26>
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d301      	bcc.n	80075e8 <remove_chain+0x2a>
 80075e4:	2302      	movs	r3, #2
 80075e6:	e04b      	b.n	8007680 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00c      	beq.n	8007608 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80075ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	69b8      	ldr	r0, [r7, #24]
 80075f6:	f7ff fef6 	bl	80073e6 <put_fat>
 80075fa:	4603      	mov	r3, r0
 80075fc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80075fe:	7ffb      	ldrb	r3, [r7, #31]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <remove_chain+0x4a>
 8007604:	7ffb      	ldrb	r3, [r7, #31]
 8007606:	e03b      	b.n	8007680 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff fe43 	bl	8007296 <get_fat>
 8007610:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d031      	beq.n	800767c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <remove_chain+0x64>
 800761e:	2302      	movs	r3, #2
 8007620:	e02e      	b.n	8007680 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007628:	d101      	bne.n	800762e <remove_chain+0x70>
 800762a:	2301      	movs	r3, #1
 800762c:	e028      	b.n	8007680 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800762e:	2200      	movs	r2, #0
 8007630:	68b9      	ldr	r1, [r7, #8]
 8007632:	69b8      	ldr	r0, [r7, #24]
 8007634:	f7ff fed7 	bl	80073e6 <put_fat>
 8007638:	4603      	mov	r3, r0
 800763a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800763c:	7ffb      	ldrb	r3, [r7, #31]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <remove_chain+0x88>
 8007642:	7ffb      	ldrb	r3, [r7, #31]
 8007644:	e01c      	b.n	8007680 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	691a      	ldr	r2, [r3, #16]
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	3b02      	subs	r3, #2
 8007650:	429a      	cmp	r2, r3
 8007652:	d20b      	bcs.n	800766c <remove_chain+0xae>
			fs->free_clst++;
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	791b      	ldrb	r3, [r3, #4]
 8007662:	f043 0301 	orr.w	r3, r3, #1
 8007666:	b2da      	uxtb	r2, r3
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	429a      	cmp	r2, r3
 8007678:	d3c6      	bcc.n	8007608 <remove_chain+0x4a>
 800767a:	e000      	b.n	800767e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800767c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3720      	adds	r7, #32
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10d      	bne.n	80076ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d004      	beq.n	80076b4 <create_chain+0x2c>
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d31b      	bcc.n	80076ec <create_chain+0x64>
 80076b4:	2301      	movs	r3, #1
 80076b6:	61bb      	str	r3, [r7, #24]
 80076b8:	e018      	b.n	80076ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7ff fdea 	bl	8007296 <get_fat>
 80076c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d801      	bhi.n	80076ce <create_chain+0x46>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e070      	b.n	80077b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076d4:	d101      	bne.n	80076da <create_chain+0x52>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	e06a      	b.n	80077b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d201      	bcs.n	80076e8 <create_chain+0x60>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	e063      	b.n	80077b0 <create_chain+0x128>
		scl = clst;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	3301      	adds	r3, #1
 80076f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	69fa      	ldr	r2, [r7, #28]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d307      	bcc.n	8007710 <create_chain+0x88>
				ncl = 2;
 8007700:	2302      	movs	r3, #2
 8007702:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007704:	69fa      	ldr	r2, [r7, #28]
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	429a      	cmp	r2, r3
 800770a:	d901      	bls.n	8007710 <create_chain+0x88>
 800770c:	2300      	movs	r3, #0
 800770e:	e04f      	b.n	80077b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007710:	69f9      	ldr	r1, [r7, #28]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff fdbf 	bl	8007296 <get_fat>
 8007718:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00e      	beq.n	800773e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d003      	beq.n	800772e <create_chain+0xa6>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800772c:	d101      	bne.n	8007732 <create_chain+0xaa>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	e03e      	b.n	80077b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	429a      	cmp	r2, r3
 8007738:	d1da      	bne.n	80076f0 <create_chain+0x68>
 800773a:	2300      	movs	r3, #0
 800773c:	e038      	b.n	80077b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800773e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007744:	69f9      	ldr	r1, [r7, #28]
 8007746:	6938      	ldr	r0, [r7, #16]
 8007748:	f7ff fe4d 	bl	80073e6 <put_fat>
 800774c:	4603      	mov	r3, r0
 800774e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d109      	bne.n	800776a <create_chain+0xe2>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d006      	beq.n	800776a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6938      	ldr	r0, [r7, #16]
 8007762:	f7ff fe40 	bl	80073e6 <put_fat>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d116      	bne.n	800779e <create_chain+0x116>
		fs->last_clst = ncl;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	3b02      	subs	r3, #2
 8007780:	429a      	cmp	r2, r3
 8007782:	d804      	bhi.n	800778e <create_chain+0x106>
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	1e5a      	subs	r2, r3, #1
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	791b      	ldrb	r3, [r3, #4]
 8007792:	f043 0301 	orr.w	r3, r3, #1
 8007796:	b2da      	uxtb	r2, r3
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	711a      	strb	r2, [r3, #4]
 800779c:	e007      	b.n	80077ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d102      	bne.n	80077aa <create_chain+0x122>
 80077a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077a8:	e000      	b.n	80077ac <create_chain+0x124>
 80077aa:	2301      	movs	r3, #1
 80077ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80077ae:	69fb      	ldr	r3, [r7, #28]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3720      	adds	r7, #32
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	3304      	adds	r3, #4
 80077ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	0a5b      	lsrs	r3, r3, #9
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	8952      	ldrh	r2, [r2, #10]
 80077d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80077dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	1d1a      	adds	r2, r3, #4
 80077e2:	613a      	str	r2, [r7, #16]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <clmt_clust+0x3a>
 80077ee:	2300      	movs	r3, #0
 80077f0:	e010      	b.n	8007814 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d307      	bcc.n	800780a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	617b      	str	r3, [r7, #20]
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	3304      	adds	r3, #4
 8007806:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007808:	e7e9      	b.n	80077de <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800780a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	4413      	add	r3, r2
}
 8007814:	4618      	mov	r0, r3
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007836:	d204      	bcs.n	8007842 <dir_sdi+0x22>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	f003 031f 	and.w	r3, r3, #31
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007842:	2302      	movs	r3, #2
 8007844:	e063      	b.n	800790e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d106      	bne.n	8007866 <dir_sdi+0x46>
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b02      	cmp	r3, #2
 800785e:	d902      	bls.n	8007866 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10c      	bne.n	8007886 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	8912      	ldrh	r2, [r2, #8]
 8007874:	4293      	cmp	r3, r2
 8007876:	d301      	bcc.n	800787c <dir_sdi+0x5c>
 8007878:	2302      	movs	r3, #2
 800787a:	e048      	b.n	800790e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	61da      	str	r2, [r3, #28]
 8007884:	e029      	b.n	80078da <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	895b      	ldrh	r3, [r3, #10]
 800788a:	025b      	lsls	r3, r3, #9
 800788c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800788e:	e019      	b.n	80078c4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6979      	ldr	r1, [r7, #20]
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff fcfe 	bl	8007296 <get_fat>
 800789a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078a2:	d101      	bne.n	80078a8 <dir_sdi+0x88>
 80078a4:	2301      	movs	r3, #1
 80078a6:	e032      	b.n	800790e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d904      	bls.n	80078b8 <dir_sdi+0x98>
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d301      	bcc.n	80078bc <dir_sdi+0x9c>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e028      	b.n	800790e <dir_sdi+0xee>
			ofs -= csz;
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d2e1      	bcs.n	8007890 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80078cc:	6979      	ldr	r1, [r7, #20]
 80078ce:	6938      	ldr	r0, [r7, #16]
 80078d0:	f7ff fcc2 	bl	8007258 <clust2sect>
 80078d4:	4602      	mov	r2, r0
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <dir_sdi+0xcc>
 80078e8:	2302      	movs	r3, #2
 80078ea:	e010      	b.n	800790e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	69da      	ldr	r2, [r3, #28]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	0a5b      	lsrs	r3, r3, #9
 80078f4:	441a      	add	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007906:	441a      	add	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	3320      	adds	r3, #32
 800792c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <dir_next+0x28>
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800793c:	d301      	bcc.n	8007942 <dir_next+0x2c>
 800793e:	2304      	movs	r3, #4
 8007940:	e0aa      	b.n	8007a98 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007948:	2b00      	cmp	r3, #0
 800794a:	f040 8098 	bne.w	8007a7e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	1c5a      	adds	r2, r3, #1
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10b      	bne.n	8007978 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	095b      	lsrs	r3, r3, #5
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	8912      	ldrh	r2, [r2, #8]
 8007968:	4293      	cmp	r3, r2
 800796a:	f0c0 8088 	bcc.w	8007a7e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	61da      	str	r2, [r3, #28]
 8007974:	2304      	movs	r3, #4
 8007976:	e08f      	b.n	8007a98 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	0a5b      	lsrs	r3, r3, #9
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	8952      	ldrh	r2, [r2, #10]
 8007980:	3a01      	subs	r2, #1
 8007982:	4013      	ands	r3, r2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d17a      	bne.n	8007a7e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	4619      	mov	r1, r3
 8007990:	4610      	mov	r0, r2
 8007992:	f7ff fc80 	bl	8007296 <get_fat>
 8007996:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d801      	bhi.n	80079a2 <dir_next+0x8c>
 800799e:	2302      	movs	r3, #2
 80079a0:	e07a      	b.n	8007a98 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a8:	d101      	bne.n	80079ae <dir_next+0x98>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e074      	b.n	8007a98 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d358      	bcc.n	8007a6a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d104      	bne.n	80079c8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	61da      	str	r2, [r3, #28]
 80079c4:	2304      	movs	r3, #4
 80079c6:	e067      	b.n	8007a98 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	4619      	mov	r1, r3
 80079d0:	4610      	mov	r0, r2
 80079d2:	f7ff fe59 	bl	8007688 <create_chain>
 80079d6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <dir_next+0xcc>
 80079de:	2307      	movs	r3, #7
 80079e0:	e05a      	b.n	8007a98 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <dir_next+0xd6>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e055      	b.n	8007a98 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079f2:	d101      	bne.n	80079f8 <dir_next+0xe2>
 80079f4:	2301      	movs	r3, #1
 80079f6:	e04f      	b.n	8007a98 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f7ff fb4d 	bl	8007098 <sync_window>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <dir_next+0xf2>
 8007a04:	2301      	movs	r3, #1
 8007a06:	e047      	b.n	8007a98 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3330      	adds	r3, #48	; 0x30
 8007a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a10:	2100      	movs	r1, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff f977 	bl	8006d06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a18:	2300      	movs	r3, #0
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	6979      	ldr	r1, [r7, #20]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7ff fc1a 	bl	8007258 <clust2sect>
 8007a24:	4602      	mov	r2, r0
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a2a:	e012      	b.n	8007a52 <dir_next+0x13c>
						fs->wflag = 1;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f7ff fb30 	bl	8007098 <sync_window>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <dir_next+0x12c>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e02a      	b.n	8007a98 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	3301      	adds	r3, #1
 8007a46:	613b      	str	r3, [r7, #16]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	895b      	ldrh	r3, [r3, #10]
 8007a56:	461a      	mov	r2, r3
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d3e6      	bcc.n	8007a2c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad2      	subs	r2, r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007a70:	6979      	ldr	r1, [r7, #20]
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7ff fbf0 	bl	8007258 <clust2sect>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a90:	441a      	add	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff feb4 	bl	8007820 <dir_sdi>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d12b      	bne.n	8007b1a <dir_alloc+0x7a>
		n = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	4619      	mov	r1, r3
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f7ff fb27 	bl	8007120 <move_window>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d11d      	bne.n	8007b18 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2be5      	cmp	r3, #229	; 0xe5
 8007ae4:	d004      	beq.n	8007af0 <dir_alloc+0x50>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d107      	bne.n	8007b00 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	3301      	adds	r3, #1
 8007af4:	613b      	str	r3, [r7, #16]
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d102      	bne.n	8007b04 <dir_alloc+0x64>
 8007afe:	e00c      	b.n	8007b1a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007b00:	2300      	movs	r3, #0
 8007b02:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007b04:	2101      	movs	r1, #1
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff ff05 	bl	8007916 <dir_next>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0d7      	beq.n	8007ac6 <dir_alloc+0x26>
 8007b16:	e000      	b.n	8007b1a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007b18:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d101      	bne.n	8007b24 <dir_alloc+0x84>
 8007b20:	2307      	movs	r3, #7
 8007b22:	75fb      	strb	r3, [r7, #23]
	return res;
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	331a      	adds	r3, #26
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff f83f 	bl	8006bc0 <ld_word>
 8007b42:	4603      	mov	r3, r0
 8007b44:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d109      	bne.n	8007b62 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	3314      	adds	r3, #20
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7ff f834 	bl	8006bc0 <ld_word>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	041b      	lsls	r3, r3, #16
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007b62:	68fb      	ldr	r3, [r7, #12]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	331a      	adds	r3, #26
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	b292      	uxth	r2, r2
 8007b80:	4611      	mov	r1, r2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff f857 	bl	8006c36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d109      	bne.n	8007ba4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f103 0214 	add.w	r2, r3, #20
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f7ff f849 	bl	8006c36 <st_word>
	}
}
 8007ba4:	bf00      	nop
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007bba:	2100      	movs	r1, #0
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff fe2f 	bl	8007820 <dir_sdi>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <dir_find+0x24>
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	e03e      	b.n	8007c4e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6938      	ldr	r0, [r7, #16]
 8007bd8:	f7ff faa2 	bl	8007120 <move_window>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d12f      	bne.n	8007c46 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d102      	bne.n	8007bfa <dir_find+0x4e>
 8007bf4:	2304      	movs	r3, #4
 8007bf6:	75fb      	strb	r3, [r7, #23]
 8007bf8:	e028      	b.n	8007c4c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	330b      	adds	r3, #11
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	330b      	adds	r3, #11
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	f003 0308 	and.w	r3, r3, #8
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10a      	bne.n	8007c32 <dir_find+0x86>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a18      	ldr	r0, [r3, #32]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3324      	adds	r3, #36	; 0x24
 8007c24:	220b      	movs	r2, #11
 8007c26:	4619      	mov	r1, r3
 8007c28:	f7ff f888 	bl	8006d3c <mem_cmp>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00b      	beq.n	8007c4a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007c32:	2100      	movs	r1, #0
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff fe6e 	bl	8007916 <dir_next>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d0c5      	beq.n	8007bd0 <dir_find+0x24>
 8007c44:	e002      	b.n	8007c4c <dir_find+0xa0>
		if (res != FR_OK) break;
 8007c46:	bf00      	nop
 8007c48:	e000      	b.n	8007c4c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c4a:	bf00      	nop

	return res;
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007c64:	2101      	movs	r1, #1
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff ff1a 	bl	8007aa0 <dir_alloc>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d11c      	bne.n	8007cb0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	68b8      	ldr	r0, [r7, #8]
 8007c7e:	f7ff fa4f 	bl	8007120 <move_window>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d111      	bne.n	8007cb0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	2220      	movs	r2, #32
 8007c92:	2100      	movs	r1, #0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff f836 	bl	8006d06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a18      	ldr	r0, [r3, #32]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3324      	adds	r3, #36	; 0x24
 8007ca2:	220b      	movs	r2, #11
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	f7ff f80d 	bl	8006cc4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2201      	movs	r2, #1
 8007cae:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3324      	adds	r3, #36	; 0x24
 8007cd0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007cd2:	220b      	movs	r2, #11
 8007cd4:	2120      	movs	r1, #32
 8007cd6:	68b8      	ldr	r0, [r7, #8]
 8007cd8:	f7ff f815 	bl	8006d06 <mem_set>
	si = i = 0; ni = 8;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	613b      	str	r3, [r7, #16]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	2308      	movs	r3, #8
 8007ce6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	61fa      	str	r2, [r7, #28]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007cf6:	7efb      	ldrb	r3, [r7, #27]
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d94e      	bls.n	8007d9a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007cfc:	7efb      	ldrb	r3, [r7, #27]
 8007cfe:	2b2f      	cmp	r3, #47	; 0x2f
 8007d00:	d006      	beq.n	8007d10 <create_name+0x54>
 8007d02:	7efb      	ldrb	r3, [r7, #27]
 8007d04:	2b5c      	cmp	r3, #92	; 0x5c
 8007d06:	d110      	bne.n	8007d2a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007d08:	e002      	b.n	8007d10 <create_name+0x54>
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	61fb      	str	r3, [r7, #28]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	4413      	add	r3, r2
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b2f      	cmp	r3, #47	; 0x2f
 8007d1a:	d0f6      	beq.n	8007d0a <create_name+0x4e>
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	4413      	add	r3, r2
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b5c      	cmp	r3, #92	; 0x5c
 8007d26:	d0f0      	beq.n	8007d0a <create_name+0x4e>
			break;
 8007d28:	e038      	b.n	8007d9c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007d2a:	7efb      	ldrb	r3, [r7, #27]
 8007d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d2e:	d003      	beq.n	8007d38 <create_name+0x7c>
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d30c      	bcc.n	8007d52 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	2b0b      	cmp	r3, #11
 8007d3c:	d002      	beq.n	8007d44 <create_name+0x88>
 8007d3e:	7efb      	ldrb	r3, [r7, #27]
 8007d40:	2b2e      	cmp	r3, #46	; 0x2e
 8007d42:	d001      	beq.n	8007d48 <create_name+0x8c>
 8007d44:	2306      	movs	r3, #6
 8007d46:	e044      	b.n	8007dd2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007d48:	2308      	movs	r3, #8
 8007d4a:	613b      	str	r3, [r7, #16]
 8007d4c:	230b      	movs	r3, #11
 8007d4e:	617b      	str	r3, [r7, #20]
			continue;
 8007d50:	e022      	b.n	8007d98 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007d52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	da04      	bge.n	8007d64 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007d5a:	7efb      	ldrb	r3, [r7, #27]
 8007d5c:	3b80      	subs	r3, #128	; 0x80
 8007d5e:	4a1f      	ldr	r2, [pc, #124]	; (8007ddc <create_name+0x120>)
 8007d60:	5cd3      	ldrb	r3, [r2, r3]
 8007d62:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007d64:	7efb      	ldrb	r3, [r7, #27]
 8007d66:	4619      	mov	r1, r3
 8007d68:	481d      	ldr	r0, [pc, #116]	; (8007de0 <create_name+0x124>)
 8007d6a:	f7ff f80e 	bl	8006d8a <chk_chr>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <create_name+0xbc>
 8007d74:	2306      	movs	r3, #6
 8007d76:	e02c      	b.n	8007dd2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007d78:	7efb      	ldrb	r3, [r7, #27]
 8007d7a:	2b60      	cmp	r3, #96	; 0x60
 8007d7c:	d905      	bls.n	8007d8a <create_name+0xce>
 8007d7e:	7efb      	ldrb	r3, [r7, #27]
 8007d80:	2b7a      	cmp	r3, #122	; 0x7a
 8007d82:	d802      	bhi.n	8007d8a <create_name+0xce>
 8007d84:	7efb      	ldrb	r3, [r7, #27]
 8007d86:	3b20      	subs	r3, #32
 8007d88:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	613a      	str	r2, [r7, #16]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	4413      	add	r3, r2
 8007d94:	7efa      	ldrb	r2, [r7, #27]
 8007d96:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007d98:	e7a6      	b.n	8007ce8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007d9a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	441a      	add	r2, r3
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <create_name+0xf4>
 8007dac:	2306      	movs	r3, #6
 8007dae:	e010      	b.n	8007dd2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2be5      	cmp	r3, #229	; 0xe5
 8007db6:	d102      	bne.n	8007dbe <create_name+0x102>
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2205      	movs	r2, #5
 8007dbc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007dbe:	7efb      	ldrb	r3, [r7, #27]
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d801      	bhi.n	8007dc8 <create_name+0x10c>
 8007dc4:	2204      	movs	r2, #4
 8007dc6:	e000      	b.n	8007dca <create_name+0x10e>
 8007dc8:	2200      	movs	r2, #0
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	330b      	adds	r3, #11
 8007dce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007dd0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3720      	adds	r7, #32
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	0800a610 	.word	0x0800a610
 8007de0:	0800a588 	.word	0x0800a588

08007de4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007df8:	e002      	b.n	8007e00 <follow_path+0x1c>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	603b      	str	r3, [r7, #0]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2b2f      	cmp	r3, #47	; 0x2f
 8007e06:	d0f8      	beq.n	8007dfa <follow_path+0x16>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b5c      	cmp	r3, #92	; 0x5c
 8007e0e:	d0f4      	beq.n	8007dfa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	2200      	movs	r2, #0
 8007e14:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	2b1f      	cmp	r3, #31
 8007e1c:	d80a      	bhi.n	8007e34 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2280      	movs	r2, #128	; 0x80
 8007e22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007e26:	2100      	movs	r1, #0
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff fcf9 	bl	8007820 <dir_sdi>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	75fb      	strb	r3, [r7, #23]
 8007e32:	e043      	b.n	8007ebc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e34:	463b      	mov	r3, r7
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff ff3f 	bl	8007cbc <create_name>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d134      	bne.n	8007eb2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff feaf 	bl	8007bac <dir_find>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007e58:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	d127      	bne.n	8007eb6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007e66:	7afb      	ldrb	r3, [r7, #11]
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d122      	bne.n	8007eb6 <follow_path+0xd2>
 8007e70:	2305      	movs	r3, #5
 8007e72:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007e74:	e01f      	b.n	8007eb6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e76:	7afb      	ldrb	r3, [r7, #11]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d11c      	bne.n	8007eba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	799b      	ldrb	r3, [r3, #6]
 8007e84:	f003 0310 	and.w	r3, r3, #16
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d102      	bne.n	8007e92 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007e8c:	2305      	movs	r3, #5
 8007e8e:	75fb      	strb	r3, [r7, #23]
 8007e90:	e014      	b.n	8007ebc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea0:	4413      	add	r3, r2
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7ff fe42 	bl	8007b2e <ld_clust>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007eb0:	e7c0      	b.n	8007e34 <follow_path+0x50>
			if (res != FR_OK) break;
 8007eb2:	bf00      	nop
 8007eb4:	e002      	b.n	8007ebc <follow_path+0xd8>
				break;
 8007eb6:	bf00      	nop
 8007eb8:	e000      	b.n	8007ebc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007eba:	bf00      	nop
			}
		}
	}

	return res;
 8007ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b087      	sub	sp, #28
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ed2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d031      	beq.n	8007f40 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	e002      	b.n	8007eea <get_ldnumber+0x24>
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	d903      	bls.n	8007efa <get_ldnumber+0x34>
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	2b3a      	cmp	r3, #58	; 0x3a
 8007ef8:	d1f4      	bne.n	8007ee4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b3a      	cmp	r3, #58	; 0x3a
 8007f00:	d11c      	bne.n	8007f3c <get_ldnumber+0x76>
			tp = *path;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	60fa      	str	r2, [r7, #12]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	3b30      	subs	r3, #48	; 0x30
 8007f12:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b09      	cmp	r3, #9
 8007f18:	d80e      	bhi.n	8007f38 <get_ldnumber+0x72>
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d10a      	bne.n	8007f38 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d107      	bne.n	8007f38 <get_ldnumber+0x72>
					vol = (int)i;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	617b      	str	r3, [r7, #20]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	e002      	b.n	8007f42 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007f40:	693b      	ldr	r3, [r7, #16]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	70da      	strb	r2, [r3, #3]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f66:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff f8d8 	bl	8007120 <move_window>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <check_fs+0x2a>
 8007f76:	2304      	movs	r3, #4
 8007f78:	e038      	b.n	8007fec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	3330      	adds	r3, #48	; 0x30
 8007f7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fe1c 	bl	8006bc0 <ld_word>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d001      	beq.n	8007f98 <check_fs+0x48>
 8007f94:	2303      	movs	r3, #3
 8007f96:	e029      	b.n	8007fec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f9e:	2be9      	cmp	r3, #233	; 0xe9
 8007fa0:	d009      	beq.n	8007fb6 <check_fs+0x66>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fa8:	2beb      	cmp	r3, #235	; 0xeb
 8007faa:	d11e      	bne.n	8007fea <check_fs+0x9a>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007fb2:	2b90      	cmp	r3, #144	; 0x90
 8007fb4:	d119      	bne.n	8007fea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3330      	adds	r3, #48	; 0x30
 8007fba:	3336      	adds	r3, #54	; 0x36
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fe17 	bl	8006bf0 <ld_dword>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007fc8:	4a0a      	ldr	r2, [pc, #40]	; (8007ff4 <check_fs+0xa4>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d101      	bne.n	8007fd2 <check_fs+0x82>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e00c      	b.n	8007fec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3330      	adds	r3, #48	; 0x30
 8007fd6:	3352      	adds	r3, #82	; 0x52
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fe fe09 	bl	8006bf0 <ld_dword>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	4a05      	ldr	r2, [pc, #20]	; (8007ff8 <check_fs+0xa8>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d101      	bne.n	8007fea <check_fs+0x9a>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e000      	b.n	8007fec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007fea:	2302      	movs	r3, #2
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	00544146 	.word	0x00544146
 8007ff8:	33544146 	.word	0x33544146

08007ffc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b096      	sub	sp, #88	; 0x58
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	4613      	mov	r3, r2
 8008008:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2200      	movs	r2, #0
 800800e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f7ff ff58 	bl	8007ec6 <get_ldnumber>
 8008016:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801a:	2b00      	cmp	r3, #0
 800801c:	da01      	bge.n	8008022 <find_volume+0x26>
 800801e:	230b      	movs	r3, #11
 8008020:	e22e      	b.n	8008480 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008022:	4aa8      	ldr	r2, [pc, #672]	; (80082c4 <find_volume+0x2c8>)
 8008024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800802a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <find_volume+0x3a>
 8008032:	230c      	movs	r3, #12
 8008034:	e224      	b.n	8008480 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800803a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	f023 0301 	bic.w	r3, r3, #1
 8008042:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01a      	beq.n	8008082 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804e:	785b      	ldrb	r3, [r3, #1]
 8008050:	4618      	mov	r0, r3
 8008052:	f7fe fd17 	bl	8006a84 <disk_status>
 8008056:	4603      	mov	r3, r0
 8008058:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800805c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10c      	bne.n	8008082 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d007      	beq.n	800807e <find_volume+0x82>
 800806e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800807a:	230a      	movs	r3, #10
 800807c:	e200      	b.n	8008480 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800807e:	2300      	movs	r3, #0
 8008080:	e1fe      	b.n	8008480 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008084:	2200      	movs	r2, #0
 8008086:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808a:	b2da      	uxtb	r2, r3
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	785b      	ldrb	r3, [r3, #1]
 8008094:	4618      	mov	r0, r3
 8008096:	f7fe fd0f 	bl	8006ab8 <disk_initialize>
 800809a:	4603      	mov	r3, r0
 800809c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80080a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80080ac:	2303      	movs	r3, #3
 80080ae:	e1e7      	b.n	8008480 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80080b0:	79fb      	ldrb	r3, [r7, #7]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d007      	beq.n	80080c6 <find_volume+0xca>
 80080b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080ba:	f003 0304 	and.w	r3, r3, #4
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80080c2:	230a      	movs	r3, #10
 80080c4:	e1dc      	b.n	8008480 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80080ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080ce:	f7ff ff3f 	bl	8007f50 <check_fs>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80080d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d14b      	bne.n	8008178 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80080e0:	2300      	movs	r3, #0
 80080e2:	643b      	str	r3, [r7, #64]	; 0x40
 80080e4:	e01f      	b.n	8008126 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80080e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ee:	011b      	lsls	r3, r3, #4
 80080f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80080f4:	4413      	add	r3, r2
 80080f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	3304      	adds	r3, #4
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d006      	beq.n	8008110 <find_volume+0x114>
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	3308      	adds	r3, #8
 8008106:	4618      	mov	r0, r3
 8008108:	f7fe fd72 	bl	8006bf0 <ld_dword>
 800810c:	4602      	mov	r2, r0
 800810e:	e000      	b.n	8008112 <find_volume+0x116>
 8008110:	2200      	movs	r2, #0
 8008112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800811a:	440b      	add	r3, r1
 800811c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008122:	3301      	adds	r3, #1
 8008124:	643b      	str	r3, [r7, #64]	; 0x40
 8008126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008128:	2b03      	cmp	r3, #3
 800812a:	d9dc      	bls.n	80080e6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800812c:	2300      	movs	r3, #0
 800812e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <find_volume+0x140>
 8008136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008138:	3b01      	subs	r3, #1
 800813a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800813c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008144:	4413      	add	r3, r2
 8008146:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800814a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800814c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800814e:	2b00      	cmp	r3, #0
 8008150:	d005      	beq.n	800815e <find_volume+0x162>
 8008152:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008154:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008156:	f7ff fefb 	bl	8007f50 <check_fs>
 800815a:	4603      	mov	r3, r0
 800815c:	e000      	b.n	8008160 <find_volume+0x164>
 800815e:	2303      	movs	r3, #3
 8008160:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008164:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008168:	2b01      	cmp	r3, #1
 800816a:	d905      	bls.n	8008178 <find_volume+0x17c>
 800816c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800816e:	3301      	adds	r3, #1
 8008170:	643b      	str	r3, [r7, #64]	; 0x40
 8008172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008174:	2b03      	cmp	r3, #3
 8008176:	d9e1      	bls.n	800813c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800817c:	2b04      	cmp	r3, #4
 800817e:	d101      	bne.n	8008184 <find_volume+0x188>
 8008180:	2301      	movs	r3, #1
 8008182:	e17d      	b.n	8008480 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008188:	2b01      	cmp	r3, #1
 800818a:	d901      	bls.n	8008190 <find_volume+0x194>
 800818c:	230d      	movs	r3, #13
 800818e:	e177      	b.n	8008480 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	3330      	adds	r3, #48	; 0x30
 8008194:	330b      	adds	r3, #11
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe fd12 	bl	8006bc0 <ld_word>
 800819c:	4603      	mov	r3, r0
 800819e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081a2:	d001      	beq.n	80081a8 <find_volume+0x1ac>
 80081a4:	230d      	movs	r3, #13
 80081a6:	e16b      	b.n	8008480 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80081a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081aa:	3330      	adds	r3, #48	; 0x30
 80081ac:	3316      	adds	r3, #22
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fd06 	bl	8006bc0 <ld_word>
 80081b4:	4603      	mov	r3, r0
 80081b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80081b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d106      	bne.n	80081cc <find_volume+0x1d0>
 80081be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c0:	3330      	adds	r3, #48	; 0x30
 80081c2:	3324      	adds	r3, #36	; 0x24
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fe fd13 	bl	8006bf0 <ld_dword>
 80081ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081d0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80081d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	789b      	ldrb	r3, [r3, #2]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d005      	beq.n	80081f0 <find_volume+0x1f4>
 80081e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e6:	789b      	ldrb	r3, [r3, #2]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d001      	beq.n	80081f0 <find_volume+0x1f4>
 80081ec:	230d      	movs	r3, #13
 80081ee:	e147      	b.n	8008480 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	789b      	ldrb	r3, [r3, #2]
 80081f4:	461a      	mov	r2, r3
 80081f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f8:	fb02 f303 	mul.w	r3, r2, r3
 80081fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008204:	b29a      	uxth	r2, r3
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	895b      	ldrh	r3, [r3, #10]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d008      	beq.n	8008224 <find_volume+0x228>
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	895b      	ldrh	r3, [r3, #10]
 8008216:	461a      	mov	r2, r3
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	895b      	ldrh	r3, [r3, #10]
 800821c:	3b01      	subs	r3, #1
 800821e:	4013      	ands	r3, r2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <find_volume+0x22c>
 8008224:	230d      	movs	r3, #13
 8008226:	e12b      	b.n	8008480 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	3330      	adds	r3, #48	; 0x30
 800822c:	3311      	adds	r3, #17
 800822e:	4618      	mov	r0, r3
 8008230:	f7fe fcc6 	bl	8006bc0 <ld_word>
 8008234:	4603      	mov	r3, r0
 8008236:	461a      	mov	r2, r3
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	891b      	ldrh	r3, [r3, #8]
 8008240:	f003 030f 	and.w	r3, r3, #15
 8008244:	b29b      	uxth	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <find_volume+0x252>
 800824a:	230d      	movs	r3, #13
 800824c:	e118      	b.n	8008480 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800824e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008250:	3330      	adds	r3, #48	; 0x30
 8008252:	3313      	adds	r3, #19
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe fcb3 	bl	8006bc0 <ld_word>
 800825a:	4603      	mov	r3, r0
 800825c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800825e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008260:	2b00      	cmp	r3, #0
 8008262:	d106      	bne.n	8008272 <find_volume+0x276>
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	3330      	adds	r3, #48	; 0x30
 8008268:	3320      	adds	r3, #32
 800826a:	4618      	mov	r0, r3
 800826c:	f7fe fcc0 	bl	8006bf0 <ld_dword>
 8008270:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	3330      	adds	r3, #48	; 0x30
 8008276:	330e      	adds	r3, #14
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fca1 	bl	8006bc0 <ld_word>
 800827e:	4603      	mov	r3, r0
 8008280:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008282:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008284:	2b00      	cmp	r3, #0
 8008286:	d101      	bne.n	800828c <find_volume+0x290>
 8008288:	230d      	movs	r3, #13
 800828a:	e0f9      	b.n	8008480 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800828c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800828e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008290:	4413      	add	r3, r2
 8008292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008294:	8912      	ldrh	r2, [r2, #8]
 8008296:	0912      	lsrs	r2, r2, #4
 8008298:	b292      	uxth	r2, r2
 800829a:	4413      	add	r3, r2
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800829e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d201      	bcs.n	80082aa <find_volume+0x2ae>
 80082a6:	230d      	movs	r3, #13
 80082a8:	e0ea      	b.n	8008480 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80082aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082b2:	8952      	ldrh	r2, [r2, #10]
 80082b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d103      	bne.n	80082c8 <find_volume+0x2cc>
 80082c0:	230d      	movs	r3, #13
 80082c2:	e0dd      	b.n	8008480 <find_volume+0x484>
 80082c4:	200000ac 	.word	0x200000ac
		fmt = FS_FAT32;
 80082c8:	2303      	movs	r3, #3
 80082ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d802      	bhi.n	80082de <find_volume+0x2e2>
 80082d8:	2302      	movs	r3, #2
 80082da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d802      	bhi.n	80082ee <find_volume+0x2f2>
 80082e8:	2301      	movs	r3, #1
 80082ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	1c9a      	adds	r2, r3, #2
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80082f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082fa:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80082fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008300:	441a      	add	r2, r3
 8008302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008304:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008306:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	441a      	add	r2, r3
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008310:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008314:	2b03      	cmp	r3, #3
 8008316:	d11e      	bne.n	8008356 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	3330      	adds	r3, #48	; 0x30
 800831c:	332a      	adds	r3, #42	; 0x2a
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe fc4e 	bl	8006bc0 <ld_word>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <find_volume+0x332>
 800832a:	230d      	movs	r3, #13
 800832c:	e0a8      	b.n	8008480 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800832e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008330:	891b      	ldrh	r3, [r3, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <find_volume+0x33e>
 8008336:	230d      	movs	r3, #13
 8008338:	e0a2      	b.n	8008480 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	3330      	adds	r3, #48	; 0x30
 800833e:	332c      	adds	r3, #44	; 0x2c
 8008340:	4618      	mov	r0, r3
 8008342:	f7fe fc55 	bl	8006bf0 <ld_dword>
 8008346:	4602      	mov	r2, r0
 8008348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	695b      	ldr	r3, [r3, #20]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	647b      	str	r3, [r7, #68]	; 0x44
 8008354:	e01f      	b.n	8008396 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008358:	891b      	ldrh	r3, [r3, #8]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <find_volume+0x366>
 800835e:	230d      	movs	r3, #13
 8008360:	e08e      	b.n	8008480 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008364:	6a1a      	ldr	r2, [r3, #32]
 8008366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008368:	441a      	add	r2, r3
 800836a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800836e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008372:	2b02      	cmp	r3, #2
 8008374:	d103      	bne.n	800837e <find_volume+0x382>
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	e00a      	b.n	8008394 <find_volume+0x398>
 800837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008380:	695a      	ldr	r2, [r3, #20]
 8008382:	4613      	mov	r3, r2
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	4413      	add	r3, r2
 8008388:	085a      	lsrs	r2, r3, #1
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008394:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008398:	699a      	ldr	r2, [r3, #24]
 800839a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800839c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80083a0:	0a5b      	lsrs	r3, r3, #9
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d201      	bcs.n	80083aa <find_volume+0x3ae>
 80083a6:	230d      	movs	r3, #13
 80083a8:	e06a      	b.n	8008480 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083b0:	611a      	str	r2, [r3, #16]
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	691a      	ldr	r2, [r3, #16]
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	2280      	movs	r2, #128	; 0x80
 80083be:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80083c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d149      	bne.n	800845c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	3330      	adds	r3, #48	; 0x30
 80083cc:	3330      	adds	r3, #48	; 0x30
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fe fbf6 	bl	8006bc0 <ld_word>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d140      	bne.n	800845c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80083da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083dc:	3301      	adds	r3, #1
 80083de:	4619      	mov	r1, r3
 80083e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083e2:	f7fe fe9d 	bl	8007120 <move_window>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d137      	bne.n	800845c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	2200      	movs	r2, #0
 80083f0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80083f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f4:	3330      	adds	r3, #48	; 0x30
 80083f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fbe0 	bl	8006bc0 <ld_word>
 8008400:	4603      	mov	r3, r0
 8008402:	461a      	mov	r2, r3
 8008404:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008408:	429a      	cmp	r2, r3
 800840a:	d127      	bne.n	800845c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	3330      	adds	r3, #48	; 0x30
 8008410:	4618      	mov	r0, r3
 8008412:	f7fe fbed 	bl	8006bf0 <ld_dword>
 8008416:	4603      	mov	r3, r0
 8008418:	4a1b      	ldr	r2, [pc, #108]	; (8008488 <find_volume+0x48c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d11e      	bne.n	800845c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	3330      	adds	r3, #48	; 0x30
 8008422:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe fbe2 	bl	8006bf0 <ld_dword>
 800842c:	4603      	mov	r3, r0
 800842e:	4a17      	ldr	r2, [pc, #92]	; (800848c <find_volume+0x490>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d113      	bne.n	800845c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008436:	3330      	adds	r3, #48	; 0x30
 8008438:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800843c:	4618      	mov	r0, r3
 800843e:	f7fe fbd7 	bl	8006bf0 <ld_dword>
 8008442:	4602      	mov	r2, r0
 8008444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008446:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	3330      	adds	r3, #48	; 0x30
 800844c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fbcd 	bl	8006bf0 <ld_dword>
 8008456:	4602      	mov	r2, r0
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008462:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008464:	4b0a      	ldr	r3, [pc, #40]	; (8008490 <find_volume+0x494>)
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	3301      	adds	r3, #1
 800846a:	b29a      	uxth	r2, r3
 800846c:	4b08      	ldr	r3, [pc, #32]	; (8008490 <find_volume+0x494>)
 800846e:	801a      	strh	r2, [r3, #0]
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <find_volume+0x494>)
 8008472:	881a      	ldrh	r2, [r3, #0]
 8008474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008476:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008478:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800847a:	f7fe fde9 	bl	8007050 <clear_lock>
#endif
	return FR_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3758      	adds	r7, #88	; 0x58
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	41615252 	.word	0x41615252
 800848c:	61417272 	.word	0x61417272
 8008490:	200000b0 	.word	0x200000b0

08008494 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800849e:	2309      	movs	r3, #9
 80084a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d01c      	beq.n	80084e2 <validate+0x4e>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d018      	beq.n	80084e2 <validate+0x4e>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d013      	beq.n	80084e2 <validate+0x4e>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	889a      	ldrh	r2, [r3, #4]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	88db      	ldrh	r3, [r3, #6]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d10c      	bne.n	80084e2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	785b      	ldrb	r3, [r3, #1]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe fad8 	bl	8006a84 <disk_status>
 80084d4:	4603      	mov	r3, r0
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <validate+0x4e>
			res = FR_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d102      	bne.n	80084ee <validate+0x5a>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	e000      	b.n	80084f0 <validate+0x5c>
 80084ee:	2300      	movs	r3, #0
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	6013      	str	r3, [r2, #0]
	return res;
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b088      	sub	sp, #32
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	4613      	mov	r3, r2
 800850c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008512:	f107 0310 	add.w	r3, r7, #16
 8008516:	4618      	mov	r0, r3
 8008518:	f7ff fcd5 	bl	8007ec6 <get_ldnumber>
 800851c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	2b00      	cmp	r3, #0
 8008522:	da01      	bge.n	8008528 <f_mount+0x28>
 8008524:	230b      	movs	r3, #11
 8008526:	e02b      	b.n	8008580 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008528:	4a17      	ldr	r2, [pc, #92]	; (8008588 <f_mount+0x88>)
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008530:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d005      	beq.n	8008544 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008538:	69b8      	ldr	r0, [r7, #24]
 800853a:	f7fe fd89 	bl	8007050 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	2200      	movs	r2, #0
 8008542:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	490d      	ldr	r1, [pc, #52]	; (8008588 <f_mount+0x88>)
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <f_mount+0x66>
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d001      	beq.n	800856a <f_mount+0x6a>
 8008566:	2300      	movs	r3, #0
 8008568:	e00a      	b.n	8008580 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800856a:	f107 010c 	add.w	r1, r7, #12
 800856e:	f107 0308 	add.w	r3, r7, #8
 8008572:	2200      	movs	r2, #0
 8008574:	4618      	mov	r0, r3
 8008576:	f7ff fd41 	bl	8007ffc <find_volume>
 800857a:	4603      	mov	r3, r0
 800857c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800857e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3720      	adds	r7, #32
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	200000ac 	.word	0x200000ac

0800858c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b098      	sub	sp, #96	; 0x60
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	4613      	mov	r3, r2
 8008598:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <f_open+0x18>
 80085a0:	2309      	movs	r3, #9
 80085a2:	e1ad      	b.n	8008900 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085aa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80085ac:	79fa      	ldrb	r2, [r7, #7]
 80085ae:	f107 0110 	add.w	r1, r7, #16
 80085b2:	f107 0308 	add.w	r3, r7, #8
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff fd20 	bl	8007ffc <find_volume>
 80085bc:	4603      	mov	r3, r0
 80085be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80085c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f040 8191 	bne.w	80088ee <f_open+0x362>
		dj.obj.fs = fs;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	f107 0314 	add.w	r3, r7, #20
 80085d6:	4611      	mov	r1, r2
 80085d8:	4618      	mov	r0, r3
 80085da:	f7ff fc03 	bl	8007de4 <follow_path>
 80085de:	4603      	mov	r3, r0
 80085e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80085e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d11a      	bne.n	8008622 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80085ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085f0:	b25b      	sxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	da03      	bge.n	80085fe <f_open+0x72>
				res = FR_INVALID_NAME;
 80085f6:	2306      	movs	r3, #6
 80085f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80085fc:	e011      	b.n	8008622 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80085fe:	79fb      	ldrb	r3, [r7, #7]
 8008600:	f023 0301 	bic.w	r3, r3, #1
 8008604:	2b00      	cmp	r3, #0
 8008606:	bf14      	ite	ne
 8008608:	2301      	movne	r3, #1
 800860a:	2300      	moveq	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	f107 0314 	add.w	r3, r7, #20
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fbd2 	bl	8006dc0 <chk_lock>
 800861c:	4603      	mov	r3, r0
 800861e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	f003 031c 	and.w	r3, r3, #28
 8008628:	2b00      	cmp	r3, #0
 800862a:	d07f      	beq.n	800872c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800862c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008630:	2b00      	cmp	r3, #0
 8008632:	d017      	beq.n	8008664 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008638:	2b04      	cmp	r3, #4
 800863a:	d10e      	bne.n	800865a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800863c:	f7fe fc1c 	bl	8006e78 <enq_lock>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d006      	beq.n	8008654 <f_open+0xc8>
 8008646:	f107 0314 	add.w	r3, r7, #20
 800864a:	4618      	mov	r0, r3
 800864c:	f7ff fb03 	bl	8007c56 <dir_register>
 8008650:	4603      	mov	r3, r0
 8008652:	e000      	b.n	8008656 <f_open+0xca>
 8008654:	2312      	movs	r3, #18
 8008656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	f043 0308 	orr.w	r3, r3, #8
 8008660:	71fb      	strb	r3, [r7, #7]
 8008662:	e010      	b.n	8008686 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008664:	7ebb      	ldrb	r3, [r7, #26]
 8008666:	f003 0311 	and.w	r3, r3, #17
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <f_open+0xea>
					res = FR_DENIED;
 800866e:	2307      	movs	r3, #7
 8008670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008674:	e007      	b.n	8008686 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <f_open+0xfa>
 8008680:	2308      	movs	r3, #8
 8008682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800868a:	2b00      	cmp	r3, #0
 800868c:	d168      	bne.n	8008760 <f_open+0x1d4>
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	f003 0308 	and.w	r3, r3, #8
 8008694:	2b00      	cmp	r3, #0
 8008696:	d063      	beq.n	8008760 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008698:	f7fe f860 	bl	800675c <get_fattime>
 800869c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800869e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a0:	330e      	adds	r3, #14
 80086a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fe fae1 	bl	8006c6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80086aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ac:	3316      	adds	r3, #22
 80086ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fe fadb 	bl	8006c6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80086b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b8:	330b      	adds	r3, #11
 80086ba:	2220      	movs	r2, #32
 80086bc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086c2:	4611      	mov	r1, r2
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff fa32 	bl	8007b2e <ld_clust>
 80086ca:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086d0:	2200      	movs	r2, #0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff fa4a 	bl	8007b6c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80086d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086da:	331c      	adds	r3, #28
 80086dc:	2100      	movs	r1, #0
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe fac4 	bl	8006c6c <st_dword>
					fs->wflag = 1;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	2201      	movs	r2, #1
 80086e8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80086ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d037      	beq.n	8008760 <f_open+0x1d4>
						dw = fs->winsect;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80086f6:	f107 0314 	add.w	r3, r7, #20
 80086fa:	2200      	movs	r2, #0
 80086fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe ff5d 	bl	80075be <remove_chain>
 8008704:	4603      	mov	r3, r0
 8008706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800870a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800870e:	2b00      	cmp	r3, #0
 8008710:	d126      	bne.n	8008760 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe fd02 	bl	8007120 <move_window>
 800871c:	4603      	mov	r3, r0
 800871e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008726:	3a01      	subs	r2, #1
 8008728:	60da      	str	r2, [r3, #12]
 800872a:	e019      	b.n	8008760 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800872c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008730:	2b00      	cmp	r3, #0
 8008732:	d115      	bne.n	8008760 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008734:	7ebb      	ldrb	r3, [r7, #26]
 8008736:	f003 0310 	and.w	r3, r3, #16
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <f_open+0x1ba>
					res = FR_NO_FILE;
 800873e:	2304      	movs	r3, #4
 8008740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008744:	e00c      	b.n	8008760 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d007      	beq.n	8008760 <f_open+0x1d4>
 8008750:	7ebb      	ldrb	r3, [r7, #26]
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <f_open+0x1d4>
						res = FR_DENIED;
 800875a:	2307      	movs	r3, #7
 800875c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008764:	2b00      	cmp	r3, #0
 8008766:	d128      	bne.n	80087ba <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	f003 0308 	and.w	r3, r3, #8
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008778:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008788:	79fb      	ldrb	r3, [r7, #7]
 800878a:	f023 0301 	bic.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	bf14      	ite	ne
 8008792:	2301      	movne	r3, #1
 8008794:	2300      	moveq	r3, #0
 8008796:	b2db      	uxtb	r3, r3
 8008798:	461a      	mov	r2, r3
 800879a:	f107 0314 	add.w	r3, r7, #20
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe fb8b 	bl	8006ebc <inc_lock>
 80087a6:	4602      	mov	r2, r0
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d102      	bne.n	80087ba <f_open+0x22e>
 80087b4:	2302      	movs	r3, #2
 80087b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80087ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f040 8095 	bne.w	80088ee <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087c8:	4611      	mov	r1, r2
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff f9af 	bl	8007b2e <ld_clust>
 80087d0:	4602      	mov	r2, r0
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80087d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d8:	331c      	adds	r3, #28
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe fa08 	bl	8006bf0 <ld_dword>
 80087e0:	4602      	mov	r2, r0
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	88da      	ldrh	r2, [r3, #6]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	79fa      	ldrb	r2, [r7, #7]
 80087fe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3330      	adds	r3, #48	; 0x30
 8008816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800881a:	2100      	movs	r1, #0
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe fa72 	bl	8006d06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	f003 0320 	and.w	r3, r3, #32
 8008828:	2b00      	cmp	r3, #0
 800882a:	d060      	beq.n	80088ee <f_open+0x362>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d05c      	beq.n	80088ee <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	895b      	ldrh	r3, [r3, #10]
 8008840:	025b      	lsls	r3, r3, #9
 8008842:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	657b      	str	r3, [r7, #84]	; 0x54
 8008850:	e016      	b.n	8008880 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe fd1d 	bl	8007296 <get_fat>
 800885c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800885e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008860:	2b01      	cmp	r3, #1
 8008862:	d802      	bhi.n	800886a <f_open+0x2de>
 8008864:	2302      	movs	r3, #2
 8008866:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800886a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008870:	d102      	bne.n	8008878 <f_open+0x2ec>
 8008872:	2301      	movs	r3, #1
 8008874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800887a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	657b      	str	r3, [r7, #84]	; 0x54
 8008880:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008884:	2b00      	cmp	r3, #0
 8008886:	d103      	bne.n	8008890 <f_open+0x304>
 8008888:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800888a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800888c:	429a      	cmp	r2, r3
 800888e:	d8e0      	bhi.n	8008852 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008894:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008896:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800889a:	2b00      	cmp	r3, #0
 800889c:	d127      	bne.n	80088ee <f_open+0x362>
 800889e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d022      	beq.n	80088ee <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fe fcd3 	bl	8007258 <clust2sect>
 80088b2:	6478      	str	r0, [r7, #68]	; 0x44
 80088b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d103      	bne.n	80088c2 <f_open+0x336>
						res = FR_INT_ERR;
 80088ba:	2302      	movs	r3, #2
 80088bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80088c0:	e015      	b.n	80088ee <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80088c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088c4:	0a5a      	lsrs	r2, r3, #9
 80088c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088c8:	441a      	add	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	7858      	ldrb	r0, [r3, #1]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6a1a      	ldr	r2, [r3, #32]
 80088dc:	2301      	movs	r3, #1
 80088de:	f7fe f911 	bl	8006b04 <disk_read>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <f_open+0x362>
 80088e8:	2301      	movs	r3, #1
 80088ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80088ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <f_open+0x370>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80088fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008900:	4618      	mov	r0, r3
 8008902:	3760      	adds	r7, #96	; 0x60
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08e      	sub	sp, #56	; 0x38
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f107 0214 	add.w	r2, r7, #20
 8008926:	4611      	mov	r1, r2
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff fdb3 	bl	8008494 <validate>
 800892e:	4603      	mov	r3, r0
 8008930:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008934:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008938:	2b00      	cmp	r3, #0
 800893a:	d107      	bne.n	800894c <f_read+0x44>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	7d5b      	ldrb	r3, [r3, #21]
 8008940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <f_read+0x4a>
 800894c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008950:	e115      	b.n	8008b7e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	7d1b      	ldrb	r3, [r3, #20]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <f_read+0x5a>
 800895e:	2307      	movs	r3, #7
 8008960:	e10d      	b.n	8008b7e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	429a      	cmp	r2, r3
 8008974:	f240 80fe 	bls.w	8008b74 <f_read+0x26c>
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800897c:	e0fa      	b.n	8008b74 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008986:	2b00      	cmp	r3, #0
 8008988:	f040 80c6 	bne.w	8008b18 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	0a5b      	lsrs	r3, r3, #9
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	8952      	ldrh	r2, [r2, #10]
 8008996:	3a01      	subs	r2, #1
 8008998:	4013      	ands	r3, r2
 800899a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d12f      	bne.n	8008a02 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d103      	bne.n	80089b2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	633b      	str	r3, [r7, #48]	; 0x30
 80089b0:	e013      	b.n	80089da <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d007      	beq.n	80089ca <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	4619      	mov	r1, r3
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f7fe fef9 	bl	80077b8 <clmt_clust>
 80089c6:	6338      	str	r0, [r7, #48]	; 0x30
 80089c8:	e007      	b.n	80089da <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	4619      	mov	r1, r3
 80089d2:	4610      	mov	r0, r2
 80089d4:	f7fe fc5f 	bl	8007296 <get_fat>
 80089d8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d804      	bhi.n	80089ea <f_read+0xe2>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2202      	movs	r2, #2
 80089e4:	755a      	strb	r2, [r3, #21]
 80089e6:	2302      	movs	r3, #2
 80089e8:	e0c9      	b.n	8008b7e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089f0:	d104      	bne.n	80089fc <f_read+0xf4>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2201      	movs	r2, #1
 80089f6:	755a      	strb	r2, [r3, #21]
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0c0      	b.n	8008b7e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a00:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	f7fe fc24 	bl	8007258 <clust2sect>
 8008a10:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d104      	bne.n	8008a22 <f_read+0x11a>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	755a      	strb	r2, [r3, #21]
 8008a1e:	2302      	movs	r3, #2
 8008a20:	e0ad      	b.n	8008b7e <f_read+0x276>
			sect += csect;
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	4413      	add	r3, r2
 8008a28:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	0a5b      	lsrs	r3, r3, #9
 8008a2e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d039      	beq.n	8008aaa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a36:	69fa      	ldr	r2, [r7, #28]
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	4413      	add	r3, r2
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	8952      	ldrh	r2, [r2, #10]
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d905      	bls.n	8008a50 <f_read+0x148>
					cc = fs->csize - csect;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	895b      	ldrh	r3, [r3, #10]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	7858      	ldrb	r0, [r3, #1]
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	69ba      	ldr	r2, [r7, #24]
 8008a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a5a:	f7fe f853 	bl	8006b04 <disk_read>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <f_read+0x166>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2201      	movs	r2, #1
 8008a68:	755a      	strb	r2, [r3, #21]
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e087      	b.n	8008b7e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	7d1b      	ldrb	r3, [r3, #20]
 8008a72:	b25b      	sxtb	r3, r3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	da14      	bge.n	8008aa2 <f_read+0x19a>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6a1a      	ldr	r2, [r3, #32]
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d90d      	bls.n	8008aa2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6a1a      	ldr	r2, [r3, #32]
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	025b      	lsls	r3, r3, #9
 8008a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a92:	18d0      	adds	r0, r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3330      	adds	r3, #48	; 0x30
 8008a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	f7fe f911 	bl	8006cc4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	025b      	lsls	r3, r3, #9
 8008aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008aa8:	e050      	b.n	8008b4c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d02e      	beq.n	8008b12 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	7d1b      	ldrb	r3, [r3, #20]
 8008ab8:	b25b      	sxtb	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	da18      	bge.n	8008af0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	7858      	ldrb	r0, [r3, #1]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6a1a      	ldr	r2, [r3, #32]
 8008acc:	2301      	movs	r3, #1
 8008ace:	f7fe f839 	bl	8006b44 <disk_write>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d004      	beq.n	8008ae2 <f_read+0x1da>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	755a      	strb	r2, [r3, #21]
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e04d      	b.n	8008b7e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	7d1b      	ldrb	r3, [r3, #20]
 8008ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	7858      	ldrb	r0, [r3, #1]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008afa:	2301      	movs	r3, #1
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	f7fe f801 	bl	8006b04 <disk_read>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d004      	beq.n	8008b12 <f_read+0x20a>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	755a      	strb	r2, [r3, #21]
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e035      	b.n	8008b7e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b20:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008b24:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d901      	bls.n	8008b32 <f_read+0x22a>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b40:	4413      	add	r3, r2
 8008b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b44:	4619      	mov	r1, r3
 8008b46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b48:	f7fe f8bc 	bl	8006cc4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	4413      	add	r3, r2
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	699a      	ldr	r2, [r3, #24]
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	441a      	add	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	619a      	str	r2, [r3, #24]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	441a      	add	r2, r3
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f47f af01 	bne.w	800897e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3738      	adds	r7, #56	; 0x38
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b086      	sub	sp, #24
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f107 0208 	add.w	r2, r7, #8
 8008b94:	4611      	mov	r1, r2
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7ff fc7c 	bl	8008494 <validate>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d168      	bne.n	8008c78 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	7d1b      	ldrb	r3, [r3, #20]
 8008baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d062      	beq.n	8008c78 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7d1b      	ldrb	r3, [r3, #20]
 8008bb6:	b25b      	sxtb	r3, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	da15      	bge.n	8008be8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	7858      	ldrb	r0, [r3, #1]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a1a      	ldr	r2, [r3, #32]
 8008bca:	2301      	movs	r3, #1
 8008bcc:	f7fd ffba 	bl	8006b44 <disk_write>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <f_sync+0x54>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e04f      	b.n	8008c7a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	7d1b      	ldrb	r3, [r3, #20]
 8008bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008be8:	f7fd fdb8 	bl	800675c <get_fattime>
 8008bec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f7fe fa92 	bl	8007120 <move_window>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d138      	bne.n	8008c78 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	330b      	adds	r3, #11
 8008c10:	781a      	ldrb	r2, [r3, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	330b      	adds	r3, #11
 8008c16:	f042 0220 	orr.w	r2, r2, #32
 8008c1a:	b2d2      	uxtb	r2, r2
 8008c1c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6818      	ldr	r0, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	461a      	mov	r2, r3
 8008c28:	68f9      	ldr	r1, [r7, #12]
 8008c2a:	f7fe ff9f 	bl	8007b6c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f103 021c 	add.w	r2, r3, #28
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	f7fe f816 	bl	8006c6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3316      	adds	r3, #22
 8008c44:	6939      	ldr	r1, [r7, #16]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe f810 	bl	8006c6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3312      	adds	r3, #18
 8008c50:	2100      	movs	r1, #0
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fd ffef 	bl	8006c36 <st_word>
					fs->wflag = 1;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fe fa8b 	bl	800717c <sync_fs>
 8008c66:	4603      	mov	r3, r0
 8008c68:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7d1b      	ldrb	r3, [r3, #20]
 8008c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7ff ff7b 	bl	8008b86 <f_sync>
 8008c90:	4603      	mov	r3, r0
 8008c92:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d118      	bne.n	8008ccc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f107 0208 	add.w	r2, r7, #8
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7ff fbf6 	bl	8008494 <validate>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10c      	bne.n	8008ccc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe f98e 	bl	8006fd8 <dec_lock>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d102      	bne.n	8008ccc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b092      	sub	sp, #72	; 0x48
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008ce2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008ce6:	f107 030c 	add.w	r3, r7, #12
 8008cea:	2200      	movs	r2, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff f985 	bl	8007ffc <find_volume>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008cf8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f040 8099 	bne.w	8008e34 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	691a      	ldr	r2, [r3, #16]
 8008d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	3b02      	subs	r3, #2
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d804      	bhi.n	8008d20 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d18:	691a      	ldr	r2, [r3, #16]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	e089      	b.n	8008e34 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d128      	bne.n	8008d7e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008d34:	f107 0314 	add.w	r3, r7, #20
 8008d38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe faab 	bl	8007296 <get_fat>
 8008d40:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d48:	d103      	bne.n	8008d52 <f_getfree+0x7c>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d50:	e063      	b.n	8008e1a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d103      	bne.n	8008d60 <f_getfree+0x8a>
 8008d58:	2302      	movs	r3, #2
 8008d5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d5e:	e05c      	b.n	8008e1a <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d102      	bne.n	8008d6c <f_getfree+0x96>
 8008d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d68:	3301      	adds	r3, #1
 8008d6a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6e:	3301      	adds	r3, #1
 8008d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d3db      	bcc.n	8008d34 <f_getfree+0x5e>
 8008d7c:	e04d      	b.n	8008e1a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d8e:	2300      	movs	r3, #0
 8008d90:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d113      	bne.n	8008dc0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	1c5a      	adds	r2, r3, #1
 8008d9e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008da0:	4619      	mov	r1, r3
 8008da2:	f7fe f9bd 	bl	8007120 <move_window>
 8008da6:	4603      	mov	r3, r0
 8008da8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008dac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d131      	bne.n	8008e18 <f_getfree+0x142>
							p = fs->win;
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db6:	3330      	adds	r3, #48	; 0x30
 8008db8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dbe:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d10f      	bne.n	8008de8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dca:	f7fd fef9 	bl	8006bc0 <ld_word>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d102      	bne.n	8008dda <f_getfree+0x104>
 8008dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	3302      	adds	r3, #2
 8008dde:	633b      	str	r3, [r7, #48]	; 0x30
 8008de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de2:	3b02      	subs	r3, #2
 8008de4:	637b      	str	r3, [r7, #52]	; 0x34
 8008de6:	e010      	b.n	8008e0a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dea:	f7fd ff01 	bl	8006bf0 <ld_dword>
 8008dee:	4603      	mov	r3, r0
 8008df0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <f_getfree+0x128>
 8008df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	3304      	adds	r3, #4
 8008e02:	633b      	str	r3, [r7, #48]	; 0x30
 8008e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e06:	3b04      	subs	r3, #4
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1bd      	bne.n	8008d92 <f_getfree+0xbc>
 8008e16:	e000      	b.n	8008e1a <f_getfree+0x144>
							if (res != FR_OK) break;
 8008e18:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e1e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e24:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	791a      	ldrb	r2, [r3, #4]
 8008e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2c:	f042 0201 	orr.w	r2, r2, #1
 8008e30:	b2d2      	uxtb	r2, r2
 8008e32:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008e34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3748      	adds	r7, #72	; 0x48
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b088      	sub	sp, #32
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008e54:	e01b      	b.n	8008e8e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008e56:	f107 0310 	add.w	r3, r7, #16
 8008e5a:	f107 0114 	add.w	r1, r7, #20
 8008e5e:	2201      	movs	r2, #1
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7ff fd51 	bl	8008908 <f_read>
		if (rc != 1) break;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d116      	bne.n	8008e9a <f_gets+0x5a>
		c = s[0];
 8008e6c:	7d3b      	ldrb	r3, [r7, #20]
 8008e6e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008e70:	7dfb      	ldrb	r3, [r7, #23]
 8008e72:	2b0d      	cmp	r3, #13
 8008e74:	d100      	bne.n	8008e78 <f_gets+0x38>
 8008e76:	e00a      	b.n	8008e8e <f_gets+0x4e>
		*p++ = c;
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	61ba      	str	r2, [r7, #24]
 8008e7e:	7dfa      	ldrb	r2, [r7, #23]
 8008e80:	701a      	strb	r2, [r3, #0]
		n++;
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	3301      	adds	r3, #1
 8008e86:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	2b0a      	cmp	r3, #10
 8008e8c:	d007      	beq.n	8008e9e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	69fa      	ldr	r2, [r7, #28]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	dbde      	blt.n	8008e56 <f_gets+0x16>
 8008e98:	e002      	b.n	8008ea0 <f_gets+0x60>
		if (rc != 1) break;
 8008e9a:	bf00      	nop
 8008e9c:	e000      	b.n	8008ea0 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008e9e:	bf00      	nop
	}
	*p = 0;
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <f_gets+0x70>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	e000      	b.n	8008eb2 <f_gets+0x72>
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3720      	adds	r7, #32
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
	...

08008ebc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008ed2:	4b1f      	ldr	r3, [pc, #124]	; (8008f50 <FATFS_LinkDriverEx+0x94>)
 8008ed4:	7a5b      	ldrb	r3, [r3, #9]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d131      	bne.n	8008f40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008edc:	4b1c      	ldr	r3, [pc, #112]	; (8008f50 <FATFS_LinkDriverEx+0x94>)
 8008ede:	7a5b      	ldrb	r3, [r3, #9]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	4b1a      	ldr	r3, [pc, #104]	; (8008f50 <FATFS_LinkDriverEx+0x94>)
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008eea:	4b19      	ldr	r3, [pc, #100]	; (8008f50 <FATFS_LinkDriverEx+0x94>)
 8008eec:	7a5b      	ldrb	r3, [r3, #9]
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	4a17      	ldr	r2, [pc, #92]	; (8008f50 <FATFS_LinkDriverEx+0x94>)
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008efa:	4b15      	ldr	r3, [pc, #84]	; (8008f50 <FATFS_LinkDriverEx+0x94>)
 8008efc:	7a5b      	ldrb	r3, [r3, #9]
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	461a      	mov	r2, r3
 8008f02:	4b13      	ldr	r3, [pc, #76]	; (8008f50 <FATFS_LinkDriverEx+0x94>)
 8008f04:	4413      	add	r3, r2
 8008f06:	79fa      	ldrb	r2, [r7, #7]
 8008f08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008f0a:	4b11      	ldr	r3, [pc, #68]	; (8008f50 <FATFS_LinkDriverEx+0x94>)
 8008f0c:	7a5b      	ldrb	r3, [r3, #9]
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	b2d1      	uxtb	r1, r2
 8008f14:	4a0e      	ldr	r2, [pc, #56]	; (8008f50 <FATFS_LinkDriverEx+0x94>)
 8008f16:	7251      	strb	r1, [r2, #9]
 8008f18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008f1a:	7dbb      	ldrb	r3, [r7, #22]
 8008f1c:	3330      	adds	r3, #48	; 0x30
 8008f1e:	b2da      	uxtb	r2, r3
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	3301      	adds	r3, #1
 8008f28:	223a      	movs	r2, #58	; 0x3a
 8008f2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	3302      	adds	r3, #2
 8008f30:	222f      	movs	r2, #47	; 0x2f
 8008f32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	3303      	adds	r3, #3
 8008f38:	2200      	movs	r2, #0
 8008f3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	371c      	adds	r7, #28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	200000d4 	.word	0x200000d4

08008f54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008f5e:	2200      	movs	r2, #0
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff ffaa 	bl	8008ebc <FATFS_LinkDriverEx>
 8008f68:	4603      	mov	r3, r0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8008f7a:	4b24      	ldr	r3, [pc, #144]	; (800900c <_DoInit+0x98>)
 8008f7c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2203      	movs	r2, #3
 8008f82:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2203      	movs	r2, #3
 8008f88:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a20      	ldr	r2, [pc, #128]	; (8009010 <_DoInit+0x9c>)
 8008f8e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a20      	ldr	r2, [pc, #128]	; (8009014 <_DoInit+0xa0>)
 8008f94:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f9c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a17      	ldr	r2, [pc, #92]	; (8009010 <_DoInit+0x9c>)
 8008fb4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a17      	ldr	r2, [pc, #92]	; (8009018 <_DoInit+0xa4>)
 8008fba:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2210      	movs	r2, #16
 8008fc0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	3307      	adds	r3, #7
 8008fd8:	4a10      	ldr	r2, [pc, #64]	; (800901c <_DoInit+0xa8>)
 8008fda:	6810      	ldr	r0, [r2, #0]
 8008fdc:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008fde:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a0e      	ldr	r2, [pc, #56]	; (8009020 <_DoInit+0xac>)
 8008fe6:	6810      	ldr	r0, [r2, #0]
 8008fe8:	6018      	str	r0, [r3, #0]
 8008fea:	8891      	ldrh	r1, [r2, #4]
 8008fec:	7992      	ldrb	r2, [r2, #6]
 8008fee:	8099      	strh	r1, [r3, #4]
 8008ff0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008ff2:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008ffc:	f3bf 8f5f 	dmb	sy
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	20008c2c 	.word	0x20008c2c
 8009010:	0800a5cc 	.word	0x0800a5cc
 8009014:	200000e0 	.word	0x200000e0
 8009018:	200004e0 	.word	0x200004e0
 800901c:	0800a5d8 	.word	0x0800a5d8
 8009020:	0800a5dc 	.word	0x0800a5dc

08009024 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8009024:	b580      	push	{r7, lr}
 8009026:	b08a      	sub	sp, #40	; 0x28
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8009030:	2300      	movs	r3, #0
 8009032:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	429a      	cmp	r2, r3
 8009046:	d905      	bls.n	8009054 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	3b01      	subs	r3, #1
 8009050:	627b      	str	r3, [r7, #36]	; 0x24
 8009052:	e007      	b.n	8009064 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	689a      	ldr	r2, [r3, #8]
 8009058:	69b9      	ldr	r1, [r7, #24]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	1acb      	subs	r3, r1, r3
 800905e:	4413      	add	r3, r2
 8009060:	3b01      	subs	r3, #1
 8009062:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906e:	4293      	cmp	r3, r2
 8009070:	bf28      	it	cs
 8009072:	4613      	movcs	r3, r2
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8009076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4293      	cmp	r3, r2
 800907c:	bf28      	it	cs
 800907e:	4613      	movcs	r3, r2
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	4413      	add	r3, r2
 800908a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800908c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	6978      	ldr	r0, [r7, #20]
 8009092:	f000 fa79 	bl	8009588 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8009096:	6a3a      	ldr	r2, [r7, #32]
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	4413      	add	r3, r2
 800909c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	4413      	add	r3, r2
 80090a4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80090ae:	69fa      	ldr	r2, [r7, #28]
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	4413      	add	r3, r2
 80090b4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d101      	bne.n	80090c4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80090c0:	2300      	movs	r3, #0
 80090c2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80090c4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1b2      	bne.n	800903a <_WriteBlocking+0x16>
  return NumBytesWritten;
 80090d4:	6a3b      	ldr	r3, [r7, #32]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3728      	adds	r7, #40	; 0x28
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80090de:	b580      	push	{r7, lr}
 80090e0:	b088      	sub	sp, #32
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d911      	bls.n	8009126 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	4413      	add	r3, r2
 800910a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	6938      	ldr	r0, [r7, #16]
 8009112:	f000 fa39 	bl	8009588 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009116:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	441a      	add	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8009124:	e01f      	b.n	8009166 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	4413      	add	r3, r2
 8009132:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	68b9      	ldr	r1, [r7, #8]
 8009138:	6938      	ldr	r0, [r7, #16]
 800913a:	f000 fa25 	bl	8009588 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	4413      	add	r3, r2
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	4619      	mov	r1, r3
 8009156:	6938      	ldr	r0, [r7, #16]
 8009158:	f000 fa16 	bl	8009588 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800915c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	60da      	str	r2, [r3, #12]
}
 8009166:	bf00      	nop
 8009168:	3720      	adds	r7, #32
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800916e:	b480      	push	{r7}
 8009170:	b087      	sub	sp, #28
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	429a      	cmp	r2, r3
 8009188:	d808      	bhi.n	800919c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	1ad2      	subs	r2, r2, r3
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	4413      	add	r3, r2
 8009196:	3b01      	subs	r3, #1
 8009198:	617b      	str	r3, [r7, #20]
 800919a:	e004      	b.n	80091a6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	3b01      	subs	r3, #1
 80091a4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80091a6:	697b      	ldr	r3, [r7, #20]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	371c      	adds	r7, #28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b088      	sub	sp, #32
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	4613      	mov	r3, r2
 80091ca:	005b      	lsls	r3, r3, #1
 80091cc:	4413      	add	r3, r2
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	4a1e      	ldr	r2, [pc, #120]	; (800924c <SEGGER_RTT_WriteNoLock+0x98>)
 80091d2:	4413      	add	r3, r2
 80091d4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d017      	beq.n	800920e <SEGGER_RTT_WriteNoLock+0x5a>
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d302      	bcc.n	80091e8 <SEGGER_RTT_WriteNoLock+0x34>
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d023      	beq.n	800922e <SEGGER_RTT_WriteNoLock+0x7a>
 80091e6:	e029      	b.n	800923c <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80091e8:	6978      	ldr	r0, [r7, #20]
 80091ea:	f7ff ffc0 	bl	800916e <_GetAvailWriteSpace>
 80091ee:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d202      	bcs.n	80091fe <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 80091f8:	2300      	movs	r3, #0
 80091fa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80091fc:	e021      	b.n	8009242 <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	69b9      	ldr	r1, [r7, #24]
 8009206:	6978      	ldr	r0, [r7, #20]
 8009208:	f7ff ff69 	bl	80090de <_WriteNoCheck>
    break;
 800920c:	e019      	b.n	8009242 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800920e:	6978      	ldr	r0, [r7, #20]
 8009210:	f7ff ffad 	bl	800916e <_GetAvailWriteSpace>
 8009214:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	4293      	cmp	r3, r2
 800921c:	bf28      	it	cs
 800921e:	4613      	movcs	r3, r2
 8009220:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8009222:	69fa      	ldr	r2, [r7, #28]
 8009224:	69b9      	ldr	r1, [r7, #24]
 8009226:	6978      	ldr	r0, [r7, #20]
 8009228:	f7ff ff59 	bl	80090de <_WriteNoCheck>
    break;
 800922c:	e009      	b.n	8009242 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	69b9      	ldr	r1, [r7, #24]
 8009232:	6978      	ldr	r0, [r7, #20]
 8009234:	f7ff fef6 	bl	8009024 <_WriteBlocking>
 8009238:	61f8      	str	r0, [r7, #28]
    break;
 800923a:	e002      	b.n	8009242 <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 800923c:	2300      	movs	r3, #0
 800923e:	61fb      	str	r3, [r7, #28]
    break;
 8009240:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8009242:	69fb      	ldr	r3, [r7, #28]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3720      	adds	r7, #32
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20008c2c 	.word	0x20008c2c

08009250 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800925c:	4b0e      	ldr	r3, [pc, #56]	; (8009298 <SEGGER_RTT_Write+0x48>)
 800925e:	61fb      	str	r3, [r7, #28]
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <SEGGER_RTT_Write+0x1e>
 800926a:	f7ff fe83 	bl	8008f74 <_DoInit>
  SEGGER_RTT_LOCK();
 800926e:	f3ef 8311 	mrs	r3, BASEPRI
 8009272:	f04f 0120 	mov.w	r1, #32
 8009276:	f381 8811 	msr	BASEPRI, r1
 800927a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	68b9      	ldr	r1, [r7, #8]
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f7ff ff97 	bl	80091b4 <SEGGER_RTT_WriteNoLock>
 8009286:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800928e:	697b      	ldr	r3, [r7, #20]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3720      	adds	r7, #32
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	20008c2c 	.word	0x20008c2c

0800929c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80092aa:	4b33      	ldr	r3, [pc, #204]	; (8009378 <SEGGER_RTT_ConfigUpBuffer+0xdc>)
 80092ac:	61bb      	str	r3, [r7, #24]
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <SEGGER_RTT_ConfigUpBuffer+0x20>
 80092b8:	f7ff fe5c 	bl	8008f74 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80092bc:	4b2e      	ldr	r3, [pc, #184]	; (8009378 <SEGGER_RTT_ConfigUpBuffer+0xdc>)
 80092be:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumUpBuffers) {
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	461a      	mov	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d24c      	bcs.n	8009366 <SEGGER_RTT_ConfigUpBuffer+0xca>
    SEGGER_RTT_LOCK();
 80092cc:	f3ef 8311 	mrs	r3, BASEPRI
 80092d0:	f04f 0120 	mov.w	r1, #32
 80092d4:	f381 8811 	msr	BASEPRI, r1
 80092d8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d032      	beq.n	8009346 <SEGGER_RTT_ConfigUpBuffer+0xaa>
      pRTTCB->aUp[BufferIndex].sName        = sName;
 80092e0:	6979      	ldr	r1, [r7, #20]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	1c5a      	adds	r2, r3, #1
 80092e6:	4613      	mov	r3, r2
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	4413      	add	r3, r2
 80092ec:	00db      	lsls	r3, r3, #3
 80092ee:	440b      	add	r3, r1
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80092f4:	6979      	ldr	r1, [r7, #20]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	4613      	mov	r3, r2
 80092fc:	005b      	lsls	r3, r3, #1
 80092fe:	4413      	add	r3, r2
 8009300:	00db      	lsls	r3, r3, #3
 8009302:	440b      	add	r3, r1
 8009304:	3304      	adds	r3, #4
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800930a:	6979      	ldr	r1, [r7, #20]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	4613      	mov	r3, r2
 8009310:	005b      	lsls	r3, r3, #1
 8009312:	4413      	add	r3, r2
 8009314:	00db      	lsls	r3, r3, #3
 8009316:	440b      	add	r3, r1
 8009318:	3320      	adds	r3, #32
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800931e:	6979      	ldr	r1, [r7, #20]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	4613      	mov	r3, r2
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	4413      	add	r3, r2
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	440b      	add	r3, r1
 800932c:	3328      	adds	r3, #40	; 0x28
 800932e:	2200      	movs	r2, #0
 8009330:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8009332:	6979      	ldr	r1, [r7, #20]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	4613      	mov	r3, r2
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	4413      	add	r3, r2
 800933c:	00db      	lsls	r3, r3, #3
 800933e:	440b      	add	r3, r1
 8009340:	3324      	adds	r3, #36	; 0x24
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aUp[BufferIndex].Flags          = Flags;
 8009346:	6979      	ldr	r1, [r7, #20]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	4613      	mov	r3, r2
 800934c:	005b      	lsls	r3, r3, #1
 800934e:	4413      	add	r3, r2
 8009350:	00db      	lsls	r3, r3, #3
 8009352:	440b      	add	r3, r1
 8009354:	332c      	adds	r3, #44	; 0x2c
 8009356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009358:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8009360:	2300      	movs	r3, #0
 8009362:	61fb      	str	r3, [r7, #28]
 8009364:	e002      	b.n	800936c <SEGGER_RTT_ConfigUpBuffer+0xd0>
  } else {
    r = -1;
 8009366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800936a:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800936c:	69fb      	ldr	r3, [r7, #28]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3720      	adds	r7, #32
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20008c2c 	.word	0x20008c2c

0800937c <arm_biquad_cascade_df1_init_f32>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4604      	mov	r4, r0
 8009380:	6082      	str	r2, [r0, #8]
 8009382:	6001      	str	r1, [r0, #0]
 8009384:	461d      	mov	r5, r3
 8009386:	010a      	lsls	r2, r1, #4
 8009388:	4618      	mov	r0, r3
 800938a:	2100      	movs	r1, #0
 800938c:	f000 f90a 	bl	80095a4 <memset>
 8009390:	6065      	str	r5, [r4, #4]
 8009392:	bd38      	pop	{r3, r4, r5, pc}

08009394 <arm_biquad_cascade_df1_f32>:
 8009394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009398:	ed2d 8b02 	vpush	{d8}
 800939c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80093a0:	6886      	ldr	r6, [r0, #8]
 80093a2:	6845      	ldr	r5, [r0, #4]
 80093a4:	6807      	ldr	r7, [r0, #0]
 80093a6:	4696      	mov	lr, r2
 80093a8:	ea4f 180c 	mov.w	r8, ip, lsl #4
 80093ac:	f003 0203 	and.w	r2, r3, #3
 80093b0:	eb0e 0908 	add.w	r9, lr, r8
 80093b4:	3614      	adds	r6, #20
 80093b6:	3510      	adds	r5, #16
 80093b8:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 80093bc:	ed56 1a04 	vldr	s3, [r6, #-16]
 80093c0:	ed16 1a03 	vldr	s2, [r6, #-12]
 80093c4:	ed56 0a02 	vldr	s1, [r6, #-8]
 80093c8:	ed16 0a01 	vldr	s0, [r6, #-4]
 80093cc:	ed15 8a04 	vldr	s16, [r5, #-16]
 80093d0:	ed55 8a03 	vldr	s17, [r5, #-12]
 80093d4:	ed15 7a02 	vldr	s14, [r5, #-8]
 80093d8:	ed55 7a01 	vldr	s15, [r5, #-4]
 80093dc:	f1bc 0f00 	cmp.w	ip, #0
 80093e0:	f000 80a5 	beq.w	800952e <arm_biquad_cascade_df1_f32+0x19a>
 80093e4:	f101 0010 	add.w	r0, r1, #16
 80093e8:	f10e 0310 	add.w	r3, lr, #16
 80093ec:	4664      	mov	r4, ip
 80093ee:	ed50 3a04 	vldr	s7, [r0, #-16]
 80093f2:	ee21 6a88 	vmul.f32	s12, s3, s16
 80093f6:	ee22 5a23 	vmul.f32	s10, s4, s7
 80093fa:	ee61 8a28 	vmul.f32	s17, s2, s17
 80093fe:	ee35 6a06 	vadd.f32	s12, s10, s12
 8009402:	ee60 6a87 	vmul.f32	s13, s1, s14
 8009406:	ee36 6a28 	vadd.f32	s12, s12, s17
 800940a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800940e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8009412:	ee61 6aa3 	vmul.f32	s13, s3, s7
 8009416:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800941a:	ee21 8a08 	vmul.f32	s16, s2, s16
 800941e:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009422:	ed50 2a03 	vldr	s5, [r0, #-12]
 8009426:	ee22 6a22 	vmul.f32	s12, s4, s5
 800942a:	ee60 5aa7 	vmul.f32	s11, s1, s15
 800942e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8009432:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009436:	ee76 6a08 	vadd.f32	s13, s12, s16
 800943a:	ee21 3aa2 	vmul.f32	s6, s3, s5
 800943e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009442:	ee21 8a23 	vmul.f32	s16, s2, s7
 8009446:	ee36 7a87 	vadd.f32	s14, s13, s14
 800944a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800944e:	ed03 7a03 	vstr	s14, [r3, #-12]
 8009452:	ed50 8a02 	vldr	s17, [r0, #-8]
 8009456:	ee62 3a28 	vmul.f32	s7, s4, s17
 800945a:	ee20 6a87 	vmul.f32	s12, s1, s14
 800945e:	ee33 3a83 	vadd.f32	s6, s7, s6
 8009462:	ee21 4aa8 	vmul.f32	s8, s3, s17
 8009466:	ee73 6a08 	vadd.f32	s13, s6, s16
 800946a:	ee61 2a22 	vmul.f32	s5, s2, s5
 800946e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009472:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800947a:	3c01      	subs	r4, #1
 800947c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009480:	ed10 8a01 	vldr	s16, [r0, #-4]
 8009484:	ee62 3a08 	vmul.f32	s7, s4, s16
 8009488:	ee60 6aa7 	vmul.f32	s13, s1, s15
 800948c:	ee73 3a84 	vadd.f32	s7, s7, s8
 8009490:	f100 0010 	add.w	r0, r0, #16
 8009494:	ee33 4aa2 	vadd.f32	s8, s7, s5
 8009498:	f103 0310 	add.w	r3, r3, #16
 800949c:	ee34 4a26 	vadd.f32	s8, s8, s13
 80094a0:	ee34 7a07 	vadd.f32	s14, s8, s14
 80094a4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80094a8:	d1a1      	bne.n	80093ee <arm_biquad_cascade_df1_f32+0x5a>
 80094aa:	4441      	add	r1, r8
 80094ac:	4648      	mov	r0, r9
 80094ae:	b3aa      	cbz	r2, 800951c <arm_biquad_cascade_df1_f32+0x188>
 80094b0:	4613      	mov	r3, r2
 80094b2:	e003      	b.n	80094bc <arm_biquad_cascade_df1_f32+0x128>
 80094b4:	eeb0 7a45 	vmov.f32	s14, s10
 80094b8:	eeb0 8a43 	vmov.f32	s16, s6
 80094bc:	ecb1 3a01 	vldmia	r1!, {s6}
 80094c0:	ee21 6a88 	vmul.f32	s12, s3, s16
 80094c4:	ee62 3a03 	vmul.f32	s7, s4, s6
 80094c8:	ee61 8a28 	vmul.f32	s17, s2, s17
 80094cc:	ee33 4a86 	vadd.f32	s8, s7, s12
 80094d0:	ee60 4a87 	vmul.f32	s9, s1, s14
 80094d4:	ee34 6a28 	vadd.f32	s12, s8, s17
 80094d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80094dc:	ee76 4a24 	vadd.f32	s9, s12, s9
 80094e0:	3b01      	subs	r3, #1
 80094e2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80094e6:	eef0 8a48 	vmov.f32	s17, s16
 80094ea:	eef0 7a47 	vmov.f32	s15, s14
 80094ee:	eca0 5a01 	vstmia	r0!, {s10}
 80094f2:	d1df      	bne.n	80094b4 <arm_biquad_cascade_df1_f32+0x120>
 80094f4:	3f01      	subs	r7, #1
 80094f6:	ed05 3a04 	vstr	s6, [r5, #-16]
 80094fa:	ed05 8a03 	vstr	s16, [r5, #-12]
 80094fe:	ed05 5a02 	vstr	s10, [r5, #-8]
 8009502:	ed05 7a01 	vstr	s14, [r5, #-4]
 8009506:	f106 0614 	add.w	r6, r6, #20
 800950a:	f105 0510 	add.w	r5, r5, #16
 800950e:	4671      	mov	r1, lr
 8009510:	f47f af52 	bne.w	80093b8 <arm_biquad_cascade_df1_f32+0x24>
 8009514:	ecbd 8b02 	vpop	{d8}
 8009518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800951c:	eeb0 5a47 	vmov.f32	s10, s14
 8009520:	eeb0 3a48 	vmov.f32	s6, s16
 8009524:	eeb0 7a67 	vmov.f32	s14, s15
 8009528:	eeb0 8a68 	vmov.f32	s16, s17
 800952c:	e7e2      	b.n	80094f4 <arm_biquad_cascade_df1_f32+0x160>
 800952e:	4670      	mov	r0, lr
 8009530:	e7bd      	b.n	80094ae <arm_biquad_cascade_df1_f32+0x11a>
 8009532:	bf00      	nop

08009534 <__errno>:
 8009534:	4b01      	ldr	r3, [pc, #4]	; (800953c <__errno+0x8>)
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20000020 	.word	0x20000020

08009540 <__libc_init_array>:
 8009540:	b570      	push	{r4, r5, r6, lr}
 8009542:	4d0d      	ldr	r5, [pc, #52]	; (8009578 <__libc_init_array+0x38>)
 8009544:	4c0d      	ldr	r4, [pc, #52]	; (800957c <__libc_init_array+0x3c>)
 8009546:	1b64      	subs	r4, r4, r5
 8009548:	10a4      	asrs	r4, r4, #2
 800954a:	2600      	movs	r6, #0
 800954c:	42a6      	cmp	r6, r4
 800954e:	d109      	bne.n	8009564 <__libc_init_array+0x24>
 8009550:	4d0b      	ldr	r5, [pc, #44]	; (8009580 <__libc_init_array+0x40>)
 8009552:	4c0c      	ldr	r4, [pc, #48]	; (8009584 <__libc_init_array+0x44>)
 8009554:	f000 ff84 	bl	800a460 <_init>
 8009558:	1b64      	subs	r4, r4, r5
 800955a:	10a4      	asrs	r4, r4, #2
 800955c:	2600      	movs	r6, #0
 800955e:	42a6      	cmp	r6, r4
 8009560:	d105      	bne.n	800956e <__libc_init_array+0x2e>
 8009562:	bd70      	pop	{r4, r5, r6, pc}
 8009564:	f855 3b04 	ldr.w	r3, [r5], #4
 8009568:	4798      	blx	r3
 800956a:	3601      	adds	r6, #1
 800956c:	e7ee      	b.n	800954c <__libc_init_array+0xc>
 800956e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009572:	4798      	blx	r3
 8009574:	3601      	adds	r6, #1
 8009576:	e7f2      	b.n	800955e <__libc_init_array+0x1e>
 8009578:	0800a730 	.word	0x0800a730
 800957c:	0800a730 	.word	0x0800a730
 8009580:	0800a730 	.word	0x0800a730
 8009584:	0800a734 	.word	0x0800a734

08009588 <memcpy>:
 8009588:	440a      	add	r2, r1
 800958a:	4291      	cmp	r1, r2
 800958c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009590:	d100      	bne.n	8009594 <memcpy+0xc>
 8009592:	4770      	bx	lr
 8009594:	b510      	push	{r4, lr}
 8009596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800959a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800959e:	4291      	cmp	r1, r2
 80095a0:	d1f9      	bne.n	8009596 <memcpy+0xe>
 80095a2:	bd10      	pop	{r4, pc}

080095a4 <memset>:
 80095a4:	4402      	add	r2, r0
 80095a6:	4603      	mov	r3, r0
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d100      	bne.n	80095ae <memset+0xa>
 80095ac:	4770      	bx	lr
 80095ae:	f803 1b01 	strb.w	r1, [r3], #1
 80095b2:	e7f9      	b.n	80095a8 <memset+0x4>

080095b4 <iprintf>:
 80095b4:	b40f      	push	{r0, r1, r2, r3}
 80095b6:	4b0a      	ldr	r3, [pc, #40]	; (80095e0 <iprintf+0x2c>)
 80095b8:	b513      	push	{r0, r1, r4, lr}
 80095ba:	681c      	ldr	r4, [r3, #0]
 80095bc:	b124      	cbz	r4, 80095c8 <iprintf+0x14>
 80095be:	69a3      	ldr	r3, [r4, #24]
 80095c0:	b913      	cbnz	r3, 80095c8 <iprintf+0x14>
 80095c2:	4620      	mov	r0, r4
 80095c4:	f000 f9e8 	bl	8009998 <__sinit>
 80095c8:	ab05      	add	r3, sp, #20
 80095ca:	9a04      	ldr	r2, [sp, #16]
 80095cc:	68a1      	ldr	r1, [r4, #8]
 80095ce:	9301      	str	r3, [sp, #4]
 80095d0:	4620      	mov	r0, r4
 80095d2:	f000 fbb9 	bl	8009d48 <_vfiprintf_r>
 80095d6:	b002      	add	sp, #8
 80095d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095dc:	b004      	add	sp, #16
 80095de:	4770      	bx	lr
 80095e0:	20000020 	.word	0x20000020

080095e4 <__swbuf_r>:
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e6:	460e      	mov	r6, r1
 80095e8:	4614      	mov	r4, r2
 80095ea:	4605      	mov	r5, r0
 80095ec:	b118      	cbz	r0, 80095f6 <__swbuf_r+0x12>
 80095ee:	6983      	ldr	r3, [r0, #24]
 80095f0:	b90b      	cbnz	r3, 80095f6 <__swbuf_r+0x12>
 80095f2:	f000 f9d1 	bl	8009998 <__sinit>
 80095f6:	4b21      	ldr	r3, [pc, #132]	; (800967c <__swbuf_r+0x98>)
 80095f8:	429c      	cmp	r4, r3
 80095fa:	d12b      	bne.n	8009654 <__swbuf_r+0x70>
 80095fc:	686c      	ldr	r4, [r5, #4]
 80095fe:	69a3      	ldr	r3, [r4, #24]
 8009600:	60a3      	str	r3, [r4, #8]
 8009602:	89a3      	ldrh	r3, [r4, #12]
 8009604:	071a      	lsls	r2, r3, #28
 8009606:	d52f      	bpl.n	8009668 <__swbuf_r+0x84>
 8009608:	6923      	ldr	r3, [r4, #16]
 800960a:	b36b      	cbz	r3, 8009668 <__swbuf_r+0x84>
 800960c:	6923      	ldr	r3, [r4, #16]
 800960e:	6820      	ldr	r0, [r4, #0]
 8009610:	1ac0      	subs	r0, r0, r3
 8009612:	6963      	ldr	r3, [r4, #20]
 8009614:	b2f6      	uxtb	r6, r6
 8009616:	4283      	cmp	r3, r0
 8009618:	4637      	mov	r7, r6
 800961a:	dc04      	bgt.n	8009626 <__swbuf_r+0x42>
 800961c:	4621      	mov	r1, r4
 800961e:	4628      	mov	r0, r5
 8009620:	f000 f926 	bl	8009870 <_fflush_r>
 8009624:	bb30      	cbnz	r0, 8009674 <__swbuf_r+0x90>
 8009626:	68a3      	ldr	r3, [r4, #8]
 8009628:	3b01      	subs	r3, #1
 800962a:	60a3      	str	r3, [r4, #8]
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	1c5a      	adds	r2, r3, #1
 8009630:	6022      	str	r2, [r4, #0]
 8009632:	701e      	strb	r6, [r3, #0]
 8009634:	6963      	ldr	r3, [r4, #20]
 8009636:	3001      	adds	r0, #1
 8009638:	4283      	cmp	r3, r0
 800963a:	d004      	beq.n	8009646 <__swbuf_r+0x62>
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	07db      	lsls	r3, r3, #31
 8009640:	d506      	bpl.n	8009650 <__swbuf_r+0x6c>
 8009642:	2e0a      	cmp	r6, #10
 8009644:	d104      	bne.n	8009650 <__swbuf_r+0x6c>
 8009646:	4621      	mov	r1, r4
 8009648:	4628      	mov	r0, r5
 800964a:	f000 f911 	bl	8009870 <_fflush_r>
 800964e:	b988      	cbnz	r0, 8009674 <__swbuf_r+0x90>
 8009650:	4638      	mov	r0, r7
 8009652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009654:	4b0a      	ldr	r3, [pc, #40]	; (8009680 <__swbuf_r+0x9c>)
 8009656:	429c      	cmp	r4, r3
 8009658:	d101      	bne.n	800965e <__swbuf_r+0x7a>
 800965a:	68ac      	ldr	r4, [r5, #8]
 800965c:	e7cf      	b.n	80095fe <__swbuf_r+0x1a>
 800965e:	4b09      	ldr	r3, [pc, #36]	; (8009684 <__swbuf_r+0xa0>)
 8009660:	429c      	cmp	r4, r3
 8009662:	bf08      	it	eq
 8009664:	68ec      	ldreq	r4, [r5, #12]
 8009666:	e7ca      	b.n	80095fe <__swbuf_r+0x1a>
 8009668:	4621      	mov	r1, r4
 800966a:	4628      	mov	r0, r5
 800966c:	f000 f80c 	bl	8009688 <__swsetup_r>
 8009670:	2800      	cmp	r0, #0
 8009672:	d0cb      	beq.n	800960c <__swbuf_r+0x28>
 8009674:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009678:	e7ea      	b.n	8009650 <__swbuf_r+0x6c>
 800967a:	bf00      	nop
 800967c:	0800a6b4 	.word	0x0800a6b4
 8009680:	0800a6d4 	.word	0x0800a6d4
 8009684:	0800a694 	.word	0x0800a694

08009688 <__swsetup_r>:
 8009688:	4b32      	ldr	r3, [pc, #200]	; (8009754 <__swsetup_r+0xcc>)
 800968a:	b570      	push	{r4, r5, r6, lr}
 800968c:	681d      	ldr	r5, [r3, #0]
 800968e:	4606      	mov	r6, r0
 8009690:	460c      	mov	r4, r1
 8009692:	b125      	cbz	r5, 800969e <__swsetup_r+0x16>
 8009694:	69ab      	ldr	r3, [r5, #24]
 8009696:	b913      	cbnz	r3, 800969e <__swsetup_r+0x16>
 8009698:	4628      	mov	r0, r5
 800969a:	f000 f97d 	bl	8009998 <__sinit>
 800969e:	4b2e      	ldr	r3, [pc, #184]	; (8009758 <__swsetup_r+0xd0>)
 80096a0:	429c      	cmp	r4, r3
 80096a2:	d10f      	bne.n	80096c4 <__swsetup_r+0x3c>
 80096a4:	686c      	ldr	r4, [r5, #4]
 80096a6:	89a3      	ldrh	r3, [r4, #12]
 80096a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096ac:	0719      	lsls	r1, r3, #28
 80096ae:	d42c      	bmi.n	800970a <__swsetup_r+0x82>
 80096b0:	06dd      	lsls	r5, r3, #27
 80096b2:	d411      	bmi.n	80096d8 <__swsetup_r+0x50>
 80096b4:	2309      	movs	r3, #9
 80096b6:	6033      	str	r3, [r6, #0]
 80096b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096bc:	81a3      	strh	r3, [r4, #12]
 80096be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096c2:	e03e      	b.n	8009742 <__swsetup_r+0xba>
 80096c4:	4b25      	ldr	r3, [pc, #148]	; (800975c <__swsetup_r+0xd4>)
 80096c6:	429c      	cmp	r4, r3
 80096c8:	d101      	bne.n	80096ce <__swsetup_r+0x46>
 80096ca:	68ac      	ldr	r4, [r5, #8]
 80096cc:	e7eb      	b.n	80096a6 <__swsetup_r+0x1e>
 80096ce:	4b24      	ldr	r3, [pc, #144]	; (8009760 <__swsetup_r+0xd8>)
 80096d0:	429c      	cmp	r4, r3
 80096d2:	bf08      	it	eq
 80096d4:	68ec      	ldreq	r4, [r5, #12]
 80096d6:	e7e6      	b.n	80096a6 <__swsetup_r+0x1e>
 80096d8:	0758      	lsls	r0, r3, #29
 80096da:	d512      	bpl.n	8009702 <__swsetup_r+0x7a>
 80096dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096de:	b141      	cbz	r1, 80096f2 <__swsetup_r+0x6a>
 80096e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096e4:	4299      	cmp	r1, r3
 80096e6:	d002      	beq.n	80096ee <__swsetup_r+0x66>
 80096e8:	4630      	mov	r0, r6
 80096ea:	f000 fa59 	bl	8009ba0 <_free_r>
 80096ee:	2300      	movs	r3, #0
 80096f0:	6363      	str	r3, [r4, #52]	; 0x34
 80096f2:	89a3      	ldrh	r3, [r4, #12]
 80096f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096f8:	81a3      	strh	r3, [r4, #12]
 80096fa:	2300      	movs	r3, #0
 80096fc:	6063      	str	r3, [r4, #4]
 80096fe:	6923      	ldr	r3, [r4, #16]
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	f043 0308 	orr.w	r3, r3, #8
 8009708:	81a3      	strh	r3, [r4, #12]
 800970a:	6923      	ldr	r3, [r4, #16]
 800970c:	b94b      	cbnz	r3, 8009722 <__swsetup_r+0x9a>
 800970e:	89a3      	ldrh	r3, [r4, #12]
 8009710:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009718:	d003      	beq.n	8009722 <__swsetup_r+0x9a>
 800971a:	4621      	mov	r1, r4
 800971c:	4630      	mov	r0, r6
 800971e:	f000 f9ff 	bl	8009b20 <__smakebuf_r>
 8009722:	89a0      	ldrh	r0, [r4, #12]
 8009724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009728:	f010 0301 	ands.w	r3, r0, #1
 800972c:	d00a      	beq.n	8009744 <__swsetup_r+0xbc>
 800972e:	2300      	movs	r3, #0
 8009730:	60a3      	str	r3, [r4, #8]
 8009732:	6963      	ldr	r3, [r4, #20]
 8009734:	425b      	negs	r3, r3
 8009736:	61a3      	str	r3, [r4, #24]
 8009738:	6923      	ldr	r3, [r4, #16]
 800973a:	b943      	cbnz	r3, 800974e <__swsetup_r+0xc6>
 800973c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009740:	d1ba      	bne.n	80096b8 <__swsetup_r+0x30>
 8009742:	bd70      	pop	{r4, r5, r6, pc}
 8009744:	0781      	lsls	r1, r0, #30
 8009746:	bf58      	it	pl
 8009748:	6963      	ldrpl	r3, [r4, #20]
 800974a:	60a3      	str	r3, [r4, #8]
 800974c:	e7f4      	b.n	8009738 <__swsetup_r+0xb0>
 800974e:	2000      	movs	r0, #0
 8009750:	e7f7      	b.n	8009742 <__swsetup_r+0xba>
 8009752:	bf00      	nop
 8009754:	20000020 	.word	0x20000020
 8009758:	0800a6b4 	.word	0x0800a6b4
 800975c:	0800a6d4 	.word	0x0800a6d4
 8009760:	0800a694 	.word	0x0800a694

08009764 <__sflush_r>:
 8009764:	898a      	ldrh	r2, [r1, #12]
 8009766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976a:	4605      	mov	r5, r0
 800976c:	0710      	lsls	r0, r2, #28
 800976e:	460c      	mov	r4, r1
 8009770:	d458      	bmi.n	8009824 <__sflush_r+0xc0>
 8009772:	684b      	ldr	r3, [r1, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	dc05      	bgt.n	8009784 <__sflush_r+0x20>
 8009778:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800977a:	2b00      	cmp	r3, #0
 800977c:	dc02      	bgt.n	8009784 <__sflush_r+0x20>
 800977e:	2000      	movs	r0, #0
 8009780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009786:	2e00      	cmp	r6, #0
 8009788:	d0f9      	beq.n	800977e <__sflush_r+0x1a>
 800978a:	2300      	movs	r3, #0
 800978c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009790:	682f      	ldr	r7, [r5, #0]
 8009792:	602b      	str	r3, [r5, #0]
 8009794:	d032      	beq.n	80097fc <__sflush_r+0x98>
 8009796:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	075a      	lsls	r2, r3, #29
 800979c:	d505      	bpl.n	80097aa <__sflush_r+0x46>
 800979e:	6863      	ldr	r3, [r4, #4]
 80097a0:	1ac0      	subs	r0, r0, r3
 80097a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097a4:	b10b      	cbz	r3, 80097aa <__sflush_r+0x46>
 80097a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097a8:	1ac0      	subs	r0, r0, r3
 80097aa:	2300      	movs	r3, #0
 80097ac:	4602      	mov	r2, r0
 80097ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097b0:	6a21      	ldr	r1, [r4, #32]
 80097b2:	4628      	mov	r0, r5
 80097b4:	47b0      	blx	r6
 80097b6:	1c43      	adds	r3, r0, #1
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	d106      	bne.n	80097ca <__sflush_r+0x66>
 80097bc:	6829      	ldr	r1, [r5, #0]
 80097be:	291d      	cmp	r1, #29
 80097c0:	d82c      	bhi.n	800981c <__sflush_r+0xb8>
 80097c2:	4a2a      	ldr	r2, [pc, #168]	; (800986c <__sflush_r+0x108>)
 80097c4:	40ca      	lsrs	r2, r1
 80097c6:	07d6      	lsls	r6, r2, #31
 80097c8:	d528      	bpl.n	800981c <__sflush_r+0xb8>
 80097ca:	2200      	movs	r2, #0
 80097cc:	6062      	str	r2, [r4, #4]
 80097ce:	04d9      	lsls	r1, r3, #19
 80097d0:	6922      	ldr	r2, [r4, #16]
 80097d2:	6022      	str	r2, [r4, #0]
 80097d4:	d504      	bpl.n	80097e0 <__sflush_r+0x7c>
 80097d6:	1c42      	adds	r2, r0, #1
 80097d8:	d101      	bne.n	80097de <__sflush_r+0x7a>
 80097da:	682b      	ldr	r3, [r5, #0]
 80097dc:	b903      	cbnz	r3, 80097e0 <__sflush_r+0x7c>
 80097de:	6560      	str	r0, [r4, #84]	; 0x54
 80097e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097e2:	602f      	str	r7, [r5, #0]
 80097e4:	2900      	cmp	r1, #0
 80097e6:	d0ca      	beq.n	800977e <__sflush_r+0x1a>
 80097e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097ec:	4299      	cmp	r1, r3
 80097ee:	d002      	beq.n	80097f6 <__sflush_r+0x92>
 80097f0:	4628      	mov	r0, r5
 80097f2:	f000 f9d5 	bl	8009ba0 <_free_r>
 80097f6:	2000      	movs	r0, #0
 80097f8:	6360      	str	r0, [r4, #52]	; 0x34
 80097fa:	e7c1      	b.n	8009780 <__sflush_r+0x1c>
 80097fc:	6a21      	ldr	r1, [r4, #32]
 80097fe:	2301      	movs	r3, #1
 8009800:	4628      	mov	r0, r5
 8009802:	47b0      	blx	r6
 8009804:	1c41      	adds	r1, r0, #1
 8009806:	d1c7      	bne.n	8009798 <__sflush_r+0x34>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0c4      	beq.n	8009798 <__sflush_r+0x34>
 800980e:	2b1d      	cmp	r3, #29
 8009810:	d001      	beq.n	8009816 <__sflush_r+0xb2>
 8009812:	2b16      	cmp	r3, #22
 8009814:	d101      	bne.n	800981a <__sflush_r+0xb6>
 8009816:	602f      	str	r7, [r5, #0]
 8009818:	e7b1      	b.n	800977e <__sflush_r+0x1a>
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009820:	81a3      	strh	r3, [r4, #12]
 8009822:	e7ad      	b.n	8009780 <__sflush_r+0x1c>
 8009824:	690f      	ldr	r7, [r1, #16]
 8009826:	2f00      	cmp	r7, #0
 8009828:	d0a9      	beq.n	800977e <__sflush_r+0x1a>
 800982a:	0793      	lsls	r3, r2, #30
 800982c:	680e      	ldr	r6, [r1, #0]
 800982e:	bf08      	it	eq
 8009830:	694b      	ldreq	r3, [r1, #20]
 8009832:	600f      	str	r7, [r1, #0]
 8009834:	bf18      	it	ne
 8009836:	2300      	movne	r3, #0
 8009838:	eba6 0807 	sub.w	r8, r6, r7
 800983c:	608b      	str	r3, [r1, #8]
 800983e:	f1b8 0f00 	cmp.w	r8, #0
 8009842:	dd9c      	ble.n	800977e <__sflush_r+0x1a>
 8009844:	6a21      	ldr	r1, [r4, #32]
 8009846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009848:	4643      	mov	r3, r8
 800984a:	463a      	mov	r2, r7
 800984c:	4628      	mov	r0, r5
 800984e:	47b0      	blx	r6
 8009850:	2800      	cmp	r0, #0
 8009852:	dc06      	bgt.n	8009862 <__sflush_r+0xfe>
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800985a:	81a3      	strh	r3, [r4, #12]
 800985c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009860:	e78e      	b.n	8009780 <__sflush_r+0x1c>
 8009862:	4407      	add	r7, r0
 8009864:	eba8 0800 	sub.w	r8, r8, r0
 8009868:	e7e9      	b.n	800983e <__sflush_r+0xda>
 800986a:	bf00      	nop
 800986c:	20400001 	.word	0x20400001

08009870 <_fflush_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	690b      	ldr	r3, [r1, #16]
 8009874:	4605      	mov	r5, r0
 8009876:	460c      	mov	r4, r1
 8009878:	b913      	cbnz	r3, 8009880 <_fflush_r+0x10>
 800987a:	2500      	movs	r5, #0
 800987c:	4628      	mov	r0, r5
 800987e:	bd38      	pop	{r3, r4, r5, pc}
 8009880:	b118      	cbz	r0, 800988a <_fflush_r+0x1a>
 8009882:	6983      	ldr	r3, [r0, #24]
 8009884:	b90b      	cbnz	r3, 800988a <_fflush_r+0x1a>
 8009886:	f000 f887 	bl	8009998 <__sinit>
 800988a:	4b14      	ldr	r3, [pc, #80]	; (80098dc <_fflush_r+0x6c>)
 800988c:	429c      	cmp	r4, r3
 800988e:	d11b      	bne.n	80098c8 <_fflush_r+0x58>
 8009890:	686c      	ldr	r4, [r5, #4]
 8009892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0ef      	beq.n	800987a <_fflush_r+0xa>
 800989a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800989c:	07d0      	lsls	r0, r2, #31
 800989e:	d404      	bmi.n	80098aa <_fflush_r+0x3a>
 80098a0:	0599      	lsls	r1, r3, #22
 80098a2:	d402      	bmi.n	80098aa <_fflush_r+0x3a>
 80098a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098a6:	f000 f915 	bl	8009ad4 <__retarget_lock_acquire_recursive>
 80098aa:	4628      	mov	r0, r5
 80098ac:	4621      	mov	r1, r4
 80098ae:	f7ff ff59 	bl	8009764 <__sflush_r>
 80098b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098b4:	07da      	lsls	r2, r3, #31
 80098b6:	4605      	mov	r5, r0
 80098b8:	d4e0      	bmi.n	800987c <_fflush_r+0xc>
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	059b      	lsls	r3, r3, #22
 80098be:	d4dd      	bmi.n	800987c <_fflush_r+0xc>
 80098c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098c2:	f000 f908 	bl	8009ad6 <__retarget_lock_release_recursive>
 80098c6:	e7d9      	b.n	800987c <_fflush_r+0xc>
 80098c8:	4b05      	ldr	r3, [pc, #20]	; (80098e0 <_fflush_r+0x70>)
 80098ca:	429c      	cmp	r4, r3
 80098cc:	d101      	bne.n	80098d2 <_fflush_r+0x62>
 80098ce:	68ac      	ldr	r4, [r5, #8]
 80098d0:	e7df      	b.n	8009892 <_fflush_r+0x22>
 80098d2:	4b04      	ldr	r3, [pc, #16]	; (80098e4 <_fflush_r+0x74>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	bf08      	it	eq
 80098d8:	68ec      	ldreq	r4, [r5, #12]
 80098da:	e7da      	b.n	8009892 <_fflush_r+0x22>
 80098dc:	0800a6b4 	.word	0x0800a6b4
 80098e0:	0800a6d4 	.word	0x0800a6d4
 80098e4:	0800a694 	.word	0x0800a694

080098e8 <std>:
 80098e8:	2300      	movs	r3, #0
 80098ea:	b510      	push	{r4, lr}
 80098ec:	4604      	mov	r4, r0
 80098ee:	e9c0 3300 	strd	r3, r3, [r0]
 80098f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098f6:	6083      	str	r3, [r0, #8]
 80098f8:	8181      	strh	r1, [r0, #12]
 80098fa:	6643      	str	r3, [r0, #100]	; 0x64
 80098fc:	81c2      	strh	r2, [r0, #14]
 80098fe:	6183      	str	r3, [r0, #24]
 8009900:	4619      	mov	r1, r3
 8009902:	2208      	movs	r2, #8
 8009904:	305c      	adds	r0, #92	; 0x5c
 8009906:	f7ff fe4d 	bl	80095a4 <memset>
 800990a:	4b05      	ldr	r3, [pc, #20]	; (8009920 <std+0x38>)
 800990c:	6263      	str	r3, [r4, #36]	; 0x24
 800990e:	4b05      	ldr	r3, [pc, #20]	; (8009924 <std+0x3c>)
 8009910:	62a3      	str	r3, [r4, #40]	; 0x28
 8009912:	4b05      	ldr	r3, [pc, #20]	; (8009928 <std+0x40>)
 8009914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009916:	4b05      	ldr	r3, [pc, #20]	; (800992c <std+0x44>)
 8009918:	6224      	str	r4, [r4, #32]
 800991a:	6323      	str	r3, [r4, #48]	; 0x30
 800991c:	bd10      	pop	{r4, pc}
 800991e:	bf00      	nop
 8009920:	0800a2f1 	.word	0x0800a2f1
 8009924:	0800a313 	.word	0x0800a313
 8009928:	0800a34b 	.word	0x0800a34b
 800992c:	0800a36f 	.word	0x0800a36f

08009930 <_cleanup_r>:
 8009930:	4901      	ldr	r1, [pc, #4]	; (8009938 <_cleanup_r+0x8>)
 8009932:	f000 b8af 	b.w	8009a94 <_fwalk_reent>
 8009936:	bf00      	nop
 8009938:	08009871 	.word	0x08009871

0800993c <__sfmoreglue>:
 800993c:	b570      	push	{r4, r5, r6, lr}
 800993e:	1e4a      	subs	r2, r1, #1
 8009940:	2568      	movs	r5, #104	; 0x68
 8009942:	4355      	muls	r5, r2
 8009944:	460e      	mov	r6, r1
 8009946:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800994a:	f000 f979 	bl	8009c40 <_malloc_r>
 800994e:	4604      	mov	r4, r0
 8009950:	b140      	cbz	r0, 8009964 <__sfmoreglue+0x28>
 8009952:	2100      	movs	r1, #0
 8009954:	e9c0 1600 	strd	r1, r6, [r0]
 8009958:	300c      	adds	r0, #12
 800995a:	60a0      	str	r0, [r4, #8]
 800995c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009960:	f7ff fe20 	bl	80095a4 <memset>
 8009964:	4620      	mov	r0, r4
 8009966:	bd70      	pop	{r4, r5, r6, pc}

08009968 <__sfp_lock_acquire>:
 8009968:	4801      	ldr	r0, [pc, #4]	; (8009970 <__sfp_lock_acquire+0x8>)
 800996a:	f000 b8b3 	b.w	8009ad4 <__retarget_lock_acquire_recursive>
 800996e:	bf00      	nop
 8009970:	20008cdc 	.word	0x20008cdc

08009974 <__sfp_lock_release>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__sfp_lock_release+0x8>)
 8009976:	f000 b8ae 	b.w	8009ad6 <__retarget_lock_release_recursive>
 800997a:	bf00      	nop
 800997c:	20008cdc 	.word	0x20008cdc

08009980 <__sinit_lock_acquire>:
 8009980:	4801      	ldr	r0, [pc, #4]	; (8009988 <__sinit_lock_acquire+0x8>)
 8009982:	f000 b8a7 	b.w	8009ad4 <__retarget_lock_acquire_recursive>
 8009986:	bf00      	nop
 8009988:	20008cd7 	.word	0x20008cd7

0800998c <__sinit_lock_release>:
 800998c:	4801      	ldr	r0, [pc, #4]	; (8009994 <__sinit_lock_release+0x8>)
 800998e:	f000 b8a2 	b.w	8009ad6 <__retarget_lock_release_recursive>
 8009992:	bf00      	nop
 8009994:	20008cd7 	.word	0x20008cd7

08009998 <__sinit>:
 8009998:	b510      	push	{r4, lr}
 800999a:	4604      	mov	r4, r0
 800999c:	f7ff fff0 	bl	8009980 <__sinit_lock_acquire>
 80099a0:	69a3      	ldr	r3, [r4, #24]
 80099a2:	b11b      	cbz	r3, 80099ac <__sinit+0x14>
 80099a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a8:	f7ff bff0 	b.w	800998c <__sinit_lock_release>
 80099ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099b0:	6523      	str	r3, [r4, #80]	; 0x50
 80099b2:	4b13      	ldr	r3, [pc, #76]	; (8009a00 <__sinit+0x68>)
 80099b4:	4a13      	ldr	r2, [pc, #76]	; (8009a04 <__sinit+0x6c>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80099ba:	42a3      	cmp	r3, r4
 80099bc:	bf04      	itt	eq
 80099be:	2301      	moveq	r3, #1
 80099c0:	61a3      	streq	r3, [r4, #24]
 80099c2:	4620      	mov	r0, r4
 80099c4:	f000 f820 	bl	8009a08 <__sfp>
 80099c8:	6060      	str	r0, [r4, #4]
 80099ca:	4620      	mov	r0, r4
 80099cc:	f000 f81c 	bl	8009a08 <__sfp>
 80099d0:	60a0      	str	r0, [r4, #8]
 80099d2:	4620      	mov	r0, r4
 80099d4:	f000 f818 	bl	8009a08 <__sfp>
 80099d8:	2200      	movs	r2, #0
 80099da:	60e0      	str	r0, [r4, #12]
 80099dc:	2104      	movs	r1, #4
 80099de:	6860      	ldr	r0, [r4, #4]
 80099e0:	f7ff ff82 	bl	80098e8 <std>
 80099e4:	68a0      	ldr	r0, [r4, #8]
 80099e6:	2201      	movs	r2, #1
 80099e8:	2109      	movs	r1, #9
 80099ea:	f7ff ff7d 	bl	80098e8 <std>
 80099ee:	68e0      	ldr	r0, [r4, #12]
 80099f0:	2202      	movs	r2, #2
 80099f2:	2112      	movs	r1, #18
 80099f4:	f7ff ff78 	bl	80098e8 <std>
 80099f8:	2301      	movs	r3, #1
 80099fa:	61a3      	str	r3, [r4, #24]
 80099fc:	e7d2      	b.n	80099a4 <__sinit+0xc>
 80099fe:	bf00      	nop
 8009a00:	0800a690 	.word	0x0800a690
 8009a04:	08009931 	.word	0x08009931

08009a08 <__sfp>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	f7ff ffac 	bl	8009968 <__sfp_lock_acquire>
 8009a10:	4b1e      	ldr	r3, [pc, #120]	; (8009a8c <__sfp+0x84>)
 8009a12:	681e      	ldr	r6, [r3, #0]
 8009a14:	69b3      	ldr	r3, [r6, #24]
 8009a16:	b913      	cbnz	r3, 8009a1e <__sfp+0x16>
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f7ff ffbd 	bl	8009998 <__sinit>
 8009a1e:	3648      	adds	r6, #72	; 0x48
 8009a20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	d503      	bpl.n	8009a30 <__sfp+0x28>
 8009a28:	6833      	ldr	r3, [r6, #0]
 8009a2a:	b30b      	cbz	r3, 8009a70 <__sfp+0x68>
 8009a2c:	6836      	ldr	r6, [r6, #0]
 8009a2e:	e7f7      	b.n	8009a20 <__sfp+0x18>
 8009a30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a34:	b9d5      	cbnz	r5, 8009a6c <__sfp+0x64>
 8009a36:	4b16      	ldr	r3, [pc, #88]	; (8009a90 <__sfp+0x88>)
 8009a38:	60e3      	str	r3, [r4, #12]
 8009a3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a3e:	6665      	str	r5, [r4, #100]	; 0x64
 8009a40:	f000 f847 	bl	8009ad2 <__retarget_lock_init_recursive>
 8009a44:	f7ff ff96 	bl	8009974 <__sfp_lock_release>
 8009a48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a50:	6025      	str	r5, [r4, #0]
 8009a52:	61a5      	str	r5, [r4, #24]
 8009a54:	2208      	movs	r2, #8
 8009a56:	4629      	mov	r1, r5
 8009a58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a5c:	f7ff fda2 	bl	80095a4 <memset>
 8009a60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a68:	4620      	mov	r0, r4
 8009a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a6c:	3468      	adds	r4, #104	; 0x68
 8009a6e:	e7d9      	b.n	8009a24 <__sfp+0x1c>
 8009a70:	2104      	movs	r1, #4
 8009a72:	4638      	mov	r0, r7
 8009a74:	f7ff ff62 	bl	800993c <__sfmoreglue>
 8009a78:	4604      	mov	r4, r0
 8009a7a:	6030      	str	r0, [r6, #0]
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d1d5      	bne.n	8009a2c <__sfp+0x24>
 8009a80:	f7ff ff78 	bl	8009974 <__sfp_lock_release>
 8009a84:	230c      	movs	r3, #12
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	e7ee      	b.n	8009a68 <__sfp+0x60>
 8009a8a:	bf00      	nop
 8009a8c:	0800a690 	.word	0x0800a690
 8009a90:	ffff0001 	.word	0xffff0001

08009a94 <_fwalk_reent>:
 8009a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a98:	4606      	mov	r6, r0
 8009a9a:	4688      	mov	r8, r1
 8009a9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009aa0:	2700      	movs	r7, #0
 8009aa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009aa6:	f1b9 0901 	subs.w	r9, r9, #1
 8009aaa:	d505      	bpl.n	8009ab8 <_fwalk_reent+0x24>
 8009aac:	6824      	ldr	r4, [r4, #0]
 8009aae:	2c00      	cmp	r4, #0
 8009ab0:	d1f7      	bne.n	8009aa2 <_fwalk_reent+0xe>
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ab8:	89ab      	ldrh	r3, [r5, #12]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d907      	bls.n	8009ace <_fwalk_reent+0x3a>
 8009abe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	d003      	beq.n	8009ace <_fwalk_reent+0x3a>
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	4630      	mov	r0, r6
 8009aca:	47c0      	blx	r8
 8009acc:	4307      	orrs	r7, r0
 8009ace:	3568      	adds	r5, #104	; 0x68
 8009ad0:	e7e9      	b.n	8009aa6 <_fwalk_reent+0x12>

08009ad2 <__retarget_lock_init_recursive>:
 8009ad2:	4770      	bx	lr

08009ad4 <__retarget_lock_acquire_recursive>:
 8009ad4:	4770      	bx	lr

08009ad6 <__retarget_lock_release_recursive>:
 8009ad6:	4770      	bx	lr

08009ad8 <__swhatbuf_r>:
 8009ad8:	b570      	push	{r4, r5, r6, lr}
 8009ada:	460e      	mov	r6, r1
 8009adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae0:	2900      	cmp	r1, #0
 8009ae2:	b096      	sub	sp, #88	; 0x58
 8009ae4:	4614      	mov	r4, r2
 8009ae6:	461d      	mov	r5, r3
 8009ae8:	da07      	bge.n	8009afa <__swhatbuf_r+0x22>
 8009aea:	2300      	movs	r3, #0
 8009aec:	602b      	str	r3, [r5, #0]
 8009aee:	89b3      	ldrh	r3, [r6, #12]
 8009af0:	061a      	lsls	r2, r3, #24
 8009af2:	d410      	bmi.n	8009b16 <__swhatbuf_r+0x3e>
 8009af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009af8:	e00e      	b.n	8009b18 <__swhatbuf_r+0x40>
 8009afa:	466a      	mov	r2, sp
 8009afc:	f000 fc5e 	bl	800a3bc <_fstat_r>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	dbf2      	blt.n	8009aea <__swhatbuf_r+0x12>
 8009b04:	9a01      	ldr	r2, [sp, #4]
 8009b06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b0e:	425a      	negs	r2, r3
 8009b10:	415a      	adcs	r2, r3
 8009b12:	602a      	str	r2, [r5, #0]
 8009b14:	e7ee      	b.n	8009af4 <__swhatbuf_r+0x1c>
 8009b16:	2340      	movs	r3, #64	; 0x40
 8009b18:	2000      	movs	r0, #0
 8009b1a:	6023      	str	r3, [r4, #0]
 8009b1c:	b016      	add	sp, #88	; 0x58
 8009b1e:	bd70      	pop	{r4, r5, r6, pc}

08009b20 <__smakebuf_r>:
 8009b20:	898b      	ldrh	r3, [r1, #12]
 8009b22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b24:	079d      	lsls	r5, r3, #30
 8009b26:	4606      	mov	r6, r0
 8009b28:	460c      	mov	r4, r1
 8009b2a:	d507      	bpl.n	8009b3c <__smakebuf_r+0x1c>
 8009b2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	6123      	str	r3, [r4, #16]
 8009b34:	2301      	movs	r3, #1
 8009b36:	6163      	str	r3, [r4, #20]
 8009b38:	b002      	add	sp, #8
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}
 8009b3c:	ab01      	add	r3, sp, #4
 8009b3e:	466a      	mov	r2, sp
 8009b40:	f7ff ffca 	bl	8009ad8 <__swhatbuf_r>
 8009b44:	9900      	ldr	r1, [sp, #0]
 8009b46:	4605      	mov	r5, r0
 8009b48:	4630      	mov	r0, r6
 8009b4a:	f000 f879 	bl	8009c40 <_malloc_r>
 8009b4e:	b948      	cbnz	r0, 8009b64 <__smakebuf_r+0x44>
 8009b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b54:	059a      	lsls	r2, r3, #22
 8009b56:	d4ef      	bmi.n	8009b38 <__smakebuf_r+0x18>
 8009b58:	f023 0303 	bic.w	r3, r3, #3
 8009b5c:	f043 0302 	orr.w	r3, r3, #2
 8009b60:	81a3      	strh	r3, [r4, #12]
 8009b62:	e7e3      	b.n	8009b2c <__smakebuf_r+0xc>
 8009b64:	4b0d      	ldr	r3, [pc, #52]	; (8009b9c <__smakebuf_r+0x7c>)
 8009b66:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	6020      	str	r0, [r4, #0]
 8009b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b70:	81a3      	strh	r3, [r4, #12]
 8009b72:	9b00      	ldr	r3, [sp, #0]
 8009b74:	6163      	str	r3, [r4, #20]
 8009b76:	9b01      	ldr	r3, [sp, #4]
 8009b78:	6120      	str	r0, [r4, #16]
 8009b7a:	b15b      	cbz	r3, 8009b94 <__smakebuf_r+0x74>
 8009b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b80:	4630      	mov	r0, r6
 8009b82:	f000 fc2d 	bl	800a3e0 <_isatty_r>
 8009b86:	b128      	cbz	r0, 8009b94 <__smakebuf_r+0x74>
 8009b88:	89a3      	ldrh	r3, [r4, #12]
 8009b8a:	f023 0303 	bic.w	r3, r3, #3
 8009b8e:	f043 0301 	orr.w	r3, r3, #1
 8009b92:	81a3      	strh	r3, [r4, #12]
 8009b94:	89a0      	ldrh	r0, [r4, #12]
 8009b96:	4305      	orrs	r5, r0
 8009b98:	81a5      	strh	r5, [r4, #12]
 8009b9a:	e7cd      	b.n	8009b38 <__smakebuf_r+0x18>
 8009b9c:	08009931 	.word	0x08009931

08009ba0 <_free_r>:
 8009ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ba2:	2900      	cmp	r1, #0
 8009ba4:	d048      	beq.n	8009c38 <_free_r+0x98>
 8009ba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009baa:	9001      	str	r0, [sp, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f1a1 0404 	sub.w	r4, r1, #4
 8009bb2:	bfb8      	it	lt
 8009bb4:	18e4      	addlt	r4, r4, r3
 8009bb6:	f000 fc35 	bl	800a424 <__malloc_lock>
 8009bba:	4a20      	ldr	r2, [pc, #128]	; (8009c3c <_free_r+0x9c>)
 8009bbc:	9801      	ldr	r0, [sp, #4]
 8009bbe:	6813      	ldr	r3, [r2, #0]
 8009bc0:	4615      	mov	r5, r2
 8009bc2:	b933      	cbnz	r3, 8009bd2 <_free_r+0x32>
 8009bc4:	6063      	str	r3, [r4, #4]
 8009bc6:	6014      	str	r4, [r2, #0]
 8009bc8:	b003      	add	sp, #12
 8009bca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bce:	f000 bc2f 	b.w	800a430 <__malloc_unlock>
 8009bd2:	42a3      	cmp	r3, r4
 8009bd4:	d90b      	bls.n	8009bee <_free_r+0x4e>
 8009bd6:	6821      	ldr	r1, [r4, #0]
 8009bd8:	1862      	adds	r2, r4, r1
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	bf04      	itt	eq
 8009bde:	681a      	ldreq	r2, [r3, #0]
 8009be0:	685b      	ldreq	r3, [r3, #4]
 8009be2:	6063      	str	r3, [r4, #4]
 8009be4:	bf04      	itt	eq
 8009be6:	1852      	addeq	r2, r2, r1
 8009be8:	6022      	streq	r2, [r4, #0]
 8009bea:	602c      	str	r4, [r5, #0]
 8009bec:	e7ec      	b.n	8009bc8 <_free_r+0x28>
 8009bee:	461a      	mov	r2, r3
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	b10b      	cbz	r3, 8009bf8 <_free_r+0x58>
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	d9fa      	bls.n	8009bee <_free_r+0x4e>
 8009bf8:	6811      	ldr	r1, [r2, #0]
 8009bfa:	1855      	adds	r5, r2, r1
 8009bfc:	42a5      	cmp	r5, r4
 8009bfe:	d10b      	bne.n	8009c18 <_free_r+0x78>
 8009c00:	6824      	ldr	r4, [r4, #0]
 8009c02:	4421      	add	r1, r4
 8009c04:	1854      	adds	r4, r2, r1
 8009c06:	42a3      	cmp	r3, r4
 8009c08:	6011      	str	r1, [r2, #0]
 8009c0a:	d1dd      	bne.n	8009bc8 <_free_r+0x28>
 8009c0c:	681c      	ldr	r4, [r3, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	6053      	str	r3, [r2, #4]
 8009c12:	4421      	add	r1, r4
 8009c14:	6011      	str	r1, [r2, #0]
 8009c16:	e7d7      	b.n	8009bc8 <_free_r+0x28>
 8009c18:	d902      	bls.n	8009c20 <_free_r+0x80>
 8009c1a:	230c      	movs	r3, #12
 8009c1c:	6003      	str	r3, [r0, #0]
 8009c1e:	e7d3      	b.n	8009bc8 <_free_r+0x28>
 8009c20:	6825      	ldr	r5, [r4, #0]
 8009c22:	1961      	adds	r1, r4, r5
 8009c24:	428b      	cmp	r3, r1
 8009c26:	bf04      	itt	eq
 8009c28:	6819      	ldreq	r1, [r3, #0]
 8009c2a:	685b      	ldreq	r3, [r3, #4]
 8009c2c:	6063      	str	r3, [r4, #4]
 8009c2e:	bf04      	itt	eq
 8009c30:	1949      	addeq	r1, r1, r5
 8009c32:	6021      	streq	r1, [r4, #0]
 8009c34:	6054      	str	r4, [r2, #4]
 8009c36:	e7c7      	b.n	8009bc8 <_free_r+0x28>
 8009c38:	b003      	add	sp, #12
 8009c3a:	bd30      	pop	{r4, r5, pc}
 8009c3c:	200004f0 	.word	0x200004f0

08009c40 <_malloc_r>:
 8009c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c42:	1ccd      	adds	r5, r1, #3
 8009c44:	f025 0503 	bic.w	r5, r5, #3
 8009c48:	3508      	adds	r5, #8
 8009c4a:	2d0c      	cmp	r5, #12
 8009c4c:	bf38      	it	cc
 8009c4e:	250c      	movcc	r5, #12
 8009c50:	2d00      	cmp	r5, #0
 8009c52:	4606      	mov	r6, r0
 8009c54:	db01      	blt.n	8009c5a <_malloc_r+0x1a>
 8009c56:	42a9      	cmp	r1, r5
 8009c58:	d903      	bls.n	8009c62 <_malloc_r+0x22>
 8009c5a:	230c      	movs	r3, #12
 8009c5c:	6033      	str	r3, [r6, #0]
 8009c5e:	2000      	movs	r0, #0
 8009c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c62:	f000 fbdf 	bl	800a424 <__malloc_lock>
 8009c66:	4921      	ldr	r1, [pc, #132]	; (8009cec <_malloc_r+0xac>)
 8009c68:	680a      	ldr	r2, [r1, #0]
 8009c6a:	4614      	mov	r4, r2
 8009c6c:	b99c      	cbnz	r4, 8009c96 <_malloc_r+0x56>
 8009c6e:	4f20      	ldr	r7, [pc, #128]	; (8009cf0 <_malloc_r+0xb0>)
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	b923      	cbnz	r3, 8009c7e <_malloc_r+0x3e>
 8009c74:	4621      	mov	r1, r4
 8009c76:	4630      	mov	r0, r6
 8009c78:	f000 fb2a 	bl	800a2d0 <_sbrk_r>
 8009c7c:	6038      	str	r0, [r7, #0]
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4630      	mov	r0, r6
 8009c82:	f000 fb25 	bl	800a2d0 <_sbrk_r>
 8009c86:	1c43      	adds	r3, r0, #1
 8009c88:	d123      	bne.n	8009cd2 <_malloc_r+0x92>
 8009c8a:	230c      	movs	r3, #12
 8009c8c:	6033      	str	r3, [r6, #0]
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f000 fbce 	bl	800a430 <__malloc_unlock>
 8009c94:	e7e3      	b.n	8009c5e <_malloc_r+0x1e>
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	1b5b      	subs	r3, r3, r5
 8009c9a:	d417      	bmi.n	8009ccc <_malloc_r+0x8c>
 8009c9c:	2b0b      	cmp	r3, #11
 8009c9e:	d903      	bls.n	8009ca8 <_malloc_r+0x68>
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	441c      	add	r4, r3
 8009ca4:	6025      	str	r5, [r4, #0]
 8009ca6:	e004      	b.n	8009cb2 <_malloc_r+0x72>
 8009ca8:	6863      	ldr	r3, [r4, #4]
 8009caa:	42a2      	cmp	r2, r4
 8009cac:	bf0c      	ite	eq
 8009cae:	600b      	streq	r3, [r1, #0]
 8009cb0:	6053      	strne	r3, [r2, #4]
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f000 fbbc 	bl	800a430 <__malloc_unlock>
 8009cb8:	f104 000b 	add.w	r0, r4, #11
 8009cbc:	1d23      	adds	r3, r4, #4
 8009cbe:	f020 0007 	bic.w	r0, r0, #7
 8009cc2:	1ac2      	subs	r2, r0, r3
 8009cc4:	d0cc      	beq.n	8009c60 <_malloc_r+0x20>
 8009cc6:	1a1b      	subs	r3, r3, r0
 8009cc8:	50a3      	str	r3, [r4, r2]
 8009cca:	e7c9      	b.n	8009c60 <_malloc_r+0x20>
 8009ccc:	4622      	mov	r2, r4
 8009cce:	6864      	ldr	r4, [r4, #4]
 8009cd0:	e7cc      	b.n	8009c6c <_malloc_r+0x2c>
 8009cd2:	1cc4      	adds	r4, r0, #3
 8009cd4:	f024 0403 	bic.w	r4, r4, #3
 8009cd8:	42a0      	cmp	r0, r4
 8009cda:	d0e3      	beq.n	8009ca4 <_malloc_r+0x64>
 8009cdc:	1a21      	subs	r1, r4, r0
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f000 faf6 	bl	800a2d0 <_sbrk_r>
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d1dd      	bne.n	8009ca4 <_malloc_r+0x64>
 8009ce8:	e7cf      	b.n	8009c8a <_malloc_r+0x4a>
 8009cea:	bf00      	nop
 8009cec:	200004f0 	.word	0x200004f0
 8009cf0:	200004f4 	.word	0x200004f4

08009cf4 <__sfputc_r>:
 8009cf4:	6893      	ldr	r3, [r2, #8]
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	b410      	push	{r4}
 8009cfc:	6093      	str	r3, [r2, #8]
 8009cfe:	da08      	bge.n	8009d12 <__sfputc_r+0x1e>
 8009d00:	6994      	ldr	r4, [r2, #24]
 8009d02:	42a3      	cmp	r3, r4
 8009d04:	db01      	blt.n	8009d0a <__sfputc_r+0x16>
 8009d06:	290a      	cmp	r1, #10
 8009d08:	d103      	bne.n	8009d12 <__sfputc_r+0x1e>
 8009d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d0e:	f7ff bc69 	b.w	80095e4 <__swbuf_r>
 8009d12:	6813      	ldr	r3, [r2, #0]
 8009d14:	1c58      	adds	r0, r3, #1
 8009d16:	6010      	str	r0, [r2, #0]
 8009d18:	7019      	strb	r1, [r3, #0]
 8009d1a:	4608      	mov	r0, r1
 8009d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <__sfputs_r>:
 8009d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d24:	4606      	mov	r6, r0
 8009d26:	460f      	mov	r7, r1
 8009d28:	4614      	mov	r4, r2
 8009d2a:	18d5      	adds	r5, r2, r3
 8009d2c:	42ac      	cmp	r4, r5
 8009d2e:	d101      	bne.n	8009d34 <__sfputs_r+0x12>
 8009d30:	2000      	movs	r0, #0
 8009d32:	e007      	b.n	8009d44 <__sfputs_r+0x22>
 8009d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d38:	463a      	mov	r2, r7
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f7ff ffda 	bl	8009cf4 <__sfputc_r>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d1f3      	bne.n	8009d2c <__sfputs_r+0xa>
 8009d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d48 <_vfiprintf_r>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	460d      	mov	r5, r1
 8009d4e:	b09d      	sub	sp, #116	; 0x74
 8009d50:	4614      	mov	r4, r2
 8009d52:	4698      	mov	r8, r3
 8009d54:	4606      	mov	r6, r0
 8009d56:	b118      	cbz	r0, 8009d60 <_vfiprintf_r+0x18>
 8009d58:	6983      	ldr	r3, [r0, #24]
 8009d5a:	b90b      	cbnz	r3, 8009d60 <_vfiprintf_r+0x18>
 8009d5c:	f7ff fe1c 	bl	8009998 <__sinit>
 8009d60:	4b89      	ldr	r3, [pc, #548]	; (8009f88 <_vfiprintf_r+0x240>)
 8009d62:	429d      	cmp	r5, r3
 8009d64:	d11b      	bne.n	8009d9e <_vfiprintf_r+0x56>
 8009d66:	6875      	ldr	r5, [r6, #4]
 8009d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d6a:	07d9      	lsls	r1, r3, #31
 8009d6c:	d405      	bmi.n	8009d7a <_vfiprintf_r+0x32>
 8009d6e:	89ab      	ldrh	r3, [r5, #12]
 8009d70:	059a      	lsls	r2, r3, #22
 8009d72:	d402      	bmi.n	8009d7a <_vfiprintf_r+0x32>
 8009d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d76:	f7ff fead 	bl	8009ad4 <__retarget_lock_acquire_recursive>
 8009d7a:	89ab      	ldrh	r3, [r5, #12]
 8009d7c:	071b      	lsls	r3, r3, #28
 8009d7e:	d501      	bpl.n	8009d84 <_vfiprintf_r+0x3c>
 8009d80:	692b      	ldr	r3, [r5, #16]
 8009d82:	b9eb      	cbnz	r3, 8009dc0 <_vfiprintf_r+0x78>
 8009d84:	4629      	mov	r1, r5
 8009d86:	4630      	mov	r0, r6
 8009d88:	f7ff fc7e 	bl	8009688 <__swsetup_r>
 8009d8c:	b1c0      	cbz	r0, 8009dc0 <_vfiprintf_r+0x78>
 8009d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d90:	07dc      	lsls	r4, r3, #31
 8009d92:	d50e      	bpl.n	8009db2 <_vfiprintf_r+0x6a>
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d98:	b01d      	add	sp, #116	; 0x74
 8009d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9e:	4b7b      	ldr	r3, [pc, #492]	; (8009f8c <_vfiprintf_r+0x244>)
 8009da0:	429d      	cmp	r5, r3
 8009da2:	d101      	bne.n	8009da8 <_vfiprintf_r+0x60>
 8009da4:	68b5      	ldr	r5, [r6, #8]
 8009da6:	e7df      	b.n	8009d68 <_vfiprintf_r+0x20>
 8009da8:	4b79      	ldr	r3, [pc, #484]	; (8009f90 <_vfiprintf_r+0x248>)
 8009daa:	429d      	cmp	r5, r3
 8009dac:	bf08      	it	eq
 8009dae:	68f5      	ldreq	r5, [r6, #12]
 8009db0:	e7da      	b.n	8009d68 <_vfiprintf_r+0x20>
 8009db2:	89ab      	ldrh	r3, [r5, #12]
 8009db4:	0598      	lsls	r0, r3, #22
 8009db6:	d4ed      	bmi.n	8009d94 <_vfiprintf_r+0x4c>
 8009db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dba:	f7ff fe8c 	bl	8009ad6 <__retarget_lock_release_recursive>
 8009dbe:	e7e9      	b.n	8009d94 <_vfiprintf_r+0x4c>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc4:	2320      	movs	r3, #32
 8009dc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dce:	2330      	movs	r3, #48	; 0x30
 8009dd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f94 <_vfiprintf_r+0x24c>
 8009dd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dd8:	f04f 0901 	mov.w	r9, #1
 8009ddc:	4623      	mov	r3, r4
 8009dde:	469a      	mov	sl, r3
 8009de0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009de4:	b10a      	cbz	r2, 8009dea <_vfiprintf_r+0xa2>
 8009de6:	2a25      	cmp	r2, #37	; 0x25
 8009de8:	d1f9      	bne.n	8009dde <_vfiprintf_r+0x96>
 8009dea:	ebba 0b04 	subs.w	fp, sl, r4
 8009dee:	d00b      	beq.n	8009e08 <_vfiprintf_r+0xc0>
 8009df0:	465b      	mov	r3, fp
 8009df2:	4622      	mov	r2, r4
 8009df4:	4629      	mov	r1, r5
 8009df6:	4630      	mov	r0, r6
 8009df8:	f7ff ff93 	bl	8009d22 <__sfputs_r>
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	f000 80aa 	beq.w	8009f56 <_vfiprintf_r+0x20e>
 8009e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e04:	445a      	add	r2, fp
 8009e06:	9209      	str	r2, [sp, #36]	; 0x24
 8009e08:	f89a 3000 	ldrb.w	r3, [sl]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 80a2 	beq.w	8009f56 <_vfiprintf_r+0x20e>
 8009e12:	2300      	movs	r3, #0
 8009e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e1c:	f10a 0a01 	add.w	sl, sl, #1
 8009e20:	9304      	str	r3, [sp, #16]
 8009e22:	9307      	str	r3, [sp, #28]
 8009e24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e28:	931a      	str	r3, [sp, #104]	; 0x68
 8009e2a:	4654      	mov	r4, sl
 8009e2c:	2205      	movs	r2, #5
 8009e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e32:	4858      	ldr	r0, [pc, #352]	; (8009f94 <_vfiprintf_r+0x24c>)
 8009e34:	f7f6 f9cc 	bl	80001d0 <memchr>
 8009e38:	9a04      	ldr	r2, [sp, #16]
 8009e3a:	b9d8      	cbnz	r0, 8009e74 <_vfiprintf_r+0x12c>
 8009e3c:	06d1      	lsls	r1, r2, #27
 8009e3e:	bf44      	itt	mi
 8009e40:	2320      	movmi	r3, #32
 8009e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e46:	0713      	lsls	r3, r2, #28
 8009e48:	bf44      	itt	mi
 8009e4a:	232b      	movmi	r3, #43	; 0x2b
 8009e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e50:	f89a 3000 	ldrb.w	r3, [sl]
 8009e54:	2b2a      	cmp	r3, #42	; 0x2a
 8009e56:	d015      	beq.n	8009e84 <_vfiprintf_r+0x13c>
 8009e58:	9a07      	ldr	r2, [sp, #28]
 8009e5a:	4654      	mov	r4, sl
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	f04f 0c0a 	mov.w	ip, #10
 8009e62:	4621      	mov	r1, r4
 8009e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e68:	3b30      	subs	r3, #48	; 0x30
 8009e6a:	2b09      	cmp	r3, #9
 8009e6c:	d94e      	bls.n	8009f0c <_vfiprintf_r+0x1c4>
 8009e6e:	b1b0      	cbz	r0, 8009e9e <_vfiprintf_r+0x156>
 8009e70:	9207      	str	r2, [sp, #28]
 8009e72:	e014      	b.n	8009e9e <_vfiprintf_r+0x156>
 8009e74:	eba0 0308 	sub.w	r3, r0, r8
 8009e78:	fa09 f303 	lsl.w	r3, r9, r3
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	9304      	str	r3, [sp, #16]
 8009e80:	46a2      	mov	sl, r4
 8009e82:	e7d2      	b.n	8009e2a <_vfiprintf_r+0xe2>
 8009e84:	9b03      	ldr	r3, [sp, #12]
 8009e86:	1d19      	adds	r1, r3, #4
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	9103      	str	r1, [sp, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	bfbb      	ittet	lt
 8009e90:	425b      	neglt	r3, r3
 8009e92:	f042 0202 	orrlt.w	r2, r2, #2
 8009e96:	9307      	strge	r3, [sp, #28]
 8009e98:	9307      	strlt	r3, [sp, #28]
 8009e9a:	bfb8      	it	lt
 8009e9c:	9204      	strlt	r2, [sp, #16]
 8009e9e:	7823      	ldrb	r3, [r4, #0]
 8009ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ea2:	d10c      	bne.n	8009ebe <_vfiprintf_r+0x176>
 8009ea4:	7863      	ldrb	r3, [r4, #1]
 8009ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea8:	d135      	bne.n	8009f16 <_vfiprintf_r+0x1ce>
 8009eaa:	9b03      	ldr	r3, [sp, #12]
 8009eac:	1d1a      	adds	r2, r3, #4
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	9203      	str	r2, [sp, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	bfb8      	it	lt
 8009eb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009eba:	3402      	adds	r4, #2
 8009ebc:	9305      	str	r3, [sp, #20]
 8009ebe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fa4 <_vfiprintf_r+0x25c>
 8009ec2:	7821      	ldrb	r1, [r4, #0]
 8009ec4:	2203      	movs	r2, #3
 8009ec6:	4650      	mov	r0, sl
 8009ec8:	f7f6 f982 	bl	80001d0 <memchr>
 8009ecc:	b140      	cbz	r0, 8009ee0 <_vfiprintf_r+0x198>
 8009ece:	2340      	movs	r3, #64	; 0x40
 8009ed0:	eba0 000a 	sub.w	r0, r0, sl
 8009ed4:	fa03 f000 	lsl.w	r0, r3, r0
 8009ed8:	9b04      	ldr	r3, [sp, #16]
 8009eda:	4303      	orrs	r3, r0
 8009edc:	3401      	adds	r4, #1
 8009ede:	9304      	str	r3, [sp, #16]
 8009ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee4:	482c      	ldr	r0, [pc, #176]	; (8009f98 <_vfiprintf_r+0x250>)
 8009ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009eea:	2206      	movs	r2, #6
 8009eec:	f7f6 f970 	bl	80001d0 <memchr>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d03f      	beq.n	8009f74 <_vfiprintf_r+0x22c>
 8009ef4:	4b29      	ldr	r3, [pc, #164]	; (8009f9c <_vfiprintf_r+0x254>)
 8009ef6:	bb1b      	cbnz	r3, 8009f40 <_vfiprintf_r+0x1f8>
 8009ef8:	9b03      	ldr	r3, [sp, #12]
 8009efa:	3307      	adds	r3, #7
 8009efc:	f023 0307 	bic.w	r3, r3, #7
 8009f00:	3308      	adds	r3, #8
 8009f02:	9303      	str	r3, [sp, #12]
 8009f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f06:	443b      	add	r3, r7
 8009f08:	9309      	str	r3, [sp, #36]	; 0x24
 8009f0a:	e767      	b.n	8009ddc <_vfiprintf_r+0x94>
 8009f0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f10:	460c      	mov	r4, r1
 8009f12:	2001      	movs	r0, #1
 8009f14:	e7a5      	b.n	8009e62 <_vfiprintf_r+0x11a>
 8009f16:	2300      	movs	r3, #0
 8009f18:	3401      	adds	r4, #1
 8009f1a:	9305      	str	r3, [sp, #20]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	f04f 0c0a 	mov.w	ip, #10
 8009f22:	4620      	mov	r0, r4
 8009f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f28:	3a30      	subs	r2, #48	; 0x30
 8009f2a:	2a09      	cmp	r2, #9
 8009f2c:	d903      	bls.n	8009f36 <_vfiprintf_r+0x1ee>
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d0c5      	beq.n	8009ebe <_vfiprintf_r+0x176>
 8009f32:	9105      	str	r1, [sp, #20]
 8009f34:	e7c3      	b.n	8009ebe <_vfiprintf_r+0x176>
 8009f36:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e7f0      	b.n	8009f22 <_vfiprintf_r+0x1da>
 8009f40:	ab03      	add	r3, sp, #12
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	462a      	mov	r2, r5
 8009f46:	4b16      	ldr	r3, [pc, #88]	; (8009fa0 <_vfiprintf_r+0x258>)
 8009f48:	a904      	add	r1, sp, #16
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f3af 8000 	nop.w
 8009f50:	4607      	mov	r7, r0
 8009f52:	1c78      	adds	r0, r7, #1
 8009f54:	d1d6      	bne.n	8009f04 <_vfiprintf_r+0x1bc>
 8009f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f58:	07d9      	lsls	r1, r3, #31
 8009f5a:	d405      	bmi.n	8009f68 <_vfiprintf_r+0x220>
 8009f5c:	89ab      	ldrh	r3, [r5, #12]
 8009f5e:	059a      	lsls	r2, r3, #22
 8009f60:	d402      	bmi.n	8009f68 <_vfiprintf_r+0x220>
 8009f62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f64:	f7ff fdb7 	bl	8009ad6 <__retarget_lock_release_recursive>
 8009f68:	89ab      	ldrh	r3, [r5, #12]
 8009f6a:	065b      	lsls	r3, r3, #25
 8009f6c:	f53f af12 	bmi.w	8009d94 <_vfiprintf_r+0x4c>
 8009f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f72:	e711      	b.n	8009d98 <_vfiprintf_r+0x50>
 8009f74:	ab03      	add	r3, sp, #12
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	462a      	mov	r2, r5
 8009f7a:	4b09      	ldr	r3, [pc, #36]	; (8009fa0 <_vfiprintf_r+0x258>)
 8009f7c:	a904      	add	r1, sp, #16
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f000 f880 	bl	800a084 <_printf_i>
 8009f84:	e7e4      	b.n	8009f50 <_vfiprintf_r+0x208>
 8009f86:	bf00      	nop
 8009f88:	0800a6b4 	.word	0x0800a6b4
 8009f8c:	0800a6d4 	.word	0x0800a6d4
 8009f90:	0800a694 	.word	0x0800a694
 8009f94:	0800a6f4 	.word	0x0800a6f4
 8009f98:	0800a6fe 	.word	0x0800a6fe
 8009f9c:	00000000 	.word	0x00000000
 8009fa0:	08009d23 	.word	0x08009d23
 8009fa4:	0800a6fa 	.word	0x0800a6fa

08009fa8 <_printf_common>:
 8009fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fac:	4616      	mov	r6, r2
 8009fae:	4699      	mov	r9, r3
 8009fb0:	688a      	ldr	r2, [r1, #8]
 8009fb2:	690b      	ldr	r3, [r1, #16]
 8009fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	bfb8      	it	lt
 8009fbc:	4613      	movlt	r3, r2
 8009fbe:	6033      	str	r3, [r6, #0]
 8009fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	b10a      	cbz	r2, 8009fce <_printf_common+0x26>
 8009fca:	3301      	adds	r3, #1
 8009fcc:	6033      	str	r3, [r6, #0]
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	0699      	lsls	r1, r3, #26
 8009fd2:	bf42      	ittt	mi
 8009fd4:	6833      	ldrmi	r3, [r6, #0]
 8009fd6:	3302      	addmi	r3, #2
 8009fd8:	6033      	strmi	r3, [r6, #0]
 8009fda:	6825      	ldr	r5, [r4, #0]
 8009fdc:	f015 0506 	ands.w	r5, r5, #6
 8009fe0:	d106      	bne.n	8009ff0 <_printf_common+0x48>
 8009fe2:	f104 0a19 	add.w	sl, r4, #25
 8009fe6:	68e3      	ldr	r3, [r4, #12]
 8009fe8:	6832      	ldr	r2, [r6, #0]
 8009fea:	1a9b      	subs	r3, r3, r2
 8009fec:	42ab      	cmp	r3, r5
 8009fee:	dc26      	bgt.n	800a03e <_printf_common+0x96>
 8009ff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ff4:	1e13      	subs	r3, r2, #0
 8009ff6:	6822      	ldr	r2, [r4, #0]
 8009ff8:	bf18      	it	ne
 8009ffa:	2301      	movne	r3, #1
 8009ffc:	0692      	lsls	r2, r2, #26
 8009ffe:	d42b      	bmi.n	800a058 <_printf_common+0xb0>
 800a000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a004:	4649      	mov	r1, r9
 800a006:	4638      	mov	r0, r7
 800a008:	47c0      	blx	r8
 800a00a:	3001      	adds	r0, #1
 800a00c:	d01e      	beq.n	800a04c <_printf_common+0xa4>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	68e5      	ldr	r5, [r4, #12]
 800a012:	6832      	ldr	r2, [r6, #0]
 800a014:	f003 0306 	and.w	r3, r3, #6
 800a018:	2b04      	cmp	r3, #4
 800a01a:	bf08      	it	eq
 800a01c:	1aad      	subeq	r5, r5, r2
 800a01e:	68a3      	ldr	r3, [r4, #8]
 800a020:	6922      	ldr	r2, [r4, #16]
 800a022:	bf0c      	ite	eq
 800a024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a028:	2500      	movne	r5, #0
 800a02a:	4293      	cmp	r3, r2
 800a02c:	bfc4      	itt	gt
 800a02e:	1a9b      	subgt	r3, r3, r2
 800a030:	18ed      	addgt	r5, r5, r3
 800a032:	2600      	movs	r6, #0
 800a034:	341a      	adds	r4, #26
 800a036:	42b5      	cmp	r5, r6
 800a038:	d11a      	bne.n	800a070 <_printf_common+0xc8>
 800a03a:	2000      	movs	r0, #0
 800a03c:	e008      	b.n	800a050 <_printf_common+0xa8>
 800a03e:	2301      	movs	r3, #1
 800a040:	4652      	mov	r2, sl
 800a042:	4649      	mov	r1, r9
 800a044:	4638      	mov	r0, r7
 800a046:	47c0      	blx	r8
 800a048:	3001      	adds	r0, #1
 800a04a:	d103      	bne.n	800a054 <_printf_common+0xac>
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a054:	3501      	adds	r5, #1
 800a056:	e7c6      	b.n	8009fe6 <_printf_common+0x3e>
 800a058:	18e1      	adds	r1, r4, r3
 800a05a:	1c5a      	adds	r2, r3, #1
 800a05c:	2030      	movs	r0, #48	; 0x30
 800a05e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a062:	4422      	add	r2, r4
 800a064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a06c:	3302      	adds	r3, #2
 800a06e:	e7c7      	b.n	800a000 <_printf_common+0x58>
 800a070:	2301      	movs	r3, #1
 800a072:	4622      	mov	r2, r4
 800a074:	4649      	mov	r1, r9
 800a076:	4638      	mov	r0, r7
 800a078:	47c0      	blx	r8
 800a07a:	3001      	adds	r0, #1
 800a07c:	d0e6      	beq.n	800a04c <_printf_common+0xa4>
 800a07e:	3601      	adds	r6, #1
 800a080:	e7d9      	b.n	800a036 <_printf_common+0x8e>
	...

0800a084 <_printf_i>:
 800a084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a088:	460c      	mov	r4, r1
 800a08a:	4691      	mov	r9, r2
 800a08c:	7e27      	ldrb	r7, [r4, #24]
 800a08e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a090:	2f78      	cmp	r7, #120	; 0x78
 800a092:	4680      	mov	r8, r0
 800a094:	469a      	mov	sl, r3
 800a096:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a09a:	d807      	bhi.n	800a0ac <_printf_i+0x28>
 800a09c:	2f62      	cmp	r7, #98	; 0x62
 800a09e:	d80a      	bhi.n	800a0b6 <_printf_i+0x32>
 800a0a0:	2f00      	cmp	r7, #0
 800a0a2:	f000 80d8 	beq.w	800a256 <_printf_i+0x1d2>
 800a0a6:	2f58      	cmp	r7, #88	; 0x58
 800a0a8:	f000 80a3 	beq.w	800a1f2 <_printf_i+0x16e>
 800a0ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0b4:	e03a      	b.n	800a12c <_printf_i+0xa8>
 800a0b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0ba:	2b15      	cmp	r3, #21
 800a0bc:	d8f6      	bhi.n	800a0ac <_printf_i+0x28>
 800a0be:	a001      	add	r0, pc, #4	; (adr r0, 800a0c4 <_printf_i+0x40>)
 800a0c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a0c4:	0800a11d 	.word	0x0800a11d
 800a0c8:	0800a131 	.word	0x0800a131
 800a0cc:	0800a0ad 	.word	0x0800a0ad
 800a0d0:	0800a0ad 	.word	0x0800a0ad
 800a0d4:	0800a0ad 	.word	0x0800a0ad
 800a0d8:	0800a0ad 	.word	0x0800a0ad
 800a0dc:	0800a131 	.word	0x0800a131
 800a0e0:	0800a0ad 	.word	0x0800a0ad
 800a0e4:	0800a0ad 	.word	0x0800a0ad
 800a0e8:	0800a0ad 	.word	0x0800a0ad
 800a0ec:	0800a0ad 	.word	0x0800a0ad
 800a0f0:	0800a23d 	.word	0x0800a23d
 800a0f4:	0800a161 	.word	0x0800a161
 800a0f8:	0800a21f 	.word	0x0800a21f
 800a0fc:	0800a0ad 	.word	0x0800a0ad
 800a100:	0800a0ad 	.word	0x0800a0ad
 800a104:	0800a25f 	.word	0x0800a25f
 800a108:	0800a0ad 	.word	0x0800a0ad
 800a10c:	0800a161 	.word	0x0800a161
 800a110:	0800a0ad 	.word	0x0800a0ad
 800a114:	0800a0ad 	.word	0x0800a0ad
 800a118:	0800a227 	.word	0x0800a227
 800a11c:	680b      	ldr	r3, [r1, #0]
 800a11e:	1d1a      	adds	r2, r3, #4
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	600a      	str	r2, [r1, #0]
 800a124:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a12c:	2301      	movs	r3, #1
 800a12e:	e0a3      	b.n	800a278 <_printf_i+0x1f4>
 800a130:	6825      	ldr	r5, [r4, #0]
 800a132:	6808      	ldr	r0, [r1, #0]
 800a134:	062e      	lsls	r6, r5, #24
 800a136:	f100 0304 	add.w	r3, r0, #4
 800a13a:	d50a      	bpl.n	800a152 <_printf_i+0xce>
 800a13c:	6805      	ldr	r5, [r0, #0]
 800a13e:	600b      	str	r3, [r1, #0]
 800a140:	2d00      	cmp	r5, #0
 800a142:	da03      	bge.n	800a14c <_printf_i+0xc8>
 800a144:	232d      	movs	r3, #45	; 0x2d
 800a146:	426d      	negs	r5, r5
 800a148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a14c:	485e      	ldr	r0, [pc, #376]	; (800a2c8 <_printf_i+0x244>)
 800a14e:	230a      	movs	r3, #10
 800a150:	e019      	b.n	800a186 <_printf_i+0x102>
 800a152:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a156:	6805      	ldr	r5, [r0, #0]
 800a158:	600b      	str	r3, [r1, #0]
 800a15a:	bf18      	it	ne
 800a15c:	b22d      	sxthne	r5, r5
 800a15e:	e7ef      	b.n	800a140 <_printf_i+0xbc>
 800a160:	680b      	ldr	r3, [r1, #0]
 800a162:	6825      	ldr	r5, [r4, #0]
 800a164:	1d18      	adds	r0, r3, #4
 800a166:	6008      	str	r0, [r1, #0]
 800a168:	0628      	lsls	r0, r5, #24
 800a16a:	d501      	bpl.n	800a170 <_printf_i+0xec>
 800a16c:	681d      	ldr	r5, [r3, #0]
 800a16e:	e002      	b.n	800a176 <_printf_i+0xf2>
 800a170:	0669      	lsls	r1, r5, #25
 800a172:	d5fb      	bpl.n	800a16c <_printf_i+0xe8>
 800a174:	881d      	ldrh	r5, [r3, #0]
 800a176:	4854      	ldr	r0, [pc, #336]	; (800a2c8 <_printf_i+0x244>)
 800a178:	2f6f      	cmp	r7, #111	; 0x6f
 800a17a:	bf0c      	ite	eq
 800a17c:	2308      	moveq	r3, #8
 800a17e:	230a      	movne	r3, #10
 800a180:	2100      	movs	r1, #0
 800a182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a186:	6866      	ldr	r6, [r4, #4]
 800a188:	60a6      	str	r6, [r4, #8]
 800a18a:	2e00      	cmp	r6, #0
 800a18c:	bfa2      	ittt	ge
 800a18e:	6821      	ldrge	r1, [r4, #0]
 800a190:	f021 0104 	bicge.w	r1, r1, #4
 800a194:	6021      	strge	r1, [r4, #0]
 800a196:	b90d      	cbnz	r5, 800a19c <_printf_i+0x118>
 800a198:	2e00      	cmp	r6, #0
 800a19a:	d04d      	beq.n	800a238 <_printf_i+0x1b4>
 800a19c:	4616      	mov	r6, r2
 800a19e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1a2:	fb03 5711 	mls	r7, r3, r1, r5
 800a1a6:	5dc7      	ldrb	r7, [r0, r7]
 800a1a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1ac:	462f      	mov	r7, r5
 800a1ae:	42bb      	cmp	r3, r7
 800a1b0:	460d      	mov	r5, r1
 800a1b2:	d9f4      	bls.n	800a19e <_printf_i+0x11a>
 800a1b4:	2b08      	cmp	r3, #8
 800a1b6:	d10b      	bne.n	800a1d0 <_printf_i+0x14c>
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	07df      	lsls	r7, r3, #31
 800a1bc:	d508      	bpl.n	800a1d0 <_printf_i+0x14c>
 800a1be:	6923      	ldr	r3, [r4, #16]
 800a1c0:	6861      	ldr	r1, [r4, #4]
 800a1c2:	4299      	cmp	r1, r3
 800a1c4:	bfde      	ittt	le
 800a1c6:	2330      	movle	r3, #48	; 0x30
 800a1c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1cc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a1d0:	1b92      	subs	r2, r2, r6
 800a1d2:	6122      	str	r2, [r4, #16]
 800a1d4:	f8cd a000 	str.w	sl, [sp]
 800a1d8:	464b      	mov	r3, r9
 800a1da:	aa03      	add	r2, sp, #12
 800a1dc:	4621      	mov	r1, r4
 800a1de:	4640      	mov	r0, r8
 800a1e0:	f7ff fee2 	bl	8009fa8 <_printf_common>
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d14c      	bne.n	800a282 <_printf_i+0x1fe>
 800a1e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1ec:	b004      	add	sp, #16
 800a1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f2:	4835      	ldr	r0, [pc, #212]	; (800a2c8 <_printf_i+0x244>)
 800a1f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	680e      	ldr	r6, [r1, #0]
 800a1fc:	061f      	lsls	r7, r3, #24
 800a1fe:	f856 5b04 	ldr.w	r5, [r6], #4
 800a202:	600e      	str	r6, [r1, #0]
 800a204:	d514      	bpl.n	800a230 <_printf_i+0x1ac>
 800a206:	07d9      	lsls	r1, r3, #31
 800a208:	bf44      	itt	mi
 800a20a:	f043 0320 	orrmi.w	r3, r3, #32
 800a20e:	6023      	strmi	r3, [r4, #0]
 800a210:	b91d      	cbnz	r5, 800a21a <_printf_i+0x196>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	f023 0320 	bic.w	r3, r3, #32
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	2310      	movs	r3, #16
 800a21c:	e7b0      	b.n	800a180 <_printf_i+0xfc>
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	f043 0320 	orr.w	r3, r3, #32
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	2378      	movs	r3, #120	; 0x78
 800a228:	4828      	ldr	r0, [pc, #160]	; (800a2cc <_printf_i+0x248>)
 800a22a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a22e:	e7e3      	b.n	800a1f8 <_printf_i+0x174>
 800a230:	065e      	lsls	r6, r3, #25
 800a232:	bf48      	it	mi
 800a234:	b2ad      	uxthmi	r5, r5
 800a236:	e7e6      	b.n	800a206 <_printf_i+0x182>
 800a238:	4616      	mov	r6, r2
 800a23a:	e7bb      	b.n	800a1b4 <_printf_i+0x130>
 800a23c:	680b      	ldr	r3, [r1, #0]
 800a23e:	6826      	ldr	r6, [r4, #0]
 800a240:	6960      	ldr	r0, [r4, #20]
 800a242:	1d1d      	adds	r5, r3, #4
 800a244:	600d      	str	r5, [r1, #0]
 800a246:	0635      	lsls	r5, r6, #24
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	d501      	bpl.n	800a250 <_printf_i+0x1cc>
 800a24c:	6018      	str	r0, [r3, #0]
 800a24e:	e002      	b.n	800a256 <_printf_i+0x1d2>
 800a250:	0671      	lsls	r1, r6, #25
 800a252:	d5fb      	bpl.n	800a24c <_printf_i+0x1c8>
 800a254:	8018      	strh	r0, [r3, #0]
 800a256:	2300      	movs	r3, #0
 800a258:	6123      	str	r3, [r4, #16]
 800a25a:	4616      	mov	r6, r2
 800a25c:	e7ba      	b.n	800a1d4 <_printf_i+0x150>
 800a25e:	680b      	ldr	r3, [r1, #0]
 800a260:	1d1a      	adds	r2, r3, #4
 800a262:	600a      	str	r2, [r1, #0]
 800a264:	681e      	ldr	r6, [r3, #0]
 800a266:	6862      	ldr	r2, [r4, #4]
 800a268:	2100      	movs	r1, #0
 800a26a:	4630      	mov	r0, r6
 800a26c:	f7f5 ffb0 	bl	80001d0 <memchr>
 800a270:	b108      	cbz	r0, 800a276 <_printf_i+0x1f2>
 800a272:	1b80      	subs	r0, r0, r6
 800a274:	6060      	str	r0, [r4, #4]
 800a276:	6863      	ldr	r3, [r4, #4]
 800a278:	6123      	str	r3, [r4, #16]
 800a27a:	2300      	movs	r3, #0
 800a27c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a280:	e7a8      	b.n	800a1d4 <_printf_i+0x150>
 800a282:	6923      	ldr	r3, [r4, #16]
 800a284:	4632      	mov	r2, r6
 800a286:	4649      	mov	r1, r9
 800a288:	4640      	mov	r0, r8
 800a28a:	47d0      	blx	sl
 800a28c:	3001      	adds	r0, #1
 800a28e:	d0ab      	beq.n	800a1e8 <_printf_i+0x164>
 800a290:	6823      	ldr	r3, [r4, #0]
 800a292:	079b      	lsls	r3, r3, #30
 800a294:	d413      	bmi.n	800a2be <_printf_i+0x23a>
 800a296:	68e0      	ldr	r0, [r4, #12]
 800a298:	9b03      	ldr	r3, [sp, #12]
 800a29a:	4298      	cmp	r0, r3
 800a29c:	bfb8      	it	lt
 800a29e:	4618      	movlt	r0, r3
 800a2a0:	e7a4      	b.n	800a1ec <_printf_i+0x168>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	4632      	mov	r2, r6
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	4640      	mov	r0, r8
 800a2aa:	47d0      	blx	sl
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	d09b      	beq.n	800a1e8 <_printf_i+0x164>
 800a2b0:	3501      	adds	r5, #1
 800a2b2:	68e3      	ldr	r3, [r4, #12]
 800a2b4:	9903      	ldr	r1, [sp, #12]
 800a2b6:	1a5b      	subs	r3, r3, r1
 800a2b8:	42ab      	cmp	r3, r5
 800a2ba:	dcf2      	bgt.n	800a2a2 <_printf_i+0x21e>
 800a2bc:	e7eb      	b.n	800a296 <_printf_i+0x212>
 800a2be:	2500      	movs	r5, #0
 800a2c0:	f104 0619 	add.w	r6, r4, #25
 800a2c4:	e7f5      	b.n	800a2b2 <_printf_i+0x22e>
 800a2c6:	bf00      	nop
 800a2c8:	0800a705 	.word	0x0800a705
 800a2cc:	0800a716 	.word	0x0800a716

0800a2d0 <_sbrk_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	4d06      	ldr	r5, [pc, #24]	; (800a2ec <_sbrk_r+0x1c>)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	4608      	mov	r0, r1
 800a2da:	602b      	str	r3, [r5, #0]
 800a2dc:	f7f6 ffcc 	bl	8001278 <_sbrk>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d102      	bne.n	800a2ea <_sbrk_r+0x1a>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	b103      	cbz	r3, 800a2ea <_sbrk_r+0x1a>
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	20008ce0 	.word	0x20008ce0

0800a2f0 <__sread>:
 800a2f0:	b510      	push	{r4, lr}
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f8:	f000 f8a0 	bl	800a43c <_read_r>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	bfab      	itete	ge
 800a300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a302:	89a3      	ldrhlt	r3, [r4, #12]
 800a304:	181b      	addge	r3, r3, r0
 800a306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a30a:	bfac      	ite	ge
 800a30c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a30e:	81a3      	strhlt	r3, [r4, #12]
 800a310:	bd10      	pop	{r4, pc}

0800a312 <__swrite>:
 800a312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a316:	461f      	mov	r7, r3
 800a318:	898b      	ldrh	r3, [r1, #12]
 800a31a:	05db      	lsls	r3, r3, #23
 800a31c:	4605      	mov	r5, r0
 800a31e:	460c      	mov	r4, r1
 800a320:	4616      	mov	r6, r2
 800a322:	d505      	bpl.n	800a330 <__swrite+0x1e>
 800a324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a328:	2302      	movs	r3, #2
 800a32a:	2200      	movs	r2, #0
 800a32c:	f000 f868 	bl	800a400 <_lseek_r>
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a33a:	81a3      	strh	r3, [r4, #12]
 800a33c:	4632      	mov	r2, r6
 800a33e:	463b      	mov	r3, r7
 800a340:	4628      	mov	r0, r5
 800a342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a346:	f000 b817 	b.w	800a378 <_write_r>

0800a34a <__sseek>:
 800a34a:	b510      	push	{r4, lr}
 800a34c:	460c      	mov	r4, r1
 800a34e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a352:	f000 f855 	bl	800a400 <_lseek_r>
 800a356:	1c43      	adds	r3, r0, #1
 800a358:	89a3      	ldrh	r3, [r4, #12]
 800a35a:	bf15      	itete	ne
 800a35c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a35e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a366:	81a3      	strheq	r3, [r4, #12]
 800a368:	bf18      	it	ne
 800a36a:	81a3      	strhne	r3, [r4, #12]
 800a36c:	bd10      	pop	{r4, pc}

0800a36e <__sclose>:
 800a36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a372:	f000 b813 	b.w	800a39c <_close_r>
	...

0800a378 <_write_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4d07      	ldr	r5, [pc, #28]	; (800a398 <_write_r+0x20>)
 800a37c:	4604      	mov	r4, r0
 800a37e:	4608      	mov	r0, r1
 800a380:	4611      	mov	r1, r2
 800a382:	2200      	movs	r2, #0
 800a384:	602a      	str	r2, [r5, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	f7f6 fbe2 	bl	8000b50 <_write>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d102      	bne.n	800a396 <_write_r+0x1e>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	b103      	cbz	r3, 800a396 <_write_r+0x1e>
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	bd38      	pop	{r3, r4, r5, pc}
 800a398:	20008ce0 	.word	0x20008ce0

0800a39c <_close_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4d06      	ldr	r5, [pc, #24]	; (800a3b8 <_close_r+0x1c>)
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	602b      	str	r3, [r5, #0]
 800a3a8:	f7f6 ff31 	bl	800120e <_close>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d102      	bne.n	800a3b6 <_close_r+0x1a>
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	b103      	cbz	r3, 800a3b6 <_close_r+0x1a>
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	bd38      	pop	{r3, r4, r5, pc}
 800a3b8:	20008ce0 	.word	0x20008ce0

0800a3bc <_fstat_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4d07      	ldr	r5, [pc, #28]	; (800a3dc <_fstat_r+0x20>)
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	602b      	str	r3, [r5, #0]
 800a3ca:	f7f6 ff2c 	bl	8001226 <_fstat>
 800a3ce:	1c43      	adds	r3, r0, #1
 800a3d0:	d102      	bne.n	800a3d8 <_fstat_r+0x1c>
 800a3d2:	682b      	ldr	r3, [r5, #0]
 800a3d4:	b103      	cbz	r3, 800a3d8 <_fstat_r+0x1c>
 800a3d6:	6023      	str	r3, [r4, #0]
 800a3d8:	bd38      	pop	{r3, r4, r5, pc}
 800a3da:	bf00      	nop
 800a3dc:	20008ce0 	.word	0x20008ce0

0800a3e0 <_isatty_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4d06      	ldr	r5, [pc, #24]	; (800a3fc <_isatty_r+0x1c>)
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	4608      	mov	r0, r1
 800a3ea:	602b      	str	r3, [r5, #0]
 800a3ec:	f7f6 ff2b 	bl	8001246 <_isatty>
 800a3f0:	1c43      	adds	r3, r0, #1
 800a3f2:	d102      	bne.n	800a3fa <_isatty_r+0x1a>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	b103      	cbz	r3, 800a3fa <_isatty_r+0x1a>
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	bd38      	pop	{r3, r4, r5, pc}
 800a3fc:	20008ce0 	.word	0x20008ce0

0800a400 <_lseek_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d07      	ldr	r5, [pc, #28]	; (800a420 <_lseek_r+0x20>)
 800a404:	4604      	mov	r4, r0
 800a406:	4608      	mov	r0, r1
 800a408:	4611      	mov	r1, r2
 800a40a:	2200      	movs	r2, #0
 800a40c:	602a      	str	r2, [r5, #0]
 800a40e:	461a      	mov	r2, r3
 800a410:	f7f6 ff24 	bl	800125c <_lseek>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d102      	bne.n	800a41e <_lseek_r+0x1e>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	b103      	cbz	r3, 800a41e <_lseek_r+0x1e>
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	20008ce0 	.word	0x20008ce0

0800a424 <__malloc_lock>:
 800a424:	4801      	ldr	r0, [pc, #4]	; (800a42c <__malloc_lock+0x8>)
 800a426:	f7ff bb55 	b.w	8009ad4 <__retarget_lock_acquire_recursive>
 800a42a:	bf00      	nop
 800a42c:	20008cd8 	.word	0x20008cd8

0800a430 <__malloc_unlock>:
 800a430:	4801      	ldr	r0, [pc, #4]	; (800a438 <__malloc_unlock+0x8>)
 800a432:	f7ff bb50 	b.w	8009ad6 <__retarget_lock_release_recursive>
 800a436:	bf00      	nop
 800a438:	20008cd8 	.word	0x20008cd8

0800a43c <_read_r>:
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	4d07      	ldr	r5, [pc, #28]	; (800a45c <_read_r+0x20>)
 800a440:	4604      	mov	r4, r0
 800a442:	4608      	mov	r0, r1
 800a444:	4611      	mov	r1, r2
 800a446:	2200      	movs	r2, #0
 800a448:	602a      	str	r2, [r5, #0]
 800a44a:	461a      	mov	r2, r3
 800a44c:	f7f6 fec2 	bl	80011d4 <_read>
 800a450:	1c43      	adds	r3, r0, #1
 800a452:	d102      	bne.n	800a45a <_read_r+0x1e>
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	b103      	cbz	r3, 800a45a <_read_r+0x1e>
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	bd38      	pop	{r3, r4, r5, pc}
 800a45c:	20008ce0 	.word	0x20008ce0

0800a460 <_init>:
 800a460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a462:	bf00      	nop
 800a464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a466:	bc08      	pop	{r3}
 800a468:	469e      	mov	lr, r3
 800a46a:	4770      	bx	lr

0800a46c <_fini>:
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46e:	bf00      	nop
 800a470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a472:	bc08      	pop	{r3}
 800a474:	469e      	mov	lr, r3
 800a476:	4770      	bx	lr
