
F405_LQFP64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a43c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  0800a5cc  0800a5cc  0001a5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8a0  0800a8a0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8a0  0800a8a0  0001a8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8a8  0800a8a8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8a8  0800a8a8  0001a8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8ac  0800a8ac  0001a8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800a8b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008cd4  20000084  0800a934  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008d58  0800a934  00028d58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002423f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048b7  00000000  00000000  000442f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016d0  00000000  00000000  00048bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  0004a280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000273ba  00000000  00000000  0004b708  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001abbc  00000000  00000000  00072ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce15a  00000000  00000000  0008d67e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000016a  00000000  00000000  0015b7d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062c4  00000000  00000000  0015b944  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000b6  00000000  00000000  00161c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5b4 	.word	0x0800a5b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800a5b4 	.word	0x0800a5b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <MX_ADC1_Init+0x98>)
 800058a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2201      	movs	r2, #1
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2201      	movs	r2, #1
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	; (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f001 f98f 	bl	80018f4 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 fc0e 	bl	8000dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80005e8:	2307      	movs	r3, #7
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f001 fac9 	bl	8001b88 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 fbfe 	bl	8000dfc <Error_Handler>
  }

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200004f8 	.word	0x200004f8
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a2f      	ldr	r2, [pc, #188]	; (80006f0 <HAL_ADC_MspInit+0xdc>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d157      	bne.n	80006e6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <HAL_ADC_MspInit+0xe0>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063e:	4a2d      	ldr	r2, [pc, #180]	; (80006f4 <HAL_ADC_MspInit+0xe0>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000644:	6453      	str	r3, [r2, #68]	; 0x44
 8000646:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <HAL_ADC_MspInit+0xe0>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <HAL_ADC_MspInit+0xe0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <HAL_ADC_MspInit+0xe0>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <HAL_ADC_MspInit+0xe0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = FootExp_IN_Pin;
 800066e:	2301      	movs	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FootExp_IN_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	481d      	ldr	r0, [pc, #116]	; (80006f8 <HAL_ADC_MspInit+0xe4>)
 8000682:	f002 f9a1 	bl	80029c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <HAL_ADC_MspInit+0xe8>)
 8000688:	4a1d      	ldr	r2, [pc, #116]	; (8000700 <HAL_ADC_MspInit+0xec>)
 800068a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <HAL_ADC_MspInit+0xe8>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <HAL_ADC_MspInit+0xe8>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_ADC_MspInit+0xe8>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_ADC_MspInit+0xe8>)
 80006a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_ADC_MspInit+0xe8>)
 80006a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <HAL_ADC_MspInit+0xe8>)
 80006b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <HAL_ADC_MspInit+0xe8>)
 80006b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_ADC_MspInit+0xe8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <HAL_ADC_MspInit+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006ca:	480c      	ldr	r0, [pc, #48]	; (80006fc <HAL_ADC_MspInit+0xe8>)
 80006cc:	f001 fe0e 	bl	80022ec <HAL_DMA_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006d6:	f000 fb91 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_ADC_MspInit+0xe8>)
 80006de:	639a      	str	r2, [r3, #56]	; 0x38
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <HAL_ADC_MspInit+0xe8>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40012000 	.word	0x40012000
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020000 	.word	0x40020000
 80006fc:	20000540 	.word	0x20000540
 8000700:	40026410 	.word	0x40026410

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_DMA_Init+0x78>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <MX_DMA_Init+0x78>)
 8000714:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_DMA_Init+0x78>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_DMA_Init+0x78>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_DMA_Init+0x78>)
 8000730:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_DMA_Init+0x78>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	200e      	movs	r0, #14
 8000748:	f001 fd99 	bl	800227e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800074c:	200e      	movs	r0, #14
 800074e:	f001 fdb2 	bl	80022b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	200f      	movs	r0, #15
 8000758:	f001 fd91 	bl	800227e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800075c:	200f      	movs	r0, #15
 800075e:	f001 fdaa 	bl	80022b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2038      	movs	r0, #56	; 0x38
 8000768:	f001 fd89 	bl	800227e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800076c:	2038      	movs	r0, #56	; 0x38
 800076e:	f001 fda2 	bl	80022b6 <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b69      	ldr	r3, [pc, #420]	; (8000940 <MX_GPIO_Init+0x1c0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a68      	ldr	r2, [pc, #416]	; (8000940 <MX_GPIO_Init+0x1c0>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b66      	ldr	r3, [pc, #408]	; (8000940 <MX_GPIO_Init+0x1c0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b62      	ldr	r3, [pc, #392]	; (8000940 <MX_GPIO_Init+0x1c0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a61      	ldr	r2, [pc, #388]	; (8000940 <MX_GPIO_Init+0x1c0>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b5f      	ldr	r3, [pc, #380]	; (8000940 <MX_GPIO_Init+0x1c0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b5b      	ldr	r3, [pc, #364]	; (8000940 <MX_GPIO_Init+0x1c0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a5a      	ldr	r2, [pc, #360]	; (8000940 <MX_GPIO_Init+0x1c0>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b58      	ldr	r3, [pc, #352]	; (8000940 <MX_GPIO_Init+0x1c0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b54      	ldr	r3, [pc, #336]	; (8000940 <MX_GPIO_Init+0x1c0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a53      	ldr	r2, [pc, #332]	; (8000940 <MX_GPIO_Init+0x1c0>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b51      	ldr	r3, [pc, #324]	; (8000940 <MX_GPIO_Init+0x1c0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b4d      	ldr	r3, [pc, #308]	; (8000940 <MX_GPIO_Init+0x1c0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a4c      	ldr	r2, [pc, #304]	; (8000940 <MX_GPIO_Init+0x1c0>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b4a      	ldr	r3, [pc, #296]	; (8000940 <MX_GPIO_Init+0x1c0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(relay_switch_GPIO_Port, relay_switch_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2101      	movs	r1, #1
 8000826:	4847      	ldr	r0, [pc, #284]	; (8000944 <MX_GPIO_Init+0x1c4>)
 8000828:	f002 fa80 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_RED_Pin|LEDA_BLUE_Pin|LEDA_GREEN_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2107      	movs	r1, #7
 8000830:	4845      	ldr	r0, [pc, #276]	; (8000948 <MX_GPIO_Init+0x1c8>)
 8000832:	f002 fa7b 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDB_RED_Pin|LEDB_BLUE_Pin|LEDB_GREEN_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800083c:	4843      	ldr	r0, [pc, #268]	; (800094c <MX_GPIO_Init+0x1cc>)
 800083e:	f002 fa75 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = foot_switch1_Pin|foot_switch2_Pin;
 8000842:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000848:	4b41      	ldr	r3, [pc, #260]	; (8000950 <MX_GPIO_Init+0x1d0>)
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084c:	2301      	movs	r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	483b      	ldr	r0, [pc, #236]	; (8000944 <MX_GPIO_Init+0x1c4>)
 8000858:	f002 f8b6 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800085c:	2301      	movs	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000860:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <MX_GPIO_Init+0x1d0>)
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000864:	2301      	movs	r3, #1
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4839      	ldr	r0, [pc, #228]	; (8000954 <MX_GPIO_Init+0x1d4>)
 8000870:	f002 f8aa 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = relay_switch_Pin;
 8000874:	2301      	movs	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(relay_switch_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	482e      	ldr	r0, [pc, #184]	; (8000944 <MX_GPIO_Init+0x1c4>)
 800088c:	f002 f89c 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = user_switch2_Pin|user_switch1_Pin;
 8000890:	2306      	movs	r3, #6
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4828      	ldr	r0, [pc, #160]	; (8000944 <MX_GPIO_Init+0x1c4>)
 80008a4:	f002 f890 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEDA_RED_Pin|LEDA_BLUE_Pin|LEDA_GREEN_Pin;
 80008a8:	2307      	movs	r3, #7
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4822      	ldr	r0, [pc, #136]	; (8000948 <MX_GPIO_Init+0x1c8>)
 80008c0:	f002 f882 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_Detect_Pin;
 80008c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_Detect_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	481c      	ldr	r0, [pc, #112]	; (800094c <MX_GPIO_Init+0x1cc>)
 80008da:	f002 f875 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LEDB_RED_Pin|LEDB_BLUE_Pin|LEDB_GREEN_Pin;
 80008de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	4815      	ldr	r0, [pc, #84]	; (800094c <MX_GPIO_Init+0x1cc>)
 80008f8:	f002 f866 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_GPIO_Init+0x1d0>)
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	480e      	ldr	r0, [pc, #56]	; (800094c <MX_GPIO_Init+0x1cc>)
 8000912:	f002 f859 	bl	80029c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2006      	movs	r0, #6
 800091c:	f001 fcaf 	bl	800227e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000920:	2006      	movs	r0, #6
 8000922:	f001 fcc8 	bl	80022b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2028      	movs	r0, #40	; 0x28
 800092c:	f001 fca7 	bl	800227e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000930:	2028      	movs	r0, #40	; 0x28
 8000932:	f001 fcc0 	bl	80022b6 <HAL_NVIC_EnableIRQ>

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020800 	.word	0x40020800
 8000948:	40020400 	.word	0x40020400
 800094c:	40020000 	.word	0x40020000
 8000950:	10210000 	.word	0x10210000
 8000954:	40021c00 	.word	0x40021c00

08000958 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_i2s2_ext_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_I2S2_Init+0x54>)
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <MX_I2S2_Init+0x58>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_I2S2_Init+0x54>)
 8000964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000968:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_I2S2_Init+0x54>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_I2S2_Init+0x54>)
 8000972:	2203      	movs	r2, #3
 8000974:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <MX_I2S2_Init+0x54>)
 8000978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_I2S2_Init+0x54>)
 8000980:	4a0c      	ldr	r2, [pc, #48]	; (80009b4 <MX_I2S2_Init+0x5c>)
 8000982:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_I2S2_Init+0x54>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_I2S2_Init+0x54>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_I2S2_Init+0x54>)
 8000992:	2201      	movs	r2, #1
 8000994:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_I2S2_Init+0x54>)
 8000998:	f002 fa14 	bl	8002dc4 <HAL_I2S_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80009a2:	f000 fa2b 	bl	8000dfc <Error_Handler>
  }

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000660 	.word	0x20000660
 80009b0:	40003800 	.word	0x40003800
 80009b4:	00017700 	.word	0x00017700

080009b8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a63      	ldr	r2, [pc, #396]	; (8000b64 <HAL_I2S_MspInit+0x1ac>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	f040 80bf 	bne.w	8000b5a <HAL_I2S_MspInit+0x1a2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <HAL_I2S_MspInit+0x1b0>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a60      	ldr	r2, [pc, #384]	; (8000b68 <HAL_I2S_MspInit+0x1b0>)
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b5e      	ldr	r3, [pc, #376]	; (8000b68 <HAL_I2S_MspInit+0x1b0>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4b5a      	ldr	r3, [pc, #360]	; (8000b68 <HAL_I2S_MspInit+0x1b0>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	4a59      	ldr	r2, [pc, #356]	; (8000b68 <HAL_I2S_MspInit+0x1b0>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	6313      	str	r3, [r2, #48]	; 0x30
 8000a08:	4b57      	ldr	r3, [pc, #348]	; (8000b68 <HAL_I2S_MspInit+0x1b0>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b53      	ldr	r3, [pc, #332]	; (8000b68 <HAL_I2S_MspInit+0x1b0>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	4a52      	ldr	r2, [pc, #328]	; (8000b68 <HAL_I2S_MspInit+0x1b0>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6313      	str	r3, [r2, #48]	; 0x30
 8000a24:	4b50      	ldr	r3, [pc, #320]	; (8000b68 <HAL_I2S_MspInit+0x1b0>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000a30:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a42:	2305      	movs	r3, #5
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4847      	ldr	r0, [pc, #284]	; (8000b6c <HAL_I2S_MspInit+0x1b4>)
 8000a4e:	f001 ffbb 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000a64:	2306      	movs	r3, #6
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	483f      	ldr	r0, [pc, #252]	; (8000b6c <HAL_I2S_MspInit+0x1b4>)
 8000a70:	f001 ffaa 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a74:	2340      	movs	r3, #64	; 0x40
 8000a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a84:	2305      	movs	r3, #5
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4838      	ldr	r0, [pc, #224]	; (8000b70 <HAL_I2S_MspInit+0x1b8>)
 8000a90:	f001 ff9a 	bl	80029c8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <HAL_I2S_MspInit+0x1bc>)
 8000a96:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <HAL_I2S_MspInit+0x1c0>)
 8000a98:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000a9a:	4b36      	ldr	r3, [pc, #216]	; (8000b74 <HAL_I2S_MspInit+0x1bc>)
 8000a9c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000aa0:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aa2:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <HAL_I2S_MspInit+0x1bc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa8:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <HAL_I2S_MspInit+0x1bc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <HAL_I2S_MspInit+0x1bc>)
 8000ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab4:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <HAL_I2S_MspInit+0x1bc>)
 8000ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000abc:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <HAL_I2S_MspInit+0x1bc>)
 8000ac0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac4:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <HAL_I2S_MspInit+0x1bc>)
 8000ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000acc:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <HAL_I2S_MspInit+0x1bc>)
 8000ad0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ad4:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <HAL_I2S_MspInit+0x1bc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000adc:	4825      	ldr	r0, [pc, #148]	; (8000b74 <HAL_I2S_MspInit+0x1bc>)
 8000ade:	f001 fc05 	bl	80022ec <HAL_DMA_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <HAL_I2S_MspInit+0x134>
    {
      Error_Handler();
 8000ae8:	f000 f988 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s2_ext_rx);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <HAL_I2S_MspInit+0x1bc>)
 8000af0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000af2:	4a20      	ldr	r2, [pc, #128]	; (8000b74 <HAL_I2S_MspInit+0x1bc>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <HAL_I2S_MspInit+0x1c4>)
 8000afa:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <HAL_I2S_MspInit+0x1c8>)
 8000afc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <HAL_I2S_MspInit+0x1c4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <HAL_I2S_MspInit+0x1c4>)
 8000b06:	2240      	movs	r2, #64	; 0x40
 8000b08:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <HAL_I2S_MspInit+0x1c4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <HAL_I2S_MspInit+0x1c4>)
 8000b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b16:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b18:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_I2S_MspInit+0x1c4>)
 8000b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b1e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_I2S_MspInit+0x1c4>)
 8000b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b26:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_I2S_MspInit+0x1c4>)
 8000b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_I2S_MspInit+0x1c4>)
 8000b32:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b36:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b38:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_I2S_MspInit+0x1c4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b3e:	480f      	ldr	r0, [pc, #60]	; (8000b7c <HAL_I2S_MspInit+0x1c4>)
 8000b40:	f001 fbd4 	bl	80022ec <HAL_DMA_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_I2S_MspInit+0x196>
    {
      Error_Handler();
 8000b4a:	f000 f957 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_I2S_MspInit+0x1c4>)
 8000b52:	639a      	str	r2, [r3, #56]	; 0x38
 8000b54:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <HAL_I2S_MspInit+0x1c4>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40003800 	.word	0x40003800
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40020800 	.word	0x40020800
 8000b74:	200005a0 	.word	0x200005a0
 8000b78:	40026058 	.word	0x40026058
 8000b7c:	20000600 	.word	0x20000600
 8000b80:	40026070 	.word	0x40026070

08000b84 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  (void) file;  /// Not used, avoid warning
  SEGGER_RTT_Write(0, ptr, len);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	2000      	movs	r0, #0
 8000b98:	f008 fd48 	bl	800962c <SEGGER_RTT_Write>
  return len;
 8000b9c:	687b      	ldr	r3, [r7, #4]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_I2SEx_TxRxHalfCpltCallback>:
}

#endif // REAL_FFT

#ifdef IIR_BIQUAD
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

	callback_state = 1;
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]

}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	200000a0 	.word	0x200000a0

08000bc8 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

	callback_state = 2;
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	701a      	strb	r2, [r3, #0]

}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200000a0 	.word	0x200000a0

08000be8 <do_iir_init>:

void do_iir_init()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_l, 1, &iir_coeffs[0], &iir_l_state[0]);
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <do_iir_init+0x30>)
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <do_iir_init+0x34>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	480b      	ldr	r0, [pc, #44]	; (8000c20 <do_iir_init+0x38>)
 8000bf4:	f008 fdb0 	bl	8009758 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_r, 1, &iir_coeffs[0], &iir_r_state[0]);
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <do_iir_init+0x3c>)
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <do_iir_init+0x34>)
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	480a      	ldr	r0, [pc, #40]	; (8000c28 <do_iir_init+0x40>)
 8000c00:	f008 fdaa 	bl	8009758 <arm_biquad_cascade_df1_init_f32>


  //int res = testfunc();
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 8000c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c08:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <do_iir_init+0x44>)
 8000c0a:	4909      	ldr	r1, [pc, #36]	; (8000c30 <do_iir_init+0x48>)
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <do_iir_init+0x4c>)
 8000c0e:	f002 fb1f 	bl	8003250 <HAL_I2SEx_TransmitReceive_DMA>


}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200046b8 	.word	0x200046b8
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	200006a8 	.word	0x200006a8
 8000c24:	200076dc 	.word	0x200076dc
 8000c28:	200086f0 	.word	0x200086f0
 8000c2c:	200056c8 	.word	0x200056c8
 8000c30:	200016b8 	.word	0x200016b8
 8000c34:	20000660 	.word	0x20000660

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fdc5 	bl	80017cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f859 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c46:	f7ff fd9b 	bl	8000780 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4a:	f7ff fd5b 	bl	8000704 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c4e:	f7ff fc8f 	bl	8000570 <MX_ADC1_Init>
  MX_I2S2_Init();
 8000c52:	f7ff fe81 	bl	8000958 <MX_I2S2_Init>
  MX_TIM13_Init();
 8000c56:	f000 fb69 	bl	800132c <MX_TIM13_Init>
  MX_SDIO_SD_Init();
 8000c5a:	f000 f8d7 	bl	8000e0c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000c5e:	f005 ff61 	bl	8006b24 <MX_FATFS_Init>
  MX_TIM3_Init();
 8000c62:	f000 fabb 	bl	80011dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c66:	f000 fb0d 	bl	8001284 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	2000      	movs	r0, #0
 8000c76:	f008 fcff 	bl	8009678 <SEGGER_RTT_ConfigUpBuffer>

  // enable ADC input for expression pedal input
  HAL_ADC_Start_DMA(&hadc1, adc_input_data_buffer, ADC_DATA_BUFFER_SIZE);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4917      	ldr	r1, [pc, #92]	; (8000cdc <main+0xa4>)
 8000c7e:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <main+0xa8>)
 8000c80:	f000 fe7c 	bl	800197c <HAL_ADC_Start_DMA>
  //HAL_TIM_Base_Start_IT(&htim13);

  //enable the rotary encoders
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000c84:	213c      	movs	r1, #60	; 0x3c
 8000c86:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <main+0xac>)
 8000c88:	f004 ff21 	bl	8005ace <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000c8c:	213c      	movs	r1, #60	; 0x3c
 8000c8e:	4816      	ldr	r0, [pc, #88]	; (8000ce8 <main+0xb0>)
 8000c90:	f004 ff1d 	bl	8005ace <HAL_TIM_Encoder_Start>

  // read from microSD card
  read_sdio_data();
 8000c94:	f000 fc22 	bl	80014dc <read_sdio_data>

  HAL_Delay(5000);
 8000c98:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c9c:	f000 fe08 	bl	80018b0 <HAL_Delay>

#ifdef IIR_BIQUAD
  do_iir_init();
 8000ca0:	f7ff ffa2 	bl	8000be8 <do_iir_init>
	#ifdef REAL_FFT
		real_fft_loop();
	#endif //REAL_FFT
*/
	// check the toggle button positions
	check_user_buttons_state();
 8000ca4:	f000 fca8 	bl	80015f8 <check_user_buttons_state>

	// check rotary encoder values and directions
	uint32_t tim3_dir = (TIM3->CR1 & TIM_CR1_DIR);
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <main+0xb4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0310 	and.w	r3, r3, #16
 8000cb0:	607b      	str	r3, [r7, #4]
	uint32_t tim4_dir = (TIM4->CR1 & TIM_CR1_DIR);
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <main+0xb8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	603b      	str	r3, [r7, #0]
	printf("RIGHT KNOB %lu (%lu) - LEFT KNOB %lu (%lu) - EXP %lu\r\n", TIM3->CNT, tim3_dir , TIM4->CNT , tim4_dir, adc_input_data_buffer[0]);
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <main+0xb4>)
 8000cbe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <main+0xb8>)
 8000cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <main+0xa4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <main+0xbc>)
 8000cd4:	f008 fd8a 	bl	80097ec <iprintf>
  {
 8000cd8:	e7e4      	b.n	8000ca4 <main+0x6c>
 8000cda:	bf00      	nop
 8000cdc:	200076c8 	.word	0x200076c8
 8000ce0:	200004f8 	.word	0x200004f8
 8000ce4:	200087c0 	.word	0x200087c0
 8000ce8:	20008780 	.word	0x20008780
 8000cec:	40000400 	.word	0x40000400
 8000cf0:	40000800 	.word	0x40000800
 8000cf4:	0800a5cc 	.word	0x0800a5cc

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b098      	sub	sp, #96	; 0x60
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d02:	2230      	movs	r2, #48	; 0x30
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f008 fd67 	bl	80097da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <SystemClock_Config+0xfc>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a30      	ldr	r2, [pc, #192]	; (8000df4 <SystemClock_Config+0xfc>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <SystemClock_Config+0xfc>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <SystemClock_Config+0x100>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a2a      	ldr	r2, [pc, #168]	; (8000df8 <SystemClock_Config+0x100>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <SystemClock_Config+0x100>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d62:	2302      	movs	r3, #2
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d66:	2301      	movs	r3, #1
 8000d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d72:	2300      	movs	r3, #0
 8000d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d76:	2310      	movs	r3, #16
 8000d78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d7a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d7e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d84:	2307      	movs	r3, #7
 8000d86:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f002 ff1f 	bl	8003bd0 <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000d98:	f000 f830 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000da8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	2105      	movs	r1, #5
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 f978 	bl	80040b0 <HAL_RCC_ClockConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000dc6:	f000 f819 	bl	8000dfc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
 8000dce:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dd2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 faff 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000de8:	f000 f808 	bl	8000dfc <Error_Handler>
  }
}
 8000dec:	bf00      	nop
 8000dee:	3760      	adds	r7, #96	; 0x60
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40007000 	.word	0x40007000

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_SDIO_SD_Init+0x38>)
 8000e12:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <MX_SDIO_SD_Init+0x3c>)
 8000e14:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_SDIO_SD_Init+0x38>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_SDIO_SD_Init+0x38>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_SDIO_SD_Init+0x38>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_SDIO_SD_Init+0x38>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <MX_SDIO_SD_Init+0x38>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <MX_SDIO_SD_Init+0x38>)
 8000e36:	2204      	movs	r2, #4
 8000e38:	619a      	str	r2, [r3, #24]

}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	200086fc 	.word	0x200086fc
 8000e48:	40012c00 	.word	0x40012c00

08000e4c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a28      	ldr	r2, [pc, #160]	; (8000f0c <HAL_SD_MspInit+0xc0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d14a      	bne.n	8000f04 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <HAL_SD_MspInit+0xc4>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a26      	ldr	r2, [pc, #152]	; (8000f10 <HAL_SD_MspInit+0xc4>)
 8000e78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <HAL_SD_MspInit+0xc4>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <HAL_SD_MspInit+0xc4>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a1f      	ldr	r2, [pc, #124]	; (8000f10 <HAL_SD_MspInit+0xc4>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_SD_MspInit+0xc4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_SD_MspInit+0xc4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <HAL_SD_MspInit+0xc4>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_SD_MspInit+0xc4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ec2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ec6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <HAL_SD_MspInit+0xc8>)
 8000ee0:	f001 fd72 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <HAL_SD_MspInit+0xcc>)
 8000f00:	f001 fd62 	bl	80029c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	; 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40012c00 	.word	0x40012c00
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020800 	.word	0x40020800
 8000f18:	40020c00 	.word	0x40020c00

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 fc56 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_TogglePin(relay_switch_GPIO_Port, relay_switch_Pin);
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <EXTI0_IRQHandler+0x18>)
 8000fd0:	f001 fec5 	bl	8002d5e <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f001 fedd 	bl	8002d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <DMA1_Stream3_IRQHandler+0x10>)
 8000fea:	f001 fa85 	bl	80024f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200005a0 	.word	0x200005a0

08000ff8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <DMA1_Stream4_IRQHandler+0x10>)
 8000ffe:	f001 fa7b 	bl	80024f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000600 	.word	0x20000600

0800100c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <TIM3_IRQHandler+0x10>)
 8001012:	f004 fd93 	bl	8005b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200087c0 	.word	0x200087c0

08001020 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <TIM4_IRQHandler+0x10>)
 8001026:	f004 fd89 	bl	8005b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20008780 	.word	0x20008780

08001034 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	// test the relay
	HAL_GPIO_TogglePin(relay_switch_GPIO_Port, relay_switch_Pin);
 8001038:	2101      	movs	r1, #1
 800103a:	4808      	ldr	r0, [pc, #32]	; (800105c <EXTI15_10_IRQHandler+0x28>)
 800103c:	f001 fe8f 	bl	8002d5e <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001040:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001044:	f001 fea6 	bl	8002d94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001048:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800104c:	f001 fea2 	bl	8002d94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001050:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001054:	f001 fe9e 	bl	8002d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40020800 	.word	0x40020800

08001060 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	HAL_GPIO_TogglePin(relay_switch_GPIO_Port, relay_switch_Pin);
 8001064:	2101      	movs	r1, #1
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <TIM8_UP_TIM13_IRQHandler+0x20>)
 8001068:	f001 fe79 	bl	8002d5e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDA_RED_GPIO_Port, LEDA_RED_Pin);
 800106c:	2101      	movs	r1, #1
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <TIM8_UP_TIM13_IRQHandler+0x24>)
 8001070:	f001 fe75 	bl	8002d5e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <TIM8_UP_TIM13_IRQHandler+0x28>)
 8001076:	f004 fd61 	bl	8005b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40020800 	.word	0x40020800
 8001084:	40020400 	.word	0x40020400
 8001088:	20008800 	.word	0x20008800

0800108c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <DMA2_Stream0_IRQHandler+0x10>)
 8001092:	f001 fa31 	bl	80024f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000540 	.word	0x20000540

080010a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e00a      	b.n	80010c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010b2:	f3af 8000 	nop.w
 80010b6:	4601      	mov	r1, r0
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	b2ca      	uxtb	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf0      	blt.n	80010b2 <_read+0x12>
	}

return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_close>:
	return len;
}
*/

int _close(int file)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
	return -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001102:	605a      	str	r2, [r3, #4]
	return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_isatty>:

int _isatty(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
	return 1;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
	return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <_sbrk+0x5c>)
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <_sbrk+0x60>)
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <_sbrk+0x64>)
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <_sbrk+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	429a      	cmp	r2, r3
 8001172:	d207      	bcs.n	8001184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001174:	f008 fafc 	bl	8009770 <__errno>
 8001178:	4602      	mov	r2, r0
 800117a:	230c      	movs	r3, #12
 800117c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001182:	e009      	b.n	8001198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <_sbrk+0x64>)
 8001194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20020000 	.word	0x20020000
 80011a4:	00000400 	.word	0x00000400
 80011a8:	200000a4 	.word	0x200000a4
 80011ac:	20008d58 	.word	0x20008d58

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <SystemInit+0x28>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <SystemInit+0x28>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SystemInit+0x28>)
 80011c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ca:	609a      	str	r2, [r3, #8]
#endif
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2224      	movs	r2, #36	; 0x24
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f008 faf5 	bl	80097da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <MX_TIM3_Init+0xa0>)
 80011fa:	4a21      	ldr	r2, [pc, #132]	; (8001280 <MX_TIM3_Init+0xa4>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_TIM3_Init+0xa0>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_TIM3_Init+0xa0>)
 8001206:	2260      	movs	r2, #96	; 0x60
 8001208:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_TIM3_Init+0xa0>)
 800120c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001210:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_TIM3_Init+0xa0>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_TIM3_Init+0xa0>)
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 800121e:	2302      	movs	r3, #2
 8001220:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001226:	2301      	movs	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001236:	2301      	movs	r3, #1
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	4619      	mov	r1, r3
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <MX_TIM3_Init+0xa0>)
 800124a:	f004 fbae 	bl	80059aa <HAL_TIM_Encoder_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001254:	f7ff fdd2 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001258:	2320      	movs	r3, #32
 800125a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_TIM3_Init+0xa0>)
 8001266:	f004 fe69 	bl	8005f3c <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001270:	f7ff fdc4 	bl	8000dfc <Error_Handler>
  }

}
 8001274:	bf00      	nop
 8001276:	3730      	adds	r7, #48	; 0x30
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200087c0 	.word	0x200087c0
 8001280:	40000400 	.word	0x40000400

08001284 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	; 0x30
 8001288:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2224      	movs	r2, #36	; 0x24
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f008 faa1 	bl	80097da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012a2:	4a21      	ldr	r2, [pc, #132]	; (8001328 <MX_TIM4_Init+0xa4>)
 80012a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012ae:	2260      	movs	r2, #96	; 0x60
 80012b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ce:	2301      	movs	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012de:	2301      	movs	r3, #1
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012f2:	f004 fb5a 	bl	80059aa <HAL_TIM_Encoder_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80012fc:	f7ff fd7e 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001300:	2320      	movs	r3, #32
 8001302:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_TIM4_Init+0xa0>)
 800130e:	f004 fe15 	bl	8005f3c <HAL_TIMEx_MasterConfigSynchronization>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001318:	f7ff fd70 	bl	8000dfc <Error_Handler>
  }

}
 800131c:	bf00      	nop
 800131e:	3730      	adds	r7, #48	; 0x30
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20008780 	.word	0x20008780
 8001328:	40000800 	.word	0x40000800

0800132c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_TIM13_Init+0x40>)
 8001332:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <MX_TIM13_Init+0x44>)
 8001334:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1;
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <MX_TIM13_Init+0x40>)
 8001338:	2201      	movs	r2, #1
 800133a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_TIM13_Init+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <MX_TIM13_Init+0x40>)
 8001344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001348:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_TIM13_Init+0x40>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_TIM13_Init+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_TIM13_Init+0x40>)
 8001358:	f004 fafc 	bl	8005954 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001362:	f7ff fd4b 	bl	8000dfc <Error_Handler>
  }

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20008800 	.word	0x20008800
 8001370:	40001c00 	.word	0x40001c00

08001374 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a3a      	ldr	r2, [pc, #232]	; (800147c <HAL_TIM_Encoder_MspInit+0x108>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d134      	bne.n	8001400 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	4b39      	ldr	r3, [pc, #228]	; (8001480 <HAL_TIM_Encoder_MspInit+0x10c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a38      	ldr	r2, [pc, #224]	; (8001480 <HAL_TIM_Encoder_MspInit+0x10c>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <HAL_TIM_Encoder_MspInit+0x10c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_TIM_Encoder_MspInit+0x10c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a31      	ldr	r2, [pc, #196]	; (8001480 <HAL_TIM_Encoder_MspInit+0x10c>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <HAL_TIM_Encoder_MspInit+0x10c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013ce:	2330      	movs	r3, #48	; 0x30
 80013d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013de:	2302      	movs	r3, #2
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4826      	ldr	r0, [pc, #152]	; (8001484 <HAL_TIM_Encoder_MspInit+0x110>)
 80013ea:	f001 faed 	bl	80029c8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	201d      	movs	r0, #29
 80013f4:	f000 ff43 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013f8:	201d      	movs	r0, #29
 80013fa:	f000 ff5c 	bl	80022b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80013fe:	e038      	b.n	8001472 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(tim_encoderHandle->Instance==TIM4)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a20      	ldr	r2, [pc, #128]	; (8001488 <HAL_TIM_Encoder_MspInit+0x114>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d133      	bne.n	8001472 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_TIM_Encoder_MspInit+0x10c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_TIM_Encoder_MspInit+0x10c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a14      	ldr	r2, [pc, #80]	; (8001480 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001442:	23c0      	movs	r3, #192	; 0xc0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001452:	2302      	movs	r3, #2
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <HAL_TIM_Encoder_MspInit+0x110>)
 800145e:	f001 fab3 	bl	80029c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	201e      	movs	r0, #30
 8001468:	f000 ff09 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800146c:	201e      	movs	r0, #30
 800146e:	f000 ff22 	bl	80022b6 <HAL_NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3730      	adds	r7, #48	; 0x30
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40000400 	.word	0x40000400
 8001480:	40023800 	.word	0x40023800
 8001484:	40020400 	.word	0x40020400
 8001488:	40000800 	.word	0x40000800

0800148c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_TIM_Base_MspInit+0x48>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d115      	bne.n	80014ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_TIM_Base_MspInit+0x4c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <HAL_TIM_Base_MspInit+0x4c>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_TIM_Base_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	202c      	movs	r0, #44	; 0x2c
 80014c0:	f000 fedd 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80014c4:	202c      	movs	r0, #44	; 0x2c
 80014c6:	f000 fef6 	bl	80022b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40001c00 	.word	0x40001c00
 80014d8:	40023800 	.word	0x40023800

080014dc <read_sdio_data>:

// f_write
BYTE readBuf[30];

void read_sdio_data()
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b09e      	sub	sp, #120	; 0x78
 80014e0:	af00      	add	r7, sp, #0
    Error_Handler();
  }
#endif
	 // try to mount Micro-SD card

	  FRESULT fres = f_mount(&SDFatFS, SDPath, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	4930      	ldr	r1, [pc, #192]	; (80015a8 <read_sdio_data+0xcc>)
 80014e6:	4831      	ldr	r0, [pc, #196]	; (80015ac <read_sdio_data+0xd0>)
 80014e8:	f007 f9f8 	bl	80088dc <f_mount>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	  if(fres != FR_OK)
 80014f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <read_sdio_data+0x24>
	  {
		  // FR_DISK_ERR (and HAL_SD_ERROR_RX_OVERRUN)
		  // Fix by setting SDIOCLK clock divide factor to 3
		  error_sdio("mount");
 80014fa:	482d      	ldr	r0, [pc, #180]	; (80015b0 <read_sdio_data+0xd4>)
 80014fc:	f000 f868 	bl	80015d0 <error_sdio>

	  DWORD free_clusters, free_sectors, total_sectors;

	  FATFS* getFreeFs;

	  fres = f_getfree("", &free_clusters, &getFreeFs);
 8001500:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001504:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001508:	4619      	mov	r1, r3
 800150a:	482a      	ldr	r0, [pc, #168]	; (80015b4 <read_sdio_data+0xd8>)
 800150c:	f007 fdd1 	bl	80090b2 <f_getfree>
 8001510:	4603      	mov	r3, r0
 8001512:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	  if (fres != FR_OK) {
 8001516:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <read_sdio_data+0x4a>
		  error_sdio("getfree");
 800151e:	4826      	ldr	r0, [pc, #152]	; (80015b8 <read_sdio_data+0xdc>)
 8001520:	f000 f856 	bl	80015d0 <error_sdio>
 8001524:	e016      	b.n	8001554 <read_sdio_data+0x78>
	  }
	  else
	  {
		  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8001526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	3b02      	subs	r3, #2
 800152c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800152e:	8952      	ldrh	r2, [r2, #10]
 8001530:	fb02 f303 	mul.w	r3, r2, r3
 8001534:	673b      	str	r3, [r7, #112]	; 0x70
		  free_sectors = free_clusters * getFreeFs->csize;
 8001536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001538:	895b      	ldrh	r3, [r3, #10]
 800153a:	461a      	mov	r2, r3
 800153c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800153e:	fb03 f302 	mul.w	r3, r3, r2
 8001542:	66fb      	str	r3, [r7, #108]	; 0x6c

		  printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8001544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001546:	0859      	lsrs	r1, r3, #1
 8001548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	461a      	mov	r2, r3
 800154e:	481b      	ldr	r0, [pc, #108]	; (80015bc <read_sdio_data+0xe0>)
 8001550:	f008 f94c 	bl	80097ec <iprintf>

	  }

	  char line[100];
	   /* Open a text file */
	  fres = f_open(&SDFile, "TEST.TXT", FA_READ);
 8001554:	2201      	movs	r2, #1
 8001556:	491a      	ldr	r1, [pc, #104]	; (80015c0 <read_sdio_data+0xe4>)
 8001558:	481a      	ldr	r0, [pc, #104]	; (80015c4 <read_sdio_data+0xe8>)
 800155a:	f007 fa05 	bl	8008968 <f_open>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	    if (fres) error_sdio("open file");
 8001564:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <read_sdio_data+0xa2>
 800156c:	4816      	ldr	r0, [pc, #88]	; (80015c8 <read_sdio_data+0xec>)
 800156e:	f000 f82f 	bl	80015d0 <error_sdio>

	    /* Read every line and display it */
	    while (f_gets(line, sizeof line, &SDFile)) {
 8001572:	e004      	b.n	800157e <read_sdio_data+0xa2>
	        printf("%s\r\n", line);
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4814      	ldr	r0, [pc, #80]	; (80015cc <read_sdio_data+0xf0>)
 800157a:	f008 f937 	bl	80097ec <iprintf>
	    while (f_gets(line, sizeof line, &SDFile)) {
 800157e:	463b      	mov	r3, r7
 8001580:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <read_sdio_data+0xe8>)
 8001582:	2164      	movs	r1, #100	; 0x64
 8001584:	4618      	mov	r0, r3
 8001586:	f007 fe49 	bl	800921c <f_gets>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f1      	bne.n	8001574 <read_sdio_data+0x98>
	    }

	  //write_sdio_data("test.txt", "Hello, from STM32F405");

	  //Close file, don't forget this!
	  f_close(&SDFile);
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <read_sdio_data+0xe8>)
 8001592:	f007 fd64 	bl	800905e <f_close>

	  //De-mount drive
	  f_mount(NULL, "", 0);
 8001596:	2200      	movs	r2, #0
 8001598:	4906      	ldr	r1, [pc, #24]	; (80015b4 <read_sdio_data+0xd8>)
 800159a:	2000      	movs	r0, #0
 800159c:	f007 f99e 	bl	80088dc <f_mount>


}
 80015a0:	bf00      	nop
 80015a2:	3778      	adds	r7, #120	; 0x78
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20008848 	.word	0x20008848
 80015ac:	20008a7c 	.word	0x20008a7c
 80015b0:	0800a604 	.word	0x0800a604
 80015b4:	0800a60c 	.word	0x0800a60c
 80015b8:	0800a610 	.word	0x0800a610
 80015bc:	0800a618 	.word	0x0800a618
 80015c0:	0800a660 	.word	0x0800a660
 80015c4:	2000884c 	.word	0x2000884c
 80015c8:	0800a66c 	.word	0x0800a66c
 80015cc:	0800a678 	.word	0x0800a678

080015d0 <error_sdio>:
		  error_sdio("write file");
	  }
}

void error_sdio(char* opcode)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	printf("Error when performing SDIO %s (%lu)\r\n", opcode, hsd.ErrorCode);
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <error_sdio+0x20>)
 80015da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015dc:	461a      	mov	r2, r3
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <error_sdio+0x24>)
 80015e2:	f008 f903 	bl	80097ec <iprintf>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200086fc 	.word	0x200086fc
 80015f4:	0800a6d8 	.word	0x0800a6d8

080015f8 <check_user_buttons_state>:
uint8_t active_adc_channel = 0;
uint8_t test = 0;


void check_user_buttons_state()
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
	// process user switch input values
	if(user_switch1_GPIO_Port->IDR & user_switch1_Pin)
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <check_user_buttons_state+0x5c>)
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d006      	beq.n	8001616 <check_user_buttons_state+0x1e>
	  LEDA_BLUE_GPIO_Port->ODR |= LEDA_BLUE_MASK;
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <check_user_buttons_state+0x60>)
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <check_user_buttons_state+0x60>)
 800160e:	f043 0302 	orr.w	r3, r3, #2
 8001612:	6153      	str	r3, [r2, #20]
 8001614:	e005      	b.n	8001622 <check_user_buttons_state+0x2a>
	else
	  LEDA_BLUE_GPIO_Port->ODR &= ~LEDA_BLUE_MASK;
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <check_user_buttons_state+0x60>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <check_user_buttons_state+0x60>)
 800161c:	f023 0302 	bic.w	r3, r3, #2
 8001620:	6153      	str	r3, [r2, #20]


	if(user_switch2_GPIO_Port->IDR & user_switch2_Pin)
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <check_user_buttons_state+0x5c>)
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <check_user_buttons_state+0x44>
	  LEDB_BLUE_GPIO_Port->ODR |= LEDB_BLUE_MASK;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <check_user_buttons_state+0x64>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <check_user_buttons_state+0x64>)
 8001634:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001638:	6153      	str	r3, [r2, #20]
	  LEDB_BLUE_GPIO_Port->ODR &= ~LEDB_BLUE_MASK;


//	printf("%i\r\n", test);
//	test++;
}
 800163a:	e005      	b.n	8001648 <check_user_buttons_state+0x50>
	  LEDB_BLUE_GPIO_Port->ODR &= ~LEDB_BLUE_MASK;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <check_user_buttons_state+0x64>)
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <check_user_buttons_state+0x64>)
 8001642:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001646:	6153      	str	r3, [r2, #20]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40020800 	.word	0x40020800
 8001658:	40020400 	.word	0x40020400
 800165c:	40020000 	.word	0x40020000

08001660 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
	// check origin of EXTI
	switch(GPIO_Pin){
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001670:	d003      	beq.n	800167a <HAL_GPIO_EXTI_Callback+0x1a>
 8001672:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001676:	d01f      	beq.n	80016b8 <HAL_GPIO_EXTI_Callback+0x58>
			LEDA_RED_GPIO_Port->ODR |= LEDA_RED_MASK;
			LEDB_GREEN_GPIO_Port->ODR &= ~LEDB_GREEN_MASK;
			LEDB_RED_GPIO_Port->ODR |= LEDB_RED_MASK;
			break;
	}
}
 8001678:	e03d      	b.n	80016f6 <HAL_GPIO_EXTI_Callback+0x96>
			relay_switch_GPIO_Port->ODR |= RELAY_MASK;
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_GPIO_EXTI_Callback+0xa4>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	4a21      	ldr	r2, [pc, #132]	; (8001704 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6153      	str	r3, [r2, #20]
			LEDA_GREEN_GPIO_Port->ODR |= LEDA_GREEN_MASK;
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <HAL_GPIO_EXTI_Callback+0xa8>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6153      	str	r3, [r2, #20]
			LEDA_RED_GPIO_Port->ODR &= ~LEDA_RED_MASK;
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	6153      	str	r3, [r2, #20]
			LEDB_GREEN_GPIO_Port->ODR |= LEDB_GREEN_MASK;
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_GPIO_EXTI_Callback+0xac>)
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	4a1a      	ldr	r2, [pc, #104]	; (800170c <HAL_GPIO_EXTI_Callback+0xac>)
 80016a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a8:	6153      	str	r3, [r2, #20]
			LEDB_RED_GPIO_Port->ODR &= ~LEDB_RED_MASK;
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_GPIO_EXTI_Callback+0xac>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	4a17      	ldr	r2, [pc, #92]	; (800170c <HAL_GPIO_EXTI_Callback+0xac>)
 80016b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016b4:	6153      	str	r3, [r2, #20]
			break;
 80016b6:	e01e      	b.n	80016f6 <HAL_GPIO_EXTI_Callback+0x96>
			relay_switch_GPIO_Port->ODR &= ~RELAY_MASK;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_GPIO_EXTI_Callback+0xa4>)
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	4a11      	ldr	r2, [pc, #68]	; (8001704 <HAL_GPIO_EXTI_Callback+0xa4>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	6153      	str	r3, [r2, #20]
			LEDA_GREEN_GPIO_Port->ODR &= ~LEDA_GREEN_MASK;
 80016c4:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_GPIO_EXTI_Callback+0xa8>)
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <HAL_GPIO_EXTI_Callback+0xa8>)
 80016ca:	f023 0304 	bic.w	r3, r3, #4
 80016ce:	6153      	str	r3, [r2, #20]
			LEDA_RED_GPIO_Port->ODR |= LEDA_RED_MASK;
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_GPIO_EXTI_Callback+0xa8>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <HAL_GPIO_EXTI_Callback+0xa8>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6153      	str	r3, [r2, #20]
			LEDB_GREEN_GPIO_Port->ODR &= ~LEDB_GREEN_MASK;
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_GPIO_EXTI_Callback+0xac>)
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	; (800170c <HAL_GPIO_EXTI_Callback+0xac>)
 80016e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016e6:	6153      	str	r3, [r2, #20]
			LEDB_RED_GPIO_Port->ODR |= LEDB_RED_MASK;
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_GPIO_EXTI_Callback+0xac>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_GPIO_EXTI_Callback+0xac>)
 80016ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f2:	6153      	str	r3, [r2, #20]
			break;
 80016f4:	bf00      	nop
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40020800 	.word	0x40020800
 8001708:	40020400 	.word	0x40020400
 800170c:	40020000 	.word	0x40020000

08001710 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

	//printf("%lu\r\n", adc_input_data_buffer[ADC_DATA_BUFFER_SIZE-1]);
	//	adc_input_data_demuxed[active_adc_channel] = adc_input_data_buffer[0];

	// demux interleaved ADC input
	switch(active_adc_channel)
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_ADC_ConvCpltCallback+0x5c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d008      	beq.n	8001732 <HAL_ADC_ConvCpltCallback+0x22>
 8001720:	2b02      	cmp	r3, #2
 8001722:	d00b      	beq.n	800173c <HAL_ADC_ConvCpltCallback+0x2c>
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10e      	bne.n	8001746 <HAL_ADC_ConvCpltCallback+0x36>
	{
		case 0:
			user_input_data.exp_input = (uint32_t)adc_input_data_buffer[0];
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_ADC_ConvCpltCallback+0x60>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a11      	ldr	r2, [pc, #68]	; (8001774 <HAL_ADC_ConvCpltCallback+0x64>)
 800172e:	6013      	str	r3, [r2, #0]
			break;
 8001730:	e009      	b.n	8001746 <HAL_ADC_ConvCpltCallback+0x36>

		case 1:
			user_input_data.user_pot1 = (uint32_t)adc_input_data_buffer[0];
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_ADC_ConvCpltCallback+0x60>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <HAL_ADC_ConvCpltCallback+0x64>)
 8001738:	6053      	str	r3, [r2, #4]
			break;
 800173a:	e004      	b.n	8001746 <HAL_ADC_ConvCpltCallback+0x36>

		case 2:
			user_input_data.user_pot2 = (uint32_t)adc_input_data_buffer[0];
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_ADC_ConvCpltCallback+0x60>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <HAL_ADC_ConvCpltCallback+0x64>)
 8001742:	6093      	str	r3, [r2, #8]
			break;
 8001744:	bf00      	nop
	}

	active_adc_channel++;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001750:	701a      	strb	r2, [r3, #0]
	if(active_adc_channel > ADC_DATA_DEMUX_SIZE-1)
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d902      	bls.n	8001760 <HAL_ADC_ConvCpltCallback+0x50>
		active_adc_channel = 0;
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <HAL_ADC_ConvCpltCallback+0x5c>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]

}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	200000a8 	.word	0x200000a8
 8001770:	200076c8 	.word	0x200076c8
 8001774:	200076cc 	.word	0x200076cc

08001778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800177c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800177e:	e003      	b.n	8001788 <LoopCopyDataInit>

08001780 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001782:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001784:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001786:	3104      	adds	r1, #4

08001788 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001788:	480b      	ldr	r0, [pc, #44]	; (80017b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800178c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800178e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001790:	d3f6      	bcc.n	8001780 <CopyDataInit>
  ldr  r2, =_sbss
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001794:	e002      	b.n	800179c <LoopFillZerobss>

08001796 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001796:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001798:	f842 3b04 	str.w	r3, [r2], #4

0800179c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800179e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017a0:	d3f9      	bcc.n	8001796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017a2:	f7ff fd05 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f007 ffe9 	bl	800977c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017aa:	f7ff fa45 	bl	8000c38 <main>
  bx  lr    
 80017ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017b4:	0800a8b0 	.word	0x0800a8b0
  ldr  r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017bc:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80017c0:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80017c4:	20008d58 	.word	0x20008d58

080017c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC_IRQHandler>
	...

080017cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_Init+0x40>)
 80017d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	; (800180c <HAL_Init+0x40>)
 80017e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_Init+0x40>)
 80017ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 fd37 	bl	8002268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fb8c 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 fd4f 	bl	80022d2 <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800184c:	f000 fd17 	bl	800227e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000014 	.word	0x20000014
 8001868:	2000001c 	.word	0x2000001c
 800186c:	20000018 	.word	0x20000018

08001870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	2000001c 	.word	0x2000001c
 8001894:	20008840 	.word	0x20008840

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20008840 	.word	0x20008840

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff ffee 	bl	8001898 <HAL_GetTick>
 80018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_Delay+0x40>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018d6:	bf00      	nop
 80018d8:	f7ff ffde 	bl	8001898 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	2000001c 	.word	0x2000001c

080018f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e033      	b.n	8001972 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7fe fe7e 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	d118      	bne.n	8001964 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800193a:	f023 0302 	bic.w	r3, r3, #2
 800193e:	f043 0202 	orr.w	r2, r3, #2
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 fa40 	bl	8001dcc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f023 0303 	bic.w	r3, r3, #3
 800195a:	f043 0201 	orr.w	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	641a      	str	r2, [r3, #64]	; 0x40
 8001962:	e001      	b.n	8001968 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_ADC_Start_DMA+0x1e>
 8001996:	2302      	movs	r3, #2
 8001998:	e0cc      	b.n	8001b34 <HAL_ADC_Start_DMA+0x1b8>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d018      	beq.n	80019e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019c0:	4b5e      	ldr	r3, [pc, #376]	; (8001b3c <HAL_ADC_Start_DMA+0x1c0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a5e      	ldr	r2, [pc, #376]	; (8001b40 <HAL_ADC_Start_DMA+0x1c4>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0c9a      	lsrs	r2, r3, #18
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80019d4:	e002      	b.n	80019dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	3b01      	subs	r3, #1
 80019da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f9      	bne.n	80019d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	f040 80a0 	bne.w	8001b32 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a30:	d106      	bne.n	8001a40 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f023 0206 	bic.w	r2, r3, #6
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	645a      	str	r2, [r3, #68]	; 0x44
 8001a3e:	e002      	b.n	8001a46 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_ADC_Start_DMA+0x1c8>)
 8001a50:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a56:	4a3c      	ldr	r2, [pc, #240]	; (8001b48 <HAL_ADC_Start_DMA+0x1cc>)
 8001a58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5e:	4a3b      	ldr	r2, [pc, #236]	; (8001b4c <HAL_ADC_Start_DMA+0x1d0>)
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a66:	4a3a      	ldr	r2, [pc, #232]	; (8001b50 <HAL_ADC_Start_DMA+0x1d4>)
 8001a68:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a72:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a82:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a92:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	334c      	adds	r3, #76	; 0x4c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f000 fcd0 	bl	8002448 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d12a      	bne.n	8001b0a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <HAL_ADC_Start_DMA+0x1d8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d015      	beq.n	8001aea <HAL_ADC_Start_DMA+0x16e>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a25      	ldr	r2, [pc, #148]	; (8001b58 <HAL_ADC_Start_DMA+0x1dc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d105      	bne.n	8001ad4 <HAL_ADC_Start_DMA+0x158>
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HAL_ADC_Start_DMA+0x1c8>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00a      	beq.n	8001aea <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <HAL_ADC_Start_DMA+0x1e0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d129      	bne.n	8001b32 <HAL_ADC_Start_DMA+0x1b6>
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_ADC_Start_DMA+0x1c8>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	d823      	bhi.n	8001b32 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d11c      	bne.n	8001b32 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	e013      	b.n	8001b32 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <HAL_ADC_Start_DMA+0x1d8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d10e      	bne.n	8001b32 <HAL_ADC_Start_DMA+0x1b6>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d107      	bne.n	8001b32 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b30:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000014 	.word	0x20000014
 8001b40:	431bde83 	.word	0x431bde83
 8001b44:	40012300 	.word	0x40012300
 8001b48:	08001fc5 	.word	0x08001fc5
 8001b4c:	0800207f 	.word	0x0800207f
 8001b50:	0800209b 	.word	0x0800209b
 8001b54:	40012000 	.word	0x40012000
 8001b58:	40012100 	.word	0x40012100
 8001b5c:	40012200 	.word	0x40012200

08001b60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1c>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e105      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x228>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	d925      	bls.n	8001c00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68d9      	ldr	r1, [r3, #12]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b1e      	subs	r3, #30
 8001bca:	2207      	movs	r2, #7
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68d9      	ldr	r1, [r3, #12]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	4603      	mov	r3, r0
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4403      	add	r3, r0
 8001bf2:	3b1e      	subs	r3, #30
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	e022      	b.n	8001c46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6919      	ldr	r1, [r3, #16]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	2207      	movs	r2, #7
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	400a      	ands	r2, r1
 8001c22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6919      	ldr	r1, [r3, #16]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4403      	add	r3, r0
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d824      	bhi.n	8001c98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b05      	subs	r3, #5
 8001c60:	221f      	movs	r2, #31
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	3b05      	subs	r3, #5
 8001c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	635a      	str	r2, [r3, #52]	; 0x34
 8001c96:	e04c      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b0c      	cmp	r3, #12
 8001c9e:	d824      	bhi.n	8001cea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b23      	subs	r3, #35	; 0x23
 8001cb2:	221f      	movs	r2, #31
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b23      	subs	r3, #35	; 0x23
 8001cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ce8:	e023      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b41      	subs	r3, #65	; 0x41
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	400a      	ands	r2, r1
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3b41      	subs	r3, #65	; 0x41
 8001d26:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <HAL_ADC_ConfigChannel+0x234>)
 8001d34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <HAL_ADC_ConfigChannel+0x238>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d109      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1cc>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b12      	cmp	r3, #18
 8001d46:	d105      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_ADC_ConfigChannel+0x238>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d123      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x21e>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b10      	cmp	r3, #16
 8001d64:	d003      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x1e6>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b11      	cmp	r3, #17
 8001d6c:	d11b      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d111      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_ADC_ConfigChannel+0x23c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a10      	ldr	r2, [pc, #64]	; (8001dc8 <HAL_ADC_ConfigChannel+0x240>)
 8001d88:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8c:	0c9a      	lsrs	r2, r3, #18
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d98:	e002      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f9      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	40012300 	.word	0x40012300
 8001dc0:	40012000 	.word	0x40012000
 8001dc4:	20000014 	.word	0x20000014
 8001dc8:	431bde83 	.word	0x431bde83

08001dcc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd4:	4b79      	ldr	r3, [pc, #484]	; (8001fbc <ADC_Init+0x1f0>)
 8001dd6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	431a      	orrs	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	021a      	lsls	r2, r3, #8
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6899      	ldr	r1, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	4a58      	ldr	r2, [pc, #352]	; (8001fc0 <ADC_Init+0x1f4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d022      	beq.n	8001eaa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6899      	ldr	r1, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6899      	ldr	r1, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	e00f      	b.n	8001eca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ec8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0202 	bic.w	r2, r2, #2
 8001ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6899      	ldr	r1, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7e1b      	ldrb	r3, [r3, #24]
 8001ee4:	005a      	lsls	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01b      	beq.n	8001f30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6859      	ldr	r1, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	3b01      	subs	r3, #1
 8001f24:	035a      	lsls	r2, r3, #13
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	e007      	b.n	8001f40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	051a      	lsls	r2, r3, #20
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6899      	ldr	r1, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f82:	025a      	lsls	r2, r3, #9
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6899      	ldr	r1, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	029a      	lsls	r2, r3, #10
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	609a      	str	r2, [r3, #8]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40012300 	.word	0x40012300
 8001fc0:	0f000001 	.word	0x0f000001

08001fc4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d13c      	bne.n	8002058 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d12b      	bne.n	8002050 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d127      	bne.n	8002050 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800200a:	2b00      	cmp	r3, #0
 800200c:	d006      	beq.n	800201c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002018:	2b00      	cmp	r3, #0
 800201a:	d119      	bne.n	8002050 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0220 	bic.w	r2, r2, #32
 800202a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d105      	bne.n	8002050 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f043 0201 	orr.w	r2, r3, #1
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7ff fb5d 	bl	8001710 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002056:	e00e      	b.n	8002076 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f7ff fd85 	bl	8001b74 <HAL_ADC_ErrorCallback>
}
 800206a:	e004      	b.n	8002076 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f7ff fd67 	bl	8001b60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2240      	movs	r2, #64	; 0x40
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f043 0204 	orr.w	r2, r3, #4
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7ff fd5a 	bl	8001b74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fa:	4a04      	ldr	r2, [pc, #16]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <__NVIC_GetPriorityGrouping+0x18>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 0307 	and.w	r3, r3, #7
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db0b      	blt.n	8002156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	4907      	ldr	r1, [pc, #28]	; (8002164 <__NVIC_EnableIRQ+0x38>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2001      	movs	r0, #1
 800214e:	fa00 f202 	lsl.w	r2, r0, r2
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000e100 	.word	0xe000e100

08002168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	2b00      	cmp	r3, #0
 800217a:	db0a      	blt.n	8002192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	b2da      	uxtb	r2, r3
 8002180:	490c      	ldr	r1, [pc, #48]	; (80021b4 <__NVIC_SetPriority+0x4c>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	440b      	add	r3, r1
 800218c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002190:	e00a      	b.n	80021a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4908      	ldr	r1, [pc, #32]	; (80021b8 <__NVIC_SetPriority+0x50>)
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	3b04      	subs	r3, #4
 80021a0:	0112      	lsls	r2, r2, #4
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	440b      	add	r3, r1
 80021a6:	761a      	strb	r2, [r3, #24]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000e100 	.word	0xe000e100
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f1c3 0307 	rsb	r3, r3, #7
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	bf28      	it	cs
 80021da:	2304      	movcs	r3, #4
 80021dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3304      	adds	r3, #4
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d902      	bls.n	80021ec <NVIC_EncodePriority+0x30>
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3b03      	subs	r3, #3
 80021ea:	e000      	b.n	80021ee <NVIC_EncodePriority+0x32>
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	401a      	ands	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	43d9      	mvns	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	4313      	orrs	r3, r2
         );
}
 8002216:	4618      	mov	r0, r3
 8002218:	3724      	adds	r7, #36	; 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002234:	d301      	bcc.n	800223a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002236:	2301      	movs	r3, #1
 8002238:	e00f      	b.n	800225a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <SysTick_Config+0x40>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002242:	210f      	movs	r1, #15
 8002244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002248:	f7ff ff8e 	bl	8002168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <SysTick_Config+0x40>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002252:	4b04      	ldr	r3, [pc, #16]	; (8002264 <SysTick_Config+0x40>)
 8002254:	2207      	movs	r2, #7
 8002256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	e000e010 	.word	0xe000e010

08002268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ff29 	bl	80020c8 <__NVIC_SetPriorityGrouping>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002290:	f7ff ff3e 	bl	8002110 <__NVIC_GetPriorityGrouping>
 8002294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	6978      	ldr	r0, [r7, #20]
 800229c:	f7ff ff8e 	bl	80021bc <NVIC_EncodePriority>
 80022a0:	4602      	mov	r2, r0
 80022a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff5d 	bl	8002168 <__NVIC_SetPriority>
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff31 	bl	800212c <__NVIC_EnableIRQ>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffa2 	bl	8002224 <SysTick_Config>
 80022e0:	4603      	mov	r3, r0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff face 	bl	8001898 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e099      	b.n	800243c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002328:	e00f      	b.n	800234a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800232a:	f7ff fab5 	bl	8001898 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b05      	cmp	r3, #5
 8002336:	d908      	bls.n	800234a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e078      	b.n	800243c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e8      	bne.n	800232a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4b38      	ldr	r3, [pc, #224]	; (8002444 <HAL_DMA_Init+0x158>)
 8002364:	4013      	ands	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002376:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d107      	bne.n	80023b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	4313      	orrs	r3, r2
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f023 0307 	bic.w	r3, r3, #7
 80023ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d117      	bne.n	800240e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00e      	beq.n	800240e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fa6f 	bl	80028d4 <DMA_CheckFifoParam>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800240a:	2301      	movs	r3, #1
 800240c:	e016      	b.n	800243c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fa26 	bl	8002868 <DMA_CalcBaseAndBitshift>
 800241c:	4603      	mov	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	223f      	movs	r2, #63	; 0x3f
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	f010803f 	.word	0xf010803f

08002448 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_DMA_Start_IT+0x26>
 800246a:	2302      	movs	r3, #2
 800246c:	e040      	b.n	80024f0 <HAL_DMA_Start_IT+0xa8>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d12f      	bne.n	80024e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2202      	movs	r2, #2
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f9b8 	bl	800280c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	223f      	movs	r2, #63	; 0x3f
 80024a2:	409a      	lsls	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0216 	orr.w	r2, r2, #22
 80024b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0208 	orr.w	r2, r2, #8
 80024ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e005      	b.n	80024ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
 80024ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002504:	4b92      	ldr	r3, [pc, #584]	; (8002750 <HAL_DMA_IRQHandler+0x258>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a92      	ldr	r2, [pc, #584]	; (8002754 <HAL_DMA_IRQHandler+0x25c>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0a9b      	lsrs	r3, r3, #10
 8002510:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	2208      	movs	r2, #8
 8002524:	409a      	lsls	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01a      	beq.n	8002564 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0204 	bic.w	r2, r2, #4
 800254a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	2208      	movs	r2, #8
 8002552:	409a      	lsls	r2, r3
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	2201      	movs	r2, #1
 800256a:	409a      	lsls	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d012      	beq.n	800259a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	2201      	movs	r2, #1
 8002588:	409a      	lsls	r2, r3
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	f043 0202 	orr.w	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	2204      	movs	r2, #4
 80025a0:	409a      	lsls	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d012      	beq.n	80025d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00b      	beq.n	80025d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	2204      	movs	r2, #4
 80025be:	409a      	lsls	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f043 0204 	orr.w	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	2210      	movs	r2, #16
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d043      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d03c      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	2210      	movs	r2, #16
 80025f4:	409a      	lsls	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d018      	beq.n	800263a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d108      	bne.n	8002628 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d024      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
 8002626:	e01f      	b.n	8002668 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01b      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	4798      	blx	r3
 8002638:	e016      	b.n	8002668 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d107      	bne.n	8002658 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0208 	bic.w	r2, r2, #8
 8002656:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	2220      	movs	r2, #32
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 808e 	beq.w	8002796 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8086 	beq.w	8002796 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268e:	2220      	movs	r2, #32
 8002690:	409a      	lsls	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d136      	bne.n	8002710 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0216 	bic.w	r2, r2, #22
 80026b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <HAL_DMA_IRQHandler+0x1da>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0208 	bic.w	r2, r2, #8
 80026e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	223f      	movs	r2, #63	; 0x3f
 80026e8:	409a      	lsls	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002702:	2b00      	cmp	r3, #0
 8002704:	d07d      	beq.n	8002802 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
        }
        return;
 800270e:	e078      	b.n	8002802 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d01c      	beq.n	8002758 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d108      	bne.n	800273e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	2b00      	cmp	r3, #0
 8002732:	d030      	beq.n	8002796 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
 800273c:	e02b      	b.n	8002796 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d027      	beq.n	8002796 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
 800274e:	e022      	b.n	8002796 <HAL_DMA_IRQHandler+0x29e>
 8002750:	20000014 	.word	0x20000014
 8002754:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0210 	bic.w	r2, r2, #16
 8002774:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	2b00      	cmp	r3, #0
 800279c:	d032      	beq.n	8002804 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d022      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2205      	movs	r2, #5
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3301      	adds	r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d307      	bcc.n	80027de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f2      	bne.n	80027c2 <HAL_DMA_IRQHandler+0x2ca>
 80027dc:	e000      	b.n	80027e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80027de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	e000      	b.n	8002804 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002802:	bf00      	nop
    }
  }
}
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop

0800280c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002828:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d108      	bne.n	800284c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800284a:	e007      	b.n	800285c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	60da      	str	r2, [r3, #12]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	3b10      	subs	r3, #16
 8002878:	4a14      	ldr	r2, [pc, #80]	; (80028cc <DMA_CalcBaseAndBitshift+0x64>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002882:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b03      	cmp	r3, #3
 8002894:	d909      	bls.n	80028aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	1d1a      	adds	r2, r3, #4
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	659a      	str	r2, [r3, #88]	; 0x58
 80028a8:	e007      	b.n	80028ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028b2:	f023 0303 	bic.w	r3, r3, #3
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	aaaaaaab 	.word	0xaaaaaaab
 80028d0:	0800a76c 	.word	0x0800a76c

080028d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d11f      	bne.n	800292e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d855      	bhi.n	80029a0 <DMA_CheckFifoParam+0xcc>
 80028f4:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <DMA_CheckFifoParam+0x28>)
 80028f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fa:	bf00      	nop
 80028fc:	0800290d 	.word	0x0800290d
 8002900:	0800291f 	.word	0x0800291f
 8002904:	0800290d 	.word	0x0800290d
 8002908:	080029a1 	.word	0x080029a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d045      	beq.n	80029a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291c:	e042      	b.n	80029a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002926:	d13f      	bne.n	80029a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292c:	e03c      	b.n	80029a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002936:	d121      	bne.n	800297c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d836      	bhi.n	80029ac <DMA_CheckFifoParam+0xd8>
 800293e:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <DMA_CheckFifoParam+0x70>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	08002955 	.word	0x08002955
 8002948:	0800295b 	.word	0x0800295b
 800294c:	08002955 	.word	0x08002955
 8002950:	0800296d 	.word	0x0800296d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      break;
 8002958:	e02f      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d024      	beq.n	80029b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800296a:	e021      	b.n	80029b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002974:	d11e      	bne.n	80029b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800297a:	e01b      	b.n	80029b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d902      	bls.n	8002988 <DMA_CheckFifoParam+0xb4>
 8002982:	2b03      	cmp	r3, #3
 8002984:	d003      	beq.n	800298e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002986:	e018      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      break;
 800298c:	e015      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00e      	beq.n	80029b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
      break;
 800299e:	e00b      	b.n	80029b8 <DMA_CheckFifoParam+0xe4>
      break;
 80029a0:	bf00      	nop
 80029a2:	e00a      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      break;
 80029a4:	bf00      	nop
 80029a6:	e008      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      break;
 80029a8:	bf00      	nop
 80029aa:	e006      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      break;
 80029ac:	bf00      	nop
 80029ae:	e004      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      break;
 80029b0:	bf00      	nop
 80029b2:	e002      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      break;   
 80029b4:	bf00      	nop
 80029b6:	e000      	b.n	80029ba <DMA_CheckFifoParam+0xe6>
      break;
 80029b8:	bf00      	nop
    }
  } 
  
  return status; 
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	e16b      	b.n	8002cbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e4:	2201      	movs	r2, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	f040 815a 	bne.w	8002cb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d00b      	beq.n	8002a22 <HAL_GPIO_Init+0x5a>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d007      	beq.n	8002a22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a16:	2b11      	cmp	r3, #17
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b12      	cmp	r3, #18
 8002a20:	d130      	bne.n	8002a84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a58:	2201      	movs	r2, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 0201 	and.w	r2, r3, #1
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0xfc>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b12      	cmp	r3, #18
 8002ac2:	d123      	bne.n	8002b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	08da      	lsrs	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3208      	adds	r2, #8
 8002acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	220f      	movs	r2, #15
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	08da      	lsrs	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3208      	adds	r2, #8
 8002b06:	69b9      	ldr	r1, [r7, #24]
 8002b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	2203      	movs	r2, #3
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0203 	and.w	r2, r3, #3
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80b4 	beq.w	8002cb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b5f      	ldr	r3, [pc, #380]	; (8002cd0 <HAL_GPIO_Init+0x308>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	4a5e      	ldr	r2, [pc, #376]	; (8002cd0 <HAL_GPIO_Init+0x308>)
 8002b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5e:	4b5c      	ldr	r3, [pc, #368]	; (8002cd0 <HAL_GPIO_Init+0x308>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b6a:	4a5a      	ldr	r2, [pc, #360]	; (8002cd4 <HAL_GPIO_Init+0x30c>)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	3302      	adds	r3, #2
 8002b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	220f      	movs	r2, #15
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a51      	ldr	r2, [pc, #324]	; (8002cd8 <HAL_GPIO_Init+0x310>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d02b      	beq.n	8002bee <HAL_GPIO_Init+0x226>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a50      	ldr	r2, [pc, #320]	; (8002cdc <HAL_GPIO_Init+0x314>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d025      	beq.n	8002bea <HAL_GPIO_Init+0x222>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4f      	ldr	r2, [pc, #316]	; (8002ce0 <HAL_GPIO_Init+0x318>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01f      	beq.n	8002be6 <HAL_GPIO_Init+0x21e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4e      	ldr	r2, [pc, #312]	; (8002ce4 <HAL_GPIO_Init+0x31c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d019      	beq.n	8002be2 <HAL_GPIO_Init+0x21a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4d      	ldr	r2, [pc, #308]	; (8002ce8 <HAL_GPIO_Init+0x320>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_GPIO_Init+0x216>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4c      	ldr	r2, [pc, #304]	; (8002cec <HAL_GPIO_Init+0x324>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00d      	beq.n	8002bda <HAL_GPIO_Init+0x212>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4b      	ldr	r2, [pc, #300]	; (8002cf0 <HAL_GPIO_Init+0x328>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <HAL_GPIO_Init+0x20e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4a      	ldr	r2, [pc, #296]	; (8002cf4 <HAL_GPIO_Init+0x32c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <HAL_GPIO_Init+0x20a>
 8002bce:	2307      	movs	r3, #7
 8002bd0:	e00e      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	e00c      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	e00a      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bda:	2305      	movs	r3, #5
 8002bdc:	e008      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e004      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e002      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	f002 0203 	and.w	r2, r2, #3
 8002bf6:	0092      	lsls	r2, r2, #2
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c00:	4934      	ldr	r1, [pc, #208]	; (8002cd4 <HAL_GPIO_Init+0x30c>)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c0e:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <HAL_GPIO_Init+0x330>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c32:	4a31      	ldr	r2, [pc, #196]	; (8002cf8 <HAL_GPIO_Init+0x330>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c38:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <HAL_GPIO_Init+0x330>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c5c:	4a26      	ldr	r2, [pc, #152]	; (8002cf8 <HAL_GPIO_Init+0x330>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c62:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <HAL_GPIO_Init+0x330>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <HAL_GPIO_Init+0x330>)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_GPIO_Init+0x330>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb0:	4a11      	ldr	r2, [pc, #68]	; (8002cf8 <HAL_GPIO_Init+0x330>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b0f      	cmp	r3, #15
 8002cc0:	f67f ae90 	bls.w	80029e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	3724      	adds	r7, #36	; 0x24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40013800 	.word	0x40013800
 8002cd8:	40020000 	.word	0x40020000
 8002cdc:	40020400 	.word	0x40020400
 8002ce0:	40020800 	.word	0x40020800
 8002ce4:	40020c00 	.word	0x40020c00
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40021400 	.word	0x40021400
 8002cf0:	40021800 	.word	0x40021800
 8002cf4:	40021c00 	.word	0x40021c00
 8002cf8:	40013c00 	.word	0x40013c00

08002cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	e001      	b.n	8002d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d3c:	787b      	ldrb	r3, [r7, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d42:	887a      	ldrh	r2, [r7, #2]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d48:	e003      	b.n	8002d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	041a      	lsls	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	619a      	str	r2, [r3, #24]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	460b      	mov	r3, r1
 8002d68:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	887b      	ldrh	r3, [r7, #2]
 8002d70:	401a      	ands	r2, r3
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d104      	bne.n	8002d82 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	041a      	lsls	r2, r3, #16
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002d80:	e002      	b.n	8002d88 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	619a      	str	r2, [r3, #24]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002daa:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe fc54 	bl	8001660 <HAL_GPIO_EXTI_Callback>
  }
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40013c00 	.word	0x40013c00

08002dc4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e128      	b.n	8003028 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a90      	ldr	r2, [pc, #576]	; (8003030 <HAL_I2S_Init+0x26c>)
 8002dee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7fd fde1 	bl	80009b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e0c:	f023 030f 	bic.w	r3, r3, #15
 8002e10:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2202      	movs	r2, #2
 8002e18:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d060      	beq.n	8002ee4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e001      	b.n	8002e34 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002e30:	2320      	movs	r3, #32
 8002e32:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d802      	bhi.n	8002e42 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002e42:	2001      	movs	r0, #1
 8002e44:	f001 fbae 	bl	80045a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e48:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e52:	d125      	bne.n	8002ea0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d010      	beq.n	8002e7e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	461a      	mov	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	3305      	adds	r3, #5
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	e01f      	b.n	8002ebe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	461a      	mov	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9a:	3305      	adds	r3, #5
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	e00e      	b.n	8002ebe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	3305      	adds	r3, #5
 8002ebc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4a5c      	ldr	r2, [pc, #368]	; (8003034 <HAL_I2S_Init+0x270>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	08db      	lsrs	r3, r3, #3
 8002ec8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e003      	b.n	8002eec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d902      	bls.n	8002ef8 <HAL_I2S_Init+0x134>
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	2bff      	cmp	r3, #255	; 0xff
 8002ef6:	d907      	bls.n	8002f08 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	f043 0210 	orr.w	r2, r3, #16
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e08f      	b.n	8003028 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	ea42 0103 	orr.w	r1, r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f26:	f023 030f 	bic.w	r3, r3, #15
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6851      	ldr	r1, [r2, #4]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6892      	ldr	r2, [r2, #8]
 8002f32:	4311      	orrs	r1, r2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	68d2      	ldr	r2, [r2, #12]
 8002f38:	4311      	orrs	r1, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6992      	ldr	r2, [r2, #24]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d161      	bne.n	8003018 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a38      	ldr	r2, [pc, #224]	; (8003038 <HAL_I2S_Init+0x274>)
 8002f58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a37      	ldr	r2, [pc, #220]	; (800303c <HAL_I2S_Init+0x278>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <HAL_I2S_Init+0x1a4>
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <HAL_I2S_Init+0x27c>)
 8002f66:	e001      	b.n	8002f6c <HAL_I2S_Init+0x1a8>
 8002f68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	4932      	ldr	r1, [pc, #200]	; (800303c <HAL_I2S_Init+0x278>)
 8002f74:	428a      	cmp	r2, r1
 8002f76:	d101      	bne.n	8002f7c <HAL_I2S_Init+0x1b8>
 8002f78:	4a31      	ldr	r2, [pc, #196]	; (8003040 <HAL_I2S_Init+0x27c>)
 8002f7a:	e001      	b.n	8002f80 <HAL_I2S_Init+0x1bc>
 8002f7c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002f80:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f84:	f023 030f 	bic.w	r3, r3, #15
 8002f88:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2b      	ldr	r2, [pc, #172]	; (800303c <HAL_I2S_Init+0x278>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d101      	bne.n	8002f98 <HAL_I2S_Init+0x1d4>
 8002f94:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <HAL_I2S_Init+0x27c>)
 8002f96:	e001      	b.n	8002f9c <HAL_I2S_Init+0x1d8>
 8002f98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a25      	ldr	r2, [pc, #148]	; (800303c <HAL_I2S_Init+0x278>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_I2S_Init+0x1ea>
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_I2S_Init+0x27c>)
 8002fac:	e001      	b.n	8002fb2 <HAL_I2S_Init+0x1ee>
 8002fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fbe:	d003      	beq.n	8002fc8 <HAL_I2S_Init+0x204>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d103      	bne.n	8002fd0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	e001      	b.n	8002fd4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	b299      	uxth	r1, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002fea:	4303      	orrs	r3, r0
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	897b      	ldrh	r3, [r7, #10]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003000:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a0d      	ldr	r2, [pc, #52]	; (800303c <HAL_I2S_Init+0x278>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d101      	bne.n	8003010 <HAL_I2S_Init+0x24c>
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <HAL_I2S_Init+0x27c>)
 800300e:	e001      	b.n	8003014 <HAL_I2S_Init+0x250>
 8003010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003014:	897a      	ldrh	r2, [r7, #10]
 8003016:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	0800313b 	.word	0x0800313b
 8003034:	cccccccd 	.word	0xcccccccd
 8003038:	08003565 	.word	0x08003565
 800303c:	40003800 	.word	0x40003800
 8003040:	40003400 	.word	0x40003400

08003044 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	881a      	ldrh	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	1c9a      	adds	r2, r3, #2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10e      	bne.n	80030d4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ffb8 	bl	8003044 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	b292      	uxth	r2, r2
 80030f0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	1c9a      	adds	r2, r3, #2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10e      	bne.n	8003132 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003122:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff93 	bl	8003058 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b04      	cmp	r3, #4
 8003154:	d13a      	bne.n	80031cc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d109      	bne.n	8003174 <I2S_IRQHandler+0x3a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b40      	cmp	r3, #64	; 0x40
 800316c:	d102      	bne.n	8003174 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ffb4 	bl	80030dc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d126      	bne.n	80031cc <I2S_IRQHandler+0x92>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b20      	cmp	r3, #32
 800318a:	d11f      	bne.n	80031cc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800319a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f043 0202 	orr.w	r2, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ff50 	bl	800306c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d136      	bne.n	8003246 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d109      	bne.n	80031f6 <I2S_IRQHandler+0xbc>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	2b80      	cmp	r3, #128	; 0x80
 80031ee:	d102      	bne.n	80031f6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ff45 	bl	8003080 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d122      	bne.n	8003246 <I2S_IRQHandler+0x10c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b20      	cmp	r3, #32
 800320c:	d11b      	bne.n	8003246 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800321c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	f043 0204 	orr.w	r2, r3, #4
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff13 	bl	800306c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003246:	bf00      	nop
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800325e:	2300      	movs	r3, #0
 8003260:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d002      	beq.n	800327c <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003276:	2302      	movs	r3, #2
 8003278:	77fb      	strb	r3, [r7, #31]
    goto error;
 800327a:	e160      	b.n	800353e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e15a      	b.n	8003548 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800329e:	2302      	movs	r3, #2
 80032a0:	e152      	b.n	8003548 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d002      	beq.n	80032ce <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d114      	bne.n	80032f8 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 80032ce:	887b      	ldrh	r3, [r7, #2]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80032d8:	887b      	ldrh	r3, [r7, #2]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80032ec:	887b      	ldrh	r3, [r7, #2]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	865a      	strh	r2, [r3, #50]	; 0x32
 80032f6:	e00b      	b.n	8003310 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	887a      	ldrh	r2, [r7, #2]
 8003302:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	887a      	ldrh	r2, [r7, #2]
 800330e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2205      	movs	r2, #5
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003322:	4a8b      	ldr	r2, [pc, #556]	; (8003550 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003324:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	4a8a      	ldr	r2, [pc, #552]	; (8003554 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 800332c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	4a89      	ldr	r2, [pc, #548]	; (8003558 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003334:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	4a85      	ldr	r2, [pc, #532]	; (8003550 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 800333c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	4a84      	ldr	r2, [pc, #528]	; (8003554 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	4a83      	ldr	r2, [pc, #524]	; (8003558 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 800334c:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003358:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003360:	d002      	beq.n	8003368 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d16b      	bne.n	8003440 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a79      	ldr	r2, [pc, #484]	; (800355c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d101      	bne.n	800337e <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800337a:	4b79      	ldr	r3, [pc, #484]	; (8003560 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800337c:	e001      	b.n	8003382 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800337e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003382:	330c      	adds	r3, #12
 8003384:	4619      	mov	r1, r3
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800338e:	b29b      	uxth	r3, r3
 8003390:	f7ff f85a 	bl	8002448 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a70      	ldr	r2, [pc, #448]	; (800355c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800339e:	4b70      	ldr	r3, [pc, #448]	; (8003560 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80033a0:	e001      	b.n	80033a6 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 80033a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	496b      	ldr	r1, [pc, #428]	; (800355c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80033ae:	428b      	cmp	r3, r1
 80033b0:	d101      	bne.n	80033b6 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 80033b2:	4b6b      	ldr	r3, [pc, #428]	; (8003560 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80033b4:	e001      	b.n	80033ba <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 80033b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80033c0:	f107 0308 	add.w	r3, r7, #8
 80033c4:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	6819      	ldr	r1, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	461a      	mov	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f7ff f834 	bl	8002448 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0202 	orr.w	r2, r2, #2
 80033ee:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fe:	f000 809e 	beq.w	800353e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a55      	ldr	r2, [pc, #340]	; (800355c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d101      	bne.n	8003410 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 800340c:	4b54      	ldr	r3, [pc, #336]	; (8003560 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800340e:	e001      	b.n	8003414 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8003410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003414:	69da      	ldr	r2, [r3, #28]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4950      	ldr	r1, [pc, #320]	; (800355c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800341c:	428b      	cmp	r3, r1
 800341e:	d101      	bne.n	8003424 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8003420:	4b4f      	ldr	r3, [pc, #316]	; (8003560 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003422:	e001      	b.n	8003428 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8003424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003428:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800342c:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800343c:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800343e:	e07e      	b.n	800353e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344e:	d10a      	bne.n	8003466 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003466:	f107 0308 	add.w	r3, r7, #8
 800346a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	6819      	ldr	r1, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a38      	ldr	r2, [pc, #224]	; (800355c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d101      	bne.n	8003482 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800347e:	4b38      	ldr	r3, [pc, #224]	; (8003560 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003480:	e001      	b.n	8003486 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8003482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003486:	330c      	adds	r3, #12
 8003488:	461a      	mov	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	b29b      	uxth	r3, r3
 8003490:	f7fe ffda 	bl	8002448 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a30      	ldr	r2, [pc, #192]	; (800355c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d101      	bne.n	80034a2 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800349e:	4b30      	ldr	r3, [pc, #192]	; (8003560 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80034a0:	e001      	b.n	80034a6 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 80034a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	492b      	ldr	r1, [pc, #172]	; (800355c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80034ae:	428b      	cmp	r3, r1
 80034b0:	d101      	bne.n	80034b6 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80034b2:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80034b4:	e001      	b.n	80034ba <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 80034b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ba:	f042 0202 	orr.w	r2, r2, #2
 80034be:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80034c0:	1d3b      	adds	r3, r7, #4
 80034c2:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	4619      	mov	r1, r3
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80034d8:	b29b      	uxth	r3, r3
 80034da:	f7fe ffb5 	bl	8002448 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fc:	d01e      	beq.n	800353c <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a16      	ldr	r2, [pc, #88]	; (800355c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800350a:	e001      	b.n	8003510 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 800350c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4911      	ldr	r1, [pc, #68]	; (800355c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003518:	428b      	cmp	r3, r1
 800351a:	d101      	bne.n	8003520 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800351e:	e001      	b.n	8003524 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8003520:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003528:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003538:	61da      	str	r2, [r3, #28]
 800353a:	e000      	b.n	800353e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 800353c:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8003546:	7ffb      	ldrb	r3, [r7, #31]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3720      	adds	r7, #32
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	0800380d 	.word	0x0800380d
 8003554:	08003829 	.word	0x08003829
 8003558:	08003959 	.word	0x08003959
 800355c:	40003800 	.word	0x40003800
 8003560:	40003400 	.word	0x40003400

08003564 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4aa2      	ldr	r2, [pc, #648]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800357e:	4ba2      	ldr	r3, [pc, #648]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003580:	e001      	b.n	8003586 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003582:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a9b      	ldr	r2, [pc, #620]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800359c:	4b9a      	ldr	r3, [pc, #616]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800359e:	e001      	b.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b0:	d004      	beq.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f040 8099 	bne.w	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d107      	bne.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fa01 	bl	80039d8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d107      	bne.n	80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 faa4 	bl	8003b38 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d13a      	bne.n	8003670 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d035      	beq.n	8003670 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a7e      	ldr	r2, [pc, #504]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800360e:	4b7e      	ldr	r3, [pc, #504]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003610:	e001      	b.n	8003616 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003612:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4979      	ldr	r1, [pc, #484]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800361e:	428b      	cmp	r3, r1
 8003620:	d101      	bne.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003622:	4b79      	ldr	r3, [pc, #484]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003624:	e001      	b.n	800362a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800362a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800362e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800363e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	f043 0202 	orr.w	r2, r3, #2
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff fcfe 	bl	800306c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b08      	cmp	r3, #8
 8003678:	f040 80be 	bne.w	80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80b8 	beq.w	80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003696:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a59      	ldr	r2, [pc, #356]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036a2:	4b59      	ldr	r3, [pc, #356]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036a4:	e001      	b.n	80036aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4954      	ldr	r1, [pc, #336]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036b2:	428b      	cmp	r3, r1
 80036b4:	d101      	bne.n	80036ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036b6:	4b54      	ldr	r3, [pc, #336]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036b8:	e001      	b.n	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	f043 0204 	orr.w	r2, r3, #4
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff fcc0 	bl	800306c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036ec:	e084      	b.n	80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d107      	bne.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f99a 	bl	8003a3c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	d107      	bne.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f9d9 	bl	8003ad4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b40      	cmp	r3, #64	; 0x40
 800372a:	d12f      	bne.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d02a      	beq.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003744:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2e      	ldr	r2, [pc, #184]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d101      	bne.n	8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003750:	4b2d      	ldr	r3, [pc, #180]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003752:	e001      	b.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4929      	ldr	r1, [pc, #164]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003760:	428b      	cmp	r3, r1
 8003762:	d101      	bne.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003764:	4b28      	ldr	r3, [pc, #160]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003766:	e001      	b.n	800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003768:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800376c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003770:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f043 0202 	orr.w	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fc70 	bl	800306c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b08      	cmp	r3, #8
 8003794:	d131      	bne.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d02c      	beq.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a17      	ldr	r2, [pc, #92]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037aa:	4b17      	ldr	r3, [pc, #92]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037ac:	e001      	b.n	80037b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4912      	ldr	r1, [pc, #72]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ba:	428b      	cmp	r3, r1
 80037bc:	d101      	bne.n	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80037be:	4b12      	ldr	r3, [pc, #72]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037c0:	e001      	b.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80037c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037da:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	f043 0204 	orr.w	r2, r3, #4
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff fc3b 	bl	800306c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f6:	e000      	b.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037f8:	bf00      	nop
}
 80037fa:	bf00      	nop
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40003800 	.word	0x40003800
 8003808:	40003400 	.word	0x40003400

0800380c <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f7fd f9c4 	bl	8000ba8 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f040 8084 	bne.w	8003948 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	429a      	cmp	r2, r3
 8003848:	d13c      	bne.n	80038c4 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003858:	d006      	beq.n	8003868 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003864:	2b00      	cmp	r3, #0
 8003866:	d116      	bne.n	8003896 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a38      	ldr	r2, [pc, #224]	; (8003950 <I2SEx_TxRxDMACplt+0x128>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <I2SEx_TxRxDMACplt+0x4e>
 8003872:	4b38      	ldr	r3, [pc, #224]	; (8003954 <I2SEx_TxRxDMACplt+0x12c>)
 8003874:	e001      	b.n	800387a <I2SEx_TxRxDMACplt+0x52>
 8003876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4933      	ldr	r1, [pc, #204]	; (8003950 <I2SEx_TxRxDMACplt+0x128>)
 8003882:	428b      	cmp	r3, r1
 8003884:	d101      	bne.n	800388a <I2SEx_TxRxDMACplt+0x62>
 8003886:	4b33      	ldr	r3, [pc, #204]	; (8003954 <I2SEx_TxRxDMACplt+0x12c>)
 8003888:	e001      	b.n	800388e <I2SEx_TxRxDMACplt+0x66>
 800388a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	605a      	str	r2, [r3, #4]
 8003894:	e007      	b.n	80038a6 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f7fd f982 	bl	8000bc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d13c      	bne.n	8003948 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038dc:	d006      	beq.n	80038ec <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d108      	bne.n	80038fe <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0202 	bic.w	r2, r2, #2
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	e015      	b.n	800392a <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <I2SEx_TxRxDMACplt+0x128>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <I2SEx_TxRxDMACplt+0xe4>
 8003908:	4b12      	ldr	r3, [pc, #72]	; (8003954 <I2SEx_TxRxDMACplt+0x12c>)
 800390a:	e001      	b.n	8003910 <I2SEx_TxRxDMACplt+0xe8>
 800390c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	490e      	ldr	r1, [pc, #56]	; (8003950 <I2SEx_TxRxDMACplt+0x128>)
 8003918:	428b      	cmp	r3, r1
 800391a:	d101      	bne.n	8003920 <I2SEx_TxRxDMACplt+0xf8>
 800391c:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <I2SEx_TxRxDMACplt+0x12c>)
 800391e:	e001      	b.n	8003924 <I2SEx_TxRxDMACplt+0xfc>
 8003920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003924:	f022 0202 	bic.w	r2, r2, #2
 8003928:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f7fd f940 	bl	8000bc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003948:	bf00      	nop
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40003800 	.word	0x40003800
 8003954:	40003400 	.word	0x40003400

08003958 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0203 	bic.w	r2, r2, #3
 8003974:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a15      	ldr	r2, [pc, #84]	; (80039d0 <I2SEx_TxRxDMAError+0x78>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <I2SEx_TxRxDMAError+0x2c>
 8003980:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <I2SEx_TxRxDMAError+0x7c>)
 8003982:	e001      	b.n	8003988 <I2SEx_TxRxDMAError+0x30>
 8003984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4910      	ldr	r1, [pc, #64]	; (80039d0 <I2SEx_TxRxDMAError+0x78>)
 8003990:	428b      	cmp	r3, r1
 8003992:	d101      	bne.n	8003998 <I2SEx_TxRxDMAError+0x40>
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <I2SEx_TxRxDMAError+0x7c>)
 8003996:	e001      	b.n	800399c <I2SEx_TxRxDMAError+0x44>
 8003998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800399c:	f022 0203 	bic.w	r2, r2, #3
 80039a0:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f043 0208 	orr.w	r2, r3, #8
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7ff fb52 	bl	800306c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40003800 	.word	0x40003800
 80039d4:	40003400 	.word	0x40003400

080039d8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	1c99      	adds	r1, r3, #2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6251      	str	r1, [r2, #36]	; 0x24
 80039ea:	881a      	ldrh	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d113      	bne.n	8003a32 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7fd f8cb 	bl	8000bc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	1c99      	adds	r1, r3, #2
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6251      	str	r1, [r2, #36]	; 0x24
 8003a4e:	8819      	ldrh	r1, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <I2SEx_TxISR_I2SExt+0x90>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <I2SEx_TxISR_I2SExt+0x22>
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <I2SEx_TxISR_I2SExt+0x94>)
 8003a5c:	e001      	b.n	8003a62 <I2SEx_TxISR_I2SExt+0x26>
 8003a5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a62:	460a      	mov	r2, r1
 8003a64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d121      	bne.n	8003ac2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a12      	ldr	r2, [pc, #72]	; (8003acc <I2SEx_TxISR_I2SExt+0x90>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d101      	bne.n	8003a8c <I2SEx_TxISR_I2SExt+0x50>
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <I2SEx_TxISR_I2SExt+0x94>)
 8003a8a:	e001      	b.n	8003a90 <I2SEx_TxISR_I2SExt+0x54>
 8003a8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	490d      	ldr	r1, [pc, #52]	; (8003acc <I2SEx_TxISR_I2SExt+0x90>)
 8003a98:	428b      	cmp	r3, r1
 8003a9a:	d101      	bne.n	8003aa0 <I2SEx_TxISR_I2SExt+0x64>
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <I2SEx_TxISR_I2SExt+0x94>)
 8003a9e:	e001      	b.n	8003aa4 <I2SEx_TxISR_I2SExt+0x68>
 8003aa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aa8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7fd f883 	bl	8000bc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40003800 	.word	0x40003800
 8003ad0:	40003400 	.word	0x40003400

08003ad4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68d8      	ldr	r0, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	1c99      	adds	r1, r3, #2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003aec:	b282      	uxth	r2, r0
 8003aee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d113      	bne.n	8003b30 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b16:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd f84c 	bl	8000bc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a20      	ldr	r2, [pc, #128]	; (8003bc8 <I2SEx_RxISR_I2SExt+0x90>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <I2SEx_RxISR_I2SExt+0x16>
 8003b4a:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <I2SEx_RxISR_I2SExt+0x94>)
 8003b4c:	e001      	b.n	8003b52 <I2SEx_RxISR_I2SExt+0x1a>
 8003b4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b52:	68d8      	ldr	r0, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	1c99      	adds	r1, r3, #2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b5e:	b282      	uxth	r2, r0
 8003b60:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d121      	bne.n	8003bbe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <I2SEx_RxISR_I2SExt+0x90>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d101      	bne.n	8003b88 <I2SEx_RxISR_I2SExt+0x50>
 8003b84:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <I2SEx_RxISR_I2SExt+0x94>)
 8003b86:	e001      	b.n	8003b8c <I2SEx_RxISR_I2SExt+0x54>
 8003b88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	490d      	ldr	r1, [pc, #52]	; (8003bc8 <I2SEx_RxISR_I2SExt+0x90>)
 8003b94:	428b      	cmp	r3, r1
 8003b96:	d101      	bne.n	8003b9c <I2SEx_RxISR_I2SExt+0x64>
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <I2SEx_RxISR_I2SExt+0x94>)
 8003b9a:	e001      	b.n	8003ba0 <I2SEx_RxISR_I2SExt+0x68>
 8003b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ba4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d106      	bne.n	8003bbe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fd f805 	bl	8000bc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40003800 	.word	0x40003800
 8003bcc:	40003400 	.word	0x40003400

08003bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e25b      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d075      	beq.n	8003cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bee:	4ba3      	ldr	r3, [pc, #652]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d00c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfa:	4ba0      	ldr	r3, [pc, #640]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d112      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4b9d      	ldr	r3, [pc, #628]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	4b99      	ldr	r3, [pc, #612]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d05b      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x108>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d157      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e236      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x74>
 8003c36:	4b91      	ldr	r3, [pc, #580]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a90      	ldr	r2, [pc, #576]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e01d      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x98>
 8003c4e:	4b8b      	ldr	r3, [pc, #556]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a8a      	ldr	r2, [pc, #552]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b88      	ldr	r3, [pc, #544]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a87      	ldr	r2, [pc, #540]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c68:	4b84      	ldr	r3, [pc, #528]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a83      	ldr	r2, [pc, #524]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b81      	ldr	r3, [pc, #516]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a80      	ldr	r2, [pc, #512]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fd fe06 	bl	8001898 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fd fe02 	bl	8001898 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	; 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e1fb      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	4b76      	ldr	r3, [pc, #472]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0xc0>
 8003cae:	e014      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fdf2 	bl	8001898 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fd fdee 	bl	8001898 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e1e7      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	4b6c      	ldr	r3, [pc, #432]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0xe8>
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d063      	beq.n	8003dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ce6:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf2:	4b62      	ldr	r3, [pc, #392]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d11c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b5f      	ldr	r3, [pc, #380]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d116      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0a:	4b5c      	ldr	r3, [pc, #368]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e1bb      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d22:	4b56      	ldr	r3, [pc, #344]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4952      	ldr	r1, [pc, #328]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d36:	e03a      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d020      	beq.n	8003d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d40:	4b4f      	ldr	r3, [pc, #316]	; (8003e80 <HAL_RCC_OscConfig+0x2b0>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fd fda7 	bl	8001898 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4e:	f7fd fda3 	bl	8001898 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e19c      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d60:	4b46      	ldr	r3, [pc, #280]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6c:	4b43      	ldr	r3, [pc, #268]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4940      	ldr	r1, [pc, #256]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]
 8003d80:	e015      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d82:	4b3f      	ldr	r3, [pc, #252]	; (8003e80 <HAL_RCC_OscConfig+0x2b0>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fd fd86 	bl	8001898 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d90:	f7fd fd82 	bl	8001898 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e17b      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da2:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d030      	beq.n	8003e1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc2:	4b30      	ldr	r3, [pc, #192]	; (8003e84 <HAL_RCC_OscConfig+0x2b4>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc8:	f7fd fd66 	bl	8001898 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd0:	f7fd fd62 	bl	8001898 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e15b      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x200>
 8003dee:	e015      	b.n	8003e1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df0:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <HAL_RCC_OscConfig+0x2b4>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fd fd4f 	bl	8001898 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfe:	f7fd fd4b 	bl	8001898 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e144      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f0      	bne.n	8003dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80a0 	beq.w	8003f6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2e:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10f      	bne.n	8003e5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	4a0e      	ldr	r2, [pc, #56]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_RCC_OscConfig+0x2b8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d121      	bne.n	8003eaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <HAL_RCC_OscConfig+0x2b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a07      	ldr	r2, [pc, #28]	; (8003e88 <HAL_RCC_OscConfig+0x2b8>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e72:	f7fd fd11 	bl	8001898 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	e011      	b.n	8003e9e <HAL_RCC_OscConfig+0x2ce>
 8003e7a:	bf00      	nop
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	42470000 	.word	0x42470000
 8003e84:	42470e80 	.word	0x42470e80
 8003e88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8c:	f7fd fd04 	bl	8001898 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0fd      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9e:	4b81      	ldr	r3, [pc, #516]	; (80040a4 <HAL_RCC_OscConfig+0x4d4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d106      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x2f0>
 8003eb2:	4b7d      	ldr	r3, [pc, #500]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a7c      	ldr	r2, [pc, #496]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebe:	e01c      	b.n	8003efa <HAL_RCC_OscConfig+0x32a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d10c      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x312>
 8003ec8:	4b77      	ldr	r3, [pc, #476]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4a76      	ldr	r2, [pc, #472]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003ece:	f043 0304 	orr.w	r3, r3, #4
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed4:	4b74      	ldr	r3, [pc, #464]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a73      	ldr	r2, [pc, #460]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee0:	e00b      	b.n	8003efa <HAL_RCC_OscConfig+0x32a>
 8003ee2:	4b71      	ldr	r3, [pc, #452]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a70      	ldr	r2, [pc, #448]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
 8003eee:	4b6e      	ldr	r3, [pc, #440]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a6d      	ldr	r2, [pc, #436]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003ef4:	f023 0304 	bic.w	r3, r3, #4
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d015      	beq.n	8003f2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fd fcc9 	bl	8001898 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7fd fcc5 	bl	8001898 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e0bc      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	4b61      	ldr	r3, [pc, #388]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ee      	beq.n	8003f0a <HAL_RCC_OscConfig+0x33a>
 8003f2c:	e014      	b.n	8003f58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2e:	f7fd fcb3 	bl	8001898 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fd fcaf 	bl	8001898 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e0a6      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4c:	4b56      	ldr	r3, [pc, #344]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1ee      	bne.n	8003f36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5e:	4b52      	ldr	r3, [pc, #328]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	4a51      	ldr	r2, [pc, #324]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8092 	beq.w	8004098 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f74:	4b4c      	ldr	r3, [pc, #304]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d05c      	beq.n	800403a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d141      	bne.n	800400c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f88:	4b48      	ldr	r3, [pc, #288]	; (80040ac <HAL_RCC_OscConfig+0x4dc>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8e:	f7fd fc83 	bl	8001898 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f96:	f7fd fc7f 	bl	8001898 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e078      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa8:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f0      	bne.n	8003f96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	019b      	lsls	r3, r3, #6
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	041b      	lsls	r3, r3, #16
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	061b      	lsls	r3, r3, #24
 8003fd8:	4933      	ldr	r1, [pc, #204]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fde:	4b33      	ldr	r3, [pc, #204]	; (80040ac <HAL_RCC_OscConfig+0x4dc>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fd fc58 	bl	8001898 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fd fc54 	bl	8001898 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e04d      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x41c>
 800400a:	e045      	b.n	8004098 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400c:	4b27      	ldr	r3, [pc, #156]	; (80040ac <HAL_RCC_OscConfig+0x4dc>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004012:	f7fd fc41 	bl	8001898 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401a:	f7fd fc3d 	bl	8001898 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e036      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402c:	4b1e      	ldr	r3, [pc, #120]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <HAL_RCC_OscConfig+0x44a>
 8004038:	e02e      	b.n	8004098 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e029      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004046:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <HAL_RCC_OscConfig+0x4d8>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	429a      	cmp	r2, r3
 8004058:	d11c      	bne.n	8004094 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d115      	bne.n	8004094 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800406e:	4013      	ands	r3, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004074:	4293      	cmp	r3, r2
 8004076:	d10d      	bne.n	8004094 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d106      	bne.n	8004094 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40007000 	.word	0x40007000
 80040a8:	40023800 	.word	0x40023800
 80040ac:	42470060 	.word	0x42470060

080040b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0cc      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c4:	4b68      	ldr	r3, [pc, #416]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d90c      	bls.n	80040ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b65      	ldr	r3, [pc, #404]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b63      	ldr	r3, [pc, #396]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0b8      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d020      	beq.n	800413a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004104:	4b59      	ldr	r3, [pc, #356]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4a58      	ldr	r2, [pc, #352]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800410e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800411c:	4b53      	ldr	r3, [pc, #332]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a52      	ldr	r2, [pc, #328]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004128:	4b50      	ldr	r3, [pc, #320]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	494d      	ldr	r1, [pc, #308]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d044      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b47      	ldr	r3, [pc, #284]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d119      	bne.n	800418e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e07f      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d003      	beq.n	800416e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416a:	2b03      	cmp	r3, #3
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416e:	4b3f      	ldr	r3, [pc, #252]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e06f      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417e:	4b3b      	ldr	r3, [pc, #236]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e067      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418e:	4b37      	ldr	r3, [pc, #220]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f023 0203 	bic.w	r2, r3, #3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4934      	ldr	r1, [pc, #208]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	4313      	orrs	r3, r2
 800419e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041a0:	f7fd fb7a 	bl	8001898 <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a6:	e00a      	b.n	80041be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a8:	f7fd fb76 	bl	8001898 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e04f      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	4b2b      	ldr	r3, [pc, #172]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 020c 	and.w	r2, r3, #12
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d1eb      	bne.n	80041a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d0:	4b25      	ldr	r3, [pc, #148]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d20c      	bcs.n	80041f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041de:	4b22      	ldr	r3, [pc, #136]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	4b20      	ldr	r3, [pc, #128]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e032      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004204:	4b19      	ldr	r3, [pc, #100]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4916      	ldr	r1, [pc, #88]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	490e      	ldr	r1, [pc, #56]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004236:	f000 f821 	bl	800427c <HAL_RCC_GetSysClockFreq>
 800423a:	4601      	mov	r1, r0
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <HAL_RCC_ClockConfig+0x1c0>)
 8004248:	5cd3      	ldrb	r3, [r2, r3]
 800424a:	fa21 f303 	lsr.w	r3, r1, r3
 800424e:	4a09      	ldr	r2, [pc, #36]	; (8004274 <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004252:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCC_ClockConfig+0x1c8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7fd fada 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40023c00 	.word	0x40023c00
 800426c:	40023800 	.word	0x40023800
 8004270:	0800a75c 	.word	0x0800a75c
 8004274:	20000014 	.word	0x20000014
 8004278:	20000018 	.word	0x20000018

0800427c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800427c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	2300      	movs	r3, #0
 800428c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004292:	4b50      	ldr	r3, [pc, #320]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b04      	cmp	r3, #4
 800429c:	d007      	beq.n	80042ae <HAL_RCC_GetSysClockFreq+0x32>
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d008      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x38>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f040 808d 	bne.w	80043c2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a8:	4b4b      	ldr	r3, [pc, #300]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80042aa:	60bb      	str	r3, [r7, #8]
       break;
 80042ac:	e08c      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ae:	4b4b      	ldr	r3, [pc, #300]	; (80043dc <HAL_RCC_GetSysClockFreq+0x160>)
 80042b0:	60bb      	str	r3, [r7, #8]
      break;
 80042b2:	e089      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b4:	4b47      	ldr	r3, [pc, #284]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042be:	4b45      	ldr	r3, [pc, #276]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d023      	beq.n	8004312 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ca:	4b42      	ldr	r3, [pc, #264]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	f04f 0400 	mov.w	r4, #0
 80042d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	ea03 0501 	and.w	r5, r3, r1
 80042e0:	ea04 0602 	and.w	r6, r4, r2
 80042e4:	4a3d      	ldr	r2, [pc, #244]	; (80043dc <HAL_RCC_GetSysClockFreq+0x160>)
 80042e6:	fb02 f106 	mul.w	r1, r2, r6
 80042ea:	2200      	movs	r2, #0
 80042ec:	fb02 f205 	mul.w	r2, r2, r5
 80042f0:	440a      	add	r2, r1
 80042f2:	493a      	ldr	r1, [pc, #232]	; (80043dc <HAL_RCC_GetSysClockFreq+0x160>)
 80042f4:	fba5 0101 	umull	r0, r1, r5, r1
 80042f8:	1853      	adds	r3, r2, r1
 80042fa:	4619      	mov	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f04f 0400 	mov.w	r4, #0
 8004302:	461a      	mov	r2, r3
 8004304:	4623      	mov	r3, r4
 8004306:	f7fb ffb3 	bl	8000270 <__aeabi_uldivmod>
 800430a:	4603      	mov	r3, r0
 800430c:	460c      	mov	r4, r1
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	e049      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004312:	4b30      	ldr	r3, [pc, #192]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	099b      	lsrs	r3, r3, #6
 8004318:	f04f 0400 	mov.w	r4, #0
 800431c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	ea03 0501 	and.w	r5, r3, r1
 8004328:	ea04 0602 	and.w	r6, r4, r2
 800432c:	4629      	mov	r1, r5
 800432e:	4632      	mov	r2, r6
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	f04f 0400 	mov.w	r4, #0
 8004338:	0154      	lsls	r4, r2, #5
 800433a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800433e:	014b      	lsls	r3, r1, #5
 8004340:	4619      	mov	r1, r3
 8004342:	4622      	mov	r2, r4
 8004344:	1b49      	subs	r1, r1, r5
 8004346:	eb62 0206 	sbc.w	r2, r2, r6
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	f04f 0400 	mov.w	r4, #0
 8004352:	0194      	lsls	r4, r2, #6
 8004354:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004358:	018b      	lsls	r3, r1, #6
 800435a:	1a5b      	subs	r3, r3, r1
 800435c:	eb64 0402 	sbc.w	r4, r4, r2
 8004360:	f04f 0100 	mov.w	r1, #0
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	00e2      	lsls	r2, r4, #3
 800436a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800436e:	00d9      	lsls	r1, r3, #3
 8004370:	460b      	mov	r3, r1
 8004372:	4614      	mov	r4, r2
 8004374:	195b      	adds	r3, r3, r5
 8004376:	eb44 0406 	adc.w	r4, r4, r6
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	02a2      	lsls	r2, r4, #10
 8004384:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004388:	0299      	lsls	r1, r3, #10
 800438a:	460b      	mov	r3, r1
 800438c:	4614      	mov	r4, r2
 800438e:	4618      	mov	r0, r3
 8004390:	4621      	mov	r1, r4
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f04f 0400 	mov.w	r4, #0
 8004398:	461a      	mov	r2, r3
 800439a:	4623      	mov	r3, r4
 800439c:	f7fb ff68 	bl	8000270 <__aeabi_uldivmod>
 80043a0:	4603      	mov	r3, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	0c1b      	lsrs	r3, r3, #16
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	3301      	adds	r3, #1
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	60bb      	str	r3, [r7, #8]
      break;
 80043c0:	e002      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80043c4:	60bb      	str	r3, [r7, #8]
      break;
 80043c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c8:	68bb      	ldr	r3, [r7, #8]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40023800 	.word	0x40023800
 80043d8:	00f42400 	.word	0x00f42400
 80043dc:	017d7840 	.word	0x017d7840

080043e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d105      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004404:	2b00      	cmp	r3, #0
 8004406:	d035      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004408:	4b62      	ldr	r3, [pc, #392]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800440e:	f7fd fa43 	bl	8001898 <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004416:	f7fd fa3f 	bl	8001898 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e0b0      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004428:	4b5b      	ldr	r3, [pc, #364]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f0      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	019a      	lsls	r2, r3, #6
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	071b      	lsls	r3, r3, #28
 8004440:	4955      	ldr	r1, [pc, #340]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004448:	4b52      	ldr	r3, [pc, #328]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800444e:	f7fd fa23 	bl	8001898 <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004456:	f7fd fa1f 	bl	8001898 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e090      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004468:	4b4b      	ldr	r3, [pc, #300]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8083 	beq.w	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	4b44      	ldr	r3, [pc, #272]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	4a43      	ldr	r2, [pc, #268]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800448c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004490:	6413      	str	r3, [r2, #64]	; 0x40
 8004492:	4b41      	ldr	r3, [pc, #260]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800449e:	4b3f      	ldr	r3, [pc, #252]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a3e      	ldr	r2, [pc, #248]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044aa:	f7fd f9f5 	bl	8001898 <HAL_GetTick>
 80044ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044b2:	f7fd f9f1 	bl	8001898 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e062      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044c4:	4b35      	ldr	r3, [pc, #212]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044d0:	4b31      	ldr	r3, [pc, #196]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d02f      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d028      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ee:	4b2a      	ldr	r3, [pc, #168]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044f8:	4b29      	ldr	r3, [pc, #164]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044fe:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004504:	4a24      	ldr	r2, [pc, #144]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800450a:	4b23      	ldr	r3, [pc, #140]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b01      	cmp	r3, #1
 8004514:	d114      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004516:	f7fd f9bf 	bl	8001898 <HAL_GetTick>
 800451a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	e00a      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fd f9bb 	bl	8001898 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	; 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d901      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e02a      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	4b18      	ldr	r3, [pc, #96]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ee      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800454c:	d10d      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800455e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004562:	490d      	ldr	r1, [pc, #52]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004564:	4313      	orrs	r3, r2
 8004566:	608b      	str	r3, [r1, #8]
 8004568:	e005      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004570:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004574:	6093      	str	r3, [r2, #8]
 8004576:	4b08      	ldr	r3, [pc, #32]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004578:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004582:	4905      	ldr	r1, [pc, #20]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004584:	4313      	orrs	r3, r2
 8004586:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	42470068 	.word	0x42470068
 8004598:	40023800 	.word	0x40023800
 800459c:	40007000 	.word	0x40007000
 80045a0:	42470e40 	.word	0x42470e40

080045a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d13d      	bne.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045c2:	4b22      	ldr	r3, [pc, #136]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045ca:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d12f      	bne.n	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045d6:	4b1e      	ldr	r3, [pc, #120]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045d8:	617b      	str	r3, [r7, #20]
          break;
 80045da:	e02f      	b.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045dc:	4b1b      	ldr	r3, [pc, #108]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e8:	d108      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045ea:	4b18      	ldr	r3, [pc, #96]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f2:	4a18      	ldr	r2, [pc, #96]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	e007      	b.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045fc:	4b13      	ldr	r3, [pc, #76]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004604:	4a14      	ldr	r2, [pc, #80]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004606:	fbb2 f3f3 	udiv	r3, r2, r3
 800460a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800460e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004612:	099b      	lsrs	r3, r3, #6
 8004614:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004626:	0f1b      	lsrs	r3, r3, #28
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	617b      	str	r3, [r7, #20]
          break;
 8004634:	e002      	b.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
          break;
 800463a:	bf00      	nop
        }
      }
      break;
 800463c:	bf00      	nop
    }
  }
  return frequency;
 800463e:	697b      	ldr	r3, [r7, #20]
}
 8004640:	4618      	mov	r0, r3
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	40023800 	.word	0x40023800
 8004650:	00bb8000 	.word	0x00bb8000
 8004654:	017d7840 	.word	0x017d7840
 8004658:	00f42400 	.word	0x00f42400

0800465c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e022      	b.n	80046b4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d105      	bne.n	8004686 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7fc fbe3 	bl	8000e4c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2203      	movs	r2, #3
 800468a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f814 	bl	80046bc <HAL_SD_InitCard>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e00a      	b.n	80046b4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80046bc:	b5b0      	push	{r4, r5, r7, lr}
 80046be:	b08e      	sub	sp, #56	; 0x38
 80046c0:	af04      	add	r7, sp, #16
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80046cc:	2300      	movs	r3, #0
 80046ce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80046d8:	2376      	movs	r3, #118	; 0x76
 80046da:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681d      	ldr	r5, [r3, #0]
 80046e0:	466c      	mov	r4, sp
 80046e2:	f107 0314 	add.w	r3, r7, #20
 80046e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046ee:	f107 0308 	add.w	r3, r7, #8
 80046f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046f4:	4628      	mov	r0, r5
 80046f6:	f001 fcb1 	bl	800605c <SDIO_Init>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e031      	b.n	8004770 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800470c:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <HAL_SD_InitCard+0xbc>)
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f001 fce9 	bl	80060ee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800471c:	4b16      	ldr	r3, [pc, #88]	; (8004778 <HAL_SD_InitCard+0xbc>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 ff00 	bl	8005528 <SD_PowerON>
 8004728:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00b      	beq.n	8004748 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e013      	b.n	8004770 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fe1f 	bl	800538c <SD_InitCard>
 800474e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3728      	adds	r7, #40	; 0x28
 8004774:	46bd      	mov	sp, r7
 8004776:	bdb0      	pop	{r4, r5, r7, pc}
 8004778:	422580a0 	.word	0x422580a0

0800477c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b092      	sub	sp, #72	; 0x48
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800478a:	f7fd f885 	bl	8001898 <HAL_GetTick>
 800478e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d107      	bne.n	80047ae <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e1d9      	b.n	8004b62 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	f040 81cc 	bne.w	8004b54 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80047c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	441a      	add	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d907      	bls.n	80047e0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e1c0      	b.n	8004b62 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2203      	movs	r2, #3
 80047e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2200      	movs	r2, #0
 80047ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d002      	beq.n	80047fe <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80047f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fa:	025b      	lsls	r3, r3, #9
 80047fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004806:	4618      	mov	r0, r3
 8004808:	f001 fd04 	bl	8006214 <SDMMC_CmdBlockLength>
 800480c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800480e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00f      	beq.n	8004834 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a9b      	ldr	r2, [pc, #620]	; (8004a88 <HAL_SD_ReadBlocks+0x30c>)
 800481a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004822:	431a      	orrs	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e196      	b.n	8004b62 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004838:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	025b      	lsls	r3, r3, #9
 800483e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004840:	2390      	movs	r3, #144	; 0x90
 8004842:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004844:	2302      	movs	r3, #2
 8004846:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004848:	2300      	movs	r3, #0
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800484c:	2301      	movs	r3, #1
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f107 0214 	add.w	r2, r7, #20
 8004858:	4611      	mov	r1, r2
 800485a:	4618      	mov	r0, r3
 800485c:	f001 fcae 	bl	80061bc <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d90a      	bls.n	800487c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2202      	movs	r2, #2
 800486a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004872:	4618      	mov	r0, r3
 8004874:	f001 fd12 	bl	800629c <SDMMC_CmdReadMultiBlock>
 8004878:	6478      	str	r0, [r7, #68]	; 0x44
 800487a:	e009      	b.n	8004890 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004888:	4618      	mov	r0, r3
 800488a:	f001 fce5 	bl	8006258 <SDMMC_CmdReadSingleBlock>
 800488e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004892:	2b00      	cmp	r3, #0
 8004894:	d012      	beq.n	80048bc <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a7b      	ldr	r2, [pc, #492]	; (8004a88 <HAL_SD_ReadBlocks+0x30c>)
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a4:	431a      	orrs	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e152      	b.n	8004b62 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80048c0:	e061      	b.n	8004986 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d03c      	beq.n	800494a <HAL_SD_ReadBlocks+0x1ce>
 80048d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d039      	beq.n	800494a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80048d6:	2300      	movs	r3, #0
 80048d8:	643b      	str	r3, [r7, #64]	; 0x40
 80048da:	e033      	b.n	8004944 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 fbe6 	bl	80060b2 <SDIO_ReadFIFO>
 80048e6:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ee:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80048f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f2:	3301      	adds	r3, #1
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80048f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f8:	3b01      	subs	r3, #1
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	b2da      	uxtb	r2, r3
 8004902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004904:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004908:	3301      	adds	r3, #1
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800490c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490e:	3b01      	subs	r3, #1
 8004910:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	b2da      	uxtb	r2, r3
 8004918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800491c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491e:	3301      	adds	r3, #1
 8004920:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004924:	3b01      	subs	r3, #1
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	0e1b      	lsrs	r3, r3, #24
 800492c:	b2da      	uxtb	r2, r3
 800492e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004930:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	3301      	adds	r3, #1
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493a:	3b01      	subs	r3, #1
 800493c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800493e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004940:	3301      	adds	r3, #1
 8004942:	643b      	str	r3, [r7, #64]	; 0x40
 8004944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004946:	2b07      	cmp	r3, #7
 8004948:	d9c8      	bls.n	80048dc <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800494a:	f7fc ffa5 	bl	8001898 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004956:	429a      	cmp	r2, r3
 8004958:	d902      	bls.n	8004960 <HAL_SD_ReadBlocks+0x1e4>
 800495a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800495c:	2b00      	cmp	r3, #0
 800495e:	d112      	bne.n	8004986 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a48      	ldr	r2, [pc, #288]	; (8004a88 <HAL_SD_ReadBlocks+0x30c>)
 8004966:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e0ed      	b.n	8004b62 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800498c:	f240 332a 	movw	r3, #810	; 0x32a
 8004990:	4013      	ands	r3, r2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d095      	beq.n	80048c2 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d022      	beq.n	80049ea <HAL_SD_ReadBlocks+0x26e>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d91f      	bls.n	80049ea <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d01b      	beq.n	80049ea <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 fcd6 	bl	8006368 <SDMMC_CmdStopTransfer>
 80049bc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80049be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d012      	beq.n	80049ea <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a2f      	ldr	r2, [pc, #188]	; (8004a88 <HAL_SD_ReadBlocks+0x30c>)
 80049ca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d2:	431a      	orrs	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e0bb      	b.n	8004b62 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d012      	beq.n	8004a1e <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a22      	ldr	r2, [pc, #136]	; (8004a88 <HAL_SD_ReadBlocks+0x30c>)
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	f043 0208 	orr.w	r2, r3, #8
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e0a1      	b.n	8004b62 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d012      	beq.n	8004a52 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <HAL_SD_ReadBlocks+0x30c>)
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	f043 0202 	orr.w	r2, r3, #2
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e087      	b.n	8004b62 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d064      	beq.n	8004b2a <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <HAL_SD_ReadBlocks+0x30c>)
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e06d      	b.n	8004b62 <HAL_SD_ReadBlocks+0x3e6>
 8004a86:	bf00      	nop
 8004a88:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f001 fb0e 	bl	80060b2 <SDIO_ReadFIFO>
 8004a96:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab8:	3301      	adds	r3, #1
 8004aba:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	0c1b      	lsrs	r3, r3, #16
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ace:	3301      	adds	r3, #1
 8004ad0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	0e1b      	lsrs	r3, r3, #24
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aea:	3b01      	subs	r3, #1
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004aee:	f7fc fed3 	bl	8001898 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d902      	bls.n	8004b04 <HAL_SD_ReadBlocks+0x388>
 8004afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d112      	bne.n	8004b2a <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <HAL_SD_ReadBlocks+0x3f0>)
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e01b      	b.n	8004b62 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_SD_ReadBlocks+0x3c2>
 8004b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1a6      	bne.n	8004a8c <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e006      	b.n	8004b62 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
  }
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3748      	adds	r7, #72	; 0x48
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	004005ff 	.word	0x004005ff

08004b70 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b092      	sub	sp, #72	; 0x48
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004b7e:	f7fc fe8b 	bl	8001898 <HAL_GetTick>
 8004b82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d107      	bne.n	8004ba2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e184      	b.n	8004eac <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	f040 8177 	bne.w	8004e9e <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	441a      	add	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d907      	bls.n	8004bd4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e16b      	b.n	8004eac <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d002      	beq.n	8004bf2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bee:	025b      	lsls	r3, r3, #9
 8004bf0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 fb0a 	bl	8006214 <SDMMC_CmdBlockLength>
 8004c00:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00f      	beq.n	8004c28 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a9d      	ldr	r2, [pc, #628]	; (8004e84 <HAL_SD_WriteBlocks+0x314>)
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c16:	431a      	orrs	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e141      	b.n	8004eac <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c2c:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	025b      	lsls	r3, r3, #9
 8004c32:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004c34:	2390      	movs	r3, #144	; 0x90
 8004c36:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004c40:	2301      	movs	r3, #1
 8004c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f107 0218 	add.w	r2, r7, #24
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f001 fab4 	bl	80061bc <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d90a      	bls.n	8004c70 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 fb5c 	bl	8006324 <SDMMC_CmdWriteMultiBlock>
 8004c6c:	6478      	str	r0, [r7, #68]	; 0x44
 8004c6e:	e009      	b.n	8004c84 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2210      	movs	r2, #16
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 fb2f 	bl	80062e0 <SDMMC_CmdWriteSingleBlock>
 8004c82:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d012      	beq.n	8004cb0 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a7d      	ldr	r2, [pc, #500]	; (8004e84 <HAL_SD_WriteBlocks+0x314>)
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0fd      	b.n	8004eac <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004cb4:	e065      	b.n	8004d82 <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d040      	beq.n	8004d46 <HAL_SD_WriteBlocks+0x1d6>
 8004cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d03d      	beq.n	8004d46 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004cca:	2300      	movs	r3, #0
 8004ccc:	643b      	str	r3, [r7, #64]	; 0x40
 8004cce:	e037      	b.n	8004d40 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd8:	3301      	adds	r3, #1
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	021a      	lsls	r2, r3, #8
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	041a      	lsls	r2, r3, #16
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d08:	3301      	adds	r3, #1
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	061a      	lsls	r2, r3, #24
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d20:	3301      	adds	r3, #1
 8004d22:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d26:	3b01      	subs	r3, #1
 8004d28:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f107 0214 	add.w	r2, r7, #20
 8004d32:	4611      	mov	r1, r2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 f9c9 	bl	80060cc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d42:	2b07      	cmp	r3, #7
 8004d44:	d9c4      	bls.n	8004cd0 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004d46:	f7fc fda7 	bl	8001898 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d902      	bls.n	8004d5c <HAL_SD_WriteBlocks+0x1ec>
 8004d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d112      	bne.n	8004d82 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a48      	ldr	r2, [pc, #288]	; (8004e84 <HAL_SD_WriteBlocks+0x314>)
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e094      	b.n	8004eac <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d88:	f240 331a 	movw	r3, #794	; 0x31a
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d091      	beq.n	8004cb6 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d022      	beq.n	8004de6 <HAL_SD_WriteBlocks+0x276>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d91f      	bls.n	8004de6 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d01b      	beq.n	8004de6 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f001 fad8 	bl	8006368 <SDMMC_CmdStopTransfer>
 8004db8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d012      	beq.n	8004de6 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a2f      	ldr	r2, [pc, #188]	; (8004e84 <HAL_SD_WriteBlocks+0x314>)
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e062      	b.n	8004eac <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d012      	beq.n	8004e1a <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <HAL_SD_WriteBlocks+0x314>)
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	f043 0208 	orr.w	r2, r3, #8
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e048      	b.n	8004eac <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d012      	beq.n	8004e4e <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <HAL_SD_WriteBlocks+0x314>)
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	f043 0202 	orr.w	r2, r3, #2
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e02e      	b.n	8004eac <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d015      	beq.n	8004e88 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <HAL_SD_WriteBlocks+0x314>)
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	f043 0210 	orr.w	r2, r3, #16
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e014      	b.n	8004eac <HAL_SD_WriteBlocks+0x33c>
 8004e82:	bf00      	nop
 8004e84:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e90:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e006      	b.n	8004eac <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
  }
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3748      	adds	r7, #72	; 0x48
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec2:	0f9b      	lsrs	r3, r3, #30
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ece:	0e9b      	lsrs	r3, r3, #26
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee0:	0e1b      	lsrs	r3, r3, #24
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ef2:	0c1b      	lsrs	r3, r3, #16
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f14:	0d1b      	lsrs	r3, r3, #20
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f32:	0bdb      	lsrs	r3, r3, #15
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f44:	0b9b      	lsrs	r3, r3, #14
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f56:	0b5b      	lsrs	r3, r3, #13
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f68:	0b1b      	lsrs	r3, r3, #12
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d163      	bne.n	800504c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f88:	009a      	lsls	r2, r3, #2
 8004f8a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f8e:	4013      	ands	r3, r2
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004f94:	0f92      	lsrs	r2, r2, #30
 8004f96:	431a      	orrs	r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa0:	0edb      	lsrs	r3, r3, #27
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb2:	0e1b      	lsrs	r3, r3, #24
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc4:	0d5b      	lsrs	r3, r3, #21
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd6:	0c9b      	lsrs	r3, r3, #18
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe8:	0bdb      	lsrs	r3, r3, #15
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	7e1b      	ldrb	r3, [r3, #24]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	3302      	adds	r3, #2
 800500c:	2201      	movs	r2, #1
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005016:	fb02 f203 	mul.w	r2, r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	7a1b      	ldrb	r3, [r3, #8]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	2201      	movs	r2, #1
 800502a:	409a      	lsls	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005038:	0a52      	lsrs	r2, r2, #9
 800503a:	fb02 f203 	mul.w	r2, r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005048:	661a      	str	r2, [r3, #96]	; 0x60
 800504a:	e031      	b.n	80050b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005050:	2b01      	cmp	r3, #1
 8005052:	d11d      	bne.n	8005090 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005058:	041b      	lsls	r3, r3, #16
 800505a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005062:	0c1b      	lsrs	r3, r3, #16
 8005064:	431a      	orrs	r2, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	3301      	adds	r3, #1
 8005070:	029a      	lsls	r2, r3, #10
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005084:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	661a      	str	r2, [r3, #96]	; 0x60
 800508e:	e00f      	b.n	80050b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a58      	ldr	r2, [pc, #352]	; (80051f8 <HAL_SD_GetCardCSD+0x344>)
 8005096:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e09d      	b.n	80051ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b4:	0b9b      	lsrs	r3, r3, #14
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c6:	09db      	lsrs	r3, r3, #7
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	0fdb      	lsrs	r3, r3, #31
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	0f5b      	lsrs	r3, r3, #29
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	0e9b      	lsrs	r3, r3, #26
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	b2da      	uxtb	r2, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	0d9b      	lsrs	r3, r3, #22
 800511a:	b2db      	uxtb	r3, r3
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	b2da      	uxtb	r2, r3
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512a:	0d5b      	lsrs	r3, r3, #21
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	b2da      	uxtb	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005146:	0c1b      	lsrs	r3, r3, #16
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515a:	0bdb      	lsrs	r3, r3, #15
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	b2da      	uxtb	r2, r3
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	0b9b      	lsrs	r3, r3, #14
 8005170:	b2db      	uxtb	r3, r3
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	b2da      	uxtb	r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	0b5b      	lsrs	r3, r3, #13
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	b2da      	uxtb	r2, r3
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	0b1b      	lsrs	r3, r3, #12
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	0a9b      	lsrs	r3, r3, #10
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	0a1b      	lsrs	r3, r3, #8
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	004005ff 	.word	0x004005ff

080051fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005254:	b5b0      	push	{r4, r5, r7, lr}
 8005256:	b08e      	sub	sp, #56	; 0x38
 8005258:	af04      	add	r7, sp, #16
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2203      	movs	r2, #3
 8005262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	2b03      	cmp	r3, #3
 800526c:	d02e      	beq.n	80052cc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005274:	d106      	bne.n	8005284 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
 8005282:	e029      	b.n	80052d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800528a:	d10a      	bne.n	80052a2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fa01 	bl	8005694 <SD_WideBus_Enable>
 8005292:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	639a      	str	r2, [r3, #56]	; 0x38
 80052a0:	e01a      	b.n	80052d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fa3e 	bl	800572a <SD_WideBus_Disable>
 80052ae:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38
 80052bc:	e00c      	b.n	80052d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
 80052ca:	e005      	b.n	80052d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d009      	beq.n	80052f4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a18      	ldr	r2, [pc, #96]	; (8005348 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e024      	b.n	800533e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681d      	ldr	r5, [r3, #0]
 800531a:	466c      	mov	r4, sp
 800531c:	f107 0318 	add.w	r3, r7, #24
 8005320:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005324:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005328:	f107 030c 	add.w	r3, r7, #12
 800532c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800532e:	4628      	mov	r0, r5
 8005330:	f000 fe94 	bl	800605c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3728      	adds	r7, #40	; 0x28
 8005342:	46bd      	mov	sp, r7
 8005344:	bdb0      	pop	{r4, r5, r7, pc}
 8005346:	bf00      	nop
 8005348:	004005ff 	.word	0x004005ff

0800534c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f970 	bl	8005644 <SD_SendStatus>
 8005364:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	0a5b      	lsrs	r3, r3, #9
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005382:	693b      	ldr	r3, [r7, #16]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800538c:	b5b0      	push	{r4, r5, r7, lr}
 800538e:	b094      	sub	sp, #80	; 0x50
 8005390:	af04      	add	r7, sp, #16
 8005392:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005394:	2301      	movs	r3, #1
 8005396:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f000 feb5 	bl	800610c <SDIO_GetPowerState>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80053a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80053ac:	e0b7      	b.n	800551e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d02f      	beq.n	8005416 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 f8de 	bl	800657c <SDMMC_CmdSendCID>
 80053c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80053c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <SD_InitCard+0x40>
    {
      return errorstate;
 80053c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ca:	e0a8      	b.n	800551e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2100      	movs	r1, #0
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fedf 	bl	8006196 <SDIO_GetResponse>
 80053d8:	4602      	mov	r2, r0
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2104      	movs	r1, #4
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fed6 	bl	8006196 <SDIO_GetResponse>
 80053ea:	4602      	mov	r2, r0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2108      	movs	r1, #8
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fecd 	bl	8006196 <SDIO_GetResponse>
 80053fc:	4602      	mov	r2, r0
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	210c      	movs	r1, #12
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fec4 	bl	8006196 <SDIO_GetResponse>
 800540e:	4602      	mov	r2, r0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541a:	2b03      	cmp	r3, #3
 800541c:	d00d      	beq.n	800543a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f107 020e 	add.w	r2, r7, #14
 8005426:	4611      	mov	r1, r2
 8005428:	4618      	mov	r0, r3
 800542a:	f001 f8e4 	bl	80065f6 <SDMMC_CmdSetRelAdd>
 800542e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <SD_InitCard+0xae>
    {
      return errorstate;
 8005436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005438:	e071      	b.n	800551e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543e:	2b03      	cmp	r3, #3
 8005440:	d036      	beq.n	80054b0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005442:	89fb      	ldrh	r3, [r7, #14]
 8005444:	461a      	mov	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005452:	041b      	lsls	r3, r3, #16
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f001 f8ae 	bl	80065b8 <SDMMC_CmdSendCSD>
 800545c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800545e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005466:	e05a      	b.n	800551e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2100      	movs	r1, #0
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fe91 	bl	8006196 <SDIO_GetResponse>
 8005474:	4602      	mov	r2, r0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2104      	movs	r1, #4
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fe88 	bl	8006196 <SDIO_GetResponse>
 8005486:	4602      	mov	r2, r0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2108      	movs	r1, #8
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fe7f 	bl	8006196 <SDIO_GetResponse>
 8005498:	4602      	mov	r2, r0
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	210c      	movs	r1, #12
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fe76 	bl	8006196 <SDIO_GetResponse>
 80054aa:	4602      	mov	r2, r0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2104      	movs	r1, #4
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fe6d 	bl	8006196 <SDIO_GetResponse>
 80054bc:	4603      	mov	r3, r0
 80054be:	0d1a      	lsrs	r2, r3, #20
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80054c4:	f107 0310 	add.w	r3, r7, #16
 80054c8:	4619      	mov	r1, r3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fcf2 	bl	8004eb4 <HAL_SD_GetCardCSD>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054da:	e020      	b.n	800551e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6819      	ldr	r1, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e4:	041b      	lsls	r3, r3, #16
 80054e6:	f04f 0400 	mov.w	r4, #0
 80054ea:	461a      	mov	r2, r3
 80054ec:	4623      	mov	r3, r4
 80054ee:	4608      	mov	r0, r1
 80054f0:	f000 ff5c 	bl	80063ac <SDMMC_CmdSelDesel>
 80054f4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80054f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <SD_InitCard+0x174>
  {
    return errorstate;
 80054fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fe:	e00e      	b.n	800551e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681d      	ldr	r5, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	466c      	mov	r4, sp
 8005508:	f103 0210 	add.w	r2, r3, #16
 800550c:	ca07      	ldmia	r2, {r0, r1, r2}
 800550e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005512:	3304      	adds	r3, #4
 8005514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005516:	4628      	mov	r0, r5
 8005518:	f000 fda0 	bl	800605c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3740      	adds	r7, #64	; 0x40
 8005522:	46bd      	mov	sp, r7
 8005524:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005528 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	2300      	movs	r3, #0
 800553a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f000 ff56 	bl	80063f2 <SDMMC_CmdGoIdleState>
 8005546:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <SD_PowerON+0x2a>
  {
    return errorstate;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	e072      	b.n	8005638 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f000 ff69 	bl	800642e <SDMMC_CmdOperCond>
 800555c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00d      	beq.n	8005580 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 ff3f 	bl	80063f2 <SDMMC_CmdGoIdleState>
 8005574:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <SD_PowerON+0x5e>
    {
      return errorstate;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	e05b      	b.n	8005638 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800558a:	2b01      	cmp	r3, #1
 800558c:	d137      	bne.n	80055fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2100      	movs	r1, #0
 8005594:	4618      	mov	r0, r3
 8005596:	f000 ff69 	bl	800646c <SDMMC_CmdAppCommand>
 800559a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d02d      	beq.n	80055fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80055a6:	e047      	b.n	8005638 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2100      	movs	r1, #0
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 ff5c 	bl	800646c <SDMMC_CmdAppCommand>
 80055b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <SD_PowerON+0x98>
    {
      return errorstate;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	e03b      	b.n	8005638 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	491e      	ldr	r1, [pc, #120]	; (8005640 <SD_PowerON+0x118>)
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 ff72 	bl	80064b0 <SDMMC_CmdAppOperCommand>
 80055cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80055d8:	e02e      	b.n	8005638 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2100      	movs	r1, #0
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fdd8 	bl	8006196 <SDIO_GetResponse>
 80055e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	0fdb      	lsrs	r3, r3, #31
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <SD_PowerON+0xcc>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <SD_PowerON+0xce>
 80055f4:	2300      	movs	r3, #0
 80055f6:	613b      	str	r3, [r7, #16]

    count++;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005604:	4293      	cmp	r3, r2
 8005606:	d802      	bhi.n	800560e <SD_PowerON+0xe6>
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0cc      	beq.n	80055a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005614:	4293      	cmp	r3, r2
 8005616:	d902      	bls.n	800561e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800561c:	e00c      	b.n	8005638 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	645a      	str	r2, [r3, #68]	; 0x44
 800562e:	e002      	b.n	8005636 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	c1100000 	.word	0xc1100000

08005644 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005654:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005658:	e018      	b.n	800568c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005662:	041b      	lsls	r3, r3, #16
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f000 ffe6 	bl	8006638 <SDMMC_CmdSendStatus>
 800566c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	e009      	b.n	800568c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2100      	movs	r1, #0
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fd89 	bl	8006196 <SDIO_GetResponse>
 8005684:	4602      	mov	r2, r0
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2100      	movs	r1, #0
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fd73 	bl	8006196 <SDIO_GetResponse>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056ba:	d102      	bne.n	80056c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80056bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056c0:	e02f      	b.n	8005722 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80056c2:	f107 030c 	add.w	r3, r7, #12
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f879 	bl	80057c0 <SD_FindSCR>
 80056ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	e023      	b.n	8005722 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01c      	beq.n	800571e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ec:	041b      	lsls	r3, r3, #16
 80056ee:	4619      	mov	r1, r3
 80056f0:	4610      	mov	r0, r2
 80056f2:	f000 febb 	bl	800646c <SDMMC_CmdAppCommand>
 80056f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	e00f      	b.n	8005722 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2102      	movs	r1, #2
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fef4 	bl	80064f6 <SDMMC_CmdBusWidth>
 800570e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	e003      	b.n	8005722 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800571a:	2300      	movs	r3, #0
 800571c:	e001      	b.n	8005722 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800571e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fd28 	bl	8006196 <SDIO_GetResponse>
 8005746:	4603      	mov	r3, r0
 8005748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005750:	d102      	bne.n	8005758 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005752:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005756:	e02f      	b.n	80057b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005758:	f107 030c 	add.w	r3, r7, #12
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f82e 	bl	80057c0 <SD_FindSCR>
 8005764:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	e023      	b.n	80057b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01c      	beq.n	80057b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005782:	041b      	lsls	r3, r3, #16
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f000 fe70 	bl	800646c <SDMMC_CmdAppCommand>
 800578c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	e00f      	b.n	80057b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fea9 	bl	80064f6 <SDMMC_CmdBusWidth>
 80057a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	e003      	b.n	80057b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80057b0:	2300      	movs	r3, #0
 80057b2:	e001      	b.n	80057b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80057b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80057c0:	b590      	push	{r4, r7, lr}
 80057c2:	b08f      	sub	sp, #60	; 0x3c
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80057ca:	f7fc f865 	bl	8001898 <HAL_GetTick>
 80057ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80057d4:	2300      	movs	r3, #0
 80057d6:	60bb      	str	r3, [r7, #8]
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2108      	movs	r1, #8
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fd14 	bl	8006214 <SDMMC_CmdBlockLength>
 80057ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	e0a9      	b.n	800594c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005800:	041b      	lsls	r3, r3, #16
 8005802:	4619      	mov	r1, r3
 8005804:	4610      	mov	r0, r2
 8005806:	f000 fe31 	bl	800646c <SDMMC_CmdAppCommand>
 800580a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	e09a      	b.n	800594c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800581a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800581c:	2308      	movs	r3, #8
 800581e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005820:	2330      	movs	r3, #48	; 0x30
 8005822:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005824:	2302      	movs	r3, #2
 8005826:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005828:	2300      	movs	r3, #0
 800582a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800582c:	2301      	movs	r3, #1
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f107 0210 	add.w	r2, r7, #16
 8005838:	4611      	mov	r1, r2
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fcbe 	bl	80061bc <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fe78 	bl	800653a <SDMMC_CmdSendSCR>
 800584a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	2b00      	cmp	r3, #0
 8005850:	d022      	beq.n	8005898 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	e07a      	b.n	800594c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00e      	beq.n	8005882 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6819      	ldr	r1, [r3, #0]
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	f107 0208 	add.w	r2, r7, #8
 8005870:	18d4      	adds	r4, r2, r3
 8005872:	4608      	mov	r0, r1
 8005874:	f000 fc1d 	bl	80060b2 <SDIO_ReadFIFO>
 8005878:	4603      	mov	r3, r0
 800587a:	6023      	str	r3, [r4, #0]
      index++;
 800587c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587e:	3301      	adds	r3, #1
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005882:	f7fc f809 	bl	8001898 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005890:	d102      	bne.n	8005898 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005892:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005896:	e059      	b.n	800594c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800589e:	f240 432a 	movw	r3, #1066	; 0x42a
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0d6      	beq.n	8005856 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2208      	movs	r2, #8
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80058be:	2308      	movs	r3, #8
 80058c0:	e044      	b.n	800594c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2202      	movs	r2, #2
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80058d8:	2302      	movs	r3, #2
 80058da:	e037      	b.n	800594c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2220      	movs	r2, #32
 80058f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80058f2:	2320      	movs	r3, #32
 80058f4:	e02a      	b.n	800594c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f240 523a 	movw	r2, #1338	; 0x53a
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	061a      	lsls	r2, r3, #24
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800590c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	0a1b      	lsrs	r3, r3, #8
 8005912:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005916:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	0e1b      	lsrs	r3, r3, #24
 800591c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	601a      	str	r2, [r3, #0]
    scr++;
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	3304      	adds	r3, #4
 8005926:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	061a      	lsls	r2, r3, #24
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005934:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	0a1b      	lsrs	r3, r3, #8
 800593a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800593e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	0e1b      	lsrs	r3, r3, #24
 8005944:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	373c      	adds	r7, #60	; 0x3c
 8005950:	46bd      	mov	sp, r7
 8005952:	bd90      	pop	{r4, r7, pc}

08005954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e01d      	b.n	80059a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fb fd86 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f000 fa0c 	bl	8005db0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b086      	sub	sp, #24
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e083      	b.n	8005ac6 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fb fcce 	bl	8001374 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ee:	f023 0307 	bic.w	r3, r3, #7
 80059f2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	f000 f9d6 	bl	8005db0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2c:	f023 0303 	bic.w	r3, r3, #3
 8005a30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a4a:	f023 030c 	bic.w	r3, r3, #12
 8005a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	4313      	orrs	r3, r2
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	011a      	lsls	r2, r3, #4
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	031b      	lsls	r3, r3, #12
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005a88:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005a90:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <HAL_TIM_Encoder_Start+0x16>
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d008      	beq.n	8005af4 <HAL_TIM_Encoder_Start+0x26>
 8005ae2:	e00f      	b.n	8005b04 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 f9ff 	bl	8005ef0 <TIM_CCxChannelCmd>
      break;
 8005af2:	e016      	b.n	8005b22 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2201      	movs	r2, #1
 8005afa:	2104      	movs	r1, #4
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 f9f7 	bl	8005ef0 <TIM_CCxChannelCmd>
      break;
 8005b02:	e00e      	b.n	8005b22 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 f9ef 	bl	8005ef0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2201      	movs	r2, #1
 8005b18:	2104      	movs	r1, #4
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f9e8 	bl	8005ef0 <TIM_CCxChannelCmd>
      break;
 8005b20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 0201 	orr.w	r2, r2, #1
 8005b30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d122      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d11b      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0202 	mvn.w	r2, #2
 8005b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f8f8 	bl	8005d74 <HAL_TIM_IC_CaptureCallback>
 8005b84:	e005      	b.n	8005b92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f8ea 	bl	8005d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f8fb 	bl	8005d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0304 	and.w	r3, r3, #4
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d122      	bne.n	8005bec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d11b      	bne.n	8005bec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0204 	mvn.w	r2, #4
 8005bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f8ce 	bl	8005d74 <HAL_TIM_IC_CaptureCallback>
 8005bd8:	e005      	b.n	8005be6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f8c0 	bl	8005d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f8d1 	bl	8005d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d122      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d11b      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0208 	mvn.w	r2, #8
 8005c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2204      	movs	r2, #4
 8005c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f8a4 	bl	8005d74 <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f896 	bl	8005d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f8a7 	bl	8005d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	2b10      	cmp	r3, #16
 8005c4c:	d122      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b10      	cmp	r3, #16
 8005c5a:	d11b      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0210 	mvn.w	r2, #16
 8005c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2208      	movs	r2, #8
 8005c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f87a 	bl	8005d74 <HAL_TIM_IC_CaptureCallback>
 8005c80:	e005      	b.n	8005c8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f86c 	bl	8005d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f87d 	bl	8005d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d10e      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d107      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0201 	mvn.w	r2, #1
 8005cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f846 	bl	8005d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cca:	2b80      	cmp	r3, #128	; 0x80
 8005ccc:	d10e      	bne.n	8005cec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd8:	2b80      	cmp	r3, #128	; 0x80
 8005cda:	d107      	bne.n	8005cec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f9ae 	bl	8006048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf6:	2b40      	cmp	r3, #64	; 0x40
 8005cf8:	d10e      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d04:	2b40      	cmp	r3, #64	; 0x40
 8005d06:	d107      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f842 	bl	8005d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d10e      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d107      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0220 	mvn.w	r2, #32
 8005d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f978 	bl	8006034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d44:	bf00      	nop
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a40      	ldr	r2, [pc, #256]	; (8005ec4 <TIM_Base_SetConfig+0x114>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d013      	beq.n	8005df0 <TIM_Base_SetConfig+0x40>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dce:	d00f      	beq.n	8005df0 <TIM_Base_SetConfig+0x40>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a3d      	ldr	r2, [pc, #244]	; (8005ec8 <TIM_Base_SetConfig+0x118>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00b      	beq.n	8005df0 <TIM_Base_SetConfig+0x40>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a3c      	ldr	r2, [pc, #240]	; (8005ecc <TIM_Base_SetConfig+0x11c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d007      	beq.n	8005df0 <TIM_Base_SetConfig+0x40>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a3b      	ldr	r2, [pc, #236]	; (8005ed0 <TIM_Base_SetConfig+0x120>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_Base_SetConfig+0x40>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a3a      	ldr	r2, [pc, #232]	; (8005ed4 <TIM_Base_SetConfig+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d108      	bne.n	8005e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a2f      	ldr	r2, [pc, #188]	; (8005ec4 <TIM_Base_SetConfig+0x114>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d02b      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e10:	d027      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a2c      	ldr	r2, [pc, #176]	; (8005ec8 <TIM_Base_SetConfig+0x118>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d023      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a2b      	ldr	r2, [pc, #172]	; (8005ecc <TIM_Base_SetConfig+0x11c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d01f      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a2a      	ldr	r2, [pc, #168]	; (8005ed0 <TIM_Base_SetConfig+0x120>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d01b      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a29      	ldr	r2, [pc, #164]	; (8005ed4 <TIM_Base_SetConfig+0x124>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d017      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a28      	ldr	r2, [pc, #160]	; (8005ed8 <TIM_Base_SetConfig+0x128>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a27      	ldr	r2, [pc, #156]	; (8005edc <TIM_Base_SetConfig+0x12c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00f      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a26      	ldr	r2, [pc, #152]	; (8005ee0 <TIM_Base_SetConfig+0x130>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00b      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a25      	ldr	r2, [pc, #148]	; (8005ee4 <TIM_Base_SetConfig+0x134>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d007      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a24      	ldr	r2, [pc, #144]	; (8005ee8 <TIM_Base_SetConfig+0x138>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d003      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a23      	ldr	r2, [pc, #140]	; (8005eec <TIM_Base_SetConfig+0x13c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d108      	bne.n	8005e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a0a      	ldr	r2, [pc, #40]	; (8005ec4 <TIM_Base_SetConfig+0x114>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <TIM_Base_SetConfig+0xf8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a0c      	ldr	r2, [pc, #48]	; (8005ed4 <TIM_Base_SetConfig+0x124>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d103      	bne.n	8005eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	615a      	str	r2, [r3, #20]
}
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800
 8005ed0:	40000c00 	.word	0x40000c00
 8005ed4:	40010400 	.word	0x40010400
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40014400 	.word	0x40014400
 8005ee0:	40014800 	.word	0x40014800
 8005ee4:	40001800 	.word	0x40001800
 8005ee8:	40001c00 	.word	0x40001c00
 8005eec:	40002000 	.word	0x40002000

08005ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	2201      	movs	r2, #1
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1a      	ldr	r2, [r3, #32]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	43db      	mvns	r3, r3
 8005f12:	401a      	ands	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a1a      	ldr	r2, [r3, #32]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	fa01 f303 	lsl.w	r3, r1, r3
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e05a      	b.n	800600a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a21      	ldr	r2, [pc, #132]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d022      	beq.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa0:	d01d      	beq.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1d      	ldr	r2, [pc, #116]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d018      	beq.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1b      	ldr	r2, [pc, #108]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1a      	ldr	r2, [pc, #104]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00e      	beq.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a18      	ldr	r2, [pc, #96]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a17      	ldr	r2, [pc, #92]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a15      	ldr	r2, [pc, #84]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d10c      	bne.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40010000 	.word	0x40010000
 800601c:	40000400 	.word	0x40000400
 8006020:	40000800 	.word	0x40000800
 8006024:	40000c00 	.word	0x40000c00
 8006028:	40010400 	.word	0x40010400
 800602c:	40014000 	.word	0x40014000
 8006030:	40001800 	.word	0x40001800

08006034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800605c:	b084      	sub	sp, #16
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	f107 001c 	add.w	r0, r7, #28
 800606a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006072:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006074:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006076:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800607a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800607e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006082:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006086:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006096:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	b004      	add	sp, #16
 80060b0:	4770      	bx	lr

080060b2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2203      	movs	r2, #3
 80060fa:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80060fc:	2002      	movs	r0, #2
 80060fe:	f7fb fbd7 	bl	80018b0 <HAL_Delay>
  
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0303 	and.w	r3, r3, #3
}
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006146:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800614c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006152:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006162:	f023 030f 	bic.w	r3, r3, #15
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	b2db      	uxtb	r3, r3
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006196:	b480      	push	{r7}
 8006198:	b085      	sub	sp, #20
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3314      	adds	r3, #20
 80061a4:	461a      	mov	r2, r3
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	4413      	add	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
}  
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80061e2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80061e8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80061ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006206:	2300      	movs	r3, #0

}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006222:	2310      	movs	r3, #16
 8006224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006226:	2340      	movs	r3, #64	; 0x40
 8006228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800622a:	2300      	movs	r3, #0
 800622c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800622e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006232:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006234:	f107 0308 	add.w	r3, r7, #8
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff ff74 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006240:	f241 3288 	movw	r2, #5000	; 0x1388
 8006244:	2110      	movs	r1, #16
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa40 	bl	80066cc <SDMMC_GetCmdResp1>
 800624c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800624e:	69fb      	ldr	r3, [r7, #28]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3720      	adds	r7, #32
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006266:	2311      	movs	r3, #17
 8006268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800626a:	2340      	movs	r3, #64	; 0x40
 800626c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006276:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006278:	f107 0308 	add.w	r3, r7, #8
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff ff52 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006284:	f241 3288 	movw	r2, #5000	; 0x1388
 8006288:	2111      	movs	r1, #17
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa1e 	bl	80066cc <SDMMC_GetCmdResp1>
 8006290:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006292:	69fb      	ldr	r3, [r7, #28]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3720      	adds	r7, #32
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80062aa:	2312      	movs	r3, #18
 80062ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062ae:	2340      	movs	r3, #64	; 0x40
 80062b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062b2:	2300      	movs	r3, #0
 80062b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062bc:	f107 0308 	add.w	r3, r7, #8
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff ff30 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80062c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062cc:	2112      	movs	r1, #18
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f9fc 	bl	80066cc <SDMMC_GetCmdResp1>
 80062d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062d6:	69fb      	ldr	r3, [r7, #28]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80062ee:	2318      	movs	r3, #24
 80062f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062f2:	2340      	movs	r3, #64	; 0x40
 80062f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062f6:	2300      	movs	r3, #0
 80062f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006300:	f107 0308 	add.w	r3, r7, #8
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff ff0e 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800630c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006310:	2118      	movs	r1, #24
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f9da 	bl	80066cc <SDMMC_GetCmdResp1>
 8006318:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800631a:	69fb      	ldr	r3, [r7, #28]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3720      	adds	r7, #32
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006332:	2319      	movs	r3, #25
 8006334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006336:	2340      	movs	r3, #64	; 0x40
 8006338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800633e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006342:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006344:	f107 0308 	add.w	r3, r7, #8
 8006348:	4619      	mov	r1, r3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff feec 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006350:	f241 3288 	movw	r2, #5000	; 0x1388
 8006354:	2119      	movs	r1, #25
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f9b8 	bl	80066cc <SDMMC_GetCmdResp1>
 800635c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800635e:	69fb      	ldr	r3, [r7, #28]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3720      	adds	r7, #32
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006374:	230c      	movs	r3, #12
 8006376:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006378:	2340      	movs	r3, #64	; 0x40
 800637a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800637c:	2300      	movs	r3, #0
 800637e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006384:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006386:	f107 0308 	add.w	r3, r7, #8
 800638a:	4619      	mov	r1, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff fecb 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006392:	4a05      	ldr	r2, [pc, #20]	; (80063a8 <SDMMC_CmdStopTransfer+0x40>)
 8006394:	210c      	movs	r1, #12
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f998 	bl	80066cc <SDMMC_GetCmdResp1>
 800639c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800639e:	69fb      	ldr	r3, [r7, #28]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	05f5e100 	.word	0x05f5e100

080063ac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08a      	sub	sp, #40	; 0x28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80063bc:	2307      	movs	r3, #7
 80063be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063c0:	2340      	movs	r3, #64	; 0x40
 80063c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063cc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063ce:	f107 0310 	add.w	r3, r7, #16
 80063d2:	4619      	mov	r1, r3
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff fea7 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80063da:	f241 3288 	movw	r2, #5000	; 0x1388
 80063de:	2107      	movs	r1, #7
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f973 	bl	80066cc <SDMMC_GetCmdResp1>
 80063e6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3728      	adds	r7, #40	; 0x28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b088      	sub	sp, #32
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006402:	2300      	movs	r3, #0
 8006404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006406:	2300      	movs	r3, #0
 8006408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800640a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800640e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006410:	f107 0308 	add.w	r3, r7, #8
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff fe86 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f92d 	bl	800667c <SDMMC_GetCmdError>
 8006422:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006424:	69fb      	ldr	r3, [r7, #28]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3720      	adds	r7, #32
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b088      	sub	sp, #32
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006436:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800643a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800643c:	2308      	movs	r3, #8
 800643e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006440:	2340      	movs	r3, #64	; 0x40
 8006442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800644c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800644e:	f107 0308 	add.w	r3, r7, #8
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff fe67 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fb16 	bl	8006a8c <SDMMC_GetCmdResp7>
 8006460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006462:	69fb      	ldr	r3, [r7, #28]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3720      	adds	r7, #32
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800647a:	2337      	movs	r3, #55	; 0x37
 800647c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800647e:	2340      	movs	r3, #64	; 0x40
 8006480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006482:	2300      	movs	r3, #0
 8006484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800648a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800648c:	f107 0308 	add.w	r3, r7, #8
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff fe48 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006498:	f241 3288 	movw	r2, #5000	; 0x1388
 800649c:	2137      	movs	r1, #55	; 0x37
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f914 	bl	80066cc <SDMMC_GetCmdResp1>
 80064a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064a6:	69fb      	ldr	r3, [r7, #28]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3720      	adds	r7, #32
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80064c6:	2329      	movs	r3, #41	; 0x29
 80064c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064ca:	2340      	movs	r3, #64	; 0x40
 80064cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064d8:	f107 0308 	add.w	r3, r7, #8
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fe22 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fa23 	bl	8006930 <SDMMC_GetCmdResp3>
 80064ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064ec:	69fb      	ldr	r3, [r7, #28]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b088      	sub	sp, #32
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006504:	2306      	movs	r3, #6
 8006506:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006508:	2340      	movs	r3, #64	; 0x40
 800650a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006514:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006516:	f107 0308 	add.w	r3, r7, #8
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff fe03 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006522:	f241 3288 	movw	r2, #5000	; 0x1388
 8006526:	2106      	movs	r1, #6
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f8cf 	bl	80066cc <SDMMC_GetCmdResp1>
 800652e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006530:	69fb      	ldr	r3, [r7, #28]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3720      	adds	r7, #32
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b088      	sub	sp, #32
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006546:	2333      	movs	r3, #51	; 0x33
 8006548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800654a:	2340      	movs	r3, #64	; 0x40
 800654c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006556:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006558:	f107 0308 	add.w	r3, r7, #8
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff fde2 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006564:	f241 3288 	movw	r2, #5000	; 0x1388
 8006568:	2133      	movs	r1, #51	; 0x33
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f8ae 	bl	80066cc <SDMMC_GetCmdResp1>
 8006570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006572:	69fb      	ldr	r3, [r7, #28]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006588:	2302      	movs	r3, #2
 800658a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800658c:	23c0      	movs	r3, #192	; 0xc0
 800658e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006598:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800659a:	f107 0308 	add.w	r3, r7, #8
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff fdc1 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f97c 	bl	80068a4 <SDMMC_GetCmdResp2>
 80065ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065ae:	69fb      	ldr	r3, [r7, #28]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3720      	adds	r7, #32
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80065c6:	2309      	movs	r3, #9
 80065c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80065ca:	23c0      	movs	r3, #192	; 0xc0
 80065cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065d8:	f107 0308 	add.w	r3, r7, #8
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff fda2 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f95d 	bl	80068a4 <SDMMC_GetCmdResp2>
 80065ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065ec:	69fb      	ldr	r3, [r7, #28]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b088      	sub	sp, #32
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006604:	2303      	movs	r3, #3
 8006606:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006608:	2340      	movs	r3, #64	; 0x40
 800660a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006614:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006616:	f107 0308 	add.w	r3, r7, #8
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff fd83 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	2103      	movs	r1, #3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f9bc 	bl	80069a4 <SDMMC_GetCmdResp6>
 800662c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800662e:	69fb      	ldr	r3, [r7, #28]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3720      	adds	r7, #32
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006646:	230d      	movs	r3, #13
 8006648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800664a:	2340      	movs	r3, #64	; 0x40
 800664c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006656:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006658:	f107 0308 	add.w	r3, r7, #8
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff fd62 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006664:	f241 3288 	movw	r2, #5000	; 0x1388
 8006668:	210d      	movs	r1, #13
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f82e 	bl	80066cc <SDMMC_GetCmdResp1>
 8006670:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006672:	69fb      	ldr	r3, [r7, #28]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3720      	adds	r7, #32
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800667c:	b490      	push	{r4, r7}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006684:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <SDMMC_GetCmdError+0x48>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a0f      	ldr	r2, [pc, #60]	; (80066c8 <SDMMC_GetCmdError+0x4c>)
 800668a:	fba2 2303 	umull	r2, r3, r2, r3
 800668e:	0a5b      	lsrs	r3, r3, #9
 8006690:	f241 3288 	movw	r2, #5000	; 0x1388
 8006694:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006698:	4623      	mov	r3, r4
 800669a:	1e5c      	subs	r4, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066a4:	e009      	b.n	80066ba <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0f2      	beq.n	8006698 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	22c5      	movs	r2, #197	; 0xc5
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc90      	pop	{r4, r7}
 80066c2:	4770      	bx	lr
 80066c4:	20000014 	.word	0x20000014
 80066c8:	10624dd3 	.word	0x10624dd3

080066cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80066cc:	b590      	push	{r4, r7, lr}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	460b      	mov	r3, r1
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80066da:	4b6f      	ldr	r3, [pc, #444]	; (8006898 <SDMMC_GetCmdResp1+0x1cc>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a6f      	ldr	r2, [pc, #444]	; (800689c <SDMMC_GetCmdResp1+0x1d0>)
 80066e0:	fba2 2303 	umull	r2, r3, r2, r3
 80066e4:	0a5b      	lsrs	r3, r3, #9
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80066ec:	4623      	mov	r3, r4
 80066ee:	1e5c      	subs	r4, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d102      	bne.n	80066fa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066f8:	e0c9      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fe:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f0      	beq.n	80066ec <SDMMC_GetCmdResp1+0x20>
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1eb      	bne.n	80066ec <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d004      	beq.n	800672a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2204      	movs	r2, #4
 8006724:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006726:	2304      	movs	r3, #4
 8006728:	e0b1      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d004      	beq.n	8006740 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800673c:	2301      	movs	r3, #1
 800673e:	e0a6      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	22c5      	movs	r2, #197	; 0xc5
 8006744:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f7ff fd18 	bl	800617c <SDIO_GetCommandResponse>
 800674c:	4603      	mov	r3, r0
 800674e:	461a      	mov	r2, r3
 8006750:	7afb      	ldrb	r3, [r7, #11]
 8006752:	4293      	cmp	r3, r2
 8006754:	d001      	beq.n	800675a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006756:	2301      	movs	r3, #1
 8006758:	e099      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800675a:	2100      	movs	r1, #0
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7ff fd1a 	bl	8006196 <SDIO_GetResponse>
 8006762:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4b4e      	ldr	r3, [pc, #312]	; (80068a0 <SDMMC_GetCmdResp1+0x1d4>)
 8006768:	4013      	ands	r3, r2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800676e:	2300      	movs	r3, #0
 8006770:	e08d      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	da02      	bge.n	800677e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006778:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800677c:	e087      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006788:	2340      	movs	r3, #64	; 0x40
 800678a:	e080      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006796:	2380      	movs	r3, #128	; 0x80
 8006798:	e079      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80067a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067a8:	e071      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80067b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067b8:	e069      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80067c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c8:	e061      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80067d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067d8:	e059      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80067e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067e8:	e051      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80067f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067f8:	e049      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006804:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006808:	e041      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006818:	e039      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006828:	e031      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006834:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006838:	e029      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006844:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006848:	e021      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006854:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006858:	e019      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006864:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006868:	e011      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006874:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006878:	e009      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006884:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006888:	e001      	b.n	800688e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800688a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800688e:	4618      	mov	r0, r3
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	bd90      	pop	{r4, r7, pc}
 8006896:	bf00      	nop
 8006898:	20000014 	.word	0x20000014
 800689c:	10624dd3 	.word	0x10624dd3
 80068a0:	fdffe008 	.word	0xfdffe008

080068a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80068a4:	b490      	push	{r4, r7}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068ac:	4b1e      	ldr	r3, [pc, #120]	; (8006928 <SDMMC_GetCmdResp2+0x84>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a1e      	ldr	r2, [pc, #120]	; (800692c <SDMMC_GetCmdResp2+0x88>)
 80068b2:	fba2 2303 	umull	r2, r3, r2, r3
 80068b6:	0a5b      	lsrs	r3, r3, #9
 80068b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80068c0:	4623      	mov	r3, r4
 80068c2:	1e5c      	subs	r4, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d102      	bne.n	80068ce <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80068c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068cc:	e026      	b.n	800691c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <SDMMC_GetCmdResp2+0x1c>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1eb      	bne.n	80068c0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d004      	beq.n	80068fe <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2204      	movs	r2, #4
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068fa:	2304      	movs	r3, #4
 80068fc:	e00e      	b.n	800691c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d004      	beq.n	8006914 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006910:	2301      	movs	r3, #1
 8006912:	e003      	b.n	800691c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	22c5      	movs	r2, #197	; 0xc5
 8006918:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bc90      	pop	{r4, r7}
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000014 	.word	0x20000014
 800692c:	10624dd3 	.word	0x10624dd3

08006930 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006930:	b490      	push	{r4, r7}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006938:	4b18      	ldr	r3, [pc, #96]	; (800699c <SDMMC_GetCmdResp3+0x6c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a18      	ldr	r2, [pc, #96]	; (80069a0 <SDMMC_GetCmdResp3+0x70>)
 800693e:	fba2 2303 	umull	r2, r3, r2, r3
 8006942:	0a5b      	lsrs	r3, r3, #9
 8006944:	f241 3288 	movw	r2, #5000	; 0x1388
 8006948:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800694c:	4623      	mov	r3, r4
 800694e:	1e5c      	subs	r4, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d102      	bne.n	800695a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006954:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006958:	e01b      	b.n	8006992 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <SDMMC_GetCmdResp3+0x1c>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1eb      	bne.n	800694c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b00      	cmp	r3, #0
 800697e:	d004      	beq.n	800698a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2204      	movs	r2, #4
 8006984:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006986:	2304      	movs	r3, #4
 8006988:	e003      	b.n	8006992 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	22c5      	movs	r2, #197	; 0xc5
 800698e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bc90      	pop	{r4, r7}
 800699a:	4770      	bx	lr
 800699c:	20000014 	.word	0x20000014
 80069a0:	10624dd3 	.word	0x10624dd3

080069a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80069a4:	b590      	push	{r4, r7, lr}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	460b      	mov	r3, r1
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80069b2:	4b34      	ldr	r3, [pc, #208]	; (8006a84 <SDMMC_GetCmdResp6+0xe0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a34      	ldr	r2, [pc, #208]	; (8006a88 <SDMMC_GetCmdResp6+0xe4>)
 80069b8:	fba2 2303 	umull	r2, r3, r2, r3
 80069bc:	0a5b      	lsrs	r3, r3, #9
 80069be:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80069c6:	4623      	mov	r3, r4
 80069c8:	1e5c      	subs	r4, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d102      	bne.n	80069d4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80069ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80069d2:	e052      	b.n	8006a7a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0f0      	beq.n	80069c6 <SDMMC_GetCmdResp6+0x22>
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1eb      	bne.n	80069c6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2204      	movs	r2, #4
 80069fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a00:	2304      	movs	r3, #4
 8006a02:	e03a      	b.n	8006a7a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d004      	beq.n	8006a1a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e02f      	b.n	8006a7a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7ff fbae 	bl	800617c <SDIO_GetCommandResponse>
 8006a20:	4603      	mov	r3, r0
 8006a22:	461a      	mov	r2, r3
 8006a24:	7afb      	ldrb	r3, [r7, #11]
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d001      	beq.n	8006a2e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e025      	b.n	8006a7a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	22c5      	movs	r2, #197	; 0xc5
 8006a32:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006a34:	2100      	movs	r1, #0
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f7ff fbad 	bl	8006196 <SDIO_GetResponse>
 8006a3c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d106      	bne.n	8006a56 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	0c1b      	lsrs	r3, r3, #16
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e011      	b.n	8006a7a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a64:	e009      	b.n	8006a7a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a74:	e001      	b.n	8006a7a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd90      	pop	{r4, r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000014 	.word	0x20000014
 8006a88:	10624dd3 	.word	0x10624dd3

08006a8c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006a8c:	b490      	push	{r4, r7}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a94:	4b21      	ldr	r3, [pc, #132]	; (8006b1c <SDMMC_GetCmdResp7+0x90>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a21      	ldr	r2, [pc, #132]	; (8006b20 <SDMMC_GetCmdResp7+0x94>)
 8006a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9e:	0a5b      	lsrs	r3, r3, #9
 8006aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006aa8:	4623      	mov	r3, r4
 8006aaa:	1e5c      	subs	r4, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d102      	bne.n	8006ab6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ab0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ab4:	e02c      	b.n	8006b10 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0f0      	beq.n	8006aa8 <SDMMC_GetCmdResp7+0x1c>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1eb      	bne.n	8006aa8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d004      	beq.n	8006ae6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2204      	movs	r2, #4
 8006ae0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ae2:	2304      	movs	r3, #4
 8006ae4:	e014      	b.n	8006b10 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d004      	beq.n	8006afc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e009      	b.n	8006b10 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2240      	movs	r2, #64	; 0x40
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006b0e:	2300      	movs	r3, #0
  
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc90      	pop	{r4, r7}
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	20000014 	.word	0x20000014
 8006b20:	10624dd3 	.word	0x10624dd3

08006b24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006b28:	4904      	ldr	r1, [pc, #16]	; (8006b3c <MX_FATFS_Init+0x18>)
 8006b2a:	4805      	ldr	r0, [pc, #20]	; (8006b40 <MX_FATFS_Init+0x1c>)
 8006b2c:	f002 fc00 	bl	8009330 <FATFS_LinkDriver>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <MX_FATFS_Init+0x20>)
 8006b36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b38:	bf00      	nop
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	20008848 	.word	0x20008848
 8006b40:	0800a774 	.word	0x0800a774
 8006b44:	20008844 	.word	0x20008844

08006b48 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006b4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006b62:	f000 f879 	bl	8006c58 <BSP_SD_IsDetected>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d001      	beq.n	8006b70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e012      	b.n	8006b96 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006b70:	480b      	ldr	r0, [pc, #44]	; (8006ba0 <BSP_SD_Init+0x48>)
 8006b72:	f7fd fd73 	bl	800465c <HAL_SD_Init>
 8006b76:	4603      	mov	r3, r0
 8006b78:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d109      	bne.n	8006b94 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006b80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b84:	4806      	ldr	r0, [pc, #24]	; (8006ba0 <BSP_SD_Init+0x48>)
 8006b86:	f7fe fb65 	bl	8005254 <HAL_SD_ConfigWideBusOperation>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006b94:	79fb      	ldrb	r3, [r7, #7]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	200086fc 	.word	0x200086fc

08006ba4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	68f9      	ldr	r1, [r7, #12]
 8006bc0:	4806      	ldr	r0, [pc, #24]	; (8006bdc <BSP_SD_ReadBlocks+0x38>)
 8006bc2:	f7fd fddb 	bl	800477c <HAL_SD_ReadBlocks>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	200086fc 	.word	0x200086fc

08006be0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	4806      	ldr	r0, [pc, #24]	; (8006c18 <BSP_SD_WriteBlocks+0x38>)
 8006bfe:	f7fd ffb7 	bl	8004b70 <HAL_SD_WriteBlocks>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	200086fc 	.word	0x200086fc

08006c1c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006c20:	4805      	ldr	r0, [pc, #20]	; (8006c38 <BSP_SD_GetCardState+0x1c>)
 8006c22:	f7fe fb93 	bl	800534c <HAL_SD_GetCardState>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	bf14      	ite	ne
 8006c2c:	2301      	movne	r3, #1
 8006c2e:	2300      	moveq	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	200086fc 	.word	0x200086fc

08006c3c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	4803      	ldr	r0, [pc, #12]	; (8006c54 <BSP_SD_GetCardInfo+0x18>)
 8006c48:	f7fe fad8 	bl	80051fc <HAL_SD_GetCardInfo>
}
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	200086fc 	.word	0x200086fc

08006c58 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006c62:	f000 f80b 	bl	8006c7c <BSP_PlatformIsDetected>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006c70:	79fb      	ldrb	r3, [r7, #7]
 8006c72:	b2db      	uxtb	r3, r3
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006c82:	2301      	movs	r3, #1
 8006c84:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c8a:	4806      	ldr	r0, [pc, #24]	; (8006ca4 <BSP_PlatformIsDetected+0x28>)
 8006c8c:	f7fc f836 	bl	8002cfc <HAL_GPIO_ReadPin>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006c96:	2300      	movs	r3, #0
 8006c98:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	40020000 	.word	0x40020000

08006ca8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006cb2:	4b0b      	ldr	r3, [pc, #44]	; (8006ce0 <SD_CheckStatus+0x38>)
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006cb8:	f7ff ffb0 	bl	8006c1c <BSP_SD_GetCardState>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d107      	bne.n	8006cd2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006cc2:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <SD_CheckStatus+0x38>)
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	f023 0301 	bic.w	r3, r3, #1
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	4b04      	ldr	r3, [pc, #16]	; (8006ce0 <SD_CheckStatus+0x38>)
 8006cd0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006cd2:	4b03      	ldr	r3, [pc, #12]	; (8006ce0 <SD_CheckStatus+0x38>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	b2db      	uxtb	r3, r3
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	2000001d 	.word	0x2000001d

08006ce4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	4603      	mov	r3, r0
 8006cec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <SD_initialize+0x38>)
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006cf4:	f7ff ff30 	bl	8006b58 <BSP_SD_Init>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d107      	bne.n	8006d0e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff ffd1 	bl	8006ca8 <SD_CheckStatus>
 8006d06:	4603      	mov	r3, r0
 8006d08:	461a      	mov	r2, r3
 8006d0a:	4b04      	ldr	r3, [pc, #16]	; (8006d1c <SD_initialize+0x38>)
 8006d0c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006d0e:	4b03      	ldr	r3, [pc, #12]	; (8006d1c <SD_initialize+0x38>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	b2db      	uxtb	r3, r3
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	2000001d 	.word	0x2000001d

08006d20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	4603      	mov	r3, r0
 8006d28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006d2a:	79fb      	ldrb	r3, [r7, #7]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff ffbb 	bl	8006ca8 <SD_CheckStatus>
 8006d32:	4603      	mov	r3, r0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	603b      	str	r3, [r7, #0]
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	68b8      	ldr	r0, [r7, #8]
 8006d5a:	f7ff ff23 	bl	8006ba4 <BSP_SD_ReadBlocks>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d107      	bne.n	8006d74 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006d64:	bf00      	nop
 8006d66:	f7ff ff59 	bl	8006c1c <BSP_SD_GetCardState>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1fa      	bne.n	8006d66 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b086      	sub	sp, #24
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	68b8      	ldr	r0, [r7, #8]
 8006d9c:	f7ff ff20 	bl	8006be0 <BSP_SD_WriteBlocks>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d107      	bne.n	8006db6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006da6:	bf00      	nop
 8006da8:	f7ff ff38 	bl	8006c1c <BSP_SD_GetCardState>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1fa      	bne.n	8006da8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08c      	sub	sp, #48	; 0x30
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	603a      	str	r2, [r7, #0]
 8006dca:	71fb      	strb	r3, [r7, #7]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006dd6:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <SD_ioctl+0xac>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <SD_ioctl+0x28>
 8006de4:	2303      	movs	r3, #3
 8006de6:	e03c      	b.n	8006e62 <SD_ioctl+0xa2>

  switch (cmd)
 8006de8:	79bb      	ldrb	r3, [r7, #6]
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d834      	bhi.n	8006e58 <SD_ioctl+0x98>
 8006dee:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <SD_ioctl+0x34>)
 8006df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df4:	08006e05 	.word	0x08006e05
 8006df8:	08006e0d 	.word	0x08006e0d
 8006dfc:	08006e25 	.word	0x08006e25
 8006e00:	08006e3f 	.word	0x08006e3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006e0a:	e028      	b.n	8006e5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e0c:	f107 030c 	add.w	r3, r7, #12
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff ff13 	bl	8006c3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006e22:	e01c      	b.n	8006e5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e24:	f107 030c 	add.w	r3, r7, #12
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7ff ff07 	bl	8006c3c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006e3c:	e00f      	b.n	8006e5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e3e:	f107 030c 	add.w	r3, r7, #12
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff fefa 	bl	8006c3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	0a5a      	lsrs	r2, r3, #9
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006e56:	e002      	b.n	8006e5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006e58:	2304      	movs	r3, #4
 8006e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3730      	adds	r7, #48	; 0x30
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	2000001d 	.word	0x2000001d

08006e70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	4a08      	ldr	r2, [pc, #32]	; (8006ea0 <disk_status+0x30>)
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	79fa      	ldrb	r2, [r7, #7]
 8006e88:	4905      	ldr	r1, [pc, #20]	; (8006ea0 <disk_status+0x30>)
 8006e8a:	440a      	add	r2, r1
 8006e8c:	7a12      	ldrb	r2, [r2, #8]
 8006e8e:	4610      	mov	r0, r2
 8006e90:	4798      	blx	r3
 8006e92:	4603      	mov	r3, r0
 8006e94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	200000d4 	.word	0x200000d4

08006ea4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	4603      	mov	r3, r0
 8006eac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	4a0d      	ldr	r2, [pc, #52]	; (8006eec <disk_initialize+0x48>)
 8006eb6:	5cd3      	ldrb	r3, [r2, r3]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d111      	bne.n	8006ee0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	4a0b      	ldr	r2, [pc, #44]	; (8006eec <disk_initialize+0x48>)
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	4a09      	ldr	r2, [pc, #36]	; (8006eec <disk_initialize+0x48>)
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	79fa      	ldrb	r2, [r7, #7]
 8006ed2:	4906      	ldr	r1, [pc, #24]	; (8006eec <disk_initialize+0x48>)
 8006ed4:	440a      	add	r2, r1
 8006ed6:	7a12      	ldrb	r2, [r2, #8]
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4798      	blx	r3
 8006edc:	4603      	mov	r3, r0
 8006ede:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	200000d4 	.word	0x200000d4

08006ef0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006ef0:	b590      	push	{r4, r7, lr}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	607a      	str	r2, [r7, #4]
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <disk_read+0x3c>)
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	689c      	ldr	r4, [r3, #8]
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	4a07      	ldr	r2, [pc, #28]	; (8006f2c <disk_read+0x3c>)
 8006f10:	4413      	add	r3, r2
 8006f12:	7a18      	ldrb	r0, [r3, #8]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	47a0      	blx	r4
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd90      	pop	{r4, r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	200000d4 	.word	0x200000d4

08006f30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006f30:	b590      	push	{r4, r7, lr}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	4a0a      	ldr	r2, [pc, #40]	; (8006f6c <disk_write+0x3c>)
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	68dc      	ldr	r4, [r3, #12]
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
 8006f4e:	4a07      	ldr	r2, [pc, #28]	; (8006f6c <disk_write+0x3c>)
 8006f50:	4413      	add	r3, r2
 8006f52:	7a18      	ldrb	r0, [r3, #8]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	68b9      	ldr	r1, [r7, #8]
 8006f5a:	47a0      	blx	r4
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd90      	pop	{r4, r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	200000d4 	.word	0x200000d4

08006f70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	4603      	mov	r3, r0
 8006f78:	603a      	str	r2, [r7, #0]
 8006f7a:	71fb      	strb	r3, [r7, #7]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	4a09      	ldr	r2, [pc, #36]	; (8006fa8 <disk_ioctl+0x38>)
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	79fa      	ldrb	r2, [r7, #7]
 8006f8e:	4906      	ldr	r1, [pc, #24]	; (8006fa8 <disk_ioctl+0x38>)
 8006f90:	440a      	add	r2, r1
 8006f92:	7a10      	ldrb	r0, [r2, #8]
 8006f94:	79b9      	ldrb	r1, [r7, #6]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	4798      	blx	r3
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	200000d4 	.word	0x200000d4

08006fac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006fbc:	89fb      	ldrh	r3, [r7, #14]
 8006fbe:	021b      	lsls	r3, r3, #8
 8006fc0:	b21a      	sxth	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	b21b      	sxth	r3, r3
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	b21b      	sxth	r3, r3
 8006fcc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006fce:	89fb      	ldrh	r3, [r7, #14]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3303      	adds	r3, #3
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	3202      	adds	r2, #2
 8006ff4:	7812      	ldrb	r2, [r2, #0]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	3201      	adds	r2, #1
 8007002:	7812      	ldrb	r2, [r2, #0]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	021b      	lsls	r3, r3, #8
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	7812      	ldrb	r2, [r2, #0]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
	return rv;
 8007014:	68fb      	ldr	r3, [r7, #12]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	460b      	mov	r3, r1
 800702c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	887a      	ldrh	r2, [r7, #2]
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	887b      	ldrh	r3, [r7, #2]
 800703c:	0a1b      	lsrs	r3, r3, #8
 800703e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	607a      	str	r2, [r7, #4]
 8007046:	887a      	ldrh	r2, [r7, #2]
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	701a      	strb	r2, [r3, #0]
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	0a1b      	lsrs	r3, r3, #8
 8007072:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	607a      	str	r2, [r7, #4]
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	0a1b      	lsrs	r3, r3, #8
 8007084:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	0a1b      	lsrs	r3, r3, #8
 8007096:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	607a      	str	r2, [r7, #4]
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	701a      	strb	r2, [r3, #0]
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00d      	beq.n	80070e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	1c53      	adds	r3, r2, #1
 80070ce:	613b      	str	r3, [r7, #16]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	1c59      	adds	r1, r3, #1
 80070d4:	6179      	str	r1, [r7, #20]
 80070d6:	7812      	ldrb	r2, [r2, #0]
 80070d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3b01      	subs	r3, #1
 80070de:	607b      	str	r3, [r7, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f1      	bne.n	80070ca <mem_cpy+0x1a>
	}
}
 80070e6:	bf00      	nop
 80070e8:	371c      	adds	r7, #28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80070f2:	b480      	push	{r7}
 80070f4:	b087      	sub	sp, #28
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	617a      	str	r2, [r7, #20]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3b01      	subs	r3, #1
 8007112:	607b      	str	r3, [r7, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1f3      	bne.n	8007102 <mem_set+0x10>
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007126:	b480      	push	{r7}
 8007128:	b089      	sub	sp, #36	; 0x24
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	61fa      	str	r2, [r7, #28]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	4619      	mov	r1, r3
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	61ba      	str	r2, [r7, #24]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	1acb      	subs	r3, r1, r3
 8007152:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3b01      	subs	r3, #1
 8007158:	607b      	str	r3, [r7, #4]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <mem_cmp+0x40>
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0eb      	beq.n	800713e <mem_cmp+0x18>

	return r;
 8007166:	697b      	ldr	r3, [r7, #20]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3724      	adds	r7, #36	; 0x24
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800717e:	e002      	b.n	8007186 <chk_chr+0x12>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3301      	adds	r3, #1
 8007184:	607b      	str	r3, [r7, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <chk_chr+0x26>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	4293      	cmp	r3, r2
 8007198:	d1f2      	bne.n	8007180 <chk_chr+0xc>
	return *str;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	781b      	ldrb	r3, [r3, #0]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
	...

080071ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	e029      	b.n	8007214 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80071c0:	4a27      	ldr	r2, [pc, #156]	; (8007260 <chk_lock+0xb4>)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	4413      	add	r3, r2
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d01d      	beq.n	800720a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80071ce:	4a24      	ldr	r2, [pc, #144]	; (8007260 <chk_lock+0xb4>)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	4413      	add	r3, r2
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d116      	bne.n	800720e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80071e0:	4a1f      	ldr	r2, [pc, #124]	; (8007260 <chk_lock+0xb4>)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	4413      	add	r3, r2
 80071e8:	3304      	adds	r3, #4
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d10c      	bne.n	800720e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80071f4:	4a1a      	ldr	r2, [pc, #104]	; (8007260 <chk_lock+0xb4>)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	011b      	lsls	r3, r3, #4
 80071fa:	4413      	add	r3, r2
 80071fc:	3308      	adds	r3, #8
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007204:	429a      	cmp	r2, r3
 8007206:	d102      	bne.n	800720e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007208:	e007      	b.n	800721a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800720a:	2301      	movs	r3, #1
 800720c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3301      	adds	r3, #1
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d9d2      	bls.n	80071c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d109      	bne.n	8007234 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d102      	bne.n	800722c <chk_lock+0x80>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b02      	cmp	r3, #2
 800722a:	d101      	bne.n	8007230 <chk_lock+0x84>
 800722c:	2300      	movs	r3, #0
 800722e:	e010      	b.n	8007252 <chk_lock+0xa6>
 8007230:	2312      	movs	r3, #18
 8007232:	e00e      	b.n	8007252 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d108      	bne.n	800724c <chk_lock+0xa0>
 800723a:	4a09      	ldr	r2, [pc, #36]	; (8007260 <chk_lock+0xb4>)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	4413      	add	r3, r2
 8007242:	330c      	adds	r3, #12
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800724a:	d101      	bne.n	8007250 <chk_lock+0xa4>
 800724c:	2310      	movs	r3, #16
 800724e:	e000      	b.n	8007252 <chk_lock+0xa6>
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	200000b4 	.word	0x200000b4

08007264 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800726a:	2300      	movs	r3, #0
 800726c:	607b      	str	r3, [r7, #4]
 800726e:	e002      	b.n	8007276 <enq_lock+0x12>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3301      	adds	r3, #1
 8007274:	607b      	str	r3, [r7, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d806      	bhi.n	800728a <enq_lock+0x26>
 800727c:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <enq_lock+0x40>)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	4413      	add	r3, r2
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f2      	bne.n	8007270 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b02      	cmp	r3, #2
 800728e:	bf14      	ite	ne
 8007290:	2301      	movne	r3, #1
 8007292:	2300      	moveq	r3, #0
 8007294:	b2db      	uxtb	r3, r3
}
 8007296:	4618      	mov	r0, r3
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	200000b4 	.word	0x200000b4

080072a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	e01f      	b.n	80072f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80072b8:	4a41      	ldr	r2, [pc, #260]	; (80073c0 <inc_lock+0x118>)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	4413      	add	r3, r2
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d113      	bne.n	80072f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80072ca:	4a3d      	ldr	r2, [pc, #244]	; (80073c0 <inc_lock+0x118>)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	4413      	add	r3, r2
 80072d2:	3304      	adds	r3, #4
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80072da:	429a      	cmp	r2, r3
 80072dc:	d109      	bne.n	80072f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80072de:	4a38      	ldr	r2, [pc, #224]	; (80073c0 <inc_lock+0x118>)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	4413      	add	r3, r2
 80072e6:	3308      	adds	r3, #8
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d006      	beq.n	8007300 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3301      	adds	r3, #1
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d9dc      	bls.n	80072b8 <inc_lock+0x10>
 80072fe:	e000      	b.n	8007302 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007300:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b02      	cmp	r3, #2
 8007306:	d132      	bne.n	800736e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	e002      	b.n	8007314 <inc_lock+0x6c>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3301      	adds	r3, #1
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d806      	bhi.n	8007328 <inc_lock+0x80>
 800731a:	4a29      	ldr	r2, [pc, #164]	; (80073c0 <inc_lock+0x118>)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	4413      	add	r3, r2
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1f2      	bne.n	800730e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b02      	cmp	r3, #2
 800732c:	d101      	bne.n	8007332 <inc_lock+0x8a>
 800732e:	2300      	movs	r3, #0
 8007330:	e040      	b.n	80073b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	4922      	ldr	r1, [pc, #136]	; (80073c0 <inc_lock+0x118>)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	440b      	add	r3, r1
 800733e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	491e      	ldr	r1, [pc, #120]	; (80073c0 <inc_lock+0x118>)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	011b      	lsls	r3, r3, #4
 800734a:	440b      	add	r3, r1
 800734c:	3304      	adds	r3, #4
 800734e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	695a      	ldr	r2, [r3, #20]
 8007354:	491a      	ldr	r1, [pc, #104]	; (80073c0 <inc_lock+0x118>)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	440b      	add	r3, r1
 800735c:	3308      	adds	r3, #8
 800735e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007360:	4a17      	ldr	r2, [pc, #92]	; (80073c0 <inc_lock+0x118>)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	4413      	add	r3, r2
 8007368:	330c      	adds	r3, #12
 800736a:	2200      	movs	r2, #0
 800736c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d009      	beq.n	8007388 <inc_lock+0xe0>
 8007374:	4a12      	ldr	r2, [pc, #72]	; (80073c0 <inc_lock+0x118>)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	4413      	add	r3, r2
 800737c:	330c      	adds	r3, #12
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <inc_lock+0xe0>
 8007384:	2300      	movs	r3, #0
 8007386:	e015      	b.n	80073b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d108      	bne.n	80073a0 <inc_lock+0xf8>
 800738e:	4a0c      	ldr	r2, [pc, #48]	; (80073c0 <inc_lock+0x118>)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	4413      	add	r3, r2
 8007396:	330c      	adds	r3, #12
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	3301      	adds	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	e001      	b.n	80073a4 <inc_lock+0xfc>
 80073a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073a4:	4906      	ldr	r1, [pc, #24]	; (80073c0 <inc_lock+0x118>)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	440b      	add	r3, r1
 80073ac:	330c      	adds	r3, #12
 80073ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3301      	adds	r3, #1
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	200000b4 	.word	0x200000b4

080073c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	607b      	str	r3, [r7, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d825      	bhi.n	8007424 <dec_lock+0x60>
		n = Files[i].ctr;
 80073d8:	4a17      	ldr	r2, [pc, #92]	; (8007438 <dec_lock+0x74>)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	4413      	add	r3, r2
 80073e0:	330c      	adds	r3, #12
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80073e6:	89fb      	ldrh	r3, [r7, #14]
 80073e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ec:	d101      	bne.n	80073f2 <dec_lock+0x2e>
 80073ee:	2300      	movs	r3, #0
 80073f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80073f2:	89fb      	ldrh	r3, [r7, #14]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <dec_lock+0x3a>
 80073f8:	89fb      	ldrh	r3, [r7, #14]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80073fe:	4a0e      	ldr	r2, [pc, #56]	; (8007438 <dec_lock+0x74>)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	4413      	add	r3, r2
 8007406:	330c      	adds	r3, #12
 8007408:	89fa      	ldrh	r2, [r7, #14]
 800740a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800740c:	89fb      	ldrh	r3, [r7, #14]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d105      	bne.n	800741e <dec_lock+0x5a>
 8007412:	4a09      	ldr	r2, [pc, #36]	; (8007438 <dec_lock+0x74>)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	4413      	add	r3, r2
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	737b      	strb	r3, [r7, #13]
 8007422:	e001      	b.n	8007428 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007424:	2302      	movs	r3, #2
 8007426:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007428:	7b7b      	ldrb	r3, [r7, #13]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	200000b4 	.word	0x200000b4

0800743c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	e010      	b.n	800746c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800744a:	4a0d      	ldr	r2, [pc, #52]	; (8007480 <clear_lock+0x44>)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	4413      	add	r3, r2
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	429a      	cmp	r2, r3
 8007458:	d105      	bne.n	8007466 <clear_lock+0x2a>
 800745a:	4a09      	ldr	r2, [pc, #36]	; (8007480 <clear_lock+0x44>)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	011b      	lsls	r3, r3, #4
 8007460:	4413      	add	r3, r2
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3301      	adds	r3, #1
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d9eb      	bls.n	800744a <clear_lock+0xe>
	}
}
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	200000b4 	.word	0x200000b4

08007484 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	78db      	ldrb	r3, [r3, #3]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d034      	beq.n	8007502 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	7858      	ldrb	r0, [r3, #1]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80074a8:	2301      	movs	r3, #1
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	f7ff fd40 	bl	8006f30 <disk_write>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <sync_window+0x38>
			res = FR_DISK_ERR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	73fb      	strb	r3, [r7, #15]
 80074ba:	e022      	b.n	8007502 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	1ad2      	subs	r2, r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d217      	bcs.n	8007502 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	789b      	ldrb	r3, [r3, #2]
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	e010      	b.n	80074fc <sync_window+0x78>
					wsect += fs->fsize;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	4413      	add	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	7858      	ldrb	r0, [r3, #1]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80074ee:	2301      	movs	r3, #1
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	f7ff fd1d 	bl	8006f30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	613b      	str	r3, [r7, #16]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d8eb      	bhi.n	80074da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007502:	7bfb      	ldrb	r3, [r7, #15]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	429a      	cmp	r2, r3
 8007522:	d01b      	beq.n	800755c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff ffad 	bl	8007484 <sync_window>
 800752a:	4603      	mov	r3, r0
 800752c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800752e:	7bfb      	ldrb	r3, [r7, #15]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d113      	bne.n	800755c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	7858      	ldrb	r0, [r3, #1]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800753e:	2301      	movs	r3, #1
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	f7ff fcd5 	bl	8006ef0 <disk_read>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d004      	beq.n	8007556 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800754c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007550:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007552:	2301      	movs	r3, #1
 8007554:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	683a      	ldr	r2, [r7, #0]
 800755a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800755c:	7bfb      	ldrb	r3, [r7, #15]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff ff87 	bl	8007484 <sync_window>
 8007576:	4603      	mov	r3, r0
 8007578:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d158      	bne.n	8007632 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b03      	cmp	r3, #3
 8007586:	d148      	bne.n	800761a <sync_fs+0xb2>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	791b      	ldrb	r3, [r3, #4]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d144      	bne.n	800761a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3330      	adds	r3, #48	; 0x30
 8007594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007598:	2100      	movs	r1, #0
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff fda9 	bl	80070f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3330      	adds	r3, #48	; 0x30
 80075a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80075a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fd38 	bl	8007022 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3330      	adds	r3, #48	; 0x30
 80075b6:	4921      	ldr	r1, [pc, #132]	; (800763c <sync_fs+0xd4>)
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fd4d 	bl	8007058 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	3330      	adds	r3, #48	; 0x30
 80075c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80075c6:	491e      	ldr	r1, [pc, #120]	; (8007640 <sync_fs+0xd8>)
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff fd45 	bl	8007058 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3330      	adds	r3, #48	; 0x30
 80075d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	4619      	mov	r1, r3
 80075dc:	4610      	mov	r0, r2
 80075de:	f7ff fd3b 	bl	8007058 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3330      	adds	r3, #48	; 0x30
 80075e6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	4619      	mov	r1, r3
 80075f0:	4610      	mov	r0, r2
 80075f2:	f7ff fd31 	bl	8007058 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	7858      	ldrb	r0, [r3, #1]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760e:	2301      	movs	r3, #1
 8007610:	f7ff fc8e 	bl	8006f30 <disk_write>
			fs->fsi_flag = 0;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	785b      	ldrb	r3, [r3, #1]
 800761e:	2200      	movs	r2, #0
 8007620:	2100      	movs	r1, #0
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff fca4 	bl	8006f70 <disk_ioctl>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <sync_fs+0xca>
 800762e:	2301      	movs	r3, #1
 8007630:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007632:	7bfb      	ldrb	r3, [r7, #15]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	41615252 	.word	0x41615252
 8007640:	61417272 	.word	0x61417272

08007644 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	3b02      	subs	r3, #2
 8007652:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	3b02      	subs	r3, #2
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d301      	bcc.n	8007664 <clust2sect+0x20>
 8007660:	2300      	movs	r3, #0
 8007662:	e008      	b.n	8007676 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	895b      	ldrh	r3, [r3, #10]
 8007668:	461a      	mov	r2, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	fb03 f202 	mul.w	r2, r3, r2
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	4413      	add	r3, r2
}
 8007676:	4618      	mov	r0, r3
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d904      	bls.n	80076a2 <get_fat+0x20>
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d302      	bcc.n	80076a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80076a2:	2301      	movs	r3, #1
 80076a4:	617b      	str	r3, [r7, #20]
 80076a6:	e08c      	b.n	80077c2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80076a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d045      	beq.n	8007742 <get_fat+0xc0>
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d05d      	beq.n	8007776 <get_fat+0xf4>
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d177      	bne.n	80077ae <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	085b      	lsrs	r3, r3, #1
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4413      	add	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	6a1a      	ldr	r2, [r3, #32]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	0a5b      	lsrs	r3, r3, #9
 80076d4:	4413      	add	r3, r2
 80076d6:	4619      	mov	r1, r3
 80076d8:	6938      	ldr	r0, [r7, #16]
 80076da:	f7ff ff17 	bl	800750c <move_window>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d167      	bne.n	80077b4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	60fa      	str	r2, [r7, #12]
 80076ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	4413      	add	r3, r2
 80076f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076f6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	6a1a      	ldr	r2, [r3, #32]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	0a5b      	lsrs	r3, r3, #9
 8007700:	4413      	add	r3, r2
 8007702:	4619      	mov	r1, r3
 8007704:	6938      	ldr	r0, [r7, #16]
 8007706:	f7ff ff01 	bl	800750c <move_window>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d153      	bne.n	80077b8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4413      	add	r3, r2
 800771a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800771e:	021b      	lsls	r3, r3, #8
 8007720:	461a      	mov	r2, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	4313      	orrs	r3, r2
 8007726:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <get_fat+0xb6>
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	091b      	lsrs	r3, r3, #4
 8007736:	e002      	b.n	800773e <get_fat+0xbc>
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800773e:	617b      	str	r3, [r7, #20]
			break;
 8007740:	e03f      	b.n	80077c2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	6a1a      	ldr	r2, [r3, #32]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	0a1b      	lsrs	r3, r3, #8
 800774a:	4413      	add	r3, r2
 800774c:	4619      	mov	r1, r3
 800774e:	6938      	ldr	r0, [r7, #16]
 8007750:	f7ff fedc 	bl	800750c <move_window>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d130      	bne.n	80077bc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007768:	4413      	add	r3, r2
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fc1e 	bl	8006fac <ld_word>
 8007770:	4603      	mov	r3, r0
 8007772:	617b      	str	r3, [r7, #20]
			break;
 8007774:	e025      	b.n	80077c2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	6a1a      	ldr	r2, [r3, #32]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	09db      	lsrs	r3, r3, #7
 800777e:	4413      	add	r3, r2
 8007780:	4619      	mov	r1, r3
 8007782:	6938      	ldr	r0, [r7, #16]
 8007784:	f7ff fec2 	bl	800750c <move_window>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d118      	bne.n	80077c0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800779c:	4413      	add	r3, r2
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff fc1c 	bl	8006fdc <ld_dword>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80077aa:	617b      	str	r3, [r7, #20]
			break;
 80077ac:	e009      	b.n	80077c2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80077ae:	2301      	movs	r3, #1
 80077b0:	617b      	str	r3, [r7, #20]
 80077b2:	e006      	b.n	80077c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077b4:	bf00      	nop
 80077b6:	e004      	b.n	80077c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077b8:	bf00      	nop
 80077ba:	e002      	b.n	80077c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80077bc:	bf00      	nop
 80077be:	e000      	b.n	80077c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80077c0:	bf00      	nop
		}
	}

	return val;
 80077c2:	697b      	ldr	r3, [r7, #20]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80077cc:	b590      	push	{r4, r7, lr}
 80077ce:	b089      	sub	sp, #36	; 0x24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80077d8:	2302      	movs	r3, #2
 80077da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	f240 80d6 	bls.w	8007990 <put_fat+0x1c4>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	f080 80d0 	bcs.w	8007990 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d073      	beq.n	80078e0 <put_fat+0x114>
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	f000 8091 	beq.w	8007920 <put_fat+0x154>
 80077fe:	2b01      	cmp	r3, #1
 8007800:	f040 80c6 	bne.w	8007990 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	61bb      	str	r3, [r7, #24]
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	4413      	add	r3, r2
 8007810:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6a1a      	ldr	r2, [r3, #32]
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	0a5b      	lsrs	r3, r3, #9
 800781a:	4413      	add	r3, r2
 800781c:	4619      	mov	r1, r3
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7ff fe74 	bl	800750c <move_window>
 8007824:	4603      	mov	r3, r0
 8007826:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007828:	7ffb      	ldrb	r3, [r7, #31]
 800782a:	2b00      	cmp	r3, #0
 800782c:	f040 80a9 	bne.w	8007982 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	1c59      	adds	r1, r3, #1
 800783a:	61b9      	str	r1, [r7, #24]
 800783c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007840:	4413      	add	r3, r2
 8007842:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00d      	beq.n	800786a <put_fat+0x9e>
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	b25b      	sxtb	r3, r3
 8007854:	f003 030f 	and.w	r3, r3, #15
 8007858:	b25a      	sxtb	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	b25b      	sxtb	r3, r3
 8007862:	4313      	orrs	r3, r2
 8007864:	b25b      	sxtb	r3, r3
 8007866:	b2db      	uxtb	r3, r3
 8007868:	e001      	b.n	800786e <put_fat+0xa2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2201      	movs	r2, #1
 8007876:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6a1a      	ldr	r2, [r3, #32]
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	0a5b      	lsrs	r3, r3, #9
 8007880:	4413      	add	r3, r2
 8007882:	4619      	mov	r1, r3
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f7ff fe41 	bl	800750c <move_window>
 800788a:	4603      	mov	r3, r0
 800788c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800788e:	7ffb      	ldrb	r3, [r7, #31]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d178      	bne.n	8007986 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a0:	4413      	add	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <put_fat+0xea>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	091b      	lsrs	r3, r3, #4
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	e00e      	b.n	80078d4 <put_fat+0x108>
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	b25b      	sxtb	r3, r3
 80078bc:	f023 030f 	bic.w	r3, r3, #15
 80078c0:	b25a      	sxtb	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	0a1b      	lsrs	r3, r3, #8
 80078c6:	b25b      	sxtb	r3, r3
 80078c8:	f003 030f 	and.w	r3, r3, #15
 80078cc:	b25b      	sxtb	r3, r3
 80078ce:	4313      	orrs	r3, r2
 80078d0:	b25b      	sxtb	r3, r3
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	70da      	strb	r2, [r3, #3]
			break;
 80078de:	e057      	b.n	8007990 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a1a      	ldr	r2, [r3, #32]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	0a1b      	lsrs	r3, r3, #8
 80078e8:	4413      	add	r3, r2
 80078ea:	4619      	mov	r1, r3
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f7ff fe0d 	bl	800750c <move_window>
 80078f2:	4603      	mov	r3, r0
 80078f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80078f6:	7ffb      	ldrb	r3, [r7, #31]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d146      	bne.n	800798a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800790a:	4413      	add	r3, r2
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	b292      	uxth	r2, r2
 8007910:	4611      	mov	r1, r2
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff fb85 	bl	8007022 <st_word>
			fs->wflag = 1;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	70da      	strb	r2, [r3, #3]
			break;
 800791e:	e037      	b.n	8007990 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6a1a      	ldr	r2, [r3, #32]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	09db      	lsrs	r3, r3, #7
 8007928:	4413      	add	r3, r2
 800792a:	4619      	mov	r1, r3
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f7ff fded 	bl	800750c <move_window>
 8007932:	4603      	mov	r3, r0
 8007934:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007936:	7ffb      	ldrb	r3, [r7, #31]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d128      	bne.n	800798e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007950:	4413      	add	r3, r2
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff fb42 	bl	8006fdc <ld_dword>
 8007958:	4603      	mov	r3, r0
 800795a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800795e:	4323      	orrs	r3, r4
 8007960:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007970:	4413      	add	r3, r2
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fb6f 	bl	8007058 <st_dword>
			fs->wflag = 1;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	70da      	strb	r2, [r3, #3]
			break;
 8007980:	e006      	b.n	8007990 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007982:	bf00      	nop
 8007984:	e004      	b.n	8007990 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007986:	bf00      	nop
 8007988:	e002      	b.n	8007990 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800798a:	bf00      	nop
 800798c:	e000      	b.n	8007990 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800798e:	bf00      	nop
		}
	}
	return res;
 8007990:	7ffb      	ldrb	r3, [r7, #31]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3724      	adds	r7, #36	; 0x24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd90      	pop	{r4, r7, pc}

0800799a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b088      	sub	sp, #32
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d904      	bls.n	80079c0 <remove_chain+0x26>
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d301      	bcc.n	80079c4 <remove_chain+0x2a>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e04b      	b.n	8007a5c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00c      	beq.n	80079e4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80079ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	69b8      	ldr	r0, [r7, #24]
 80079d2:	f7ff fefb 	bl	80077cc <put_fat>
 80079d6:	4603      	mov	r3, r0
 80079d8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80079da:	7ffb      	ldrb	r3, [r7, #31]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <remove_chain+0x4a>
 80079e0:	7ffb      	ldrb	r3, [r7, #31]
 80079e2:	e03b      	b.n	8007a5c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80079e4:	68b9      	ldr	r1, [r7, #8]
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7ff fe4b 	bl	8007682 <get_fat>
 80079ec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d031      	beq.n	8007a58 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <remove_chain+0x64>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e02e      	b.n	8007a5c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a04:	d101      	bne.n	8007a0a <remove_chain+0x70>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e028      	b.n	8007a5c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	68b9      	ldr	r1, [r7, #8]
 8007a0e:	69b8      	ldr	r0, [r7, #24]
 8007a10:	f7ff fedc 	bl	80077cc <put_fat>
 8007a14:	4603      	mov	r3, r0
 8007a16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007a18:	7ffb      	ldrb	r3, [r7, #31]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <remove_chain+0x88>
 8007a1e:	7ffb      	ldrb	r3, [r7, #31]
 8007a20:	e01c      	b.n	8007a5c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	691a      	ldr	r2, [r3, #16]
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	3b02      	subs	r3, #2
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d20b      	bcs.n	8007a48 <remove_chain+0xae>
			fs->free_clst++;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	1c5a      	adds	r2, r3, #1
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	791b      	ldrb	r3, [r3, #4]
 8007a3e:	f043 0301 	orr.w	r3, r3, #1
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d3c6      	bcc.n	80079e4 <remove_chain+0x4a>
 8007a56:	e000      	b.n	8007a5a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007a58:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3720      	adds	r7, #32
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10d      	bne.n	8007a96 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <create_chain+0x2c>
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d31b      	bcc.n	8007ac8 <create_chain+0x64>
 8007a90:	2301      	movs	r3, #1
 8007a92:	61bb      	str	r3, [r7, #24]
 8007a94:	e018      	b.n	8007ac8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff fdf2 	bl	8007682 <get_fat>
 8007a9e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d801      	bhi.n	8007aaa <create_chain+0x46>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e070      	b.n	8007b8c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab0:	d101      	bne.n	8007ab6 <create_chain+0x52>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	e06a      	b.n	8007b8c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d201      	bcs.n	8007ac4 <create_chain+0x60>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	e063      	b.n	8007b8c <create_chain+0x128>
		scl = clst;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d307      	bcc.n	8007aec <create_chain+0x88>
				ncl = 2;
 8007adc:	2302      	movs	r3, #2
 8007ade:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007ae0:	69fa      	ldr	r2, [r7, #28]
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d901      	bls.n	8007aec <create_chain+0x88>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e04f      	b.n	8007b8c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007aec:	69f9      	ldr	r1, [r7, #28]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff fdc7 	bl	8007682 <get_fat>
 8007af4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00e      	beq.n	8007b1a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d003      	beq.n	8007b0a <create_chain+0xa6>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b08:	d101      	bne.n	8007b0e <create_chain+0xaa>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	e03e      	b.n	8007b8c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d1da      	bne.n	8007acc <create_chain+0x68>
 8007b16:	2300      	movs	r3, #0
 8007b18:	e038      	b.n	8007b8c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007b1a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b20:	69f9      	ldr	r1, [r7, #28]
 8007b22:	6938      	ldr	r0, [r7, #16]
 8007b24:	f7ff fe52 	bl	80077cc <put_fat>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <create_chain+0xe2>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d006      	beq.n	8007b46 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007b38:	69fa      	ldr	r2, [r7, #28]
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6938      	ldr	r0, [r7, #16]
 8007b3e:	f7ff fe45 	bl	80077cc <put_fat>
 8007b42:	4603      	mov	r3, r0
 8007b44:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d116      	bne.n	8007b7a <create_chain+0x116>
		fs->last_clst = ncl;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	691a      	ldr	r2, [r3, #16]
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	3b02      	subs	r3, #2
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d804      	bhi.n	8007b6a <create_chain+0x106>
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	1e5a      	subs	r2, r3, #1
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	791b      	ldrb	r3, [r3, #4]
 8007b6e:	f043 0301 	orr.w	r3, r3, #1
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	711a      	strb	r2, [r3, #4]
 8007b78:	e007      	b.n	8007b8a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d102      	bne.n	8007b86 <create_chain+0x122>
 8007b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b84:	e000      	b.n	8007b88 <create_chain+0x124>
 8007b86:	2301      	movs	r3, #1
 8007b88:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007b8a:	69fb      	ldr	r3, [r7, #28]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3720      	adds	r7, #32
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	3304      	adds	r3, #4
 8007baa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	0a5b      	lsrs	r3, r3, #9
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	8952      	ldrh	r2, [r2, #10]
 8007bb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bb8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	1d1a      	adds	r2, r3, #4
 8007bbe:	613a      	str	r2, [r7, #16]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <clmt_clust+0x3a>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e010      	b.n	8007bf0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d307      	bcc.n	8007be6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	3304      	adds	r3, #4
 8007be2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007be4:	e7e9      	b.n	8007bba <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007be6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	4413      	add	r3, r2
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	371c      	adds	r7, #28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c12:	d204      	bcs.n	8007c1e <dir_sdi+0x22>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	f003 031f 	and.w	r3, r3, #31
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	e063      	b.n	8007cea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d106      	bne.n	8007c42 <dir_sdi+0x46>
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d902      	bls.n	8007c42 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10c      	bne.n	8007c62 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	095b      	lsrs	r3, r3, #5
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	8912      	ldrh	r2, [r2, #8]
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d301      	bcc.n	8007c58 <dir_sdi+0x5c>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e048      	b.n	8007cea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	61da      	str	r2, [r3, #28]
 8007c60:	e029      	b.n	8007cb6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	895b      	ldrh	r3, [r3, #10]
 8007c66:	025b      	lsls	r3, r3, #9
 8007c68:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007c6a:	e019      	b.n	8007ca0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6979      	ldr	r1, [r7, #20]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7ff fd06 	bl	8007682 <get_fat>
 8007c76:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c7e:	d101      	bne.n	8007c84 <dir_sdi+0x88>
 8007c80:	2301      	movs	r3, #1
 8007c82:	e032      	b.n	8007cea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d904      	bls.n	8007c94 <dir_sdi+0x98>
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d301      	bcc.n	8007c98 <dir_sdi+0x9c>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e028      	b.n	8007cea <dir_sdi+0xee>
			ofs -= csz;
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d2e1      	bcs.n	8007c6c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007ca8:	6979      	ldr	r1, [r7, #20]
 8007caa:	6938      	ldr	r0, [r7, #16]
 8007cac:	f7ff fcca 	bl	8007644 <clust2sect>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <dir_sdi+0xcc>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e010      	b.n	8007cea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	69da      	ldr	r2, [r3, #28]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	0a5b      	lsrs	r3, r3, #9
 8007cd0:	441a      	add	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce2:	441a      	add	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b086      	sub	sp, #24
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	3320      	adds	r3, #32
 8007d08:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <dir_next+0x28>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d18:	d301      	bcc.n	8007d1e <dir_next+0x2c>
 8007d1a:	2304      	movs	r3, #4
 8007d1c:	e0aa      	b.n	8007e74 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f040 8098 	bne.w	8007e5a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10b      	bne.n	8007d54 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	8912      	ldrh	r2, [r2, #8]
 8007d44:	4293      	cmp	r3, r2
 8007d46:	f0c0 8088 	bcc.w	8007e5a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	61da      	str	r2, [r3, #28]
 8007d50:	2304      	movs	r3, #4
 8007d52:	e08f      	b.n	8007e74 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	0a5b      	lsrs	r3, r3, #9
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	8952      	ldrh	r2, [r2, #10]
 8007d5c:	3a01      	subs	r2, #1
 8007d5e:	4013      	ands	r3, r2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d17a      	bne.n	8007e5a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	f7ff fc88 	bl	8007682 <get_fat>
 8007d72:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d801      	bhi.n	8007d7e <dir_next+0x8c>
 8007d7a:	2302      	movs	r3, #2
 8007d7c:	e07a      	b.n	8007e74 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d84:	d101      	bne.n	8007d8a <dir_next+0x98>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e074      	b.n	8007e74 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d358      	bcc.n	8007e46 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d104      	bne.n	8007da4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	61da      	str	r2, [r3, #28]
 8007da0:	2304      	movs	r3, #4
 8007da2:	e067      	b.n	8007e74 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	4619      	mov	r1, r3
 8007dac:	4610      	mov	r0, r2
 8007dae:	f7ff fe59 	bl	8007a64 <create_chain>
 8007db2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <dir_next+0xcc>
 8007dba:	2307      	movs	r3, #7
 8007dbc:	e05a      	b.n	8007e74 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d101      	bne.n	8007dc8 <dir_next+0xd6>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e055      	b.n	8007e74 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dce:	d101      	bne.n	8007dd4 <dir_next+0xe2>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e04f      	b.n	8007e74 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7ff fb55 	bl	8007484 <sync_window>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <dir_next+0xf2>
 8007de0:	2301      	movs	r3, #1
 8007de2:	e047      	b.n	8007e74 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3330      	adds	r3, #48	; 0x30
 8007de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dec:	2100      	movs	r1, #0
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7ff f97f 	bl	80070f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007df4:	2300      	movs	r3, #0
 8007df6:	613b      	str	r3, [r7, #16]
 8007df8:	6979      	ldr	r1, [r7, #20]
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f7ff fc22 	bl	8007644 <clust2sect>
 8007e00:	4602      	mov	r2, r0
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	62da      	str	r2, [r3, #44]	; 0x2c
 8007e06:	e012      	b.n	8007e2e <dir_next+0x13c>
						fs->wflag = 1;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff fb38 	bl	8007484 <sync_window>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <dir_next+0x12c>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e02a      	b.n	8007e74 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	3301      	adds	r3, #1
 8007e22:	613b      	str	r3, [r7, #16]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	895b      	ldrh	r3, [r3, #10]
 8007e32:	461a      	mov	r2, r3
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d3e6      	bcc.n	8007e08 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	1ad2      	subs	r2, r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007e4c:	6979      	ldr	r1, [r7, #20]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff fbf8 	bl	8007644 <clust2sect>
 8007e54:	4602      	mov	r2, r0
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6c:	441a      	add	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff feb4 	bl	8007bfc <dir_sdi>
 8007e94:	4603      	mov	r3, r0
 8007e96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d12b      	bne.n	8007ef6 <dir_alloc+0x7a>
		n = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f7ff fb2f 	bl	800750c <move_window>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d11d      	bne.n	8007ef4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2be5      	cmp	r3, #229	; 0xe5
 8007ec0:	d004      	beq.n	8007ecc <dir_alloc+0x50>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d107      	bne.n	8007edc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	613b      	str	r3, [r7, #16]
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d102      	bne.n	8007ee0 <dir_alloc+0x64>
 8007eda:	e00c      	b.n	8007ef6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007edc:	2300      	movs	r3, #0
 8007ede:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7ff ff05 	bl	8007cf2 <dir_next>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0d7      	beq.n	8007ea2 <dir_alloc+0x26>
 8007ef2:	e000      	b.n	8007ef6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007ef4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d101      	bne.n	8007f00 <dir_alloc+0x84>
 8007efc:	2307      	movs	r3, #7
 8007efe:	75fb      	strb	r3, [r7, #23]
	return res;
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	331a      	adds	r3, #26
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7ff f847 	bl	8006fac <ld_word>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d109      	bne.n	8007f3e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	3314      	adds	r3, #20
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff f83c 	bl	8006fac <ld_word>
 8007f34:	4603      	mov	r3, r0
 8007f36:	041b      	lsls	r3, r3, #16
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	331a      	adds	r3, #26
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	b292      	uxth	r2, r2
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7ff f85f 	bl	8007022 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d109      	bne.n	8007f80 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f103 0214 	add.w	r2, r3, #20
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	0c1b      	lsrs	r3, r3, #16
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	f7ff f851 	bl	8007022 <st_word>
	}
}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007f96:	2100      	movs	r1, #0
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff fe2f 	bl	8007bfc <dir_sdi>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <dir_find+0x24>
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
 8007faa:	e03e      	b.n	800802a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6938      	ldr	r0, [r7, #16]
 8007fb4:	f7ff faaa 	bl	800750c <move_window>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d12f      	bne.n	8008022 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d102      	bne.n	8007fd6 <dir_find+0x4e>
 8007fd0:	2304      	movs	r3, #4
 8007fd2:	75fb      	strb	r3, [r7, #23]
 8007fd4:	e028      	b.n	8008028 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	330b      	adds	r3, #11
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a1b      	ldr	r3, [r3, #32]
 8007fec:	330b      	adds	r3, #11
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <dir_find+0x86>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a18      	ldr	r0, [r3, #32]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	3324      	adds	r3, #36	; 0x24
 8008000:	220b      	movs	r2, #11
 8008002:	4619      	mov	r1, r3
 8008004:	f7ff f88f 	bl	8007126 <mem_cmp>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800800e:	2100      	movs	r1, #0
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7ff fe6e 	bl	8007cf2 <dir_next>
 8008016:	4603      	mov	r3, r0
 8008018:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d0c5      	beq.n	8007fac <dir_find+0x24>
 8008020:	e002      	b.n	8008028 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008022:	bf00      	nop
 8008024:	e000      	b.n	8008028 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008026:	bf00      	nop

	return res;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008040:	2101      	movs	r1, #1
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7ff ff1a 	bl	8007e7c <dir_alloc>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d11c      	bne.n	800808c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	4619      	mov	r1, r3
 8008058:	68b8      	ldr	r0, [r7, #8]
 800805a:	f7ff fa57 	bl	800750c <move_window>
 800805e:	4603      	mov	r3, r0
 8008060:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d111      	bne.n	800808c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	2220      	movs	r2, #32
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f7ff f83e 	bl	80070f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a18      	ldr	r0, [r3, #32]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3324      	adds	r3, #36	; 0x24
 800807e:	220b      	movs	r2, #11
 8008080:	4619      	mov	r1, r3
 8008082:	f7ff f815 	bl	80070b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2201      	movs	r2, #1
 800808a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800808c:	7bfb      	ldrb	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3324      	adds	r3, #36	; 0x24
 80080ac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80080ae:	220b      	movs	r2, #11
 80080b0:	2120      	movs	r1, #32
 80080b2:	68b8      	ldr	r0, [r7, #8]
 80080b4:	f7ff f81d 	bl	80070f2 <mem_set>
	si = i = 0; ni = 8;
 80080b8:	2300      	movs	r3, #0
 80080ba:	613b      	str	r3, [r7, #16]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	2308      	movs	r3, #8
 80080c2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	1c5a      	adds	r2, r3, #1
 80080c8:	617a      	str	r2, [r7, #20]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4413      	add	r3, r2
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80080d2:	7ffb      	ldrb	r3, [r7, #31]
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d94e      	bls.n	8008176 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80080d8:	7ffb      	ldrb	r3, [r7, #31]
 80080da:	2b2f      	cmp	r3, #47	; 0x2f
 80080dc:	d006      	beq.n	80080ec <create_name+0x54>
 80080de:	7ffb      	ldrb	r3, [r7, #31]
 80080e0:	2b5c      	cmp	r3, #92	; 0x5c
 80080e2:	d110      	bne.n	8008106 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80080e4:	e002      	b.n	80080ec <create_name+0x54>
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	3301      	adds	r3, #1
 80080ea:	617b      	str	r3, [r7, #20]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	4413      	add	r3, r2
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b2f      	cmp	r3, #47	; 0x2f
 80080f6:	d0f6      	beq.n	80080e6 <create_name+0x4e>
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	4413      	add	r3, r2
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b5c      	cmp	r3, #92	; 0x5c
 8008102:	d0f0      	beq.n	80080e6 <create_name+0x4e>
			break;
 8008104:	e038      	b.n	8008178 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008106:	7ffb      	ldrb	r3, [r7, #31]
 8008108:	2b2e      	cmp	r3, #46	; 0x2e
 800810a:	d003      	beq.n	8008114 <create_name+0x7c>
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	429a      	cmp	r2, r3
 8008112:	d30c      	bcc.n	800812e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	2b0b      	cmp	r3, #11
 8008118:	d002      	beq.n	8008120 <create_name+0x88>
 800811a:	7ffb      	ldrb	r3, [r7, #31]
 800811c:	2b2e      	cmp	r3, #46	; 0x2e
 800811e:	d001      	beq.n	8008124 <create_name+0x8c>
 8008120:	2306      	movs	r3, #6
 8008122:	e044      	b.n	80081ae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008124:	2308      	movs	r3, #8
 8008126:	613b      	str	r3, [r7, #16]
 8008128:	230b      	movs	r3, #11
 800812a:	61bb      	str	r3, [r7, #24]
			continue;
 800812c:	e022      	b.n	8008174 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800812e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008132:	2b00      	cmp	r3, #0
 8008134:	da04      	bge.n	8008140 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008136:	7ffb      	ldrb	r3, [r7, #31]
 8008138:	3b80      	subs	r3, #128	; 0x80
 800813a:	4a1f      	ldr	r2, [pc, #124]	; (80081b8 <create_name+0x120>)
 800813c:	5cd3      	ldrb	r3, [r2, r3]
 800813e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008140:	7ffb      	ldrb	r3, [r7, #31]
 8008142:	4619      	mov	r1, r3
 8008144:	481d      	ldr	r0, [pc, #116]	; (80081bc <create_name+0x124>)
 8008146:	f7ff f815 	bl	8007174 <chk_chr>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <create_name+0xbc>
 8008150:	2306      	movs	r3, #6
 8008152:	e02c      	b.n	80081ae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008154:	7ffb      	ldrb	r3, [r7, #31]
 8008156:	2b60      	cmp	r3, #96	; 0x60
 8008158:	d905      	bls.n	8008166 <create_name+0xce>
 800815a:	7ffb      	ldrb	r3, [r7, #31]
 800815c:	2b7a      	cmp	r3, #122	; 0x7a
 800815e:	d802      	bhi.n	8008166 <create_name+0xce>
 8008160:	7ffb      	ldrb	r3, [r7, #31]
 8008162:	3b20      	subs	r3, #32
 8008164:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	1c5a      	adds	r2, r3, #1
 800816a:	613a      	str	r2, [r7, #16]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	4413      	add	r3, r2
 8008170:	7ffa      	ldrb	r2, [r7, #31]
 8008172:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008174:	e7a6      	b.n	80080c4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008176:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	441a      	add	r2, r3
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <create_name+0xf4>
 8008188:	2306      	movs	r3, #6
 800818a:	e010      	b.n	80081ae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2be5      	cmp	r3, #229	; 0xe5
 8008192:	d102      	bne.n	800819a <create_name+0x102>
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2205      	movs	r2, #5
 8008198:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800819a:	7ffb      	ldrb	r3, [r7, #31]
 800819c:	2b20      	cmp	r3, #32
 800819e:	d801      	bhi.n	80081a4 <create_name+0x10c>
 80081a0:	2204      	movs	r2, #4
 80081a2:	e000      	b.n	80081a6 <create_name+0x10e>
 80081a4:	2200      	movs	r2, #0
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	330b      	adds	r3, #11
 80081aa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80081ac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3720      	adds	r7, #32
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	0800a788 	.word	0x0800a788
 80081bc:	0800a700 	.word	0x0800a700

080081c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80081d4:	e002      	b.n	80081dc <follow_path+0x1c>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	3301      	adds	r3, #1
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	2b2f      	cmp	r3, #47	; 0x2f
 80081e2:	d0f8      	beq.n	80081d6 <follow_path+0x16>
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2b5c      	cmp	r3, #92	; 0x5c
 80081ea:	d0f4      	beq.n	80081d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	2200      	movs	r2, #0
 80081f0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b1f      	cmp	r3, #31
 80081f8:	d80a      	bhi.n	8008210 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2280      	movs	r2, #128	; 0x80
 80081fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008202:	2100      	movs	r1, #0
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff fcf9 	bl	8007bfc <dir_sdi>
 800820a:	4603      	mov	r3, r0
 800820c:	75fb      	strb	r3, [r7, #23]
 800820e:	e043      	b.n	8008298 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008210:	463b      	mov	r3, r7
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7ff ff3f 	bl	8008098 <create_name>
 800821a:	4603      	mov	r3, r0
 800821c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800821e:	7dfb      	ldrb	r3, [r7, #23]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d134      	bne.n	800828e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7ff feaf 	bl	8007f88 <dir_find>
 800822a:	4603      	mov	r3, r0
 800822c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008234:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00a      	beq.n	8008252 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	2b04      	cmp	r3, #4
 8008240:	d127      	bne.n	8008292 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008242:	7afb      	ldrb	r3, [r7, #11]
 8008244:	f003 0304 	and.w	r3, r3, #4
 8008248:	2b00      	cmp	r3, #0
 800824a:	d122      	bne.n	8008292 <follow_path+0xd2>
 800824c:	2305      	movs	r3, #5
 800824e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008250:	e01f      	b.n	8008292 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008252:	7afb      	ldrb	r3, [r7, #11]
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b00      	cmp	r3, #0
 800825a:	d11c      	bne.n	8008296 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	799b      	ldrb	r3, [r3, #6]
 8008260:	f003 0310 	and.w	r3, r3, #16
 8008264:	2b00      	cmp	r3, #0
 8008266:	d102      	bne.n	800826e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008268:	2305      	movs	r3, #5
 800826a:	75fb      	strb	r3, [r7, #23]
 800826c:	e014      	b.n	8008298 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827c:	4413      	add	r3, r2
 800827e:	4619      	mov	r1, r3
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f7ff fe42 	bl	8007f0a <ld_clust>
 8008286:	4602      	mov	r2, r0
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800828c:	e7c0      	b.n	8008210 <follow_path+0x50>
			if (res != FR_OK) break;
 800828e:	bf00      	nop
 8008290:	e002      	b.n	8008298 <follow_path+0xd8>
				break;
 8008292:	bf00      	nop
 8008294:	e000      	b.n	8008298 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008296:	bf00      	nop
			}
		}
	}

	return res;
 8008298:	7dfb      	ldrb	r3, [r7, #23]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b087      	sub	sp, #28
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80082aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082ae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d031      	beq.n	800831c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	617b      	str	r3, [r7, #20]
 80082be:	e002      	b.n	80082c6 <get_ldnumber+0x24>
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	3301      	adds	r3, #1
 80082c4:	617b      	str	r3, [r7, #20]
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	2b20      	cmp	r3, #32
 80082cc:	d903      	bls.n	80082d6 <get_ldnumber+0x34>
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2b3a      	cmp	r3, #58	; 0x3a
 80082d4:	d1f4      	bne.n	80082c0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b3a      	cmp	r3, #58	; 0x3a
 80082dc:	d11c      	bne.n	8008318 <get_ldnumber+0x76>
			tp = *path;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	1c5a      	adds	r2, r3, #1
 80082e8:	60fa      	str	r2, [r7, #12]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	3b30      	subs	r3, #48	; 0x30
 80082ee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b09      	cmp	r3, #9
 80082f4:	d80e      	bhi.n	8008314 <get_ldnumber+0x72>
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d10a      	bne.n	8008314 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d107      	bne.n	8008314 <get_ldnumber+0x72>
					vol = (int)i;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	3301      	adds	r3, #1
 800830c:	617b      	str	r3, [r7, #20]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	e002      	b.n	800831e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008318:	2300      	movs	r3, #0
 800831a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800831c:	693b      	ldr	r3, [r7, #16]
}
 800831e:	4618      	mov	r0, r3
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
	...

0800832c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	70da      	strb	r2, [r3, #3]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008342:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff f8e0 	bl	800750c <move_window>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <check_fs+0x2a>
 8008352:	2304      	movs	r3, #4
 8008354:	e038      	b.n	80083c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3330      	adds	r3, #48	; 0x30
 800835a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800835e:	4618      	mov	r0, r3
 8008360:	f7fe fe24 	bl	8006fac <ld_word>
 8008364:	4603      	mov	r3, r0
 8008366:	461a      	mov	r2, r3
 8008368:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800836c:	429a      	cmp	r2, r3
 800836e:	d001      	beq.n	8008374 <check_fs+0x48>
 8008370:	2303      	movs	r3, #3
 8008372:	e029      	b.n	80083c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800837a:	2be9      	cmp	r3, #233	; 0xe9
 800837c:	d009      	beq.n	8008392 <check_fs+0x66>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008384:	2beb      	cmp	r3, #235	; 0xeb
 8008386:	d11e      	bne.n	80083c6 <check_fs+0x9a>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800838e:	2b90      	cmp	r3, #144	; 0x90
 8008390:	d119      	bne.n	80083c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	3330      	adds	r3, #48	; 0x30
 8008396:	3336      	adds	r3, #54	; 0x36
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe fe1f 	bl	8006fdc <ld_dword>
 800839e:	4603      	mov	r3, r0
 80083a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80083a4:	4a0a      	ldr	r2, [pc, #40]	; (80083d0 <check_fs+0xa4>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d101      	bne.n	80083ae <check_fs+0x82>
 80083aa:	2300      	movs	r3, #0
 80083ac:	e00c      	b.n	80083c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	3330      	adds	r3, #48	; 0x30
 80083b2:	3352      	adds	r3, #82	; 0x52
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fe fe11 	bl	8006fdc <ld_dword>
 80083ba:	4602      	mov	r2, r0
 80083bc:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <check_fs+0xa8>)
 80083be:	429a      	cmp	r2, r3
 80083c0:	d101      	bne.n	80083c6 <check_fs+0x9a>
 80083c2:	2300      	movs	r3, #0
 80083c4:	e000      	b.n	80083c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80083c6:	2302      	movs	r3, #2
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	00544146 	.word	0x00544146
 80083d4:	33544146 	.word	0x33544146

080083d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b096      	sub	sp, #88	; 0x58
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f7ff ff58 	bl	80082a2 <get_ldnumber>
 80083f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80083f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	da01      	bge.n	80083fe <find_volume+0x26>
 80083fa:	230b      	movs	r3, #11
 80083fc:	e22e      	b.n	800885c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80083fe:	4aa8      	ldr	r2, [pc, #672]	; (80086a0 <find_volume+0x2c8>)
 8008400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008406:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <find_volume+0x3a>
 800840e:	230c      	movs	r3, #12
 8008410:	e224      	b.n	800885c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008416:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	f023 0301 	bic.w	r3, r3, #1
 800841e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d01a      	beq.n	800845e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	785b      	ldrb	r3, [r3, #1]
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe fd1f 	bl	8006e70 <disk_status>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008438:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10c      	bne.n	800845e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <find_volume+0x82>
 800844a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800844e:	f003 0304 	and.w	r3, r3, #4
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008456:	230a      	movs	r3, #10
 8008458:	e200      	b.n	800885c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800845a:	2300      	movs	r3, #0
 800845c:	e1fe      	b.n	800885c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	2200      	movs	r2, #0
 8008462:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008466:	b2da      	uxtb	r2, r3
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	4618      	mov	r0, r3
 8008472:	f7fe fd17 	bl	8006ea4 <disk_initialize>
 8008476:	4603      	mov	r3, r0
 8008478:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800847c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008488:	2303      	movs	r3, #3
 800848a:	e1e7      	b.n	800885c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <find_volume+0xca>
 8008492:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008496:	f003 0304 	and.w	r3, r3, #4
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800849e:	230a      	movs	r3, #10
 80084a0:	e1dc      	b.n	800885c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80084a2:	2300      	movs	r3, #0
 80084a4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80084a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084aa:	f7ff ff3f 	bl	800832c <check_fs>
 80084ae:	4603      	mov	r3, r0
 80084b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80084b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d14b      	bne.n	8008554 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80084bc:	2300      	movs	r3, #0
 80084be:	643b      	str	r3, [r7, #64]	; 0x40
 80084c0:	e01f      	b.n	8008502 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80084c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ca:	011b      	lsls	r3, r3, #4
 80084cc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80084d0:	4413      	add	r3, r2
 80084d2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80084d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d6:	3304      	adds	r3, #4
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d006      	beq.n	80084ec <find_volume+0x114>
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	3308      	adds	r3, #8
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fe fd7a 	bl	8006fdc <ld_dword>
 80084e8:	4602      	mov	r2, r0
 80084ea:	e000      	b.n	80084ee <find_volume+0x116>
 80084ec:	2200      	movs	r2, #0
 80084ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80084f6:	440b      	add	r3, r1
 80084f8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80084fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084fe:	3301      	adds	r3, #1
 8008500:	643b      	str	r3, [r7, #64]	; 0x40
 8008502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008504:	2b03      	cmp	r3, #3
 8008506:	d9dc      	bls.n	80084c2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008508:	2300      	movs	r3, #0
 800850a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800850c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <find_volume+0x140>
 8008512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008514:	3b01      	subs	r3, #1
 8008516:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008520:	4413      	add	r3, r2
 8008522:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008526:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <find_volume+0x162>
 800852e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008530:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008532:	f7ff fefb 	bl	800832c <check_fs>
 8008536:	4603      	mov	r3, r0
 8008538:	e000      	b.n	800853c <find_volume+0x164>
 800853a:	2303      	movs	r3, #3
 800853c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008540:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008544:	2b01      	cmp	r3, #1
 8008546:	d905      	bls.n	8008554 <find_volume+0x17c>
 8008548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800854a:	3301      	adds	r3, #1
 800854c:	643b      	str	r3, [r7, #64]	; 0x40
 800854e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008550:	2b03      	cmp	r3, #3
 8008552:	d9e1      	bls.n	8008518 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008558:	2b04      	cmp	r3, #4
 800855a:	d101      	bne.n	8008560 <find_volume+0x188>
 800855c:	2301      	movs	r3, #1
 800855e:	e17d      	b.n	800885c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008564:	2b01      	cmp	r3, #1
 8008566:	d901      	bls.n	800856c <find_volume+0x194>
 8008568:	230d      	movs	r3, #13
 800856a:	e177      	b.n	800885c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800856c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856e:	3330      	adds	r3, #48	; 0x30
 8008570:	330b      	adds	r3, #11
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe fd1a 	bl	8006fac <ld_word>
 8008578:	4603      	mov	r3, r0
 800857a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800857e:	d001      	beq.n	8008584 <find_volume+0x1ac>
 8008580:	230d      	movs	r3, #13
 8008582:	e16b      	b.n	800885c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	3330      	adds	r3, #48	; 0x30
 8008588:	3316      	adds	r3, #22
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe fd0e 	bl	8006fac <ld_word>
 8008590:	4603      	mov	r3, r0
 8008592:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <find_volume+0x1d0>
 800859a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859c:	3330      	adds	r3, #48	; 0x30
 800859e:	3324      	adds	r3, #36	; 0x24
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fe fd1b 	bl	8006fdc <ld_dword>
 80085a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085ac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80085b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ba:	789b      	ldrb	r3, [r3, #2]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d005      	beq.n	80085cc <find_volume+0x1f4>
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	789b      	ldrb	r3, [r3, #2]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d001      	beq.n	80085cc <find_volume+0x1f4>
 80085c8:	230d      	movs	r3, #13
 80085ca:	e147      	b.n	800885c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80085cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ce:	789b      	ldrb	r3, [r3, #2]
 80085d0:	461a      	mov	r2, r3
 80085d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d4:	fb02 f303 	mul.w	r3, r2, r3
 80085d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80085e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e8:	895b      	ldrh	r3, [r3, #10]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d008      	beq.n	8008600 <find_volume+0x228>
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	895b      	ldrh	r3, [r3, #10]
 80085f2:	461a      	mov	r2, r3
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	895b      	ldrh	r3, [r3, #10]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	4013      	ands	r3, r2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <find_volume+0x22c>
 8008600:	230d      	movs	r3, #13
 8008602:	e12b      	b.n	800885c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	3330      	adds	r3, #48	; 0x30
 8008608:	3311      	adds	r3, #17
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fcce 	bl	8006fac <ld_word>
 8008610:	4603      	mov	r3, r0
 8008612:	461a      	mov	r2, r3
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861a:	891b      	ldrh	r3, [r3, #8]
 800861c:	f003 030f 	and.w	r3, r3, #15
 8008620:	b29b      	uxth	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <find_volume+0x252>
 8008626:	230d      	movs	r3, #13
 8008628:	e118      	b.n	800885c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	3330      	adds	r3, #48	; 0x30
 800862e:	3313      	adds	r3, #19
 8008630:	4618      	mov	r0, r3
 8008632:	f7fe fcbb 	bl	8006fac <ld_word>
 8008636:	4603      	mov	r3, r0
 8008638:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800863a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800863c:	2b00      	cmp	r3, #0
 800863e:	d106      	bne.n	800864e <find_volume+0x276>
 8008640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008642:	3330      	adds	r3, #48	; 0x30
 8008644:	3320      	adds	r3, #32
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe fcc8 	bl	8006fdc <ld_dword>
 800864c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	3330      	adds	r3, #48	; 0x30
 8008652:	330e      	adds	r3, #14
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe fca9 	bl	8006fac <ld_word>
 800865a:	4603      	mov	r3, r0
 800865c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800865e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <find_volume+0x290>
 8008664:	230d      	movs	r3, #13
 8008666:	e0f9      	b.n	800885c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008668:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800866a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866c:	4413      	add	r3, r2
 800866e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008670:	8912      	ldrh	r2, [r2, #8]
 8008672:	0912      	lsrs	r2, r2, #4
 8008674:	b292      	uxth	r2, r2
 8008676:	4413      	add	r3, r2
 8008678:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800867a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800867c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867e:	429a      	cmp	r2, r3
 8008680:	d201      	bcs.n	8008686 <find_volume+0x2ae>
 8008682:	230d      	movs	r3, #13
 8008684:	e0ea      	b.n	800885c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800868e:	8952      	ldrh	r2, [r2, #10]
 8008690:	fbb3 f3f2 	udiv	r3, r3, r2
 8008694:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	2b00      	cmp	r3, #0
 800869a:	d103      	bne.n	80086a4 <find_volume+0x2cc>
 800869c:	230d      	movs	r3, #13
 800869e:	e0dd      	b.n	800885c <find_volume+0x484>
 80086a0:	200000ac 	.word	0x200000ac
		fmt = FS_FAT32;
 80086a4:	2303      	movs	r3, #3
 80086a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d802      	bhi.n	80086ba <find_volume+0x2e2>
 80086b4:	2302      	movs	r3, #2
 80086b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d802      	bhi.n	80086ca <find_volume+0x2f2>
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	1c9a      	adds	r2, r3, #2
 80086ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086d6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80086d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80086da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086dc:	441a      	add	r2, r3
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80086e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	441a      	add	r2, r3
 80086e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ea:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80086ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d11e      	bne.n	8008732 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	3330      	adds	r3, #48	; 0x30
 80086f8:	332a      	adds	r3, #42	; 0x2a
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe fc56 	bl	8006fac <ld_word>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <find_volume+0x332>
 8008706:	230d      	movs	r3, #13
 8008708:	e0a8      	b.n	800885c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	891b      	ldrh	r3, [r3, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <find_volume+0x33e>
 8008712:	230d      	movs	r3, #13
 8008714:	e0a2      	b.n	800885c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008718:	3330      	adds	r3, #48	; 0x30
 800871a:	332c      	adds	r3, #44	; 0x2c
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe fc5d 	bl	8006fdc <ld_dword>
 8008722:	4602      	mov	r2, r0
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	647b      	str	r3, [r7, #68]	; 0x44
 8008730:	e01f      	b.n	8008772 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	891b      	ldrh	r3, [r3, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <find_volume+0x366>
 800873a:	230d      	movs	r3, #13
 800873c:	e08e      	b.n	800885c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800873e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008740:	6a1a      	ldr	r2, [r3, #32]
 8008742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008744:	441a      	add	r2, r3
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800874a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800874e:	2b02      	cmp	r3, #2
 8008750:	d103      	bne.n	800875a <find_volume+0x382>
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	e00a      	b.n	8008770 <find_volume+0x398>
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	695a      	ldr	r2, [r3, #20]
 800875e:	4613      	mov	r3, r2
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	4413      	add	r3, r2
 8008764:	085a      	lsrs	r2, r3, #1
 8008766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008770:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	699a      	ldr	r2, [r3, #24]
 8008776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008778:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800877c:	0a5b      	lsrs	r3, r3, #9
 800877e:	429a      	cmp	r2, r3
 8008780:	d201      	bcs.n	8008786 <find_volume+0x3ae>
 8008782:	230d      	movs	r3, #13
 8008784:	e06a      	b.n	800885c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800878c:	611a      	str	r2, [r3, #16]
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	691a      	ldr	r2, [r3, #16]
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	2280      	movs	r2, #128	; 0x80
 800879a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800879c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d149      	bne.n	8008838 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80087a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a6:	3330      	adds	r3, #48	; 0x30
 80087a8:	3330      	adds	r3, #48	; 0x30
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fe fbfe 	bl	8006fac <ld_word>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d140      	bne.n	8008838 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80087b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087b8:	3301      	adds	r3, #1
 80087ba:	4619      	mov	r1, r3
 80087bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087be:	f7fe fea5 	bl	800750c <move_window>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d137      	bne.n	8008838 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80087c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ca:	2200      	movs	r2, #0
 80087cc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	3330      	adds	r3, #48	; 0x30
 80087d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fe fbe8 	bl	8006fac <ld_word>
 80087dc:	4603      	mov	r3, r0
 80087de:	461a      	mov	r2, r3
 80087e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d127      	bne.n	8008838 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	3330      	adds	r3, #48	; 0x30
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fbf5 	bl	8006fdc <ld_dword>
 80087f2:	4602      	mov	r2, r0
 80087f4:	4b1b      	ldr	r3, [pc, #108]	; (8008864 <find_volume+0x48c>)
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d11e      	bne.n	8008838 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	3330      	adds	r3, #48	; 0x30
 80087fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fbea 	bl	8006fdc <ld_dword>
 8008808:	4602      	mov	r2, r0
 800880a:	4b17      	ldr	r3, [pc, #92]	; (8008868 <find_volume+0x490>)
 800880c:	429a      	cmp	r2, r3
 800880e:	d113      	bne.n	8008838 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008812:	3330      	adds	r3, #48	; 0x30
 8008814:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008818:	4618      	mov	r0, r3
 800881a:	f7fe fbdf 	bl	8006fdc <ld_dword>
 800881e:	4602      	mov	r2, r0
 8008820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008822:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	3330      	adds	r3, #48	; 0x30
 8008828:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe fbd5 	bl	8006fdc <ld_dword>
 8008832:	4602      	mov	r2, r0
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800883e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008840:	4b0a      	ldr	r3, [pc, #40]	; (800886c <find_volume+0x494>)
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	3301      	adds	r3, #1
 8008846:	b29a      	uxth	r2, r3
 8008848:	4b08      	ldr	r3, [pc, #32]	; (800886c <find_volume+0x494>)
 800884a:	801a      	strh	r2, [r3, #0]
 800884c:	4b07      	ldr	r3, [pc, #28]	; (800886c <find_volume+0x494>)
 800884e:	881a      	ldrh	r2, [r3, #0]
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008856:	f7fe fdf1 	bl	800743c <clear_lock>
#endif
	return FR_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3758      	adds	r7, #88	; 0x58
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	41615252 	.word	0x41615252
 8008868:	61417272 	.word	0x61417272
 800886c:	200000b0 	.word	0x200000b0

08008870 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800887a:	2309      	movs	r3, #9
 800887c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d01c      	beq.n	80088be <validate+0x4e>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d018      	beq.n	80088be <validate+0x4e>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d013      	beq.n	80088be <validate+0x4e>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	889a      	ldrh	r2, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	88db      	ldrh	r3, [r3, #6]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d10c      	bne.n	80088be <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	785b      	ldrb	r3, [r3, #1]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe fae0 	bl	8006e70 <disk_status>
 80088b0:	4603      	mov	r3, r0
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <validate+0x4e>
			res = FR_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d102      	bne.n	80088ca <validate+0x5a>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	e000      	b.n	80088cc <validate+0x5c>
 80088ca:	2300      	movs	r3, #0
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	6013      	str	r3, [r2, #0]
	return res;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b088      	sub	sp, #32
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	4613      	mov	r3, r2
 80088e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80088ee:	f107 0310 	add.w	r3, r7, #16
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff fcd5 	bl	80082a2 <get_ldnumber>
 80088f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	da01      	bge.n	8008904 <f_mount+0x28>
 8008900:	230b      	movs	r3, #11
 8008902:	e02b      	b.n	800895c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008904:	4a17      	ldr	r2, [pc, #92]	; (8008964 <f_mount+0x88>)
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800890c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d005      	beq.n	8008920 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008914:	69b8      	ldr	r0, [r7, #24]
 8008916:	f7fe fd91 	bl	800743c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	2200      	movs	r2, #0
 800891e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	490d      	ldr	r1, [pc, #52]	; (8008964 <f_mount+0x88>)
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <f_mount+0x66>
 800893c:	79fb      	ldrb	r3, [r7, #7]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d001      	beq.n	8008946 <f_mount+0x6a>
 8008942:	2300      	movs	r3, #0
 8008944:	e00a      	b.n	800895c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008946:	f107 010c 	add.w	r1, r7, #12
 800894a:	f107 0308 	add.w	r3, r7, #8
 800894e:	2200      	movs	r2, #0
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff fd41 	bl	80083d8 <find_volume>
 8008956:	4603      	mov	r3, r0
 8008958:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800895a:	7dfb      	ldrb	r3, [r7, #23]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3720      	adds	r7, #32
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	200000ac 	.word	0x200000ac

08008968 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b098      	sub	sp, #96	; 0x60
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	4613      	mov	r3, r2
 8008974:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <f_open+0x18>
 800897c:	2309      	movs	r3, #9
 800897e:	e1ad      	b.n	8008cdc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008986:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008988:	79fa      	ldrb	r2, [r7, #7]
 800898a:	f107 0110 	add.w	r1, r7, #16
 800898e:	f107 0308 	add.w	r3, r7, #8
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff fd20 	bl	80083d8 <find_volume>
 8008998:	4603      	mov	r3, r0
 800899a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800899e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f040 8191 	bne.w	8008cca <f_open+0x362>
		dj.obj.fs = fs;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	f107 0314 	add.w	r3, r7, #20
 80089b2:	4611      	mov	r1, r2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7ff fc03 	bl	80081c0 <follow_path>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80089c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d11a      	bne.n	80089fe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80089c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80089cc:	b25b      	sxtb	r3, r3
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	da03      	bge.n	80089da <f_open+0x72>
				res = FR_INVALID_NAME;
 80089d2:	2306      	movs	r3, #6
 80089d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80089d8:	e011      	b.n	80089fe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80089da:	79fb      	ldrb	r3, [r7, #7]
 80089dc:	f023 0301 	bic.w	r3, r3, #1
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	bf14      	ite	ne
 80089e4:	2301      	movne	r3, #1
 80089e6:	2300      	moveq	r3, #0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	461a      	mov	r2, r3
 80089ec:	f107 0314 	add.w	r3, r7, #20
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe fbda 	bl	80071ac <chk_lock>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80089fe:	79fb      	ldrb	r3, [r7, #7]
 8008a00:	f003 031c 	and.w	r3, r3, #28
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d07f      	beq.n	8008b08 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008a08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d017      	beq.n	8008a40 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008a10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	d10e      	bne.n	8008a36 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008a18:	f7fe fc24 	bl	8007264 <enq_lock>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d006      	beq.n	8008a30 <f_open+0xc8>
 8008a22:	f107 0314 	add.w	r3, r7, #20
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff fb03 	bl	8008032 <dir_register>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	e000      	b.n	8008a32 <f_open+0xca>
 8008a30:	2312      	movs	r3, #18
 8008a32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	f043 0308 	orr.w	r3, r3, #8
 8008a3c:	71fb      	strb	r3, [r7, #7]
 8008a3e:	e010      	b.n	8008a62 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008a40:	7ebb      	ldrb	r3, [r7, #26]
 8008a42:	f003 0311 	and.w	r3, r3, #17
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <f_open+0xea>
					res = FR_DENIED;
 8008a4a:	2307      	movs	r3, #7
 8008a4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008a50:	e007      	b.n	8008a62 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	f003 0304 	and.w	r3, r3, #4
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <f_open+0xfa>
 8008a5c:	2308      	movs	r3, #8
 8008a5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008a62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d168      	bne.n	8008b3c <f_open+0x1d4>
 8008a6a:	79fb      	ldrb	r3, [r7, #7]
 8008a6c:	f003 0308 	and.w	r3, r3, #8
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d063      	beq.n	8008b3c <f_open+0x1d4>
				dw = GET_FATTIME();
 8008a74:	f7fe f868 	bl	8006b48 <get_fattime>
 8008a78:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7c:	330e      	adds	r3, #14
 8008a7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fe fae9 	bl	8007058 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a88:	3316      	adds	r3, #22
 8008a8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fe fae3 	bl	8007058 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a94:	330b      	adds	r3, #11
 8008a96:	2220      	movs	r2, #32
 8008a98:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7ff fa32 	bl	8007f0a <ld_clust>
 8008aa6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008aac:	2200      	movs	r2, #0
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7ff fa4a 	bl	8007f48 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab6:	331c      	adds	r3, #28
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe facc 	bl	8007058 <st_dword>
					fs->wflag = 1;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d037      	beq.n	8008b3c <f_open+0x1d4>
						dw = fs->winsect;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008ad2:	f107 0314 	add.w	r3, r7, #20
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe ff5d 	bl	800799a <remove_chain>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d126      	bne.n	8008b3c <f_open+0x1d4>
							res = move_window(fs, dw);
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fe fd0a 	bl	800750c <move_window>
 8008af8:	4603      	mov	r3, r0
 8008afa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b02:	3a01      	subs	r2, #1
 8008b04:	60da      	str	r2, [r3, #12]
 8008b06:	e019      	b.n	8008b3c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008b08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d115      	bne.n	8008b3c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008b10:	7ebb      	ldrb	r3, [r7, #26]
 8008b12:	f003 0310 	and.w	r3, r3, #16
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008b1a:	2304      	movs	r3, #4
 8008b1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b20:	e00c      	b.n	8008b3c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d007      	beq.n	8008b3c <f_open+0x1d4>
 8008b2c:	7ebb      	ldrb	r3, [r7, #26]
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <f_open+0x1d4>
						res = FR_DENIED;
 8008b36:	2307      	movs	r3, #7
 8008b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008b3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d128      	bne.n	8008b96 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	f003 0308 	and.w	r3, r3, #8
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008b4e:	79fb      	ldrb	r3, [r7, #7]
 8008b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b54:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	f023 0301 	bic.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	bf14      	ite	ne
 8008b6e:	2301      	movne	r3, #1
 8008b70:	2300      	moveq	r3, #0
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	461a      	mov	r2, r3
 8008b76:	f107 0314 	add.w	r3, r7, #20
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe fb93 	bl	80072a8 <inc_lock>
 8008b82:	4602      	mov	r2, r0
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d102      	bne.n	8008b96 <f_open+0x22e>
 8008b90:	2302      	movs	r3, #2
 8008b92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008b96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f040 8095 	bne.w	8008cca <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff f9af 	bl	8007f0a <ld_clust>
 8008bac:	4602      	mov	r2, r0
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb4:	331c      	adds	r3, #28
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe fa10 	bl	8006fdc <ld_dword>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	88da      	ldrh	r2, [r3, #6]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	79fa      	ldrb	r2, [r7, #7]
 8008bda:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3330      	adds	r3, #48	; 0x30
 8008bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe fa7a 	bl	80070f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008bfe:	79fb      	ldrb	r3, [r7, #7]
 8008c00:	f003 0320 	and.w	r3, r3, #32
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d060      	beq.n	8008cca <f_open+0x362>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d05c      	beq.n	8008cca <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	68da      	ldr	r2, [r3, #12]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	895b      	ldrh	r3, [r3, #10]
 8008c1c:	025b      	lsls	r3, r3, #9
 8008c1e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c2c:	e016      	b.n	8008c5c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe fd25 	bl	8007682 <get_fat>
 8008c38:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d802      	bhi.n	8008c46 <f_open+0x2de>
 8008c40:	2302      	movs	r3, #2
 8008c42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c4c:	d102      	bne.n	8008c54 <f_open+0x2ec>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008c54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d103      	bne.n	8008c6c <f_open+0x304>
 8008c64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d8e0      	bhi.n	8008c2e <f_open+0x2c6>
				}
				fp->clust = clst;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c70:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d127      	bne.n	8008cca <f_open+0x362>
 8008c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d022      	beq.n	8008cca <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fe fcdb 	bl	8007644 <clust2sect>
 8008c8e:	6478      	str	r0, [r7, #68]	; 0x44
 8008c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d103      	bne.n	8008c9e <f_open+0x336>
						res = FR_INT_ERR;
 8008c96:	2302      	movs	r3, #2
 8008c98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008c9c:	e015      	b.n	8008cca <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ca0:	0a5a      	lsrs	r2, r3, #9
 8008ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	7858      	ldrb	r0, [r3, #1]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a1a      	ldr	r2, [r3, #32]
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f7fe f919 	bl	8006ef0 <disk_read>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <f_open+0x362>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <f_open+0x370>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008cd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3760      	adds	r7, #96	; 0x60
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b08e      	sub	sp, #56	; 0x38
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f107 0214 	add.w	r2, r7, #20
 8008d02:	4611      	mov	r1, r2
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7ff fdb3 	bl	8008870 <validate>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008d10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d107      	bne.n	8008d28 <f_read+0x44>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	7d5b      	ldrb	r3, [r3, #21]
 8008d1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008d20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d002      	beq.n	8008d2e <f_read+0x4a>
 8008d28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d2c:	e115      	b.n	8008f5a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	7d1b      	ldrb	r3, [r3, #20]
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <f_read+0x5a>
 8008d3a:	2307      	movs	r3, #7
 8008d3c:	e10d      	b.n	8008f5a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	f240 80fe 	bls.w	8008f50 <f_read+0x26c>
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008d58:	e0fa      	b.n	8008f50 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f040 80c6 	bne.w	8008ef4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	0a5b      	lsrs	r3, r3, #9
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	8952      	ldrh	r2, [r2, #10]
 8008d72:	3a01      	subs	r2, #1
 8008d74:	4013      	ands	r3, r2
 8008d76:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d12f      	bne.n	8008dde <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8008d8c:	e013      	b.n	8008db6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d007      	beq.n	8008da6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f7fe fef9 	bl	8007b94 <clmt_clust>
 8008da2:	6338      	str	r0, [r7, #48]	; 0x30
 8008da4:	e007      	b.n	8008db6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	4619      	mov	r1, r3
 8008dae:	4610      	mov	r0, r2
 8008db0:	f7fe fc67 	bl	8007682 <get_fat>
 8008db4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d804      	bhi.n	8008dc6 <f_read+0xe2>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	755a      	strb	r2, [r3, #21]
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	e0c9      	b.n	8008f5a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dcc:	d104      	bne.n	8008dd8 <f_read+0xf4>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	755a      	strb	r2, [r3, #21]
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e0c0      	b.n	8008f5a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ddc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	4619      	mov	r1, r3
 8008de6:	4610      	mov	r0, r2
 8008de8:	f7fe fc2c 	bl	8007644 <clust2sect>
 8008dec:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d104      	bne.n	8008dfe <f_read+0x11a>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2202      	movs	r2, #2
 8008df8:	755a      	strb	r2, [r3, #21]
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	e0ad      	b.n	8008f5a <f_read+0x276>
			sect += csect;
 8008dfe:	69ba      	ldr	r2, [r7, #24]
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	4413      	add	r3, r2
 8008e04:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	0a5b      	lsrs	r3, r3, #9
 8008e0a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d039      	beq.n	8008e86 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008e12:	69fa      	ldr	r2, [r7, #28]
 8008e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e16:	4413      	add	r3, r2
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	8952      	ldrh	r2, [r2, #10]
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d905      	bls.n	8008e2c <f_read+0x148>
					cc = fs->csize - csect;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	895b      	ldrh	r3, [r3, #10]
 8008e24:	461a      	mov	r2, r3
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	7858      	ldrb	r0, [r3, #1]
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e36:	f7fe f85b 	bl	8006ef0 <disk_read>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d004      	beq.n	8008e4a <f_read+0x166>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2201      	movs	r2, #1
 8008e44:	755a      	strb	r2, [r3, #21]
 8008e46:	2301      	movs	r3, #1
 8008e48:	e087      	b.n	8008f5a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	7d1b      	ldrb	r3, [r3, #20]
 8008e4e:	b25b      	sxtb	r3, r3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	da14      	bge.n	8008e7e <f_read+0x19a>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a1a      	ldr	r2, [r3, #32]
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d90d      	bls.n	8008e7e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6a1a      	ldr	r2, [r3, #32]
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	025b      	lsls	r3, r3, #9
 8008e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6e:	18d0      	adds	r0, r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3330      	adds	r3, #48	; 0x30
 8008e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f7fe f919 	bl	80070b0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e80:	025b      	lsls	r3, r3, #9
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008e84:	e050      	b.n	8008f28 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d02e      	beq.n	8008eee <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	7d1b      	ldrb	r3, [r3, #20]
 8008e94:	b25b      	sxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	da18      	bge.n	8008ecc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	7858      	ldrb	r0, [r3, #1]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6a1a      	ldr	r2, [r3, #32]
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	f7fe f841 	bl	8006f30 <disk_write>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d004      	beq.n	8008ebe <f_read+0x1da>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	755a      	strb	r2, [r3, #21]
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e04d      	b.n	8008f5a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	7d1b      	ldrb	r3, [r3, #20]
 8008ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	7858      	ldrb	r0, [r3, #1]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	69ba      	ldr	r2, [r7, #24]
 8008eda:	f7fe f809 	bl	8006ef0 <disk_read>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d004      	beq.n	8008eee <f_read+0x20a>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	755a      	strb	r2, [r3, #21]
 8008eea:	2301      	movs	r3, #1
 8008eec:	e035      	b.n	8008f5a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008f00:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d901      	bls.n	8008f0e <f_read+0x22a>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f1c:	4413      	add	r3, r2
 8008f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f20:	4619      	mov	r1, r3
 8008f22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f24:	f7fe f8c4 	bl	80070b0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2c:	4413      	add	r3, r2
 8008f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	699a      	ldr	r2, [r3, #24]
 8008f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f36:	441a      	add	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	619a      	str	r2, [r3, #24]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f42:	441a      	add	r2, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f47f af01 	bne.w	8008d5a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3738      	adds	r7, #56	; 0x38
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b086      	sub	sp, #24
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f107 0208 	add.w	r2, r7, #8
 8008f70:	4611      	mov	r1, r2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7ff fc7c 	bl	8008870 <validate>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f7c:	7dfb      	ldrb	r3, [r7, #23]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d168      	bne.n	8009054 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	7d1b      	ldrb	r3, [r3, #20]
 8008f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d062      	beq.n	8009054 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	7d1b      	ldrb	r3, [r3, #20]
 8008f92:	b25b      	sxtb	r3, r3
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	da15      	bge.n	8008fc4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	7858      	ldrb	r0, [r3, #1]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a1a      	ldr	r2, [r3, #32]
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	f7fd ffc2 	bl	8006f30 <disk_write>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <f_sync+0x54>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e04f      	b.n	8009056 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	7d1b      	ldrb	r3, [r3, #20]
 8008fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008fc4:	f7fd fdc0 	bl	8006b48 <get_fattime>
 8008fc8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	f7fe fa9a 	bl	800750c <move_window>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d138      	bne.n	8009054 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	330b      	adds	r3, #11
 8008fec:	781a      	ldrb	r2, [r3, #0]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	330b      	adds	r3, #11
 8008ff2:	f042 0220 	orr.w	r2, r2, #32
 8008ff6:	b2d2      	uxtb	r2, r2
 8008ff8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	461a      	mov	r2, r3
 8009004:	68f9      	ldr	r1, [r7, #12]
 8009006:	f7fe ff9f 	bl	8007f48 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f103 021c 	add.w	r2, r3, #28
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	4619      	mov	r1, r3
 8009016:	4610      	mov	r0, r2
 8009018:	f7fe f81e 	bl	8007058 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	3316      	adds	r3, #22
 8009020:	6939      	ldr	r1, [r7, #16]
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe f818 	bl	8007058 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	3312      	adds	r3, #18
 800902c:	2100      	movs	r1, #0
 800902e:	4618      	mov	r0, r3
 8009030:	f7fd fff7 	bl	8007022 <st_word>
					fs->wflag = 1;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2201      	movs	r2, #1
 8009038:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	4618      	mov	r0, r3
 800903e:	f7fe fa93 	bl	8007568 <sync_fs>
 8009042:	4603      	mov	r3, r0
 8009044:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	7d1b      	ldrb	r3, [r3, #20]
 800904a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800904e:	b2da      	uxtb	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009054:	7dfb      	ldrb	r3, [r7, #23]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7ff ff7b 	bl	8008f62 <f_sync>
 800906c:	4603      	mov	r3, r0
 800906e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d118      	bne.n	80090a8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f107 0208 	add.w	r2, r7, #8
 800907c:	4611      	mov	r1, r2
 800907e:	4618      	mov	r0, r3
 8009080:	f7ff fbf6 	bl	8008870 <validate>
 8009084:	4603      	mov	r3, r0
 8009086:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009088:	7bfb      	ldrb	r3, [r7, #15]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10c      	bne.n	80090a8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe f996 	bl	80073c4 <dec_lock>
 8009098:	4603      	mov	r3, r0
 800909a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d102      	bne.n	80090a8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b092      	sub	sp, #72	; 0x48
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80090be:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80090c2:	f107 030c 	add.w	r3, r7, #12
 80090c6:	2200      	movs	r2, #0
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7ff f985 	bl	80083d8 <find_volume>
 80090ce:	4603      	mov	r3, r0
 80090d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80090d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f040 8099 	bne.w	8009210 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80090de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80090e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e6:	691a      	ldr	r2, [r3, #16]
 80090e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ea:	695b      	ldr	r3, [r3, #20]
 80090ec:	3b02      	subs	r3, #2
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d804      	bhi.n	80090fc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80090f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f4:	691a      	ldr	r2, [r3, #16]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	e089      	b.n	8009210 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d128      	bne.n	800915a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009108:	2302      	movs	r3, #2
 800910a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800910c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009110:	f107 0314 	add.w	r3, r7, #20
 8009114:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009116:	4618      	mov	r0, r3
 8009118:	f7fe fab3 	bl	8007682 <get_fat>
 800911c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800911e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009124:	d103      	bne.n	800912e <f_getfree+0x7c>
 8009126:	2301      	movs	r3, #1
 8009128:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800912c:	e063      	b.n	80091f6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800912e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009130:	2b01      	cmp	r3, #1
 8009132:	d103      	bne.n	800913c <f_getfree+0x8a>
 8009134:	2302      	movs	r3, #2
 8009136:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800913a:	e05c      	b.n	80091f6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913e:	2b00      	cmp	r3, #0
 8009140:	d102      	bne.n	8009148 <f_getfree+0x96>
 8009142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009144:	3301      	adds	r3, #1
 8009146:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800914a:	3301      	adds	r3, #1
 800914c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009154:	429a      	cmp	r2, r3
 8009156:	d3db      	bcc.n	8009110 <f_getfree+0x5e>
 8009158:	e04d      	b.n	80091f6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	637b      	str	r3, [r7, #52]	; 0x34
 800916a:	2300      	movs	r3, #0
 800916c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800916e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009170:	2b00      	cmp	r3, #0
 8009172:	d113      	bne.n	800919c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	63ba      	str	r2, [r7, #56]	; 0x38
 800917c:	4619      	mov	r1, r3
 800917e:	f7fe f9c5 	bl	800750c <move_window>
 8009182:	4603      	mov	r3, r0
 8009184:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009188:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800918c:	2b00      	cmp	r3, #0
 800918e:	d131      	bne.n	80091f4 <f_getfree+0x142>
							p = fs->win;
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	3330      	adds	r3, #48	; 0x30
 8009194:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800919a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d10f      	bne.n	80091c4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80091a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091a6:	f7fd ff01 	bl	8006fac <ld_word>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d102      	bne.n	80091b6 <f_getfree+0x104>
 80091b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b2:	3301      	adds	r3, #1
 80091b4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	3302      	adds	r3, #2
 80091ba:	633b      	str	r3, [r7, #48]	; 0x30
 80091bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091be:	3b02      	subs	r3, #2
 80091c0:	637b      	str	r3, [r7, #52]	; 0x34
 80091c2:	e010      	b.n	80091e6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80091c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091c6:	f7fd ff09 	bl	8006fdc <ld_dword>
 80091ca:	4603      	mov	r3, r0
 80091cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d102      	bne.n	80091da <f_getfree+0x128>
 80091d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d6:	3301      	adds	r3, #1
 80091d8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80091da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091dc:	3304      	adds	r3, #4
 80091de:	633b      	str	r3, [r7, #48]	; 0x30
 80091e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e2:	3b04      	subs	r3, #4
 80091e4:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80091e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e8:	3b01      	subs	r3, #1
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1bd      	bne.n	800916e <f_getfree+0xbc>
 80091f2:	e000      	b.n	80091f6 <f_getfree+0x144>
							if (res != FR_OK) break;
 80091f4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091fa:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009200:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009204:	791a      	ldrb	r2, [r3, #4]
 8009206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009208:	f042 0201 	orr.w	r2, r2, #1
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009210:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009214:	4618      	mov	r0, r3
 8009216:	3748      	adds	r7, #72	; 0x48
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009228:	2300      	movs	r3, #0
 800922a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009230:	e01b      	b.n	800926a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009232:	f107 0310 	add.w	r3, r7, #16
 8009236:	f107 0114 	add.w	r1, r7, #20
 800923a:	2201      	movs	r2, #1
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7ff fd51 	bl	8008ce4 <f_read>
		if (rc != 1) break;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d116      	bne.n	8009276 <f_gets+0x5a>
		c = s[0];
 8009248:	7d3b      	ldrb	r3, [r7, #20]
 800924a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	2b0d      	cmp	r3, #13
 8009250:	d100      	bne.n	8009254 <f_gets+0x38>
 8009252:	e00a      	b.n	800926a <f_gets+0x4e>
		*p++ = c;
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	61ba      	str	r2, [r7, #24]
 800925a:	7dfa      	ldrb	r2, [r7, #23]
 800925c:	701a      	strb	r2, [r3, #0]
		n++;
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	3301      	adds	r3, #1
 8009262:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	2b0a      	cmp	r3, #10
 8009268:	d007      	beq.n	800927a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	3b01      	subs	r3, #1
 800926e:	69fa      	ldr	r2, [r7, #28]
 8009270:	429a      	cmp	r2, r3
 8009272:	dbde      	blt.n	8009232 <f_gets+0x16>
 8009274:	e002      	b.n	800927c <f_gets+0x60>
		if (rc != 1) break;
 8009276:	bf00      	nop
 8009278:	e000      	b.n	800927c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800927a:	bf00      	nop
	}
	*p = 0;
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	2200      	movs	r2, #0
 8009280:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <f_gets+0x70>
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	e000      	b.n	800928e <f_gets+0x72>
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3720      	adds	r7, #32
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	4613      	mov	r3, r2
 80092a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80092a6:	2301      	movs	r3, #1
 80092a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80092ae:	4b1f      	ldr	r3, [pc, #124]	; (800932c <FATFS_LinkDriverEx+0x94>)
 80092b0:	7a5b      	ldrb	r3, [r3, #9]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d131      	bne.n	800931c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80092b8:	4b1c      	ldr	r3, [pc, #112]	; (800932c <FATFS_LinkDriverEx+0x94>)
 80092ba:	7a5b      	ldrb	r3, [r3, #9]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	461a      	mov	r2, r3
 80092c0:	4b1a      	ldr	r3, [pc, #104]	; (800932c <FATFS_LinkDriverEx+0x94>)
 80092c2:	2100      	movs	r1, #0
 80092c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80092c6:	4b19      	ldr	r3, [pc, #100]	; (800932c <FATFS_LinkDriverEx+0x94>)
 80092c8:	7a5b      	ldrb	r3, [r3, #9]
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	4a17      	ldr	r2, [pc, #92]	; (800932c <FATFS_LinkDriverEx+0x94>)
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80092d6:	4b15      	ldr	r3, [pc, #84]	; (800932c <FATFS_LinkDriverEx+0x94>)
 80092d8:	7a5b      	ldrb	r3, [r3, #9]
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	461a      	mov	r2, r3
 80092de:	4b13      	ldr	r3, [pc, #76]	; (800932c <FATFS_LinkDriverEx+0x94>)
 80092e0:	4413      	add	r3, r2
 80092e2:	79fa      	ldrb	r2, [r7, #7]
 80092e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80092e6:	4b11      	ldr	r3, [pc, #68]	; (800932c <FATFS_LinkDriverEx+0x94>)
 80092e8:	7a5b      	ldrb	r3, [r3, #9]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	b2d1      	uxtb	r1, r2
 80092f0:	4a0e      	ldr	r2, [pc, #56]	; (800932c <FATFS_LinkDriverEx+0x94>)
 80092f2:	7251      	strb	r1, [r2, #9]
 80092f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80092f6:	7dbb      	ldrb	r3, [r7, #22]
 80092f8:	3330      	adds	r3, #48	; 0x30
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	3301      	adds	r3, #1
 8009304:	223a      	movs	r2, #58	; 0x3a
 8009306:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	3302      	adds	r3, #2
 800930c:	222f      	movs	r2, #47	; 0x2f
 800930e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	3303      	adds	r3, #3
 8009314:	2200      	movs	r2, #0
 8009316:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800931c:	7dfb      	ldrb	r3, [r7, #23]
}
 800931e:	4618      	mov	r0, r3
 8009320:	371c      	adds	r7, #28
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	200000d4 	.word	0x200000d4

08009330 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800933a:	2200      	movs	r2, #0
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7ff ffaa 	bl	8009298 <FATFS_LinkDriverEx>
 8009344:	4603      	mov	r3, r0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8009356:	4b24      	ldr	r3, [pc, #144]	; (80093e8 <_DoInit+0x98>)
 8009358:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2203      	movs	r2, #3
 800935e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2203      	movs	r2, #3
 8009364:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a20      	ldr	r2, [pc, #128]	; (80093ec <_DoInit+0x9c>)
 800936a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a20      	ldr	r2, [pc, #128]	; (80093f0 <_DoInit+0xa0>)
 8009370:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009378:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a17      	ldr	r2, [pc, #92]	; (80093ec <_DoInit+0x9c>)
 8009390:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a17      	ldr	r2, [pc, #92]	; (80093f4 <_DoInit+0xa4>)
 8009396:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2210      	movs	r2, #16
 800939c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3307      	adds	r3, #7
 80093b4:	4a10      	ldr	r2, [pc, #64]	; (80093f8 <_DoInit+0xa8>)
 80093b6:	6810      	ldr	r0, [r2, #0]
 80093b8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80093ba:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a0e      	ldr	r2, [pc, #56]	; (80093fc <_DoInit+0xac>)
 80093c2:	6810      	ldr	r0, [r2, #0]
 80093c4:	6018      	str	r0, [r3, #0]
 80093c6:	8891      	ldrh	r1, [r2, #4]
 80093c8:	7992      	ldrb	r2, [r2, #6]
 80093ca:	8099      	strh	r1, [r3, #4]
 80093cc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80093ce:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2220      	movs	r2, #32
 80093d6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80093d8:	f3bf 8f5f 	dmb	sy
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	20008cac 	.word	0x20008cac
 80093ec:	0800a744 	.word	0x0800a744
 80093f0:	200000e0 	.word	0x200000e0
 80093f4:	200004e0 	.word	0x200004e0
 80093f8:	0800a750 	.word	0x0800a750
 80093fc:	0800a754 	.word	0x0800a754

08009400 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8009400:	b580      	push	{r7, lr}
 8009402:	b08a      	sub	sp, #40	; 0x28
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800940c:	2300      	movs	r3, #0
 800940e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800941c:	69ba      	ldr	r2, [r7, #24]
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	429a      	cmp	r2, r3
 8009422:	d905      	bls.n	8009430 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	627b      	str	r3, [r7, #36]	; 0x24
 800942e:	e007      	b.n	8009440 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	69b9      	ldr	r1, [r7, #24]
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	1acb      	subs	r3, r1, r3
 800943a:	4413      	add	r3, r2
 800943c:	3b01      	subs	r3, #1
 800943e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944a:	4293      	cmp	r3, r2
 800944c:	bf28      	it	cs
 800944e:	4613      	movcs	r3, r2
 8009450:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8009452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4293      	cmp	r3, r2
 8009458:	bf28      	it	cs
 800945a:	4613      	movcs	r3, r2
 800945c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	4413      	add	r3, r2
 8009466:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8009468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800946a:	68b9      	ldr	r1, [r7, #8]
 800946c:	6978      	ldr	r0, [r7, #20]
 800946e:	f000 f9a9 	bl	80097c4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8009472:	6a3a      	ldr	r2, [r7, #32]
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	4413      	add	r3, r2
 8009478:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	4413      	add	r3, r2
 8009480:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800948a:	69fa      	ldr	r2, [r7, #28]
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	4413      	add	r3, r2
 8009490:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	69fa      	ldr	r2, [r7, #28]
 8009498:	429a      	cmp	r2, r3
 800949a:	d101      	bne.n	80094a0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800949c:	2300      	movs	r3, #0
 800949e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80094a0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	69fa      	ldr	r2, [r7, #28]
 80094a8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1b2      	bne.n	8009416 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80094b0:	6a3b      	ldr	r3, [r7, #32]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3728      	adds	r7, #40	; 0x28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b088      	sub	sp, #32
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	689a      	ldr	r2, [r3, #8]
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d911      	bls.n	8009502 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	4413      	add	r3, r2
 80094e6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	68b9      	ldr	r1, [r7, #8]
 80094ec:	6938      	ldr	r0, [r7, #16]
 80094ee:	f000 f969 	bl	80097c4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80094f2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	441a      	add	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8009500:	e01f      	b.n	8009542 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	4413      	add	r3, r2
 800950e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	68b9      	ldr	r1, [r7, #8]
 8009514:	6938      	ldr	r0, [r7, #16]
 8009516:	f000 f955 	bl	80097c4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	4413      	add	r3, r2
 800952e:	697a      	ldr	r2, [r7, #20]
 8009530:	4619      	mov	r1, r3
 8009532:	6938      	ldr	r0, [r7, #16]
 8009534:	f000 f946 	bl	80097c4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009538:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	60da      	str	r2, [r3, #12]
}
 8009542:	bf00      	nop
 8009544:	3720      	adds	r7, #32
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800954a:	b480      	push	{r7}
 800954c:	b087      	sub	sp, #28
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	429a      	cmp	r2, r3
 8009564:	d808      	bhi.n	8009578 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	689a      	ldr	r2, [r3, #8]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	1ad2      	subs	r2, r2, r3
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	4413      	add	r3, r2
 8009572:	3b01      	subs	r3, #1
 8009574:	617b      	str	r3, [r7, #20]
 8009576:	e004      	b.n	8009582 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	3b01      	subs	r3, #1
 8009580:	617b      	str	r3, [r7, #20]
  }
  return r;
 8009582:	697b      	ldr	r3, [r7, #20]
}
 8009584:	4618      	mov	r0, r3
 8009586:	371c      	adds	r7, #28
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	1c5a      	adds	r2, r3, #1
 80095a4:	4613      	mov	r3, r2
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	4413      	add	r3, r2
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	4a1e      	ldr	r2, [pc, #120]	; (8009628 <SEGGER_RTT_WriteNoLock+0x98>)
 80095ae:	4413      	add	r3, r2
 80095b0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d017      	beq.n	80095ea <SEGGER_RTT_WriteNoLock+0x5a>
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d302      	bcc.n	80095c4 <SEGGER_RTT_WriteNoLock+0x34>
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d023      	beq.n	800960a <SEGGER_RTT_WriteNoLock+0x7a>
 80095c2:	e029      	b.n	8009618 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80095c4:	6978      	ldr	r0, [r7, #20]
 80095c6:	f7ff ffc0 	bl	800954a <_GetAvailWriteSpace>
 80095ca:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d202      	bcs.n	80095da <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 80095d4:	2300      	movs	r3, #0
 80095d6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80095d8:	e021      	b.n	800961e <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	69b9      	ldr	r1, [r7, #24]
 80095e2:	6978      	ldr	r0, [r7, #20]
 80095e4:	f7ff ff69 	bl	80094ba <_WriteNoCheck>
    break;
 80095e8:	e019      	b.n	800961e <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80095ea:	6978      	ldr	r0, [r7, #20]
 80095ec:	f7ff ffad 	bl	800954a <_GetAvailWriteSpace>
 80095f0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	4293      	cmp	r3, r2
 80095f8:	bf28      	it	cs
 80095fa:	4613      	movcs	r3, r2
 80095fc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	69b9      	ldr	r1, [r7, #24]
 8009602:	6978      	ldr	r0, [r7, #20]
 8009604:	f7ff ff59 	bl	80094ba <_WriteNoCheck>
    break;
 8009608:	e009      	b.n	800961e <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	69b9      	ldr	r1, [r7, #24]
 800960e:	6978      	ldr	r0, [r7, #20]
 8009610:	f7ff fef6 	bl	8009400 <_WriteBlocking>
 8009614:	61f8      	str	r0, [r7, #28]
    break;
 8009616:	e002      	b.n	800961e <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8009618:	2300      	movs	r3, #0
 800961a:	61fb      	str	r3, [r7, #28]
    break;
 800961c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800961e:	69fb      	ldr	r3, [r7, #28]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3720      	adds	r7, #32
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	20008cac 	.word	0x20008cac

0800962c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8009638:	4b0e      	ldr	r3, [pc, #56]	; (8009674 <SEGGER_RTT_Write+0x48>)
 800963a:	61fb      	str	r3, [r7, #28]
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d101      	bne.n	800964a <SEGGER_RTT_Write+0x1e>
 8009646:	f7ff fe83 	bl	8009350 <_DoInit>
  SEGGER_RTT_LOCK();
 800964a:	f3ef 8311 	mrs	r3, BASEPRI
 800964e:	f04f 0120 	mov.w	r1, #32
 8009652:	f381 8811 	msr	BASEPRI, r1
 8009656:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	68b9      	ldr	r1, [r7, #8]
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f7ff ff97 	bl	8009590 <SEGGER_RTT_WriteNoLock>
 8009662:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800966a:	697b      	ldr	r3, [r7, #20]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3720      	adds	r7, #32
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	20008cac 	.word	0x20008cac

08009678 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8009686:	4b33      	ldr	r3, [pc, #204]	; (8009754 <SEGGER_RTT_ConfigUpBuffer+0xdc>)
 8009688:	61bb      	str	r3, [r7, #24]
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <SEGGER_RTT_ConfigUpBuffer+0x20>
 8009694:	f7ff fe5c 	bl	8009350 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009698:	4b2e      	ldr	r3, [pc, #184]	; (8009754 <SEGGER_RTT_ConfigUpBuffer+0xdc>)
 800969a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumUpBuffers) {
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	461a      	mov	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d24c      	bcs.n	8009742 <SEGGER_RTT_ConfigUpBuffer+0xca>
    SEGGER_RTT_LOCK();
 80096a8:	f3ef 8311 	mrs	r3, BASEPRI
 80096ac:	f04f 0120 	mov.w	r1, #32
 80096b0:	f381 8811 	msr	BASEPRI, r1
 80096b4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d032      	beq.n	8009722 <SEGGER_RTT_ConfigUpBuffer+0xaa>
      pRTTCB->aUp[BufferIndex].sName        = sName;
 80096bc:	6979      	ldr	r1, [r7, #20]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	4613      	mov	r3, r2
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	4413      	add	r3, r2
 80096c8:	00db      	lsls	r3, r3, #3
 80096ca:	440b      	add	r3, r1
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80096d0:	6979      	ldr	r1, [r7, #20]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	1c5a      	adds	r2, r3, #1
 80096d6:	4613      	mov	r3, r2
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	4413      	add	r3, r2
 80096dc:	00db      	lsls	r3, r3, #3
 80096de:	440b      	add	r3, r1
 80096e0:	3304      	adds	r3, #4
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80096e6:	6979      	ldr	r1, [r7, #20]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4613      	mov	r3, r2
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	4413      	add	r3, r2
 80096f0:	00db      	lsls	r3, r3, #3
 80096f2:	440b      	add	r3, r1
 80096f4:	3320      	adds	r3, #32
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80096fa:	6979      	ldr	r1, [r7, #20]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	4613      	mov	r3, r2
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	4413      	add	r3, r2
 8009704:	00db      	lsls	r3, r3, #3
 8009706:	440b      	add	r3, r1
 8009708:	3328      	adds	r3, #40	; 0x28
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800970e:	6979      	ldr	r1, [r7, #20]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	4613      	mov	r3, r2
 8009714:	005b      	lsls	r3, r3, #1
 8009716:	4413      	add	r3, r2
 8009718:	00db      	lsls	r3, r3, #3
 800971a:	440b      	add	r3, r1
 800971c:	3324      	adds	r3, #36	; 0x24
 800971e:	2200      	movs	r2, #0
 8009720:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aUp[BufferIndex].Flags          = Flags;
 8009722:	6979      	ldr	r1, [r7, #20]
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	4613      	mov	r3, r2
 8009728:	005b      	lsls	r3, r3, #1
 800972a:	4413      	add	r3, r2
 800972c:	00db      	lsls	r3, r3, #3
 800972e:	440b      	add	r3, r1
 8009730:	332c      	adds	r3, #44	; 0x2c
 8009732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009734:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800973c:	2300      	movs	r3, #0
 800973e:	61fb      	str	r3, [r7, #28]
 8009740:	e002      	b.n	8009748 <SEGGER_RTT_ConfigUpBuffer+0xd0>
  } else {
    r = -1;
 8009742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009746:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8009748:	69fb      	ldr	r3, [r7, #28]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3720      	adds	r7, #32
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	20008cac 	.word	0x20008cac

08009758 <arm_biquad_cascade_df1_init_f32>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4604      	mov	r4, r0
 800975c:	6082      	str	r2, [r0, #8]
 800975e:	6001      	str	r1, [r0, #0]
 8009760:	461d      	mov	r5, r3
 8009762:	010a      	lsls	r2, r1, #4
 8009764:	4618      	mov	r0, r3
 8009766:	2100      	movs	r1, #0
 8009768:	f000 f837 	bl	80097da <memset>
 800976c:	6065      	str	r5, [r4, #4]
 800976e:	bd38      	pop	{r3, r4, r5, pc}

08009770 <__errno>:
 8009770:	4b01      	ldr	r3, [pc, #4]	; (8009778 <__errno+0x8>)
 8009772:	6818      	ldr	r0, [r3, #0]
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	20000020 	.word	0x20000020

0800977c <__libc_init_array>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	4e0d      	ldr	r6, [pc, #52]	; (80097b4 <__libc_init_array+0x38>)
 8009780:	4c0d      	ldr	r4, [pc, #52]	; (80097b8 <__libc_init_array+0x3c>)
 8009782:	1ba4      	subs	r4, r4, r6
 8009784:	10a4      	asrs	r4, r4, #2
 8009786:	2500      	movs	r5, #0
 8009788:	42a5      	cmp	r5, r4
 800978a:	d109      	bne.n	80097a0 <__libc_init_array+0x24>
 800978c:	4e0b      	ldr	r6, [pc, #44]	; (80097bc <__libc_init_array+0x40>)
 800978e:	4c0c      	ldr	r4, [pc, #48]	; (80097c0 <__libc_init_array+0x44>)
 8009790:	f000 ff10 	bl	800a5b4 <_init>
 8009794:	1ba4      	subs	r4, r4, r6
 8009796:	10a4      	asrs	r4, r4, #2
 8009798:	2500      	movs	r5, #0
 800979a:	42a5      	cmp	r5, r4
 800979c:	d105      	bne.n	80097aa <__libc_init_array+0x2e>
 800979e:	bd70      	pop	{r4, r5, r6, pc}
 80097a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097a4:	4798      	blx	r3
 80097a6:	3501      	adds	r5, #1
 80097a8:	e7ee      	b.n	8009788 <__libc_init_array+0xc>
 80097aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097ae:	4798      	blx	r3
 80097b0:	3501      	adds	r5, #1
 80097b2:	e7f2      	b.n	800979a <__libc_init_array+0x1e>
 80097b4:	0800a8a8 	.word	0x0800a8a8
 80097b8:	0800a8a8 	.word	0x0800a8a8
 80097bc:	0800a8a8 	.word	0x0800a8a8
 80097c0:	0800a8ac 	.word	0x0800a8ac

080097c4 <memcpy>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	1e43      	subs	r3, r0, #1
 80097c8:	440a      	add	r2, r1
 80097ca:	4291      	cmp	r1, r2
 80097cc:	d100      	bne.n	80097d0 <memcpy+0xc>
 80097ce:	bd10      	pop	{r4, pc}
 80097d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097d8:	e7f7      	b.n	80097ca <memcpy+0x6>

080097da <memset>:
 80097da:	4402      	add	r2, r0
 80097dc:	4603      	mov	r3, r0
 80097de:	4293      	cmp	r3, r2
 80097e0:	d100      	bne.n	80097e4 <memset+0xa>
 80097e2:	4770      	bx	lr
 80097e4:	f803 1b01 	strb.w	r1, [r3], #1
 80097e8:	e7f9      	b.n	80097de <memset+0x4>
	...

080097ec <iprintf>:
 80097ec:	b40f      	push	{r0, r1, r2, r3}
 80097ee:	4b0a      	ldr	r3, [pc, #40]	; (8009818 <iprintf+0x2c>)
 80097f0:	b513      	push	{r0, r1, r4, lr}
 80097f2:	681c      	ldr	r4, [r3, #0]
 80097f4:	b124      	cbz	r4, 8009800 <iprintf+0x14>
 80097f6:	69a3      	ldr	r3, [r4, #24]
 80097f8:	b913      	cbnz	r3, 8009800 <iprintf+0x14>
 80097fa:	4620      	mov	r0, r4
 80097fc:	f000 f9be 	bl	8009b7c <__sinit>
 8009800:	ab05      	add	r3, sp, #20
 8009802:	9a04      	ldr	r2, [sp, #16]
 8009804:	68a1      	ldr	r1, [r4, #8]
 8009806:	9301      	str	r3, [sp, #4]
 8009808:	4620      	mov	r0, r4
 800980a:	f000 fb77 	bl	8009efc <_vfiprintf_r>
 800980e:	b002      	add	sp, #8
 8009810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009814:	b004      	add	sp, #16
 8009816:	4770      	bx	lr
 8009818:	20000020 	.word	0x20000020

0800981c <__swbuf_r>:
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981e:	460e      	mov	r6, r1
 8009820:	4614      	mov	r4, r2
 8009822:	4605      	mov	r5, r0
 8009824:	b118      	cbz	r0, 800982e <__swbuf_r+0x12>
 8009826:	6983      	ldr	r3, [r0, #24]
 8009828:	b90b      	cbnz	r3, 800982e <__swbuf_r+0x12>
 800982a:	f000 f9a7 	bl	8009b7c <__sinit>
 800982e:	4b21      	ldr	r3, [pc, #132]	; (80098b4 <__swbuf_r+0x98>)
 8009830:	429c      	cmp	r4, r3
 8009832:	d12a      	bne.n	800988a <__swbuf_r+0x6e>
 8009834:	686c      	ldr	r4, [r5, #4]
 8009836:	69a3      	ldr	r3, [r4, #24]
 8009838:	60a3      	str	r3, [r4, #8]
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	071a      	lsls	r2, r3, #28
 800983e:	d52e      	bpl.n	800989e <__swbuf_r+0x82>
 8009840:	6923      	ldr	r3, [r4, #16]
 8009842:	b363      	cbz	r3, 800989e <__swbuf_r+0x82>
 8009844:	6923      	ldr	r3, [r4, #16]
 8009846:	6820      	ldr	r0, [r4, #0]
 8009848:	1ac0      	subs	r0, r0, r3
 800984a:	6963      	ldr	r3, [r4, #20]
 800984c:	b2f6      	uxtb	r6, r6
 800984e:	4283      	cmp	r3, r0
 8009850:	4637      	mov	r7, r6
 8009852:	dc04      	bgt.n	800985e <__swbuf_r+0x42>
 8009854:	4621      	mov	r1, r4
 8009856:	4628      	mov	r0, r5
 8009858:	f000 f926 	bl	8009aa8 <_fflush_r>
 800985c:	bb28      	cbnz	r0, 80098aa <__swbuf_r+0x8e>
 800985e:	68a3      	ldr	r3, [r4, #8]
 8009860:	3b01      	subs	r3, #1
 8009862:	60a3      	str	r3, [r4, #8]
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	1c5a      	adds	r2, r3, #1
 8009868:	6022      	str	r2, [r4, #0]
 800986a:	701e      	strb	r6, [r3, #0]
 800986c:	6963      	ldr	r3, [r4, #20]
 800986e:	3001      	adds	r0, #1
 8009870:	4283      	cmp	r3, r0
 8009872:	d004      	beq.n	800987e <__swbuf_r+0x62>
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	07db      	lsls	r3, r3, #31
 8009878:	d519      	bpl.n	80098ae <__swbuf_r+0x92>
 800987a:	2e0a      	cmp	r6, #10
 800987c:	d117      	bne.n	80098ae <__swbuf_r+0x92>
 800987e:	4621      	mov	r1, r4
 8009880:	4628      	mov	r0, r5
 8009882:	f000 f911 	bl	8009aa8 <_fflush_r>
 8009886:	b190      	cbz	r0, 80098ae <__swbuf_r+0x92>
 8009888:	e00f      	b.n	80098aa <__swbuf_r+0x8e>
 800988a:	4b0b      	ldr	r3, [pc, #44]	; (80098b8 <__swbuf_r+0x9c>)
 800988c:	429c      	cmp	r4, r3
 800988e:	d101      	bne.n	8009894 <__swbuf_r+0x78>
 8009890:	68ac      	ldr	r4, [r5, #8]
 8009892:	e7d0      	b.n	8009836 <__swbuf_r+0x1a>
 8009894:	4b09      	ldr	r3, [pc, #36]	; (80098bc <__swbuf_r+0xa0>)
 8009896:	429c      	cmp	r4, r3
 8009898:	bf08      	it	eq
 800989a:	68ec      	ldreq	r4, [r5, #12]
 800989c:	e7cb      	b.n	8009836 <__swbuf_r+0x1a>
 800989e:	4621      	mov	r1, r4
 80098a0:	4628      	mov	r0, r5
 80098a2:	f000 f80d 	bl	80098c0 <__swsetup_r>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d0cc      	beq.n	8009844 <__swbuf_r+0x28>
 80098aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80098ae:	4638      	mov	r0, r7
 80098b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b2:	bf00      	nop
 80098b4:	0800a82c 	.word	0x0800a82c
 80098b8:	0800a84c 	.word	0x0800a84c
 80098bc:	0800a80c 	.word	0x0800a80c

080098c0 <__swsetup_r>:
 80098c0:	4b32      	ldr	r3, [pc, #200]	; (800998c <__swsetup_r+0xcc>)
 80098c2:	b570      	push	{r4, r5, r6, lr}
 80098c4:	681d      	ldr	r5, [r3, #0]
 80098c6:	4606      	mov	r6, r0
 80098c8:	460c      	mov	r4, r1
 80098ca:	b125      	cbz	r5, 80098d6 <__swsetup_r+0x16>
 80098cc:	69ab      	ldr	r3, [r5, #24]
 80098ce:	b913      	cbnz	r3, 80098d6 <__swsetup_r+0x16>
 80098d0:	4628      	mov	r0, r5
 80098d2:	f000 f953 	bl	8009b7c <__sinit>
 80098d6:	4b2e      	ldr	r3, [pc, #184]	; (8009990 <__swsetup_r+0xd0>)
 80098d8:	429c      	cmp	r4, r3
 80098da:	d10f      	bne.n	80098fc <__swsetup_r+0x3c>
 80098dc:	686c      	ldr	r4, [r5, #4]
 80098de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	0715      	lsls	r5, r2, #28
 80098e6:	d42c      	bmi.n	8009942 <__swsetup_r+0x82>
 80098e8:	06d0      	lsls	r0, r2, #27
 80098ea:	d411      	bmi.n	8009910 <__swsetup_r+0x50>
 80098ec:	2209      	movs	r2, #9
 80098ee:	6032      	str	r2, [r6, #0]
 80098f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f4:	81a3      	strh	r3, [r4, #12]
 80098f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098fa:	e03e      	b.n	800997a <__swsetup_r+0xba>
 80098fc:	4b25      	ldr	r3, [pc, #148]	; (8009994 <__swsetup_r+0xd4>)
 80098fe:	429c      	cmp	r4, r3
 8009900:	d101      	bne.n	8009906 <__swsetup_r+0x46>
 8009902:	68ac      	ldr	r4, [r5, #8]
 8009904:	e7eb      	b.n	80098de <__swsetup_r+0x1e>
 8009906:	4b24      	ldr	r3, [pc, #144]	; (8009998 <__swsetup_r+0xd8>)
 8009908:	429c      	cmp	r4, r3
 800990a:	bf08      	it	eq
 800990c:	68ec      	ldreq	r4, [r5, #12]
 800990e:	e7e6      	b.n	80098de <__swsetup_r+0x1e>
 8009910:	0751      	lsls	r1, r2, #29
 8009912:	d512      	bpl.n	800993a <__swsetup_r+0x7a>
 8009914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009916:	b141      	cbz	r1, 800992a <__swsetup_r+0x6a>
 8009918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800991c:	4299      	cmp	r1, r3
 800991e:	d002      	beq.n	8009926 <__swsetup_r+0x66>
 8009920:	4630      	mov	r0, r6
 8009922:	f000 fa19 	bl	8009d58 <_free_r>
 8009926:	2300      	movs	r3, #0
 8009928:	6363      	str	r3, [r4, #52]	; 0x34
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009930:	81a3      	strh	r3, [r4, #12]
 8009932:	2300      	movs	r3, #0
 8009934:	6063      	str	r3, [r4, #4]
 8009936:	6923      	ldr	r3, [r4, #16]
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	f043 0308 	orr.w	r3, r3, #8
 8009940:	81a3      	strh	r3, [r4, #12]
 8009942:	6923      	ldr	r3, [r4, #16]
 8009944:	b94b      	cbnz	r3, 800995a <__swsetup_r+0x9a>
 8009946:	89a3      	ldrh	r3, [r4, #12]
 8009948:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800994c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009950:	d003      	beq.n	800995a <__swsetup_r+0x9a>
 8009952:	4621      	mov	r1, r4
 8009954:	4630      	mov	r0, r6
 8009956:	f000 f9bf 	bl	8009cd8 <__smakebuf_r>
 800995a:	89a2      	ldrh	r2, [r4, #12]
 800995c:	f012 0301 	ands.w	r3, r2, #1
 8009960:	d00c      	beq.n	800997c <__swsetup_r+0xbc>
 8009962:	2300      	movs	r3, #0
 8009964:	60a3      	str	r3, [r4, #8]
 8009966:	6963      	ldr	r3, [r4, #20]
 8009968:	425b      	negs	r3, r3
 800996a:	61a3      	str	r3, [r4, #24]
 800996c:	6923      	ldr	r3, [r4, #16]
 800996e:	b953      	cbnz	r3, 8009986 <__swsetup_r+0xc6>
 8009970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009974:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009978:	d1ba      	bne.n	80098f0 <__swsetup_r+0x30>
 800997a:	bd70      	pop	{r4, r5, r6, pc}
 800997c:	0792      	lsls	r2, r2, #30
 800997e:	bf58      	it	pl
 8009980:	6963      	ldrpl	r3, [r4, #20]
 8009982:	60a3      	str	r3, [r4, #8]
 8009984:	e7f2      	b.n	800996c <__swsetup_r+0xac>
 8009986:	2000      	movs	r0, #0
 8009988:	e7f7      	b.n	800997a <__swsetup_r+0xba>
 800998a:	bf00      	nop
 800998c:	20000020 	.word	0x20000020
 8009990:	0800a82c 	.word	0x0800a82c
 8009994:	0800a84c 	.word	0x0800a84c
 8009998:	0800a80c 	.word	0x0800a80c

0800999c <__sflush_r>:
 800999c:	898a      	ldrh	r2, [r1, #12]
 800999e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a2:	4605      	mov	r5, r0
 80099a4:	0710      	lsls	r0, r2, #28
 80099a6:	460c      	mov	r4, r1
 80099a8:	d458      	bmi.n	8009a5c <__sflush_r+0xc0>
 80099aa:	684b      	ldr	r3, [r1, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	dc05      	bgt.n	80099bc <__sflush_r+0x20>
 80099b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	dc02      	bgt.n	80099bc <__sflush_r+0x20>
 80099b6:	2000      	movs	r0, #0
 80099b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099be:	2e00      	cmp	r6, #0
 80099c0:	d0f9      	beq.n	80099b6 <__sflush_r+0x1a>
 80099c2:	2300      	movs	r3, #0
 80099c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099c8:	682f      	ldr	r7, [r5, #0]
 80099ca:	6a21      	ldr	r1, [r4, #32]
 80099cc:	602b      	str	r3, [r5, #0]
 80099ce:	d032      	beq.n	8009a36 <__sflush_r+0x9a>
 80099d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	075a      	lsls	r2, r3, #29
 80099d6:	d505      	bpl.n	80099e4 <__sflush_r+0x48>
 80099d8:	6863      	ldr	r3, [r4, #4]
 80099da:	1ac0      	subs	r0, r0, r3
 80099dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099de:	b10b      	cbz	r3, 80099e4 <__sflush_r+0x48>
 80099e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099e2:	1ac0      	subs	r0, r0, r3
 80099e4:	2300      	movs	r3, #0
 80099e6:	4602      	mov	r2, r0
 80099e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099ea:	6a21      	ldr	r1, [r4, #32]
 80099ec:	4628      	mov	r0, r5
 80099ee:	47b0      	blx	r6
 80099f0:	1c43      	adds	r3, r0, #1
 80099f2:	89a3      	ldrh	r3, [r4, #12]
 80099f4:	d106      	bne.n	8009a04 <__sflush_r+0x68>
 80099f6:	6829      	ldr	r1, [r5, #0]
 80099f8:	291d      	cmp	r1, #29
 80099fa:	d848      	bhi.n	8009a8e <__sflush_r+0xf2>
 80099fc:	4a29      	ldr	r2, [pc, #164]	; (8009aa4 <__sflush_r+0x108>)
 80099fe:	40ca      	lsrs	r2, r1
 8009a00:	07d6      	lsls	r6, r2, #31
 8009a02:	d544      	bpl.n	8009a8e <__sflush_r+0xf2>
 8009a04:	2200      	movs	r2, #0
 8009a06:	6062      	str	r2, [r4, #4]
 8009a08:	04d9      	lsls	r1, r3, #19
 8009a0a:	6922      	ldr	r2, [r4, #16]
 8009a0c:	6022      	str	r2, [r4, #0]
 8009a0e:	d504      	bpl.n	8009a1a <__sflush_r+0x7e>
 8009a10:	1c42      	adds	r2, r0, #1
 8009a12:	d101      	bne.n	8009a18 <__sflush_r+0x7c>
 8009a14:	682b      	ldr	r3, [r5, #0]
 8009a16:	b903      	cbnz	r3, 8009a1a <__sflush_r+0x7e>
 8009a18:	6560      	str	r0, [r4, #84]	; 0x54
 8009a1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a1c:	602f      	str	r7, [r5, #0]
 8009a1e:	2900      	cmp	r1, #0
 8009a20:	d0c9      	beq.n	80099b6 <__sflush_r+0x1a>
 8009a22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a26:	4299      	cmp	r1, r3
 8009a28:	d002      	beq.n	8009a30 <__sflush_r+0x94>
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f000 f994 	bl	8009d58 <_free_r>
 8009a30:	2000      	movs	r0, #0
 8009a32:	6360      	str	r0, [r4, #52]	; 0x34
 8009a34:	e7c0      	b.n	80099b8 <__sflush_r+0x1c>
 8009a36:	2301      	movs	r3, #1
 8009a38:	4628      	mov	r0, r5
 8009a3a:	47b0      	blx	r6
 8009a3c:	1c41      	adds	r1, r0, #1
 8009a3e:	d1c8      	bne.n	80099d2 <__sflush_r+0x36>
 8009a40:	682b      	ldr	r3, [r5, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d0c5      	beq.n	80099d2 <__sflush_r+0x36>
 8009a46:	2b1d      	cmp	r3, #29
 8009a48:	d001      	beq.n	8009a4e <__sflush_r+0xb2>
 8009a4a:	2b16      	cmp	r3, #22
 8009a4c:	d101      	bne.n	8009a52 <__sflush_r+0xb6>
 8009a4e:	602f      	str	r7, [r5, #0]
 8009a50:	e7b1      	b.n	80099b6 <__sflush_r+0x1a>
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a58:	81a3      	strh	r3, [r4, #12]
 8009a5a:	e7ad      	b.n	80099b8 <__sflush_r+0x1c>
 8009a5c:	690f      	ldr	r7, [r1, #16]
 8009a5e:	2f00      	cmp	r7, #0
 8009a60:	d0a9      	beq.n	80099b6 <__sflush_r+0x1a>
 8009a62:	0793      	lsls	r3, r2, #30
 8009a64:	680e      	ldr	r6, [r1, #0]
 8009a66:	bf08      	it	eq
 8009a68:	694b      	ldreq	r3, [r1, #20]
 8009a6a:	600f      	str	r7, [r1, #0]
 8009a6c:	bf18      	it	ne
 8009a6e:	2300      	movne	r3, #0
 8009a70:	eba6 0807 	sub.w	r8, r6, r7
 8009a74:	608b      	str	r3, [r1, #8]
 8009a76:	f1b8 0f00 	cmp.w	r8, #0
 8009a7a:	dd9c      	ble.n	80099b6 <__sflush_r+0x1a>
 8009a7c:	4643      	mov	r3, r8
 8009a7e:	463a      	mov	r2, r7
 8009a80:	6a21      	ldr	r1, [r4, #32]
 8009a82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a84:	4628      	mov	r0, r5
 8009a86:	47b0      	blx	r6
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	dc06      	bgt.n	8009a9a <__sflush_r+0xfe>
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a92:	81a3      	strh	r3, [r4, #12]
 8009a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a98:	e78e      	b.n	80099b8 <__sflush_r+0x1c>
 8009a9a:	4407      	add	r7, r0
 8009a9c:	eba8 0800 	sub.w	r8, r8, r0
 8009aa0:	e7e9      	b.n	8009a76 <__sflush_r+0xda>
 8009aa2:	bf00      	nop
 8009aa4:	20400001 	.word	0x20400001

08009aa8 <_fflush_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	690b      	ldr	r3, [r1, #16]
 8009aac:	4605      	mov	r5, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	b1db      	cbz	r3, 8009aea <_fflush_r+0x42>
 8009ab2:	b118      	cbz	r0, 8009abc <_fflush_r+0x14>
 8009ab4:	6983      	ldr	r3, [r0, #24]
 8009ab6:	b90b      	cbnz	r3, 8009abc <_fflush_r+0x14>
 8009ab8:	f000 f860 	bl	8009b7c <__sinit>
 8009abc:	4b0c      	ldr	r3, [pc, #48]	; (8009af0 <_fflush_r+0x48>)
 8009abe:	429c      	cmp	r4, r3
 8009ac0:	d109      	bne.n	8009ad6 <_fflush_r+0x2e>
 8009ac2:	686c      	ldr	r4, [r5, #4]
 8009ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ac8:	b17b      	cbz	r3, 8009aea <_fflush_r+0x42>
 8009aca:	4621      	mov	r1, r4
 8009acc:	4628      	mov	r0, r5
 8009ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad2:	f7ff bf63 	b.w	800999c <__sflush_r>
 8009ad6:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <_fflush_r+0x4c>)
 8009ad8:	429c      	cmp	r4, r3
 8009ada:	d101      	bne.n	8009ae0 <_fflush_r+0x38>
 8009adc:	68ac      	ldr	r4, [r5, #8]
 8009ade:	e7f1      	b.n	8009ac4 <_fflush_r+0x1c>
 8009ae0:	4b05      	ldr	r3, [pc, #20]	; (8009af8 <_fflush_r+0x50>)
 8009ae2:	429c      	cmp	r4, r3
 8009ae4:	bf08      	it	eq
 8009ae6:	68ec      	ldreq	r4, [r5, #12]
 8009ae8:	e7ec      	b.n	8009ac4 <_fflush_r+0x1c>
 8009aea:	2000      	movs	r0, #0
 8009aec:	bd38      	pop	{r3, r4, r5, pc}
 8009aee:	bf00      	nop
 8009af0:	0800a82c 	.word	0x0800a82c
 8009af4:	0800a84c 	.word	0x0800a84c
 8009af8:	0800a80c 	.word	0x0800a80c

08009afc <std>:
 8009afc:	2300      	movs	r3, #0
 8009afe:	b510      	push	{r4, lr}
 8009b00:	4604      	mov	r4, r0
 8009b02:	e9c0 3300 	strd	r3, r3, [r0]
 8009b06:	6083      	str	r3, [r0, #8]
 8009b08:	8181      	strh	r1, [r0, #12]
 8009b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b0c:	81c2      	strh	r2, [r0, #14]
 8009b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b12:	6183      	str	r3, [r0, #24]
 8009b14:	4619      	mov	r1, r3
 8009b16:	2208      	movs	r2, #8
 8009b18:	305c      	adds	r0, #92	; 0x5c
 8009b1a:	f7ff fe5e 	bl	80097da <memset>
 8009b1e:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <std+0x38>)
 8009b20:	6263      	str	r3, [r4, #36]	; 0x24
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <std+0x3c>)
 8009b24:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b26:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <std+0x40>)
 8009b28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b2a:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <std+0x44>)
 8009b2c:	6224      	str	r4, [r4, #32]
 8009b2e:	6323      	str	r3, [r4, #48]	; 0x30
 8009b30:	bd10      	pop	{r4, pc}
 8009b32:	bf00      	nop
 8009b34:	0800a459 	.word	0x0800a459
 8009b38:	0800a47b 	.word	0x0800a47b
 8009b3c:	0800a4b3 	.word	0x0800a4b3
 8009b40:	0800a4d7 	.word	0x0800a4d7

08009b44 <_cleanup_r>:
 8009b44:	4901      	ldr	r1, [pc, #4]	; (8009b4c <_cleanup_r+0x8>)
 8009b46:	f000 b885 	b.w	8009c54 <_fwalk_reent>
 8009b4a:	bf00      	nop
 8009b4c:	08009aa9 	.word	0x08009aa9

08009b50 <__sfmoreglue>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	1e4a      	subs	r2, r1, #1
 8009b54:	2568      	movs	r5, #104	; 0x68
 8009b56:	4355      	muls	r5, r2
 8009b58:	460e      	mov	r6, r1
 8009b5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b5e:	f000 f949 	bl	8009df4 <_malloc_r>
 8009b62:	4604      	mov	r4, r0
 8009b64:	b140      	cbz	r0, 8009b78 <__sfmoreglue+0x28>
 8009b66:	2100      	movs	r1, #0
 8009b68:	e9c0 1600 	strd	r1, r6, [r0]
 8009b6c:	300c      	adds	r0, #12
 8009b6e:	60a0      	str	r0, [r4, #8]
 8009b70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b74:	f7ff fe31 	bl	80097da <memset>
 8009b78:	4620      	mov	r0, r4
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}

08009b7c <__sinit>:
 8009b7c:	6983      	ldr	r3, [r0, #24]
 8009b7e:	b510      	push	{r4, lr}
 8009b80:	4604      	mov	r4, r0
 8009b82:	bb33      	cbnz	r3, 8009bd2 <__sinit+0x56>
 8009b84:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009b88:	6503      	str	r3, [r0, #80]	; 0x50
 8009b8a:	4b12      	ldr	r3, [pc, #72]	; (8009bd4 <__sinit+0x58>)
 8009b8c:	4a12      	ldr	r2, [pc, #72]	; (8009bd8 <__sinit+0x5c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6282      	str	r2, [r0, #40]	; 0x28
 8009b92:	4298      	cmp	r0, r3
 8009b94:	bf04      	itt	eq
 8009b96:	2301      	moveq	r3, #1
 8009b98:	6183      	streq	r3, [r0, #24]
 8009b9a:	f000 f81f 	bl	8009bdc <__sfp>
 8009b9e:	6060      	str	r0, [r4, #4]
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f000 f81b 	bl	8009bdc <__sfp>
 8009ba6:	60a0      	str	r0, [r4, #8]
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f000 f817 	bl	8009bdc <__sfp>
 8009bae:	2200      	movs	r2, #0
 8009bb0:	60e0      	str	r0, [r4, #12]
 8009bb2:	2104      	movs	r1, #4
 8009bb4:	6860      	ldr	r0, [r4, #4]
 8009bb6:	f7ff ffa1 	bl	8009afc <std>
 8009bba:	2201      	movs	r2, #1
 8009bbc:	2109      	movs	r1, #9
 8009bbe:	68a0      	ldr	r0, [r4, #8]
 8009bc0:	f7ff ff9c 	bl	8009afc <std>
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	2112      	movs	r1, #18
 8009bc8:	68e0      	ldr	r0, [r4, #12]
 8009bca:	f7ff ff97 	bl	8009afc <std>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	61a3      	str	r3, [r4, #24]
 8009bd2:	bd10      	pop	{r4, pc}
 8009bd4:	0800a808 	.word	0x0800a808
 8009bd8:	08009b45 	.word	0x08009b45

08009bdc <__sfp>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	4b1b      	ldr	r3, [pc, #108]	; (8009c4c <__sfp+0x70>)
 8009be0:	681e      	ldr	r6, [r3, #0]
 8009be2:	69b3      	ldr	r3, [r6, #24]
 8009be4:	4607      	mov	r7, r0
 8009be6:	b913      	cbnz	r3, 8009bee <__sfp+0x12>
 8009be8:	4630      	mov	r0, r6
 8009bea:	f7ff ffc7 	bl	8009b7c <__sinit>
 8009bee:	3648      	adds	r6, #72	; 0x48
 8009bf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	d503      	bpl.n	8009c00 <__sfp+0x24>
 8009bf8:	6833      	ldr	r3, [r6, #0]
 8009bfa:	b133      	cbz	r3, 8009c0a <__sfp+0x2e>
 8009bfc:	6836      	ldr	r6, [r6, #0]
 8009bfe:	e7f7      	b.n	8009bf0 <__sfp+0x14>
 8009c00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c04:	b16d      	cbz	r5, 8009c22 <__sfp+0x46>
 8009c06:	3468      	adds	r4, #104	; 0x68
 8009c08:	e7f4      	b.n	8009bf4 <__sfp+0x18>
 8009c0a:	2104      	movs	r1, #4
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	f7ff ff9f 	bl	8009b50 <__sfmoreglue>
 8009c12:	6030      	str	r0, [r6, #0]
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d1f1      	bne.n	8009bfc <__sfp+0x20>
 8009c18:	230c      	movs	r3, #12
 8009c1a:	603b      	str	r3, [r7, #0]
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	4620      	mov	r0, r4
 8009c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c22:	4b0b      	ldr	r3, [pc, #44]	; (8009c50 <__sfp+0x74>)
 8009c24:	6665      	str	r5, [r4, #100]	; 0x64
 8009c26:	e9c4 5500 	strd	r5, r5, [r4]
 8009c2a:	60a5      	str	r5, [r4, #8]
 8009c2c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009c30:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009c34:	2208      	movs	r2, #8
 8009c36:	4629      	mov	r1, r5
 8009c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c3c:	f7ff fdcd 	bl	80097da <memset>
 8009c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c48:	e7e9      	b.n	8009c1e <__sfp+0x42>
 8009c4a:	bf00      	nop
 8009c4c:	0800a808 	.word	0x0800a808
 8009c50:	ffff0001 	.word	0xffff0001

08009c54 <_fwalk_reent>:
 8009c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c58:	4680      	mov	r8, r0
 8009c5a:	4689      	mov	r9, r1
 8009c5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c60:	2600      	movs	r6, #0
 8009c62:	b914      	cbnz	r4, 8009c6a <_fwalk_reent+0x16>
 8009c64:	4630      	mov	r0, r6
 8009c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c6a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009c6e:	3f01      	subs	r7, #1
 8009c70:	d501      	bpl.n	8009c76 <_fwalk_reent+0x22>
 8009c72:	6824      	ldr	r4, [r4, #0]
 8009c74:	e7f5      	b.n	8009c62 <_fwalk_reent+0xe>
 8009c76:	89ab      	ldrh	r3, [r5, #12]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d907      	bls.n	8009c8c <_fwalk_reent+0x38>
 8009c7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c80:	3301      	adds	r3, #1
 8009c82:	d003      	beq.n	8009c8c <_fwalk_reent+0x38>
 8009c84:	4629      	mov	r1, r5
 8009c86:	4640      	mov	r0, r8
 8009c88:	47c8      	blx	r9
 8009c8a:	4306      	orrs	r6, r0
 8009c8c:	3568      	adds	r5, #104	; 0x68
 8009c8e:	e7ee      	b.n	8009c6e <_fwalk_reent+0x1a>

08009c90 <__swhatbuf_r>:
 8009c90:	b570      	push	{r4, r5, r6, lr}
 8009c92:	460e      	mov	r6, r1
 8009c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c98:	2900      	cmp	r1, #0
 8009c9a:	b096      	sub	sp, #88	; 0x58
 8009c9c:	4614      	mov	r4, r2
 8009c9e:	461d      	mov	r5, r3
 8009ca0:	da07      	bge.n	8009cb2 <__swhatbuf_r+0x22>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	602b      	str	r3, [r5, #0]
 8009ca6:	89b3      	ldrh	r3, [r6, #12]
 8009ca8:	061a      	lsls	r2, r3, #24
 8009caa:	d410      	bmi.n	8009cce <__swhatbuf_r+0x3e>
 8009cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cb0:	e00e      	b.n	8009cd0 <__swhatbuf_r+0x40>
 8009cb2:	466a      	mov	r2, sp
 8009cb4:	f000 fc36 	bl	800a524 <_fstat_r>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	dbf2      	blt.n	8009ca2 <__swhatbuf_r+0x12>
 8009cbc:	9a01      	ldr	r2, [sp, #4]
 8009cbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cc6:	425a      	negs	r2, r3
 8009cc8:	415a      	adcs	r2, r3
 8009cca:	602a      	str	r2, [r5, #0]
 8009ccc:	e7ee      	b.n	8009cac <__swhatbuf_r+0x1c>
 8009cce:	2340      	movs	r3, #64	; 0x40
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	6023      	str	r3, [r4, #0]
 8009cd4:	b016      	add	sp, #88	; 0x58
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}

08009cd8 <__smakebuf_r>:
 8009cd8:	898b      	ldrh	r3, [r1, #12]
 8009cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cdc:	079d      	lsls	r5, r3, #30
 8009cde:	4606      	mov	r6, r0
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	d507      	bpl.n	8009cf4 <__smakebuf_r+0x1c>
 8009ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	6123      	str	r3, [r4, #16]
 8009cec:	2301      	movs	r3, #1
 8009cee:	6163      	str	r3, [r4, #20]
 8009cf0:	b002      	add	sp, #8
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}
 8009cf4:	ab01      	add	r3, sp, #4
 8009cf6:	466a      	mov	r2, sp
 8009cf8:	f7ff ffca 	bl	8009c90 <__swhatbuf_r>
 8009cfc:	9900      	ldr	r1, [sp, #0]
 8009cfe:	4605      	mov	r5, r0
 8009d00:	4630      	mov	r0, r6
 8009d02:	f000 f877 	bl	8009df4 <_malloc_r>
 8009d06:	b948      	cbnz	r0, 8009d1c <__smakebuf_r+0x44>
 8009d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d0c:	059a      	lsls	r2, r3, #22
 8009d0e:	d4ef      	bmi.n	8009cf0 <__smakebuf_r+0x18>
 8009d10:	f023 0303 	bic.w	r3, r3, #3
 8009d14:	f043 0302 	orr.w	r3, r3, #2
 8009d18:	81a3      	strh	r3, [r4, #12]
 8009d1a:	e7e3      	b.n	8009ce4 <__smakebuf_r+0xc>
 8009d1c:	4b0d      	ldr	r3, [pc, #52]	; (8009d54 <__smakebuf_r+0x7c>)
 8009d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	6020      	str	r0, [r4, #0]
 8009d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d28:	81a3      	strh	r3, [r4, #12]
 8009d2a:	9b00      	ldr	r3, [sp, #0]
 8009d2c:	6163      	str	r3, [r4, #20]
 8009d2e:	9b01      	ldr	r3, [sp, #4]
 8009d30:	6120      	str	r0, [r4, #16]
 8009d32:	b15b      	cbz	r3, 8009d4c <__smakebuf_r+0x74>
 8009d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f000 fc05 	bl	800a548 <_isatty_r>
 8009d3e:	b128      	cbz	r0, 8009d4c <__smakebuf_r+0x74>
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	f023 0303 	bic.w	r3, r3, #3
 8009d46:	f043 0301 	orr.w	r3, r3, #1
 8009d4a:	81a3      	strh	r3, [r4, #12]
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	431d      	orrs	r5, r3
 8009d50:	81a5      	strh	r5, [r4, #12]
 8009d52:	e7cd      	b.n	8009cf0 <__smakebuf_r+0x18>
 8009d54:	08009b45 	.word	0x08009b45

08009d58 <_free_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4605      	mov	r5, r0
 8009d5c:	2900      	cmp	r1, #0
 8009d5e:	d045      	beq.n	8009dec <_free_r+0x94>
 8009d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d64:	1f0c      	subs	r4, r1, #4
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	bfb8      	it	lt
 8009d6a:	18e4      	addlt	r4, r4, r3
 8009d6c:	f000 fc0e 	bl	800a58c <__malloc_lock>
 8009d70:	4a1f      	ldr	r2, [pc, #124]	; (8009df0 <_free_r+0x98>)
 8009d72:	6813      	ldr	r3, [r2, #0]
 8009d74:	4610      	mov	r0, r2
 8009d76:	b933      	cbnz	r3, 8009d86 <_free_r+0x2e>
 8009d78:	6063      	str	r3, [r4, #4]
 8009d7a:	6014      	str	r4, [r2, #0]
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d82:	f000 bc04 	b.w	800a58e <__malloc_unlock>
 8009d86:	42a3      	cmp	r3, r4
 8009d88:	d90c      	bls.n	8009da4 <_free_r+0x4c>
 8009d8a:	6821      	ldr	r1, [r4, #0]
 8009d8c:	1862      	adds	r2, r4, r1
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	bf04      	itt	eq
 8009d92:	681a      	ldreq	r2, [r3, #0]
 8009d94:	685b      	ldreq	r3, [r3, #4]
 8009d96:	6063      	str	r3, [r4, #4]
 8009d98:	bf04      	itt	eq
 8009d9a:	1852      	addeq	r2, r2, r1
 8009d9c:	6022      	streq	r2, [r4, #0]
 8009d9e:	6004      	str	r4, [r0, #0]
 8009da0:	e7ec      	b.n	8009d7c <_free_r+0x24>
 8009da2:	4613      	mov	r3, r2
 8009da4:	685a      	ldr	r2, [r3, #4]
 8009da6:	b10a      	cbz	r2, 8009dac <_free_r+0x54>
 8009da8:	42a2      	cmp	r2, r4
 8009daa:	d9fa      	bls.n	8009da2 <_free_r+0x4a>
 8009dac:	6819      	ldr	r1, [r3, #0]
 8009dae:	1858      	adds	r0, r3, r1
 8009db0:	42a0      	cmp	r0, r4
 8009db2:	d10b      	bne.n	8009dcc <_free_r+0x74>
 8009db4:	6820      	ldr	r0, [r4, #0]
 8009db6:	4401      	add	r1, r0
 8009db8:	1858      	adds	r0, r3, r1
 8009dba:	4282      	cmp	r2, r0
 8009dbc:	6019      	str	r1, [r3, #0]
 8009dbe:	d1dd      	bne.n	8009d7c <_free_r+0x24>
 8009dc0:	6810      	ldr	r0, [r2, #0]
 8009dc2:	6852      	ldr	r2, [r2, #4]
 8009dc4:	605a      	str	r2, [r3, #4]
 8009dc6:	4401      	add	r1, r0
 8009dc8:	6019      	str	r1, [r3, #0]
 8009dca:	e7d7      	b.n	8009d7c <_free_r+0x24>
 8009dcc:	d902      	bls.n	8009dd4 <_free_r+0x7c>
 8009dce:	230c      	movs	r3, #12
 8009dd0:	602b      	str	r3, [r5, #0]
 8009dd2:	e7d3      	b.n	8009d7c <_free_r+0x24>
 8009dd4:	6820      	ldr	r0, [r4, #0]
 8009dd6:	1821      	adds	r1, r4, r0
 8009dd8:	428a      	cmp	r2, r1
 8009dda:	bf04      	itt	eq
 8009ddc:	6811      	ldreq	r1, [r2, #0]
 8009dde:	6852      	ldreq	r2, [r2, #4]
 8009de0:	6062      	str	r2, [r4, #4]
 8009de2:	bf04      	itt	eq
 8009de4:	1809      	addeq	r1, r1, r0
 8009de6:	6021      	streq	r1, [r4, #0]
 8009de8:	605c      	str	r4, [r3, #4]
 8009dea:	e7c7      	b.n	8009d7c <_free_r+0x24>
 8009dec:	bd38      	pop	{r3, r4, r5, pc}
 8009dee:	bf00      	nop
 8009df0:	200004f0 	.word	0x200004f0

08009df4 <_malloc_r>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	1ccd      	adds	r5, r1, #3
 8009df8:	f025 0503 	bic.w	r5, r5, #3
 8009dfc:	3508      	adds	r5, #8
 8009dfe:	2d0c      	cmp	r5, #12
 8009e00:	bf38      	it	cc
 8009e02:	250c      	movcc	r5, #12
 8009e04:	2d00      	cmp	r5, #0
 8009e06:	4606      	mov	r6, r0
 8009e08:	db01      	blt.n	8009e0e <_malloc_r+0x1a>
 8009e0a:	42a9      	cmp	r1, r5
 8009e0c:	d903      	bls.n	8009e16 <_malloc_r+0x22>
 8009e0e:	230c      	movs	r3, #12
 8009e10:	6033      	str	r3, [r6, #0]
 8009e12:	2000      	movs	r0, #0
 8009e14:	bd70      	pop	{r4, r5, r6, pc}
 8009e16:	f000 fbb9 	bl	800a58c <__malloc_lock>
 8009e1a:	4a21      	ldr	r2, [pc, #132]	; (8009ea0 <_malloc_r+0xac>)
 8009e1c:	6814      	ldr	r4, [r2, #0]
 8009e1e:	4621      	mov	r1, r4
 8009e20:	b991      	cbnz	r1, 8009e48 <_malloc_r+0x54>
 8009e22:	4c20      	ldr	r4, [pc, #128]	; (8009ea4 <_malloc_r+0xb0>)
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	b91b      	cbnz	r3, 8009e30 <_malloc_r+0x3c>
 8009e28:	4630      	mov	r0, r6
 8009e2a:	f000 fb05 	bl	800a438 <_sbrk_r>
 8009e2e:	6020      	str	r0, [r4, #0]
 8009e30:	4629      	mov	r1, r5
 8009e32:	4630      	mov	r0, r6
 8009e34:	f000 fb00 	bl	800a438 <_sbrk_r>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d124      	bne.n	8009e86 <_malloc_r+0x92>
 8009e3c:	230c      	movs	r3, #12
 8009e3e:	6033      	str	r3, [r6, #0]
 8009e40:	4630      	mov	r0, r6
 8009e42:	f000 fba4 	bl	800a58e <__malloc_unlock>
 8009e46:	e7e4      	b.n	8009e12 <_malloc_r+0x1e>
 8009e48:	680b      	ldr	r3, [r1, #0]
 8009e4a:	1b5b      	subs	r3, r3, r5
 8009e4c:	d418      	bmi.n	8009e80 <_malloc_r+0x8c>
 8009e4e:	2b0b      	cmp	r3, #11
 8009e50:	d90f      	bls.n	8009e72 <_malloc_r+0x7e>
 8009e52:	600b      	str	r3, [r1, #0]
 8009e54:	50cd      	str	r5, [r1, r3]
 8009e56:	18cc      	adds	r4, r1, r3
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f000 fb98 	bl	800a58e <__malloc_unlock>
 8009e5e:	f104 000b 	add.w	r0, r4, #11
 8009e62:	1d23      	adds	r3, r4, #4
 8009e64:	f020 0007 	bic.w	r0, r0, #7
 8009e68:	1ac3      	subs	r3, r0, r3
 8009e6a:	d0d3      	beq.n	8009e14 <_malloc_r+0x20>
 8009e6c:	425a      	negs	r2, r3
 8009e6e:	50e2      	str	r2, [r4, r3]
 8009e70:	e7d0      	b.n	8009e14 <_malloc_r+0x20>
 8009e72:	428c      	cmp	r4, r1
 8009e74:	684b      	ldr	r3, [r1, #4]
 8009e76:	bf16      	itet	ne
 8009e78:	6063      	strne	r3, [r4, #4]
 8009e7a:	6013      	streq	r3, [r2, #0]
 8009e7c:	460c      	movne	r4, r1
 8009e7e:	e7eb      	b.n	8009e58 <_malloc_r+0x64>
 8009e80:	460c      	mov	r4, r1
 8009e82:	6849      	ldr	r1, [r1, #4]
 8009e84:	e7cc      	b.n	8009e20 <_malloc_r+0x2c>
 8009e86:	1cc4      	adds	r4, r0, #3
 8009e88:	f024 0403 	bic.w	r4, r4, #3
 8009e8c:	42a0      	cmp	r0, r4
 8009e8e:	d005      	beq.n	8009e9c <_malloc_r+0xa8>
 8009e90:	1a21      	subs	r1, r4, r0
 8009e92:	4630      	mov	r0, r6
 8009e94:	f000 fad0 	bl	800a438 <_sbrk_r>
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d0cf      	beq.n	8009e3c <_malloc_r+0x48>
 8009e9c:	6025      	str	r5, [r4, #0]
 8009e9e:	e7db      	b.n	8009e58 <_malloc_r+0x64>
 8009ea0:	200004f0 	.word	0x200004f0
 8009ea4:	200004f4 	.word	0x200004f4

08009ea8 <__sfputc_r>:
 8009ea8:	6893      	ldr	r3, [r2, #8]
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	b410      	push	{r4}
 8009eb0:	6093      	str	r3, [r2, #8]
 8009eb2:	da08      	bge.n	8009ec6 <__sfputc_r+0x1e>
 8009eb4:	6994      	ldr	r4, [r2, #24]
 8009eb6:	42a3      	cmp	r3, r4
 8009eb8:	db01      	blt.n	8009ebe <__sfputc_r+0x16>
 8009eba:	290a      	cmp	r1, #10
 8009ebc:	d103      	bne.n	8009ec6 <__sfputc_r+0x1e>
 8009ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ec2:	f7ff bcab 	b.w	800981c <__swbuf_r>
 8009ec6:	6813      	ldr	r3, [r2, #0]
 8009ec8:	1c58      	adds	r0, r3, #1
 8009eca:	6010      	str	r0, [r2, #0]
 8009ecc:	7019      	strb	r1, [r3, #0]
 8009ece:	4608      	mov	r0, r1
 8009ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <__sfputs_r>:
 8009ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed8:	4606      	mov	r6, r0
 8009eda:	460f      	mov	r7, r1
 8009edc:	4614      	mov	r4, r2
 8009ede:	18d5      	adds	r5, r2, r3
 8009ee0:	42ac      	cmp	r4, r5
 8009ee2:	d101      	bne.n	8009ee8 <__sfputs_r+0x12>
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	e007      	b.n	8009ef8 <__sfputs_r+0x22>
 8009ee8:	463a      	mov	r2, r7
 8009eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7ff ffda 	bl	8009ea8 <__sfputc_r>
 8009ef4:	1c43      	adds	r3, r0, #1
 8009ef6:	d1f3      	bne.n	8009ee0 <__sfputs_r+0xa>
 8009ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009efc <_vfiprintf_r>:
 8009efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f00:	460c      	mov	r4, r1
 8009f02:	b09d      	sub	sp, #116	; 0x74
 8009f04:	4617      	mov	r7, r2
 8009f06:	461d      	mov	r5, r3
 8009f08:	4606      	mov	r6, r0
 8009f0a:	b118      	cbz	r0, 8009f14 <_vfiprintf_r+0x18>
 8009f0c:	6983      	ldr	r3, [r0, #24]
 8009f0e:	b90b      	cbnz	r3, 8009f14 <_vfiprintf_r+0x18>
 8009f10:	f7ff fe34 	bl	8009b7c <__sinit>
 8009f14:	4b7c      	ldr	r3, [pc, #496]	; (800a108 <_vfiprintf_r+0x20c>)
 8009f16:	429c      	cmp	r4, r3
 8009f18:	d158      	bne.n	8009fcc <_vfiprintf_r+0xd0>
 8009f1a:	6874      	ldr	r4, [r6, #4]
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	0718      	lsls	r0, r3, #28
 8009f20:	d55e      	bpl.n	8009fe0 <_vfiprintf_r+0xe4>
 8009f22:	6923      	ldr	r3, [r4, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d05b      	beq.n	8009fe0 <_vfiprintf_r+0xe4>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f2c:	2320      	movs	r3, #32
 8009f2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f32:	2330      	movs	r3, #48	; 0x30
 8009f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f38:	9503      	str	r5, [sp, #12]
 8009f3a:	f04f 0b01 	mov.w	fp, #1
 8009f3e:	46b8      	mov	r8, r7
 8009f40:	4645      	mov	r5, r8
 8009f42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f46:	b10b      	cbz	r3, 8009f4c <_vfiprintf_r+0x50>
 8009f48:	2b25      	cmp	r3, #37	; 0x25
 8009f4a:	d154      	bne.n	8009ff6 <_vfiprintf_r+0xfa>
 8009f4c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009f50:	d00b      	beq.n	8009f6a <_vfiprintf_r+0x6e>
 8009f52:	4653      	mov	r3, sl
 8009f54:	463a      	mov	r2, r7
 8009f56:	4621      	mov	r1, r4
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f7ff ffbc 	bl	8009ed6 <__sfputs_r>
 8009f5e:	3001      	adds	r0, #1
 8009f60:	f000 80c2 	beq.w	800a0e8 <_vfiprintf_r+0x1ec>
 8009f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f66:	4453      	add	r3, sl
 8009f68:	9309      	str	r3, [sp, #36]	; 0x24
 8009f6a:	f898 3000 	ldrb.w	r3, [r8]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 80ba 	beq.w	800a0e8 <_vfiprintf_r+0x1ec>
 8009f74:	2300      	movs	r3, #0
 8009f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f7e:	9304      	str	r3, [sp, #16]
 8009f80:	9307      	str	r3, [sp, #28]
 8009f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f86:	931a      	str	r3, [sp, #104]	; 0x68
 8009f88:	46a8      	mov	r8, r5
 8009f8a:	2205      	movs	r2, #5
 8009f8c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009f90:	485e      	ldr	r0, [pc, #376]	; (800a10c <_vfiprintf_r+0x210>)
 8009f92:	f7f6 f91d 	bl	80001d0 <memchr>
 8009f96:	9b04      	ldr	r3, [sp, #16]
 8009f98:	bb78      	cbnz	r0, 8009ffa <_vfiprintf_r+0xfe>
 8009f9a:	06d9      	lsls	r1, r3, #27
 8009f9c:	bf44      	itt	mi
 8009f9e:	2220      	movmi	r2, #32
 8009fa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fa4:	071a      	lsls	r2, r3, #28
 8009fa6:	bf44      	itt	mi
 8009fa8:	222b      	movmi	r2, #43	; 0x2b
 8009faa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fae:	782a      	ldrb	r2, [r5, #0]
 8009fb0:	2a2a      	cmp	r2, #42	; 0x2a
 8009fb2:	d02a      	beq.n	800a00a <_vfiprintf_r+0x10e>
 8009fb4:	9a07      	ldr	r2, [sp, #28]
 8009fb6:	46a8      	mov	r8, r5
 8009fb8:	2000      	movs	r0, #0
 8009fba:	250a      	movs	r5, #10
 8009fbc:	4641      	mov	r1, r8
 8009fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fc2:	3b30      	subs	r3, #48	; 0x30
 8009fc4:	2b09      	cmp	r3, #9
 8009fc6:	d969      	bls.n	800a09c <_vfiprintf_r+0x1a0>
 8009fc8:	b360      	cbz	r0, 800a024 <_vfiprintf_r+0x128>
 8009fca:	e024      	b.n	800a016 <_vfiprintf_r+0x11a>
 8009fcc:	4b50      	ldr	r3, [pc, #320]	; (800a110 <_vfiprintf_r+0x214>)
 8009fce:	429c      	cmp	r4, r3
 8009fd0:	d101      	bne.n	8009fd6 <_vfiprintf_r+0xda>
 8009fd2:	68b4      	ldr	r4, [r6, #8]
 8009fd4:	e7a2      	b.n	8009f1c <_vfiprintf_r+0x20>
 8009fd6:	4b4f      	ldr	r3, [pc, #316]	; (800a114 <_vfiprintf_r+0x218>)
 8009fd8:	429c      	cmp	r4, r3
 8009fda:	bf08      	it	eq
 8009fdc:	68f4      	ldreq	r4, [r6, #12]
 8009fde:	e79d      	b.n	8009f1c <_vfiprintf_r+0x20>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7ff fc6c 	bl	80098c0 <__swsetup_r>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d09d      	beq.n	8009f28 <_vfiprintf_r+0x2c>
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ff0:	b01d      	add	sp, #116	; 0x74
 8009ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff6:	46a8      	mov	r8, r5
 8009ff8:	e7a2      	b.n	8009f40 <_vfiprintf_r+0x44>
 8009ffa:	4a44      	ldr	r2, [pc, #272]	; (800a10c <_vfiprintf_r+0x210>)
 8009ffc:	1a80      	subs	r0, r0, r2
 8009ffe:	fa0b f000 	lsl.w	r0, fp, r0
 800a002:	4318      	orrs	r0, r3
 800a004:	9004      	str	r0, [sp, #16]
 800a006:	4645      	mov	r5, r8
 800a008:	e7be      	b.n	8009f88 <_vfiprintf_r+0x8c>
 800a00a:	9a03      	ldr	r2, [sp, #12]
 800a00c:	1d11      	adds	r1, r2, #4
 800a00e:	6812      	ldr	r2, [r2, #0]
 800a010:	9103      	str	r1, [sp, #12]
 800a012:	2a00      	cmp	r2, #0
 800a014:	db01      	blt.n	800a01a <_vfiprintf_r+0x11e>
 800a016:	9207      	str	r2, [sp, #28]
 800a018:	e004      	b.n	800a024 <_vfiprintf_r+0x128>
 800a01a:	4252      	negs	r2, r2
 800a01c:	f043 0302 	orr.w	r3, r3, #2
 800a020:	9207      	str	r2, [sp, #28]
 800a022:	9304      	str	r3, [sp, #16]
 800a024:	f898 3000 	ldrb.w	r3, [r8]
 800a028:	2b2e      	cmp	r3, #46	; 0x2e
 800a02a:	d10e      	bne.n	800a04a <_vfiprintf_r+0x14e>
 800a02c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a030:	2b2a      	cmp	r3, #42	; 0x2a
 800a032:	d138      	bne.n	800a0a6 <_vfiprintf_r+0x1aa>
 800a034:	9b03      	ldr	r3, [sp, #12]
 800a036:	1d1a      	adds	r2, r3, #4
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	9203      	str	r2, [sp, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	bfb8      	it	lt
 800a040:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a044:	f108 0802 	add.w	r8, r8, #2
 800a048:	9305      	str	r3, [sp, #20]
 800a04a:	4d33      	ldr	r5, [pc, #204]	; (800a118 <_vfiprintf_r+0x21c>)
 800a04c:	f898 1000 	ldrb.w	r1, [r8]
 800a050:	2203      	movs	r2, #3
 800a052:	4628      	mov	r0, r5
 800a054:	f7f6 f8bc 	bl	80001d0 <memchr>
 800a058:	b140      	cbz	r0, 800a06c <_vfiprintf_r+0x170>
 800a05a:	2340      	movs	r3, #64	; 0x40
 800a05c:	1b40      	subs	r0, r0, r5
 800a05e:	fa03 f000 	lsl.w	r0, r3, r0
 800a062:	9b04      	ldr	r3, [sp, #16]
 800a064:	4303      	orrs	r3, r0
 800a066:	f108 0801 	add.w	r8, r8, #1
 800a06a:	9304      	str	r3, [sp, #16]
 800a06c:	f898 1000 	ldrb.w	r1, [r8]
 800a070:	482a      	ldr	r0, [pc, #168]	; (800a11c <_vfiprintf_r+0x220>)
 800a072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a076:	2206      	movs	r2, #6
 800a078:	f108 0701 	add.w	r7, r8, #1
 800a07c:	f7f6 f8a8 	bl	80001d0 <memchr>
 800a080:	2800      	cmp	r0, #0
 800a082:	d037      	beq.n	800a0f4 <_vfiprintf_r+0x1f8>
 800a084:	4b26      	ldr	r3, [pc, #152]	; (800a120 <_vfiprintf_r+0x224>)
 800a086:	bb1b      	cbnz	r3, 800a0d0 <_vfiprintf_r+0x1d4>
 800a088:	9b03      	ldr	r3, [sp, #12]
 800a08a:	3307      	adds	r3, #7
 800a08c:	f023 0307 	bic.w	r3, r3, #7
 800a090:	3308      	adds	r3, #8
 800a092:	9303      	str	r3, [sp, #12]
 800a094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a096:	444b      	add	r3, r9
 800a098:	9309      	str	r3, [sp, #36]	; 0x24
 800a09a:	e750      	b.n	8009f3e <_vfiprintf_r+0x42>
 800a09c:	fb05 3202 	mla	r2, r5, r2, r3
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	4688      	mov	r8, r1
 800a0a4:	e78a      	b.n	8009fbc <_vfiprintf_r+0xc0>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f108 0801 	add.w	r8, r8, #1
 800a0ac:	9305      	str	r3, [sp, #20]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	250a      	movs	r5, #10
 800a0b2:	4640      	mov	r0, r8
 800a0b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0b8:	3a30      	subs	r2, #48	; 0x30
 800a0ba:	2a09      	cmp	r2, #9
 800a0bc:	d903      	bls.n	800a0c6 <_vfiprintf_r+0x1ca>
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0c3      	beq.n	800a04a <_vfiprintf_r+0x14e>
 800a0c2:	9105      	str	r1, [sp, #20]
 800a0c4:	e7c1      	b.n	800a04a <_vfiprintf_r+0x14e>
 800a0c6:	fb05 2101 	mla	r1, r5, r1, r2
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	4680      	mov	r8, r0
 800a0ce:	e7f0      	b.n	800a0b2 <_vfiprintf_r+0x1b6>
 800a0d0:	ab03      	add	r3, sp, #12
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	4b13      	ldr	r3, [pc, #76]	; (800a124 <_vfiprintf_r+0x228>)
 800a0d8:	a904      	add	r1, sp, #16
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f3af 8000 	nop.w
 800a0e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a0e4:	4681      	mov	r9, r0
 800a0e6:	d1d5      	bne.n	800a094 <_vfiprintf_r+0x198>
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	065b      	lsls	r3, r3, #25
 800a0ec:	f53f af7e 	bmi.w	8009fec <_vfiprintf_r+0xf0>
 800a0f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0f2:	e77d      	b.n	8009ff0 <_vfiprintf_r+0xf4>
 800a0f4:	ab03      	add	r3, sp, #12
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	4622      	mov	r2, r4
 800a0fa:	4b0a      	ldr	r3, [pc, #40]	; (800a124 <_vfiprintf_r+0x228>)
 800a0fc:	a904      	add	r1, sp, #16
 800a0fe:	4630      	mov	r0, r6
 800a100:	f000 f888 	bl	800a214 <_printf_i>
 800a104:	e7ec      	b.n	800a0e0 <_vfiprintf_r+0x1e4>
 800a106:	bf00      	nop
 800a108:	0800a82c 	.word	0x0800a82c
 800a10c:	0800a86c 	.word	0x0800a86c
 800a110:	0800a84c 	.word	0x0800a84c
 800a114:	0800a80c 	.word	0x0800a80c
 800a118:	0800a872 	.word	0x0800a872
 800a11c:	0800a876 	.word	0x0800a876
 800a120:	00000000 	.word	0x00000000
 800a124:	08009ed7 	.word	0x08009ed7

0800a128 <_printf_common>:
 800a128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a12c:	4691      	mov	r9, r2
 800a12e:	461f      	mov	r7, r3
 800a130:	688a      	ldr	r2, [r1, #8]
 800a132:	690b      	ldr	r3, [r1, #16]
 800a134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a138:	4293      	cmp	r3, r2
 800a13a:	bfb8      	it	lt
 800a13c:	4613      	movlt	r3, r2
 800a13e:	f8c9 3000 	str.w	r3, [r9]
 800a142:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a146:	4606      	mov	r6, r0
 800a148:	460c      	mov	r4, r1
 800a14a:	b112      	cbz	r2, 800a152 <_printf_common+0x2a>
 800a14c:	3301      	adds	r3, #1
 800a14e:	f8c9 3000 	str.w	r3, [r9]
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	0699      	lsls	r1, r3, #26
 800a156:	bf42      	ittt	mi
 800a158:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a15c:	3302      	addmi	r3, #2
 800a15e:	f8c9 3000 	strmi.w	r3, [r9]
 800a162:	6825      	ldr	r5, [r4, #0]
 800a164:	f015 0506 	ands.w	r5, r5, #6
 800a168:	d107      	bne.n	800a17a <_printf_common+0x52>
 800a16a:	f104 0a19 	add.w	sl, r4, #25
 800a16e:	68e3      	ldr	r3, [r4, #12]
 800a170:	f8d9 2000 	ldr.w	r2, [r9]
 800a174:	1a9b      	subs	r3, r3, r2
 800a176:	42ab      	cmp	r3, r5
 800a178:	dc28      	bgt.n	800a1cc <_printf_common+0xa4>
 800a17a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a17e:	6822      	ldr	r2, [r4, #0]
 800a180:	3300      	adds	r3, #0
 800a182:	bf18      	it	ne
 800a184:	2301      	movne	r3, #1
 800a186:	0692      	lsls	r2, r2, #26
 800a188:	d42d      	bmi.n	800a1e6 <_printf_common+0xbe>
 800a18a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a18e:	4639      	mov	r1, r7
 800a190:	4630      	mov	r0, r6
 800a192:	47c0      	blx	r8
 800a194:	3001      	adds	r0, #1
 800a196:	d020      	beq.n	800a1da <_printf_common+0xb2>
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	68e5      	ldr	r5, [r4, #12]
 800a19c:	f8d9 2000 	ldr.w	r2, [r9]
 800a1a0:	f003 0306 	and.w	r3, r3, #6
 800a1a4:	2b04      	cmp	r3, #4
 800a1a6:	bf08      	it	eq
 800a1a8:	1aad      	subeq	r5, r5, r2
 800a1aa:	68a3      	ldr	r3, [r4, #8]
 800a1ac:	6922      	ldr	r2, [r4, #16]
 800a1ae:	bf0c      	ite	eq
 800a1b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1b4:	2500      	movne	r5, #0
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	bfc4      	itt	gt
 800a1ba:	1a9b      	subgt	r3, r3, r2
 800a1bc:	18ed      	addgt	r5, r5, r3
 800a1be:	f04f 0900 	mov.w	r9, #0
 800a1c2:	341a      	adds	r4, #26
 800a1c4:	454d      	cmp	r5, r9
 800a1c6:	d11a      	bne.n	800a1fe <_printf_common+0xd6>
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	e008      	b.n	800a1de <_printf_common+0xb6>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	4652      	mov	r2, sl
 800a1d0:	4639      	mov	r1, r7
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	47c0      	blx	r8
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d103      	bne.n	800a1e2 <_printf_common+0xba>
 800a1da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e2:	3501      	adds	r5, #1
 800a1e4:	e7c3      	b.n	800a16e <_printf_common+0x46>
 800a1e6:	18e1      	adds	r1, r4, r3
 800a1e8:	1c5a      	adds	r2, r3, #1
 800a1ea:	2030      	movs	r0, #48	; 0x30
 800a1ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1f0:	4422      	add	r2, r4
 800a1f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1fa:	3302      	adds	r3, #2
 800a1fc:	e7c5      	b.n	800a18a <_printf_common+0x62>
 800a1fe:	2301      	movs	r3, #1
 800a200:	4622      	mov	r2, r4
 800a202:	4639      	mov	r1, r7
 800a204:	4630      	mov	r0, r6
 800a206:	47c0      	blx	r8
 800a208:	3001      	adds	r0, #1
 800a20a:	d0e6      	beq.n	800a1da <_printf_common+0xb2>
 800a20c:	f109 0901 	add.w	r9, r9, #1
 800a210:	e7d8      	b.n	800a1c4 <_printf_common+0x9c>
	...

0800a214 <_printf_i>:
 800a214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a218:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a21c:	460c      	mov	r4, r1
 800a21e:	7e09      	ldrb	r1, [r1, #24]
 800a220:	b085      	sub	sp, #20
 800a222:	296e      	cmp	r1, #110	; 0x6e
 800a224:	4617      	mov	r7, r2
 800a226:	4606      	mov	r6, r0
 800a228:	4698      	mov	r8, r3
 800a22a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a22c:	f000 80b3 	beq.w	800a396 <_printf_i+0x182>
 800a230:	d822      	bhi.n	800a278 <_printf_i+0x64>
 800a232:	2963      	cmp	r1, #99	; 0x63
 800a234:	d036      	beq.n	800a2a4 <_printf_i+0x90>
 800a236:	d80a      	bhi.n	800a24e <_printf_i+0x3a>
 800a238:	2900      	cmp	r1, #0
 800a23a:	f000 80b9 	beq.w	800a3b0 <_printf_i+0x19c>
 800a23e:	2958      	cmp	r1, #88	; 0x58
 800a240:	f000 8083 	beq.w	800a34a <_printf_i+0x136>
 800a244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a248:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a24c:	e032      	b.n	800a2b4 <_printf_i+0xa0>
 800a24e:	2964      	cmp	r1, #100	; 0x64
 800a250:	d001      	beq.n	800a256 <_printf_i+0x42>
 800a252:	2969      	cmp	r1, #105	; 0x69
 800a254:	d1f6      	bne.n	800a244 <_printf_i+0x30>
 800a256:	6820      	ldr	r0, [r4, #0]
 800a258:	6813      	ldr	r3, [r2, #0]
 800a25a:	0605      	lsls	r5, r0, #24
 800a25c:	f103 0104 	add.w	r1, r3, #4
 800a260:	d52a      	bpl.n	800a2b8 <_printf_i+0xa4>
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6011      	str	r1, [r2, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	da03      	bge.n	800a272 <_printf_i+0x5e>
 800a26a:	222d      	movs	r2, #45	; 0x2d
 800a26c:	425b      	negs	r3, r3
 800a26e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a272:	486f      	ldr	r0, [pc, #444]	; (800a430 <_printf_i+0x21c>)
 800a274:	220a      	movs	r2, #10
 800a276:	e039      	b.n	800a2ec <_printf_i+0xd8>
 800a278:	2973      	cmp	r1, #115	; 0x73
 800a27a:	f000 809d 	beq.w	800a3b8 <_printf_i+0x1a4>
 800a27e:	d808      	bhi.n	800a292 <_printf_i+0x7e>
 800a280:	296f      	cmp	r1, #111	; 0x6f
 800a282:	d020      	beq.n	800a2c6 <_printf_i+0xb2>
 800a284:	2970      	cmp	r1, #112	; 0x70
 800a286:	d1dd      	bne.n	800a244 <_printf_i+0x30>
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	f043 0320 	orr.w	r3, r3, #32
 800a28e:	6023      	str	r3, [r4, #0]
 800a290:	e003      	b.n	800a29a <_printf_i+0x86>
 800a292:	2975      	cmp	r1, #117	; 0x75
 800a294:	d017      	beq.n	800a2c6 <_printf_i+0xb2>
 800a296:	2978      	cmp	r1, #120	; 0x78
 800a298:	d1d4      	bne.n	800a244 <_printf_i+0x30>
 800a29a:	2378      	movs	r3, #120	; 0x78
 800a29c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2a0:	4864      	ldr	r0, [pc, #400]	; (800a434 <_printf_i+0x220>)
 800a2a2:	e055      	b.n	800a350 <_printf_i+0x13c>
 800a2a4:	6813      	ldr	r3, [r2, #0]
 800a2a6:	1d19      	adds	r1, r3, #4
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6011      	str	r1, [r2, #0]
 800a2ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e08c      	b.n	800a3d2 <_printf_i+0x1be>
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6011      	str	r1, [r2, #0]
 800a2bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2c0:	bf18      	it	ne
 800a2c2:	b21b      	sxthne	r3, r3
 800a2c4:	e7cf      	b.n	800a266 <_printf_i+0x52>
 800a2c6:	6813      	ldr	r3, [r2, #0]
 800a2c8:	6825      	ldr	r5, [r4, #0]
 800a2ca:	1d18      	adds	r0, r3, #4
 800a2cc:	6010      	str	r0, [r2, #0]
 800a2ce:	0628      	lsls	r0, r5, #24
 800a2d0:	d501      	bpl.n	800a2d6 <_printf_i+0xc2>
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	e002      	b.n	800a2dc <_printf_i+0xc8>
 800a2d6:	0668      	lsls	r0, r5, #25
 800a2d8:	d5fb      	bpl.n	800a2d2 <_printf_i+0xbe>
 800a2da:	881b      	ldrh	r3, [r3, #0]
 800a2dc:	4854      	ldr	r0, [pc, #336]	; (800a430 <_printf_i+0x21c>)
 800a2de:	296f      	cmp	r1, #111	; 0x6f
 800a2e0:	bf14      	ite	ne
 800a2e2:	220a      	movne	r2, #10
 800a2e4:	2208      	moveq	r2, #8
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2ec:	6865      	ldr	r5, [r4, #4]
 800a2ee:	60a5      	str	r5, [r4, #8]
 800a2f0:	2d00      	cmp	r5, #0
 800a2f2:	f2c0 8095 	blt.w	800a420 <_printf_i+0x20c>
 800a2f6:	6821      	ldr	r1, [r4, #0]
 800a2f8:	f021 0104 	bic.w	r1, r1, #4
 800a2fc:	6021      	str	r1, [r4, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d13d      	bne.n	800a37e <_printf_i+0x16a>
 800a302:	2d00      	cmp	r5, #0
 800a304:	f040 808e 	bne.w	800a424 <_printf_i+0x210>
 800a308:	4665      	mov	r5, ip
 800a30a:	2a08      	cmp	r2, #8
 800a30c:	d10b      	bne.n	800a326 <_printf_i+0x112>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	07db      	lsls	r3, r3, #31
 800a312:	d508      	bpl.n	800a326 <_printf_i+0x112>
 800a314:	6923      	ldr	r3, [r4, #16]
 800a316:	6862      	ldr	r2, [r4, #4]
 800a318:	429a      	cmp	r2, r3
 800a31a:	bfde      	ittt	le
 800a31c:	2330      	movle	r3, #48	; 0x30
 800a31e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a322:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a326:	ebac 0305 	sub.w	r3, ip, r5
 800a32a:	6123      	str	r3, [r4, #16]
 800a32c:	f8cd 8000 	str.w	r8, [sp]
 800a330:	463b      	mov	r3, r7
 800a332:	aa03      	add	r2, sp, #12
 800a334:	4621      	mov	r1, r4
 800a336:	4630      	mov	r0, r6
 800a338:	f7ff fef6 	bl	800a128 <_printf_common>
 800a33c:	3001      	adds	r0, #1
 800a33e:	d14d      	bne.n	800a3dc <_printf_i+0x1c8>
 800a340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a344:	b005      	add	sp, #20
 800a346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a34a:	4839      	ldr	r0, [pc, #228]	; (800a430 <_printf_i+0x21c>)
 800a34c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a350:	6813      	ldr	r3, [r2, #0]
 800a352:	6821      	ldr	r1, [r4, #0]
 800a354:	1d1d      	adds	r5, r3, #4
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6015      	str	r5, [r2, #0]
 800a35a:	060a      	lsls	r2, r1, #24
 800a35c:	d50b      	bpl.n	800a376 <_printf_i+0x162>
 800a35e:	07ca      	lsls	r2, r1, #31
 800a360:	bf44      	itt	mi
 800a362:	f041 0120 	orrmi.w	r1, r1, #32
 800a366:	6021      	strmi	r1, [r4, #0]
 800a368:	b91b      	cbnz	r3, 800a372 <_printf_i+0x15e>
 800a36a:	6822      	ldr	r2, [r4, #0]
 800a36c:	f022 0220 	bic.w	r2, r2, #32
 800a370:	6022      	str	r2, [r4, #0]
 800a372:	2210      	movs	r2, #16
 800a374:	e7b7      	b.n	800a2e6 <_printf_i+0xd2>
 800a376:	064d      	lsls	r5, r1, #25
 800a378:	bf48      	it	mi
 800a37a:	b29b      	uxthmi	r3, r3
 800a37c:	e7ef      	b.n	800a35e <_printf_i+0x14a>
 800a37e:	4665      	mov	r5, ip
 800a380:	fbb3 f1f2 	udiv	r1, r3, r2
 800a384:	fb02 3311 	mls	r3, r2, r1, r3
 800a388:	5cc3      	ldrb	r3, [r0, r3]
 800a38a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a38e:	460b      	mov	r3, r1
 800a390:	2900      	cmp	r1, #0
 800a392:	d1f5      	bne.n	800a380 <_printf_i+0x16c>
 800a394:	e7b9      	b.n	800a30a <_printf_i+0xf6>
 800a396:	6813      	ldr	r3, [r2, #0]
 800a398:	6825      	ldr	r5, [r4, #0]
 800a39a:	6961      	ldr	r1, [r4, #20]
 800a39c:	1d18      	adds	r0, r3, #4
 800a39e:	6010      	str	r0, [r2, #0]
 800a3a0:	0628      	lsls	r0, r5, #24
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	d501      	bpl.n	800a3aa <_printf_i+0x196>
 800a3a6:	6019      	str	r1, [r3, #0]
 800a3a8:	e002      	b.n	800a3b0 <_printf_i+0x19c>
 800a3aa:	066a      	lsls	r2, r5, #25
 800a3ac:	d5fb      	bpl.n	800a3a6 <_printf_i+0x192>
 800a3ae:	8019      	strh	r1, [r3, #0]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	4665      	mov	r5, ip
 800a3b6:	e7b9      	b.n	800a32c <_printf_i+0x118>
 800a3b8:	6813      	ldr	r3, [r2, #0]
 800a3ba:	1d19      	adds	r1, r3, #4
 800a3bc:	6011      	str	r1, [r2, #0]
 800a3be:	681d      	ldr	r5, [r3, #0]
 800a3c0:	6862      	ldr	r2, [r4, #4]
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f7f5 ff03 	bl	80001d0 <memchr>
 800a3ca:	b108      	cbz	r0, 800a3d0 <_printf_i+0x1bc>
 800a3cc:	1b40      	subs	r0, r0, r5
 800a3ce:	6060      	str	r0, [r4, #4]
 800a3d0:	6863      	ldr	r3, [r4, #4]
 800a3d2:	6123      	str	r3, [r4, #16]
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3da:	e7a7      	b.n	800a32c <_printf_i+0x118>
 800a3dc:	6923      	ldr	r3, [r4, #16]
 800a3de:	462a      	mov	r2, r5
 800a3e0:	4639      	mov	r1, r7
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	47c0      	blx	r8
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	d0aa      	beq.n	800a340 <_printf_i+0x12c>
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	079b      	lsls	r3, r3, #30
 800a3ee:	d413      	bmi.n	800a418 <_printf_i+0x204>
 800a3f0:	68e0      	ldr	r0, [r4, #12]
 800a3f2:	9b03      	ldr	r3, [sp, #12]
 800a3f4:	4298      	cmp	r0, r3
 800a3f6:	bfb8      	it	lt
 800a3f8:	4618      	movlt	r0, r3
 800a3fa:	e7a3      	b.n	800a344 <_printf_i+0x130>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	464a      	mov	r2, r9
 800a400:	4639      	mov	r1, r7
 800a402:	4630      	mov	r0, r6
 800a404:	47c0      	blx	r8
 800a406:	3001      	adds	r0, #1
 800a408:	d09a      	beq.n	800a340 <_printf_i+0x12c>
 800a40a:	3501      	adds	r5, #1
 800a40c:	68e3      	ldr	r3, [r4, #12]
 800a40e:	9a03      	ldr	r2, [sp, #12]
 800a410:	1a9b      	subs	r3, r3, r2
 800a412:	42ab      	cmp	r3, r5
 800a414:	dcf2      	bgt.n	800a3fc <_printf_i+0x1e8>
 800a416:	e7eb      	b.n	800a3f0 <_printf_i+0x1dc>
 800a418:	2500      	movs	r5, #0
 800a41a:	f104 0919 	add.w	r9, r4, #25
 800a41e:	e7f5      	b.n	800a40c <_printf_i+0x1f8>
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1ac      	bne.n	800a37e <_printf_i+0x16a>
 800a424:	7803      	ldrb	r3, [r0, #0]
 800a426:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a42a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a42e:	e76c      	b.n	800a30a <_printf_i+0xf6>
 800a430:	0800a87d 	.word	0x0800a87d
 800a434:	0800a88e 	.word	0x0800a88e

0800a438 <_sbrk_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4c06      	ldr	r4, [pc, #24]	; (800a454 <_sbrk_r+0x1c>)
 800a43c:	2300      	movs	r3, #0
 800a43e:	4605      	mov	r5, r0
 800a440:	4608      	mov	r0, r1
 800a442:	6023      	str	r3, [r4, #0]
 800a444:	f7f6 fe7e 	bl	8001144 <_sbrk>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d102      	bne.n	800a452 <_sbrk_r+0x1a>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	b103      	cbz	r3, 800a452 <_sbrk_r+0x1a>
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	20008d54 	.word	0x20008d54

0800a458 <__sread>:
 800a458:	b510      	push	{r4, lr}
 800a45a:	460c      	mov	r4, r1
 800a45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a460:	f000 f896 	bl	800a590 <_read_r>
 800a464:	2800      	cmp	r0, #0
 800a466:	bfab      	itete	ge
 800a468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a46a:	89a3      	ldrhlt	r3, [r4, #12]
 800a46c:	181b      	addge	r3, r3, r0
 800a46e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a472:	bfac      	ite	ge
 800a474:	6563      	strge	r3, [r4, #84]	; 0x54
 800a476:	81a3      	strhlt	r3, [r4, #12]
 800a478:	bd10      	pop	{r4, pc}

0800a47a <__swrite>:
 800a47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a47e:	461f      	mov	r7, r3
 800a480:	898b      	ldrh	r3, [r1, #12]
 800a482:	05db      	lsls	r3, r3, #23
 800a484:	4605      	mov	r5, r0
 800a486:	460c      	mov	r4, r1
 800a488:	4616      	mov	r6, r2
 800a48a:	d505      	bpl.n	800a498 <__swrite+0x1e>
 800a48c:	2302      	movs	r3, #2
 800a48e:	2200      	movs	r2, #0
 800a490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a494:	f000 f868 	bl	800a568 <_lseek_r>
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a49e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4a2:	81a3      	strh	r3, [r4, #12]
 800a4a4:	4632      	mov	r2, r6
 800a4a6:	463b      	mov	r3, r7
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ae:	f000 b817 	b.w	800a4e0 <_write_r>

0800a4b2 <__sseek>:
 800a4b2:	b510      	push	{r4, lr}
 800a4b4:	460c      	mov	r4, r1
 800a4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ba:	f000 f855 	bl	800a568 <_lseek_r>
 800a4be:	1c43      	adds	r3, r0, #1
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	bf15      	itete	ne
 800a4c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4ce:	81a3      	strheq	r3, [r4, #12]
 800a4d0:	bf18      	it	ne
 800a4d2:	81a3      	strhne	r3, [r4, #12]
 800a4d4:	bd10      	pop	{r4, pc}

0800a4d6 <__sclose>:
 800a4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4da:	f000 b813 	b.w	800a504 <_close_r>
	...

0800a4e0 <_write_r>:
 800a4e0:	b538      	push	{r3, r4, r5, lr}
 800a4e2:	4c07      	ldr	r4, [pc, #28]	; (800a500 <_write_r+0x20>)
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	4608      	mov	r0, r1
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	6022      	str	r2, [r4, #0]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f7f6 fb48 	bl	8000b84 <_write>
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	d102      	bne.n	800a4fe <_write_r+0x1e>
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	b103      	cbz	r3, 800a4fe <_write_r+0x1e>
 800a4fc:	602b      	str	r3, [r5, #0]
 800a4fe:	bd38      	pop	{r3, r4, r5, pc}
 800a500:	20008d54 	.word	0x20008d54

0800a504 <_close_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	4c06      	ldr	r4, [pc, #24]	; (800a520 <_close_r+0x1c>)
 800a508:	2300      	movs	r3, #0
 800a50a:	4605      	mov	r5, r0
 800a50c:	4608      	mov	r0, r1
 800a50e:	6023      	str	r3, [r4, #0]
 800a510:	f7f6 fde3 	bl	80010da <_close>
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	d102      	bne.n	800a51e <_close_r+0x1a>
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	b103      	cbz	r3, 800a51e <_close_r+0x1a>
 800a51c:	602b      	str	r3, [r5, #0]
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	20008d54 	.word	0x20008d54

0800a524 <_fstat_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4c07      	ldr	r4, [pc, #28]	; (800a544 <_fstat_r+0x20>)
 800a528:	2300      	movs	r3, #0
 800a52a:	4605      	mov	r5, r0
 800a52c:	4608      	mov	r0, r1
 800a52e:	4611      	mov	r1, r2
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	f7f6 fdde 	bl	80010f2 <_fstat>
 800a536:	1c43      	adds	r3, r0, #1
 800a538:	d102      	bne.n	800a540 <_fstat_r+0x1c>
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	b103      	cbz	r3, 800a540 <_fstat_r+0x1c>
 800a53e:	602b      	str	r3, [r5, #0]
 800a540:	bd38      	pop	{r3, r4, r5, pc}
 800a542:	bf00      	nop
 800a544:	20008d54 	.word	0x20008d54

0800a548 <_isatty_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4c06      	ldr	r4, [pc, #24]	; (800a564 <_isatty_r+0x1c>)
 800a54c:	2300      	movs	r3, #0
 800a54e:	4605      	mov	r5, r0
 800a550:	4608      	mov	r0, r1
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	f7f6 fddd 	bl	8001112 <_isatty>
 800a558:	1c43      	adds	r3, r0, #1
 800a55a:	d102      	bne.n	800a562 <_isatty_r+0x1a>
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	b103      	cbz	r3, 800a562 <_isatty_r+0x1a>
 800a560:	602b      	str	r3, [r5, #0]
 800a562:	bd38      	pop	{r3, r4, r5, pc}
 800a564:	20008d54 	.word	0x20008d54

0800a568 <_lseek_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	4c07      	ldr	r4, [pc, #28]	; (800a588 <_lseek_r+0x20>)
 800a56c:	4605      	mov	r5, r0
 800a56e:	4608      	mov	r0, r1
 800a570:	4611      	mov	r1, r2
 800a572:	2200      	movs	r2, #0
 800a574:	6022      	str	r2, [r4, #0]
 800a576:	461a      	mov	r2, r3
 800a578:	f7f6 fdd6 	bl	8001128 <_lseek>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d102      	bne.n	800a586 <_lseek_r+0x1e>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	b103      	cbz	r3, 800a586 <_lseek_r+0x1e>
 800a584:	602b      	str	r3, [r5, #0]
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	20008d54 	.word	0x20008d54

0800a58c <__malloc_lock>:
 800a58c:	4770      	bx	lr

0800a58e <__malloc_unlock>:
 800a58e:	4770      	bx	lr

0800a590 <_read_r>:
 800a590:	b538      	push	{r3, r4, r5, lr}
 800a592:	4c07      	ldr	r4, [pc, #28]	; (800a5b0 <_read_r+0x20>)
 800a594:	4605      	mov	r5, r0
 800a596:	4608      	mov	r0, r1
 800a598:	4611      	mov	r1, r2
 800a59a:	2200      	movs	r2, #0
 800a59c:	6022      	str	r2, [r4, #0]
 800a59e:	461a      	mov	r2, r3
 800a5a0:	f7f6 fd7e 	bl	80010a0 <_read>
 800a5a4:	1c43      	adds	r3, r0, #1
 800a5a6:	d102      	bne.n	800a5ae <_read_r+0x1e>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	b103      	cbz	r3, 800a5ae <_read_r+0x1e>
 800a5ac:	602b      	str	r3, [r5, #0]
 800a5ae:	bd38      	pop	{r3, r4, r5, pc}
 800a5b0:	20008d54 	.word	0x20008d54

0800a5b4 <_init>:
 800a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b6:	bf00      	nop
 800a5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ba:	bc08      	pop	{r3}
 800a5bc:	469e      	mov	lr, r3
 800a5be:	4770      	bx	lr

0800a5c0 <_fini>:
 800a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c2:	bf00      	nop
 800a5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5c6:	bc08      	pop	{r3}
 800a5c8:	469e      	mov	lr, r3
 800a5ca:	4770      	bx	lr
