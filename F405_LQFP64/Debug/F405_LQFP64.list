
F405_LQFP64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001357c  08006e20  08006e20  00016e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a39c  0801a39c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  0801a39c  0801a39c  0002a39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a3a4  0801a3a4  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a3a4  0801a3a4  0002a3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a3a8  0801a3a8  0002a3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0801a3ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014670  20000078  0801a424  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200146e8  0801a424  000346e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e39  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003130  00000000  00000000  00043ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af0  00000000  00000000  00047018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  00047b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022520  00000000  00000000  00048438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fcd1  00000000  00000000  0006a958  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0072  00000000  00000000  0007a629  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00000164  00000000  00000000  0013a69b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003348  00000000  00000000  0013a800  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002a79  00000000  00000000  0013db48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e08 	.word	0x08006e08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006e08 	.word	0x08006e08

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_ADC1_Init+0x98>)
 8000e78:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <MX_ADC1_Init+0x9c>)
 8000e7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_ADC1_Init+0x98>)
 8000e7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_ADC1_Init+0x98>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_ADC1_Init+0x98>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_ADC1_Init+0x98>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_ADC1_Init+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_ADC1_Init+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_ADC1_Init+0x98>)
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <MX_ADC1_Init+0xa0>)
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_ADC1_Init+0x98>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_ADC1_Init+0x98>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_ADC1_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_ADC1_Init+0x98>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_ADC1_Init+0x98>)
 8000ec6:	f000 fefb 	bl	8001cc0 <HAL_ADC_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ed0:	f000 fd4a 	bl	8001968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_ADC1_Init+0x98>)
 8000ee6:	f000 ff2f 	bl	8001d48 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ef0:	f000 fd3a 	bl	8001968 <Error_Handler>
  }

}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200004b4 	.word	0x200004b4
 8000f00:	40012000 	.word	0x40012000
 8000f04:	0f000001 	.word	0x0f000001

08000f08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_ADC_MspInit+0x7c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d127      	bne.n	8000f7a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_ADC_MspInit+0x80>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a15      	ldr	r2, [pc, #84]	; (8000f88 <HAL_ADC_MspInit+0x80>)
 8000f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_ADC_MspInit+0x80>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_ADC_MspInit+0x80>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_ADC_MspInit+0x80>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_ADC_MspInit+0x80>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = FootExp_IN_Pin|UserPotA_IN_Pin|UserPotB_IN_Pin;
 8000f62:	2307      	movs	r3, #7
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f66:	2303      	movs	r3, #3
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_ADC_MspInit+0x84>)
 8000f76:	f001 fd87 	bl	8002a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40012000 	.word	0x40012000
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_DMA_Init+0x4c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <MX_DMA_Init+0x4c>)
 8000fa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <MX_DMA_Init+0x4c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	200e      	movs	r0, #14
 8000fb8:	f001 f9bf 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000fbc:	200e      	movs	r0, #14
 8000fbe:	f001 f9d8 	bl	8002372 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	200f      	movs	r0, #15
 8000fc8:	f001 f9b7 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000fcc:	200f      	movs	r0, #15
 8000fce:	f001 f9d0 	bl	8002372 <HAL_NVIC_EnableIRQ>

}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <MX_GPIO_Init+0x104>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a39      	ldr	r2, [pc, #228]	; (80010e4 <MX_GPIO_Init+0x104>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <MX_GPIO_Init+0x104>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <MX_GPIO_Init+0x104>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a32      	ldr	r2, [pc, #200]	; (80010e4 <MX_GPIO_Init+0x104>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <MX_GPIO_Init+0x104>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <MX_GPIO_Init+0x104>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a2b      	ldr	r2, [pc, #172]	; (80010e4 <MX_GPIO_Init+0x104>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <MX_GPIO_Init+0x104>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RelayCoil_OUT_GPIO_Port, RelayCoil_OUT_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2101      	movs	r1, #1
 800104e:	4826      	ldr	r0, [pc, #152]	; (80010e8 <MX_GPIO_Init+0x108>)
 8001050:	f001 feb6 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_RED_Pin|LEDA_GREEN_Pin|LEDA_BLUE_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2107      	movs	r1, #7
 8001058:	4824      	ldr	r0, [pc, #144]	; (80010ec <MX_GPIO_Init+0x10c>)
 800105a:	f001 feb1 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDB_RED_Pin|LEDB_GREEN_Pin|LEDB_BLUE_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001064:	4822      	ldr	r0, [pc, #136]	; (80010f0 <MX_GPIO_Init+0x110>)
 8001066:	f001 feab 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FootSwitchA_IN_Pin|FootSwitchB_IN_Pin|UserSwitchA_IN_Pin|UserSwitchB_IN_Pin;
 800106a:	f246 0306 	movw	r3, #24582	; 0x6006
 800106e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	481a      	ldr	r0, [pc, #104]	; (80010e8 <MX_GPIO_Init+0x108>)
 8001080:	f001 fd02 	bl	8002a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RelayCoil_OUT_Pin;
 8001084:	2301      	movs	r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RelayCoil_OUT_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4619      	mov	r1, r3
 800109a:	4813      	ldr	r0, [pc, #76]	; (80010e8 <MX_GPIO_Init+0x108>)
 800109c:	f001 fcf4 	bl	8002a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEDA_RED_Pin|LEDA_GREEN_Pin|LEDA_BLUE_Pin;
 80010a0:	2307      	movs	r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	4619      	mov	r1, r3
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_GPIO_Init+0x10c>)
 80010b8:	f001 fce6 	bl	8002a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LEDB_RED_Pin|LEDB_GREEN_Pin|LEDB_BLUE_Pin;
 80010bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4619      	mov	r1, r3
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <MX_GPIO_Init+0x110>)
 80010d6:	f001 fcd7 	bl	8002a88 <HAL_GPIO_Init>

}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020400 	.word	0x40020400
 80010f0:	40020000 	.word	0x40020000

080010f4 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_i2s2_ext_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_I2S2_Init+0x54>)
 80010fa:	4a14      	ldr	r2, [pc, #80]	; (800114c <MX_I2S2_Init+0x58>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_I2S2_Init+0x54>)
 8001100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001104:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_I2S2_Init+0x54>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_I2S2_Init+0x54>)
 800110e:	2203      	movs	r2, #3
 8001110:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_I2S2_Init+0x54>)
 8001114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001118:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_I2S2_Init+0x54>)
 800111c:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <MX_I2S2_Init+0x5c>)
 800111e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_I2S2_Init+0x54>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_I2S2_Init+0x54>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_I2S2_Init+0x54>)
 800112e:	2201      	movs	r2, #1
 8001130:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_I2S2_Init+0x54>)
 8001134:	f001 fe5e 	bl	8002df4 <HAL_I2S_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800113e:	f000 fc13 	bl	8001968 <Error_Handler>
  }

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200005bc 	.word	0x200005bc
 800114c:	40003800 	.word	0x40003800
 8001150:	00017700 	.word	0x00017700

08001154 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a63      	ldr	r2, [pc, #396]	; (8001300 <HAL_I2S_MspInit+0x1ac>)
 8001172:	4293      	cmp	r3, r2
 8001174:	f040 80bf 	bne.w	80012f6 <HAL_I2S_MspInit+0x1a2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	4b61      	ldr	r3, [pc, #388]	; (8001304 <HAL_I2S_MspInit+0x1b0>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	4a60      	ldr	r2, [pc, #384]	; (8001304 <HAL_I2S_MspInit+0x1b0>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6413      	str	r3, [r2, #64]	; 0x40
 8001188:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <HAL_I2S_MspInit+0x1b0>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4b5a      	ldr	r3, [pc, #360]	; (8001304 <HAL_I2S_MspInit+0x1b0>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	4a59      	ldr	r2, [pc, #356]	; (8001304 <HAL_I2S_MspInit+0x1b0>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	6313      	str	r3, [r2, #48]	; 0x30
 80011a4:	4b57      	ldr	r3, [pc, #348]	; (8001304 <HAL_I2S_MspInit+0x1b0>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	4b53      	ldr	r3, [pc, #332]	; (8001304 <HAL_I2S_MspInit+0x1b0>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a52      	ldr	r2, [pc, #328]	; (8001304 <HAL_I2S_MspInit+0x1b0>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b50      	ldr	r3, [pc, #320]	; (8001304 <HAL_I2S_MspInit+0x1b0>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80011cc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011de:	2305      	movs	r3, #5
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4847      	ldr	r0, [pc, #284]	; (8001308 <HAL_I2S_MspInit+0x1b4>)
 80011ea:	f001 fc4d 	bl	8002a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001200:	2306      	movs	r3, #6
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	483f      	ldr	r0, [pc, #252]	; (8001308 <HAL_I2S_MspInit+0x1b4>)
 800120c:	f001 fc3c 	bl	8002a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001210:	2340      	movs	r3, #64	; 0x40
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001220:	2305      	movs	r3, #5
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4838      	ldr	r0, [pc, #224]	; (800130c <HAL_I2S_MspInit+0x1b8>)
 800122c:	f001 fc2c 	bl	8002a88 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001230:	4b37      	ldr	r3, [pc, #220]	; (8001310 <HAL_I2S_MspInit+0x1bc>)
 8001232:	4a38      	ldr	r2, [pc, #224]	; (8001314 <HAL_I2S_MspInit+0x1c0>)
 8001234:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <HAL_I2S_MspInit+0x1bc>)
 8001238:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800123c:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800123e:	4b34      	ldr	r3, [pc, #208]	; (8001310 <HAL_I2S_MspInit+0x1bc>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001244:	4b32      	ldr	r3, [pc, #200]	; (8001310 <HAL_I2S_MspInit+0x1bc>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <HAL_I2S_MspInit+0x1bc>)
 800124c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001250:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001252:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <HAL_I2S_MspInit+0x1bc>)
 8001254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001258:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <HAL_I2S_MspInit+0x1bc>)
 800125c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001260:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <HAL_I2S_MspInit+0x1bc>)
 8001264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001268:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <HAL_I2S_MspInit+0x1bc>)
 800126c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001270:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001272:	4b27      	ldr	r3, [pc, #156]	; (8001310 <HAL_I2S_MspInit+0x1bc>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001278:	4825      	ldr	r0, [pc, #148]	; (8001310 <HAL_I2S_MspInit+0x1bc>)
 800127a:	f001 f895 	bl	80023a8 <HAL_DMA_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_I2S_MspInit+0x134>
    {
      Error_Handler();
 8001284:	f000 fb70 	bl	8001968 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s2_ext_rx);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a21      	ldr	r2, [pc, #132]	; (8001310 <HAL_I2S_MspInit+0x1bc>)
 800128c:	63da      	str	r2, [r3, #60]	; 0x3c
 800128e:	4a20      	ldr	r2, [pc, #128]	; (8001310 <HAL_I2S_MspInit+0x1bc>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_I2S_MspInit+0x1c4>)
 8001296:	4a21      	ldr	r2, [pc, #132]	; (800131c <HAL_I2S_MspInit+0x1c8>)
 8001298:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <HAL_I2S_MspInit+0x1c4>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_I2S_MspInit+0x1c4>)
 80012a2:	2240      	movs	r2, #64	; 0x40
 80012a4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_I2S_MspInit+0x1c4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_I2S_MspInit+0x1c4>)
 80012ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_I2S_MspInit+0x1c4>)
 80012b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ba:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_I2S_MspInit+0x1c4>)
 80012be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_I2S_MspInit+0x1c4>)
 80012c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ca:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_I2S_MspInit+0x1c4>)
 80012ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012d2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_I2S_MspInit+0x1c4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80012da:	480f      	ldr	r0, [pc, #60]	; (8001318 <HAL_I2S_MspInit+0x1c4>)
 80012dc:	f001 f864 	bl	80023a8 <HAL_DMA_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_I2S_MspInit+0x196>
    {
      Error_Handler();
 80012e6:	f000 fb3f 	bl	8001968 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_I2S_MspInit+0x1c4>)
 80012ee:	639a      	str	r2, [r3, #56]	; 0x38
 80012f0:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_I2S_MspInit+0x1c4>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40003800 	.word	0x40003800
 8001304:	40023800 	.word	0x40023800
 8001308:	40020400 	.word	0x40020400
 800130c:	40020800 	.word	0x40020800
 8001310:	200004fc 	.word	0x200004fc
 8001314:	40026058 	.word	0x40026058
 8001318:	2000055c 	.word	0x2000055c
 800131c:	40026070 	.word	0x40026070

08001320 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  (void) file;  /// Not used, avoid warning
  SEGGER_RTT_Write(0, ptr, len);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	461a      	mov	r2, r3
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	2000      	movs	r0, #0
 8001334:	f003 fb22 	bl	800497c <SEGGER_RTT_Write>
  return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <real_fft_init>:

#ifdef REAL_FFT

void real_fft_init()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, 8192);
 8001348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134c:	4a05      	ldr	r2, [pc, #20]	; (8001364 <real_fft_init+0x20>)
 800134e:	4906      	ldr	r1, [pc, #24]	; (8001368 <real_fft_init+0x24>)
 8001350:	4806      	ldr	r0, [pc, #24]	; (800136c <real_fft_init+0x28>)
 8001352:	f001 ff95 	bl	8003280 <HAL_I2SEx_TransmitReceive_DMA>

	arm_rfft_fast_init_f32(&fft_handler, 2048);
 8001356:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <real_fft_init+0x2c>)
 800135c:	f003 fba4 	bl	8004aa8 <arm_rfft_fast_init_f32>

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2000861c 	.word	0x2000861c
 8001368:	2000061c 	.word	0x2000061c
 800136c:	200005bc 	.word	0x200005bc
 8001370:	20000604 	.word	0x20000604

08001374 <complexABS>:

float complexABS(float real, float compl) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	ed87 0a01 	vstr	s0, [r7, #4]
 800137e:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 8001382:	edd7 7a01 	vldr	s15, [r7, #4]
 8001386:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800138a:	edd7 7a00 	vldr	s15, [r7]
 800138e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	eeb0 0a67 	vmov.f32	s0, s15
 800139a:	f005 fb6d 	bl	8006a78 <sqrtf>
 800139e:	eef0 7a40 	vmov.f32	s15, s0
}
 80013a2:	eeb0 0a67 	vmov.f32	s0, s15
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <do_fft>:

void do_fft() {
 80013ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013b0:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80013b4:	b084      	sub	sp, #16
 80013b6:	af0c      	add	r7, sp, #48	; 0x30
	//Do FFT
	arm_rfft_fast_f32(&fft_handler, fft_in_buf, fft_out_buf,0);
 80013b8:	2300      	movs	r3, #0
 80013ba:	4a90      	ldr	r2, [pc, #576]	; (80015fc <do_fft+0x250>)
 80013bc:	4990      	ldr	r1, [pc, #576]	; (8001600 <do_fft+0x254>)
 80013be:	4891      	ldr	r0, [pc, #580]	; (8001604 <do_fft+0x258>)
 80013c0:	f003 fbf6 	bl	8004bb0 <arm_rfft_fast_f32>

	int freqs[1024];
	int freqpoint = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80013ca:	f102 021c 	add.w	r2, r2, #28
 80013ce:	6013      	str	r3, [r2, #0]
	int offset = 150; //variable noisefloor offset
 80013d0:	2396      	movs	r3, #150	; 0x96
 80013d2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80013d6:	f102 0214 	add.w	r2, r2, #20
 80013da:	6013      	str	r3, [r2, #0]

	//calculate abs values and linear-to-dB
	for (int i=0; i<2048; i=i+2) {
 80013dc:	2300      	movs	r3, #0
 80013de:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80013e2:	f102 0218 	add.w	r2, r2, #24
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e067      	b.n	80014ba <do_fft+0x10e>
		freqs[freqpoint] = (int)(20*log10f(complexABS(fft_out_buf[i], fft_out_buf[i+1])))-offset;
 80013ea:	4a84      	ldr	r2, [pc, #528]	; (80015fc <do_fft+0x250>)
 80013ec:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80013f0:	f103 0318 	add.w	r3, r3, #24
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001402:	f103 0318 	add.w	r3, r3, #24
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	4a7c      	ldr	r2, [pc, #496]	; (80015fc <do_fft+0x250>)
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	ed93 7a00 	vldr	s14, [r3]
 8001414:	eef0 0a47 	vmov.f32	s1, s14
 8001418:	eeb0 0a67 	vmov.f32	s0, s15
 800141c:	f7ff ffaa 	bl	8001374 <complexABS>
 8001420:	eef0 7a40 	vmov.f32	s15, s0
 8001424:	eeb0 0a67 	vmov.f32	s0, s15
 8001428:	f005 faa8 	bl	800697c <log10f>
 800142c:	eef0 7a40 	vmov.f32	s15, s0
 8001430:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143c:	ee17 2a90 	vmov	r2, s15
 8001440:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001444:	f103 0314 	add.w	r3, r3, #20
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	1ad1      	subs	r1, r2, r3
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	3b0c      	subs	r3, #12
 8001452:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001456:	f102 021c 	add.w	r2, r2, #28
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if (freqs[freqpoint]<0) freqs[freqpoint]=0;
 8001460:	f107 0320 	add.w	r3, r7, #32
 8001464:	3b0c      	subs	r3, #12
 8001466:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800146a:	f102 021c 	add.w	r2, r2, #28
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001474:	2b00      	cmp	r3, #0
 8001476:	da0a      	bge.n	800148e <do_fft+0xe2>
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	3b0c      	subs	r3, #12
 800147e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001482:	f102 021c 	add.w	r2, r2, #28
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	2100      	movs	r1, #0
 800148a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		freqpoint++;
 800148e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001492:	f103 031c 	add.w	r3, r3, #28
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800149e:	f102 021c 	add.w	r2, r2, #28
 80014a2:	6013      	str	r3, [r2, #0]
	for (int i=0; i<2048; i=i+2) {
 80014a4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80014a8:	f103 0318 	add.w	r3, r3, #24
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3302      	adds	r3, #2
 80014b0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80014b4:	f102 0218 	add.w	r2, r2, #24
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80014be:	f103 0318 	add.w	r3, r3, #24
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014c8:	db8f      	blt.n	80013ea <do_fft+0x3e>
	}


	//push out data to Uart
	outarray[0] = 0xff; //frame start
 80014ca:	4b4f      	ldr	r3, [pc, #316]	; (8001608 <do_fft+0x25c>)
 80014cc:	22ff      	movs	r2, #255	; 0xff
 80014ce:	701a      	strb	r2, [r3, #0]
	outarray[1] = (uint8_t)freqs[1]; //31-5Hz
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	3b0c      	subs	r3, #12
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <do_fft+0x25c>)
 80014dc:	705a      	strb	r2, [r3, #1]
	outarray[2] = (uint8_t)freqs[3]; //63 Hz
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	3b0c      	subs	r3, #12
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b47      	ldr	r3, [pc, #284]	; (8001608 <do_fft+0x25c>)
 80014ea:	709a      	strb	r2, [r3, #2]
	outarray[3] = (uint8_t)freqs[5]; //125 Hz
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	3b0c      	subs	r3, #12
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b44      	ldr	r3, [pc, #272]	; (8001608 <do_fft+0x25c>)
 80014f8:	70da      	strb	r2, [r3, #3]
	outarray[4] = (uint8_t)freqs[11]; //250 Hz
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	3b0c      	subs	r3, #12
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b40      	ldr	r3, [pc, #256]	; (8001608 <do_fft+0x25c>)
 8001506:	711a      	strb	r2, [r3, #4]
	outarray[5] = (uint8_t)freqs[22]; //500 Hz
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	3b0c      	subs	r3, #12
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <do_fft+0x25c>)
 8001514:	715a      	strb	r2, [r3, #5]
	outarray[6] = (uint8_t)freqs[44]; //1 kHz
 8001516:	f107 0320 	add.w	r3, r7, #32
 800151a:	3b0c      	subs	r3, #12
 800151c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b39      	ldr	r3, [pc, #228]	; (8001608 <do_fft+0x25c>)
 8001524:	719a      	strb	r2, [r3, #6]
	outarray[7] = (uint8_t)freqs[96]; //2.2 kHz
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	3b0c      	subs	r3, #12
 800152c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <do_fft+0x25c>)
 8001534:	71da      	strb	r2, [r3, #7]
	outarray[8] = (uint8_t)freqs[197]; //4.5 kHz
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	3b0c      	subs	r3, #12
 800153c:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b31      	ldr	r3, [pc, #196]	; (8001608 <do_fft+0x25c>)
 8001544:	721a      	strb	r2, [r3, #8]
	outarray[9] = (uint8_t)freqs[393]; //9 kHz
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	3b0c      	subs	r3, #12
 800154c:	f8d3 3624 	ldr.w	r3, [r3, #1572]	; 0x624
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <do_fft+0x25c>)
 8001554:	725a      	strb	r2, [r3, #9]
	outarray[10] = (uint8_t)freqs[655]; //15 lHz
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	3b0c      	subs	r3, #12
 800155c:	f8d3 3a3c 	ldr.w	r3, [r3, #2620]	; 0xa3c
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <do_fft+0x25c>)
 8001564:	729a      	strb	r2, [r3, #10]

	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
			outarray[0],
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <do_fft+0x25c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 800156a:	469c      	mov	ip, r3
			outarray[1],
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <do_fft+0x25c>)
 800156e:	785b      	ldrb	r3, [r3, #1]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 8001570:	469e      	mov	lr, r3
			outarray[2],
 8001572:	4b25      	ldr	r3, [pc, #148]	; (8001608 <do_fft+0x25c>)
 8001574:	789b      	ldrb	r3, [r3, #2]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 8001576:	4698      	mov	r8, r3
			outarray[3],
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <do_fft+0x25c>)
 800157a:	78db      	ldrb	r3, [r3, #3]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 800157c:	461a      	mov	r2, r3
			outarray[4],
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <do_fft+0x25c>)
 8001580:	791b      	ldrb	r3, [r3, #4]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 8001582:	4619      	mov	r1, r3
			outarray[5],
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <do_fft+0x25c>)
 8001586:	795b      	ldrb	r3, [r3, #5]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 8001588:	4618      	mov	r0, r3
			outarray[6],
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <do_fft+0x25c>)
 800158c:	799b      	ldrb	r3, [r3, #6]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 800158e:	461c      	mov	r4, r3
			outarray[7],
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <do_fft+0x25c>)
 8001592:	79db      	ldrb	r3, [r3, #7]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 8001594:	461d      	mov	r5, r3
			outarray[8],
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <do_fft+0x25c>)
 8001598:	7a1b      	ldrb	r3, [r3, #8]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 800159a:	461e      	mov	r6, r3
			outarray[9],
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <do_fft+0x25c>)
 800159e:	7a5b      	ldrb	r3, [r3, #9]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 80015a0:	60fb      	str	r3, [r7, #12]
			outarray[10],
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <do_fft+0x25c>)
 80015a4:	7a9b      	ldrb	r3, [r3, #10]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 80015a6:	60bb      	str	r3, [r7, #8]
			outarray[11],
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <do_fft+0x25c>)
 80015aa:	7adb      	ldrb	r3, [r3, #11]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 80015ac:	607b      	str	r3, [r7, #4]
			outarray[12],
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <do_fft+0x25c>)
 80015b0:	7b1b      	ldrb	r3, [r3, #12]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 80015b2:	603b      	str	r3, [r7, #0]
			outarray[13]
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <do_fft+0x25c>)
 80015b6:	7b5b      	ldrb	r3, [r3, #13]
	printf("%u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u - %u\r\n",
 80015b8:	930a      	str	r3, [sp, #40]	; 0x28
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	9309      	str	r3, [sp, #36]	; 0x24
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	9308      	str	r3, [sp, #32]
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	9307      	str	r3, [sp, #28]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	9306      	str	r3, [sp, #24]
 80015ca:	9605      	str	r6, [sp, #20]
 80015cc:	9504      	str	r5, [sp, #16]
 80015ce:	9403      	str	r4, [sp, #12]
 80015d0:	9002      	str	r0, [sp, #8]
 80015d2:	9101      	str	r1, [sp, #4]
 80015d4:	9200      	str	r2, [sp, #0]
 80015d6:	4643      	mov	r3, r8
 80015d8:	4672      	mov	r2, lr
 80015da:	4661      	mov	r1, ip
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <do_fft+0x260>)
 80015de:	f004 fa77 	bl	8005ad0 <iprintf>
	);
//	if (uartfree==1) HAL_UART_Transmit_DMA(&huart2, &outarray[0], 11);
	uartfree = 0;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <do_fft+0x264>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
	callback_state=0;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <do_fft+0x268>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]

}
 80015ee:	bf00      	nop
 80015f0:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 80015f4:	46bd      	mov	sp, r7
 80015f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015fa:	bf00      	nop
 80015fc:	2001062c 	.word	0x2001062c
 8001600:	2001262c 	.word	0x2001262c
 8001604:	20000604 	.word	0x20000604
 8001608:	2001061c 	.word	0x2001061c
 800160c:	08006e20 	.word	0x08006e20
 8001610:	20000000 	.word	0x20000000
 8001614:	20000094 	.word	0x20000094

08001618 <HAL_I2SEx_TxRxHalfCpltCallback>:
	uartfree = 1;
	huart2.gState=HAL_UART_STATE_READY;
}
*/

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

 	callback_state = 1;
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]

}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000094 	.word	0x20000094

08001638 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

	callback_state = 2;
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8001642:	2202      	movs	r2, #2
 8001644:	701a      	strb	r2, [r3, #0]

}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000094 	.word	0x20000094

08001658 <real_fft_loop>:

void real_fft_loop()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
	//do audio loopback and push mono-sum to fft_in_buf

  int fft_in_ptr = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  if (callback_state == 1) {
 8001662:	4b6e      	ldr	r3, [pc, #440]	; (800181c <real_fft_loop+0x1c4>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d167      	bne.n	800173a <real_fft_loop+0xe2>
	  for (int i=0; i<8192; i=i+4) {
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	e05e      	b.n	800172e <real_fft_loop+0xd6>
		  fft_in_buf[fft_in_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
 8001670:	4a6b      	ldr	r2, [pc, #428]	; (8001820 <real_fft_loop+0x1c8>)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001678:	041b      	lsls	r3, r3, #16
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	3201      	adds	r2, #1
 800167e:	4968      	ldr	r1, [pc, #416]	; (8001820 <real_fft_loop+0x1c8>)
 8001680:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001684:	4313      	orrs	r3, r2
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168e:	4a65      	ldr	r2, [pc, #404]	; (8001824 <real_fft_loop+0x1cc>)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	edc3 7a00 	vstr	s15, [r3]
		  fft_in_buf[fft_in_ptr] += (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
 800169a:	4a62      	ldr	r2, [pc, #392]	; (8001824 <real_fft_loop+0x1cc>)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	ed93 7a00 	vldr	s14, [r3]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3302      	adds	r3, #2
 80016aa:	4a5d      	ldr	r2, [pc, #372]	; (8001820 <real_fft_loop+0x1c8>)
 80016ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	3203      	adds	r2, #3
 80016b6:	495a      	ldr	r1, [pc, #360]	; (8001820 <real_fft_loop+0x1c8>)
 80016b8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80016bc:	4313      	orrs	r3, r2
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ca:	4a56      	ldr	r2, [pc, #344]	; (8001824 <real_fft_loop+0x1cc>)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	edc3 7a00 	vstr	s15, [r3]
		  txBuf[i] = rxBuf[i];
 80016d6:	4a52      	ldr	r2, [pc, #328]	; (8001820 <real_fft_loop+0x1c8>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016de:	4a52      	ldr	r2, [pc, #328]	; (8001828 <real_fft_loop+0x1d0>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[i+1] = rxBuf[i+1];
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	3301      	adds	r3, #1
 80016ee:	494c      	ldr	r1, [pc, #304]	; (8001820 <real_fft_loop+0x1c8>)
 80016f0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80016f4:	4a4c      	ldr	r2, [pc, #304]	; (8001828 <real_fft_loop+0x1d0>)
 80016f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[i+2] = rxBuf[i+2];
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1c9a      	adds	r2, r3, #2
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3302      	adds	r3, #2
 8001702:	4947      	ldr	r1, [pc, #284]	; (8001820 <real_fft_loop+0x1c8>)
 8001704:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001708:	4a47      	ldr	r2, [pc, #284]	; (8001828 <real_fft_loop+0x1d0>)
 800170a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[i+3] = rxBuf[i+3];
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1cda      	adds	r2, r3, #3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	3303      	adds	r3, #3
 8001716:	4942      	ldr	r1, [pc, #264]	; (8001820 <real_fft_loop+0x1c8>)
 8001718:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800171c:	4a42      	ldr	r2, [pc, #264]	; (8001828 <real_fft_loop+0x1d0>)
 800171e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  fft_in_ptr++;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3301      	adds	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
	  for (int i=0; i<8192; i=i+4) {
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3304      	adds	r3, #4
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001734:	db9c      	blt.n	8001670 <real_fft_loop+0x18>
	  }

	  do_fft();
 8001736:	f7ff fe39 	bl	80013ac <do_fft>
  }

  if (callback_state == 2) {
 800173a:	4b38      	ldr	r3, [pc, #224]	; (800181c <real_fft_loop+0x1c4>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d168      	bne.n	8001814 <real_fft_loop+0x1bc>
	  for (int i=8192; i<16384; i=i+4) {
 8001742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	e05e      	b.n	8001808 <real_fft_loop+0x1b0>
		  fft_in_buf[fft_in_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
 800174a:	4a35      	ldr	r2, [pc, #212]	; (8001820 <real_fft_loop+0x1c8>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001752:	041b      	lsls	r3, r3, #16
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	3201      	adds	r2, #1
 8001758:	4931      	ldr	r1, [pc, #196]	; (8001820 <real_fft_loop+0x1c8>)
 800175a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800175e:	4313      	orrs	r3, r2
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001768:	4a2e      	ldr	r2, [pc, #184]	; (8001824 <real_fft_loop+0x1cc>)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	edc3 7a00 	vstr	s15, [r3]
		  fft_in_buf[fft_in_ptr] += (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
 8001774:	4a2b      	ldr	r2, [pc, #172]	; (8001824 <real_fft_loop+0x1cc>)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	ed93 7a00 	vldr	s14, [r3]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3302      	adds	r3, #2
 8001784:	4a26      	ldr	r2, [pc, #152]	; (8001820 <real_fft_loop+0x1c8>)
 8001786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800178a:	041b      	lsls	r3, r3, #16
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	3203      	adds	r2, #3
 8001790:	4923      	ldr	r1, [pc, #140]	; (8001820 <real_fft_loop+0x1c8>)
 8001792:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001796:	4313      	orrs	r3, r2
 8001798:	ee07 3a90 	vmov	s15, r3
 800179c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a4:	4a1f      	ldr	r2, [pc, #124]	; (8001824 <real_fft_loop+0x1cc>)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	edc3 7a00 	vstr	s15, [r3]
		  txBuf[i] = rxBuf[i];
 80017b0:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <real_fft_loop+0x1c8>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <real_fft_loop+0x1d0>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[i+1] = rxBuf[i+1];
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4915      	ldr	r1, [pc, #84]	; (8001820 <real_fft_loop+0x1c8>)
 80017ca:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80017ce:	4a16      	ldr	r2, [pc, #88]	; (8001828 <real_fft_loop+0x1d0>)
 80017d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[i+2] = rxBuf[i+2];
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	1c9a      	adds	r2, r3, #2
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3302      	adds	r3, #2
 80017dc:	4910      	ldr	r1, [pc, #64]	; (8001820 <real_fft_loop+0x1c8>)
 80017de:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80017e2:	4a11      	ldr	r2, [pc, #68]	; (8001828 <real_fft_loop+0x1d0>)
 80017e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[i+3] = rxBuf[i+3];
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	1cda      	adds	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3303      	adds	r3, #3
 80017f0:	490b      	ldr	r1, [pc, #44]	; (8001820 <real_fft_loop+0x1c8>)
 80017f2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80017f6:	4a0c      	ldr	r2, [pc, #48]	; (8001828 <real_fft_loop+0x1d0>)
 80017f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  fft_in_ptr++;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3301      	adds	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
	  for (int i=8192; i<16384; i=i+4) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3304      	adds	r3, #4
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800180e:	db9c      	blt.n	800174a <real_fft_loop+0xf2>
	  }


	  do_fft();
 8001810:	f7ff fdcc 	bl	80013ac <do_fft>

  }
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000094 	.word	0x20000094
 8001820:	2000861c 	.word	0x2000861c
 8001824:	2001262c 	.word	0x2001262c
 8001828:	2000061c 	.word	0x2000061c

0800182c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001832:	f000 f9d3 	bl	8001bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001836:	f000 f815 	bl	8001864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183a:	f7ff fbd1 	bl	8000fe0 <MX_GPIO_Init>
  MX_DMA_Init();
 800183e:	f7ff fba7 	bl	8000f90 <MX_DMA_Init>
  MX_ADC1_Init();
 8001842:	f7ff fb0f 	bl	8000e64 <MX_ADC1_Init>
  MX_I2S2_Init();
 8001846:	f7ff fc55 	bl	80010f4 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
 800184a:	2301      	movs	r3, #1
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2300      	movs	r3, #0
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	2000      	movs	r0, #0
 8001856:	f003 f8b7 	bl	80049c8 <SEGGER_RTT_ConfigUpBuffer>
#ifdef IIR_BIQUAD
  do_iir_init();
#endif //IIR_BIQUAD

#ifdef REAL_FFT
  real_fft_init();
 800185a:	f7ff fd73 	bl	8001344 <real_fft_init>
#ifdef IIR_BIQUAD
	  do_iir_loop();
#endif //IIR_BIQUAD

#ifdef REAL_FFT
	  real_fft_loop();
 800185e:	f7ff fefb 	bl	8001658 <real_fft_loop>
 8001862:	e7fc      	b.n	800185e <main+0x32>

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b098      	sub	sp, #96	; 0x60
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800186e:	2230      	movs	r2, #48	; 0x30
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f004 f924 	bl	8005ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b31      	ldr	r3, [pc, #196]	; (8001960 <SystemClock_Config+0xfc>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a30      	ldr	r2, [pc, #192]	; (8001960 <SystemClock_Config+0xfc>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <SystemClock_Config+0xfc>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <SystemClock_Config+0x100>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2a      	ldr	r2, [pc, #168]	; (8001964 <SystemClock_Config+0x100>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4b28      	ldr	r3, [pc, #160]	; (8001964 <SystemClock_Config+0x100>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ce:	2302      	movs	r3, #2
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d2:	2301      	movs	r3, #1
 80018d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d6:	2310      	movs	r3, #16
 80018d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018da:	2302      	movs	r3, #2
 80018dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018de:	2300      	movs	r3, #0
 80018e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018e2:	2310      	movs	r3, #16
 80018e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018e6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ec:	2302      	movs	r3, #2
 80018ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018f0:	2304      	movs	r3, #4
 80018f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 f985 	bl	8003c08 <HAL_RCC_OscConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001904:	f000 f830 	bl	8001968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001908:	230f      	movs	r3, #15
 800190a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800190c:	2302      	movs	r3, #2
 800190e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001914:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800191a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	2105      	movs	r1, #5
 8001926:	4618      	mov	r0, r3
 8001928:	f002 fbde 	bl	80040e8 <HAL_RCC_ClockConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001932:	f000 f819 	bl	8001968 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001936:	2301      	movs	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
 800193a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800193e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001940:	2302      	movs	r3, #2
 8001942:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	4618      	mov	r0, r3
 800194a:	f002 fd69 	bl	8004420 <HAL_RCCEx_PeriphCLKConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001954:	f000 f808 	bl	8001968 <Error_Handler>
  }
}
 8001958:	bf00      	nop
 800195a:	3760      	adds	r7, #96	; 0x60
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	40007000 	.word	0x40007000

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_MspInit+0x4c>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_MspInit+0x4c>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198c:	6453      	str	r3, [r2, #68]	; 0x44
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_MspInit+0x4c>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_MspInit+0x4c>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_MspInit+0x4c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <MemManage_Handler+0x4>

080019e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <UsageFault_Handler+0x4>

080019ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1c:	f000 f930 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <DMA1_Stream3_IRQHandler+0x10>)
 8001a2a:	f000 fdc3 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200004fc 	.word	0x200004fc

08001a38 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <DMA1_Stream4_IRQHandler+0x10>)
 8001a3e:	f000 fdb9 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000055c 	.word	0x2000055c

08001a4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e00a      	b.n	8001a74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a5e:	f3af 8000 	nop.w
 8001a62:	4601      	mov	r1, r0
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	60ba      	str	r2, [r7, #8]
 8001a6a:	b2ca      	uxtb	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dbf0      	blt.n	8001a5e <_read+0x12>
	}

return len;
 8001a7c:	687b      	ldr	r3, [r7, #4]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_close>:
	return len;
}
*/

int _close(int file)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aae:	605a      	str	r2, [r3, #4]
	return 0;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <_isatty>:

int _isatty(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
	return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <_sbrk+0x5c>)
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <_sbrk+0x60>)
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <_sbrk+0x64>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <_sbrk+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d207      	bcs.n	8001b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b20:	f003 ff96 	bl	8005a50 <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	220c      	movs	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b2e:	e009      	b.n	8001b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <_sbrk+0x64>)
 8001b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20020000 	.word	0x20020000
 8001b50:	00000400 	.word	0x00000400
 8001b54:	20000098 	.word	0x20000098
 8001b58:	200146e8 	.word	0x200146e8

08001b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <SystemInit+0x28>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <SystemInit+0x28>)
 8001b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SystemInit+0x28>)
 8001b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b76:	609a      	str	r2, [r3, #8]
#endif
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b8e:	e003      	b.n	8001b98 <LoopCopyDataInit>

08001b90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b96:	3104      	adds	r1, #4

08001b98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b98:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ba0:	d3f6      	bcc.n	8001b90 <CopyDataInit>
  ldr  r2, =_sbss
 8001ba2:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ba4:	e002      	b.n	8001bac <LoopFillZerobss>

08001ba6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ba6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ba8:	f842 3b04 	str.w	r3, [r2], #4

08001bac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bb0:	d3f9      	bcc.n	8001ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bb2:	f7ff ffd3 	bl	8001b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f003 ff51 	bl	8005a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bba:	f7ff fe37 	bl	800182c <main>
  bx  lr    
 8001bbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bc0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bc4:	0801a3ac 	.word	0x0801a3ac
  ldr  r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bcc:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001bd0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001bd4:	200146e8 	.word	0x200146e8

08001bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC_IRQHandler>
	...

08001bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <HAL_Init+0x40>)
 8001be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_Init+0x40>)
 8001bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_Init+0x40>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 fb8d 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff feb2 	bl	8001978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023c00 	.word	0x40023c00

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fba5 	bl	800238e <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c5c:	f000 fb6d 	bl	800233a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000004 	.word	0x20000004
 8001c78:	2000000c 	.word	0x2000000c
 8001c7c:	20000008 	.word	0x20000008

08001c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	2000000c 	.word	0x2000000c
 8001ca4:	2001462c 	.word	0x2001462c

08001ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_GetTick+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	2001462c 	.word	0x2001462c

08001cc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e033      	b.n	8001d3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff f912 	bl	8000f08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d118      	bne.n	8001d30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d06:	f023 0302 	bic.w	r3, r3, #2
 8001d0a:	f043 0202 	orr.w	r2, r3, #2
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f93a 	bl	8001f8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f023 0303 	bic.w	r3, r3, #3
 8001d26:	f043 0201 	orr.w	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d2e:	e001      	b.n	8001d34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1c>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e105      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x228>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b09      	cmp	r3, #9
 8001d72:	d925      	bls.n	8001dc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68d9      	ldr	r1, [r3, #12]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	3b1e      	subs	r3, #30
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43da      	mvns	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	400a      	ands	r2, r1
 8001d98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68d9      	ldr	r1, [r3, #12]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	4603      	mov	r3, r0
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4403      	add	r3, r0
 8001db2:	3b1e      	subs	r3, #30
 8001db4:	409a      	lsls	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	e022      	b.n	8001e06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6919      	ldr	r1, [r3, #16]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	400a      	ands	r2, r1
 8001de2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6919      	ldr	r1, [r3, #16]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4403      	add	r3, r0
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d824      	bhi.n	8001e58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b05      	subs	r3, #5
 8001e20:	221f      	movs	r2, #31
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	3b05      	subs	r3, #5
 8001e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	635a      	str	r2, [r3, #52]	; 0x34
 8001e56:	e04c      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d824      	bhi.n	8001eaa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b23      	subs	r3, #35	; 0x23
 8001e72:	221f      	movs	r2, #31
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	400a      	ands	r2, r1
 8001e80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	3b23      	subs	r3, #35	; 0x23
 8001e9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ea8:	e023      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b41      	subs	r3, #65	; 0x41
 8001ebc:	221f      	movs	r2, #31
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	400a      	ands	r2, r1
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b41      	subs	r3, #65	; 0x41
 8001ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ef2:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <HAL_ADC_ConfigChannel+0x234>)
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <HAL_ADC_ConfigChannel+0x238>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d109      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1cc>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b12      	cmp	r3, #18
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_ADC_ConfigChannel+0x238>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d123      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x21e>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d003      	beq.n	8001f2e <HAL_ADC_ConfigChannel+0x1e6>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b11      	cmp	r3, #17
 8001f2c:	d11b      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b10      	cmp	r3, #16
 8001f40:	d111      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_ADC_ConfigChannel+0x23c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <HAL_ADC_ConfigChannel+0x240>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	0c9a      	lsrs	r2, r3, #18
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f58:	e002      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f9      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40012300 	.word	0x40012300
 8001f80:	40012000 	.word	0x40012000
 8001f84:	20000004 	.word	0x20000004
 8001f88:	431bde83 	.word	0x431bde83

08001f8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f94:	4b79      	ldr	r3, [pc, #484]	; (800217c <ADC_Init+0x1f0>)
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	021a      	lsls	r2, r3, #8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002006:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6899      	ldr	r1, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	4a58      	ldr	r2, [pc, #352]	; (8002180 <ADC_Init+0x1f4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d022      	beq.n	800206a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002032:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6899      	ldr	r1, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002054:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6899      	ldr	r1, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	e00f      	b.n	800208a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002088:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0202 	bic.w	r2, r2, #2
 8002098:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6899      	ldr	r1, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7e1b      	ldrb	r3, [r3, #24]
 80020a4:	005a      	lsls	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6859      	ldr	r1, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	3b01      	subs	r3, #1
 80020e4:	035a      	lsls	r2, r3, #13
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	e007      	b.n	8002100 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	3b01      	subs	r3, #1
 800211c:	051a      	lsls	r2, r3, #20
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002134:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002142:	025a      	lsls	r2, r3, #9
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800215a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6899      	ldr	r1, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	029a      	lsls	r2, r3, #10
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	40012300 	.word	0x40012300
 8002180:	0f000001 	.word	0x0f000001

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4907      	ldr	r1, [pc, #28]	; (8002220 <__NVIC_EnableIRQ+0x38>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	490c      	ldr	r1, [pc, #48]	; (8002270 <__NVIC_SetPriority+0x4c>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4908      	ldr	r1, [pc, #32]	; (8002274 <__NVIC_SetPriority+0x50>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3b04      	subs	r3, #4
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	bf28      	it	cs
 8002296:	2304      	movcs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3304      	adds	r3, #4
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d902      	bls.n	80022a8 <NVIC_EncodePriority+0x30>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b03      	subs	r3, #3
 80022a6:	e000      	b.n	80022aa <NVIC_EncodePriority+0x32>
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43d9      	mvns	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	4313      	orrs	r3, r2
         );
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f0:	d301      	bcc.n	80022f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00f      	b.n	8002316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <SysTick_Config+0x40>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fe:	210f      	movs	r1, #15
 8002300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002304:	f7ff ff8e 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <SysTick_Config+0x40>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <SysTick_Config+0x40>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff29 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800234c:	f7ff ff3e 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ff8e 	bl	8002278 <NVIC_EncodePriority>
 800235c:	4602      	mov	r2, r0
 800235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff5d 	bl	8002224 <__NVIC_SetPriority>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff31 	bl	80021e8 <__NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffa2 	bl	80022e0 <SysTick_Config>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff fc78 	bl	8001ca8 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e099      	b.n	80024f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e4:	e00f      	b.n	8002406 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e6:	f7ff fc5f 	bl	8001ca8 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d908      	bls.n	8002406 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2203      	movs	r2, #3
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e078      	b.n	80024f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e8      	bne.n	80023e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4b38      	ldr	r3, [pc, #224]	; (8002500 <HAL_DMA_Init+0x158>)
 8002420:	4013      	ands	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002432:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	2b04      	cmp	r3, #4
 800245e:	d107      	bne.n	8002470 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4313      	orrs	r3, r2
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f023 0307 	bic.w	r3, r3, #7
 8002486:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	2b04      	cmp	r3, #4
 8002498:	d117      	bne.n	80024ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fa6f 	bl	8002990 <DMA_CheckFifoParam>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2240      	movs	r2, #64	; 0x40
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024c6:	2301      	movs	r3, #1
 80024c8:	e016      	b.n	80024f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fa26 	bl	8002924 <DMA_CalcBaseAndBitshift>
 80024d8:	4603      	mov	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	223f      	movs	r2, #63	; 0x3f
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	f010803f 	.word	0xf010803f

08002504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_DMA_Start_IT+0x26>
 8002526:	2302      	movs	r3, #2
 8002528:	e040      	b.n	80025ac <HAL_DMA_Start_IT+0xa8>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d12f      	bne.n	800259e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f9b8 	bl	80028c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	409a      	lsls	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0216 	orr.w	r2, r2, #22
 8002572:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0208 	orr.w	r2, r2, #8
 800258a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e005      	b.n	80025aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
 80025a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025c0:	4b92      	ldr	r3, [pc, #584]	; (800280c <HAL_DMA_IRQHandler+0x258>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a92      	ldr	r2, [pc, #584]	; (8002810 <HAL_DMA_IRQHandler+0x25c>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0a9b      	lsrs	r3, r3, #10
 80025cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	2208      	movs	r2, #8
 80025e0:	409a      	lsls	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d01a      	beq.n	8002620 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0204 	bic.w	r2, r2, #4
 8002606:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	2208      	movs	r2, #8
 800260e:	409a      	lsls	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	f043 0201 	orr.w	r2, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	2201      	movs	r2, #1
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d012      	beq.n	8002656 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	2201      	movs	r2, #1
 8002644:	409a      	lsls	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f043 0202 	orr.w	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	2204      	movs	r2, #4
 800265c:	409a      	lsls	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d012      	beq.n	800268c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00b      	beq.n	800268c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002678:	2204      	movs	r2, #4
 800267a:	409a      	lsls	r2, r3
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	f043 0204 	orr.w	r2, r3, #4
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	2210      	movs	r2, #16
 8002692:	409a      	lsls	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d043      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d03c      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	2210      	movs	r2, #16
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d018      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d024      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
 80026e2:	e01f      	b.n	8002724 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d01b      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
 80026f4:	e016      	b.n	8002724 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d107      	bne.n	8002714 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0208 	bic.w	r2, r2, #8
 8002712:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	2220      	movs	r2, #32
 800272a:	409a      	lsls	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 808e 	beq.w	8002852 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8086 	beq.w	8002852 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274a:	2220      	movs	r2, #32
 800274c:	409a      	lsls	r2, r3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b05      	cmp	r3, #5
 800275c:	d136      	bne.n	80027cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0216 	bic.w	r2, r2, #22
 800276c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800277c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d103      	bne.n	800278e <HAL_DMA_IRQHandler+0x1da>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0208 	bic.w	r2, r2, #8
 800279c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	223f      	movs	r2, #63	; 0x3f
 80027a4:	409a      	lsls	r2, r3
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d07d      	beq.n	80028be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	4798      	blx	r3
        }
        return;
 80027ca:	e078      	b.n	80028be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01c      	beq.n	8002814 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d108      	bne.n	80027fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d030      	beq.n	8002852 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
 80027f8:	e02b      	b.n	8002852 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d027      	beq.n	8002852 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
 800280a:	e022      	b.n	8002852 <HAL_DMA_IRQHandler+0x29e>
 800280c:	20000004 	.word	0x20000004
 8002810:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10f      	bne.n	8002842 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0210 	bic.w	r2, r2, #16
 8002830:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	2b00      	cmp	r3, #0
 8002858:	d032      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d022      	beq.n	80028ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2205      	movs	r2, #5
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0201 	bic.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	3301      	adds	r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	429a      	cmp	r2, r3
 8002888:	d307      	bcc.n	800289a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f2      	bne.n	800287e <HAL_DMA_IRQHandler+0x2ca>
 8002898:	e000      	b.n	800289c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800289a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
 80028bc:	e000      	b.n	80028c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028be:	bf00      	nop
    }
  }
}
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop

080028c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b40      	cmp	r3, #64	; 0x40
 80028f4:	d108      	bne.n	8002908 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002906:	e007      	b.n	8002918 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	3b10      	subs	r3, #16
 8002934:	4a14      	ldr	r2, [pc, #80]	; (8002988 <DMA_CalcBaseAndBitshift+0x64>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800293e:	4a13      	ldr	r2, [pc, #76]	; (800298c <DMA_CalcBaseAndBitshift+0x68>)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d909      	bls.n	8002966 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800295a:	f023 0303 	bic.w	r3, r3, #3
 800295e:	1d1a      	adds	r2, r3, #4
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	659a      	str	r2, [r3, #88]	; 0x58
 8002964:	e007      	b.n	8002976 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800296e:	f023 0303 	bic.w	r3, r3, #3
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	aaaaaaab 	.word	0xaaaaaaab
 800298c:	08006e90 	.word	0x08006e90

08002990 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11f      	bne.n	80029ea <DMA_CheckFifoParam+0x5a>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d856      	bhi.n	8002a5e <DMA_CheckFifoParam+0xce>
 80029b0:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <DMA_CheckFifoParam+0x28>)
 80029b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b6:	bf00      	nop
 80029b8:	080029c9 	.word	0x080029c9
 80029bc:	080029db 	.word	0x080029db
 80029c0:	080029c9 	.word	0x080029c9
 80029c4:	08002a5f 	.word	0x08002a5f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d046      	beq.n	8002a62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d8:	e043      	b.n	8002a62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029e2:	d140      	bne.n	8002a66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e8:	e03d      	b.n	8002a66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f2:	d121      	bne.n	8002a38 <DMA_CheckFifoParam+0xa8>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d837      	bhi.n	8002a6a <DMA_CheckFifoParam+0xda>
 80029fa:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <DMA_CheckFifoParam+0x70>)
 80029fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a17 	.word	0x08002a17
 8002a08:	08002a11 	.word	0x08002a11
 8002a0c:	08002a29 	.word	0x08002a29
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e030      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d025      	beq.n	8002a6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a26:	e022      	b.n	8002a6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a30:	d11f      	bne.n	8002a72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a36:	e01c      	b.n	8002a72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d903      	bls.n	8002a46 <DMA_CheckFifoParam+0xb6>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d003      	beq.n	8002a4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a44:	e018      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4a:	e015      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00e      	beq.n	8002a76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5c:	e00b      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e00a      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a62:	bf00      	nop
 8002a64:	e008      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a66:	bf00      	nop
 8002a68:	e006      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e004      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e002      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a72:	bf00      	nop
 8002a74:	e000      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a76:	bf00      	nop
    }
  } 
  
  return status; 
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop

08002a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	e16b      	b.n	8002d7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f040 815a 	bne.w	8002d76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_GPIO_Init+0x5a>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d007      	beq.n	8002ae2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad6:	2b11      	cmp	r3, #17
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b12      	cmp	r3, #18
 8002ae0:	d130      	bne.n	8002b44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	2203      	movs	r2, #3
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 0201 	and.w	r2, r3, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0xfc>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b12      	cmp	r3, #18
 8002b82:	d123      	bne.n	8002bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	08da      	lsrs	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3208      	adds	r2, #8
 8002b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	08da      	lsrs	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3208      	adds	r2, #8
 8002bc6:	69b9      	ldr	r1, [r7, #24]
 8002bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0203 	and.w	r2, r3, #3
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80b4 	beq.w	8002d76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b60      	ldr	r3, [pc, #384]	; (8002d94 <HAL_GPIO_Init+0x30c>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	4a5f      	ldr	r2, [pc, #380]	; (8002d94 <HAL_GPIO_Init+0x30c>)
 8002c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1e:	4b5d      	ldr	r3, [pc, #372]	; (8002d94 <HAL_GPIO_Init+0x30c>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c2a:	4a5b      	ldr	r2, [pc, #364]	; (8002d98 <HAL_GPIO_Init+0x310>)
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3302      	adds	r3, #2
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	220f      	movs	r2, #15
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a52      	ldr	r2, [pc, #328]	; (8002d9c <HAL_GPIO_Init+0x314>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d02b      	beq.n	8002cae <HAL_GPIO_Init+0x226>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a51      	ldr	r2, [pc, #324]	; (8002da0 <HAL_GPIO_Init+0x318>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d025      	beq.n	8002caa <HAL_GPIO_Init+0x222>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a50      	ldr	r2, [pc, #320]	; (8002da4 <HAL_GPIO_Init+0x31c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01f      	beq.n	8002ca6 <HAL_GPIO_Init+0x21e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4f      	ldr	r2, [pc, #316]	; (8002da8 <HAL_GPIO_Init+0x320>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d019      	beq.n	8002ca2 <HAL_GPIO_Init+0x21a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4e      	ldr	r2, [pc, #312]	; (8002dac <HAL_GPIO_Init+0x324>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_GPIO_Init+0x216>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4d      	ldr	r2, [pc, #308]	; (8002db0 <HAL_GPIO_Init+0x328>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00d      	beq.n	8002c9a <HAL_GPIO_Init+0x212>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4c      	ldr	r2, [pc, #304]	; (8002db4 <HAL_GPIO_Init+0x32c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d007      	beq.n	8002c96 <HAL_GPIO_Init+0x20e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4b      	ldr	r2, [pc, #300]	; (8002db8 <HAL_GPIO_Init+0x330>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_GPIO_Init+0x20a>
 8002c8e:	2307      	movs	r3, #7
 8002c90:	e00e      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002c92:	2308      	movs	r3, #8
 8002c94:	e00c      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002c96:	2306      	movs	r3, #6
 8002c98:	e00a      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002c9a:	2305      	movs	r3, #5
 8002c9c:	e008      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e004      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e002      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	f002 0203 	and.w	r2, r2, #3
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	4093      	lsls	r3, r2
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cc0:	4935      	ldr	r1, [pc, #212]	; (8002d98 <HAL_GPIO_Init+0x310>)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cce:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cf2:	4a32      	ldr	r2, [pc, #200]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cf8:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d1c:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d22:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d46:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d70:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2b0f      	cmp	r3, #15
 8002d80:	f67f ae90 	bls.w	8002aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	40020400 	.word	0x40020400
 8002da4:	40020800 	.word	0x40020800
 8002da8:	40020c00 	.word	0x40020c00
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40021400 	.word	0x40021400
 8002db4:	40021800 	.word	0x40021800
 8002db8:	40021c00 	.word	0x40021c00
 8002dbc:	40013c00 	.word	0x40013c00

08002dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd0:	787b      	ldrb	r3, [r7, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ddc:	e003      	b.n	8002de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	041a      	lsls	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	619a      	str	r2, [r3, #24]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e128      	b.n	8003058 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a90      	ldr	r2, [pc, #576]	; (8003060 <HAL_I2S_Init+0x26c>)
 8002e1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7fe f997 	bl	8001154 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e3c:	f023 030f 	bic.w	r3, r3, #15
 8002e40:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2202      	movs	r2, #2
 8002e48:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d060      	beq.n	8002f14 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d102      	bne.n	8002e60 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	e001      	b.n	8002e64 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002e60:	2320      	movs	r3, #32
 8002e62:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d802      	bhi.n	8002e72 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002e72:	2001      	movs	r0, #1
 8002e74:	f001 fbb6 	bl	80045e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e78:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e82:	d125      	bne.n	8002ed0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d010      	beq.n	8002eae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	3305      	adds	r3, #5
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	e01f      	b.n	8002eee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eca:	3305      	adds	r3, #5
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	e00e      	b.n	8002eee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	3305      	adds	r3, #5
 8002eec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4a5c      	ldr	r2, [pc, #368]	; (8003064 <HAL_I2S_Init+0x270>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	08db      	lsrs	r3, r3, #3
 8002ef8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	e003      	b.n	8002f1c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002f14:	2302      	movs	r3, #2
 8002f16:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d902      	bls.n	8002f28 <HAL_I2S_Init+0x134>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	2bff      	cmp	r3, #255	; 0xff
 8002f26:	d907      	bls.n	8002f38 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	f043 0210 	orr.w	r2, r3, #16
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e08f      	b.n	8003058 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	ea42 0103 	orr.w	r1, r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f56:	f023 030f 	bic.w	r3, r3, #15
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6851      	ldr	r1, [r2, #4]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6892      	ldr	r2, [r2, #8]
 8002f62:	4311      	orrs	r1, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68d2      	ldr	r2, [r2, #12]
 8002f68:	4311      	orrs	r1, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6992      	ldr	r2, [r2, #24]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f7a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d161      	bne.n	8003048 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a38      	ldr	r2, [pc, #224]	; (8003068 <HAL_I2S_Init+0x274>)
 8002f88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a37      	ldr	r2, [pc, #220]	; (800306c <HAL_I2S_Init+0x278>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d101      	bne.n	8002f98 <HAL_I2S_Init+0x1a4>
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <HAL_I2S_Init+0x27c>)
 8002f96:	e001      	b.n	8002f9c <HAL_I2S_Init+0x1a8>
 8002f98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	4932      	ldr	r1, [pc, #200]	; (800306c <HAL_I2S_Init+0x278>)
 8002fa4:	428a      	cmp	r2, r1
 8002fa6:	d101      	bne.n	8002fac <HAL_I2S_Init+0x1b8>
 8002fa8:	4a31      	ldr	r2, [pc, #196]	; (8003070 <HAL_I2S_Init+0x27c>)
 8002faa:	e001      	b.n	8002fb0 <HAL_I2S_Init+0x1bc>
 8002fac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002fb0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fb4:	f023 030f 	bic.w	r3, r3, #15
 8002fb8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2b      	ldr	r2, [pc, #172]	; (800306c <HAL_I2S_Init+0x278>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <HAL_I2S_Init+0x1d4>
 8002fc4:	4b2a      	ldr	r3, [pc, #168]	; (8003070 <HAL_I2S_Init+0x27c>)
 8002fc6:	e001      	b.n	8002fcc <HAL_I2S_Init+0x1d8>
 8002fc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fcc:	2202      	movs	r2, #2
 8002fce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a25      	ldr	r2, [pc, #148]	; (800306c <HAL_I2S_Init+0x278>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_I2S_Init+0x1ea>
 8002fda:	4b25      	ldr	r3, [pc, #148]	; (8003070 <HAL_I2S_Init+0x27c>)
 8002fdc:	e001      	b.n	8002fe2 <HAL_I2S_Init+0x1ee>
 8002fde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fee:	d003      	beq.n	8002ff8 <HAL_I2S_Init+0x204>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d103      	bne.n	8003000 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	e001      	b.n	8003004 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	b299      	uxth	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800301a:	4303      	orrs	r3, r0
 800301c:	b29b      	uxth	r3, r3
 800301e:	430b      	orrs	r3, r1
 8003020:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003022:	4313      	orrs	r3, r2
 8003024:	b29a      	uxth	r2, r3
 8003026:	897b      	ldrh	r3, [r7, #10]
 8003028:	4313      	orrs	r3, r2
 800302a:	b29b      	uxth	r3, r3
 800302c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003030:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a0d      	ldr	r2, [pc, #52]	; (800306c <HAL_I2S_Init+0x278>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d101      	bne.n	8003040 <HAL_I2S_Init+0x24c>
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_I2S_Init+0x27c>)
 800303e:	e001      	b.n	8003044 <HAL_I2S_Init+0x250>
 8003040:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003044:	897a      	ldrh	r2, [r7, #10]
 8003046:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3720      	adds	r7, #32
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	0800316b 	.word	0x0800316b
 8003064:	cccccccd 	.word	0xcccccccd
 8003068:	08003595 	.word	0x08003595
 800306c:	40003800 	.word	0x40003800
 8003070:	40003400 	.word	0x40003400

08003074 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	881a      	ldrh	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	1c9a      	adds	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10e      	bne.n	8003104 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030f4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ffb8 	bl	8003074 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	b292      	uxth	r2, r2
 8003120:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	1c9a      	adds	r2, r3, #2
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10e      	bne.n	8003162 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003152:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff ff93 	bl	8003088 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b04      	cmp	r3, #4
 8003184:	d13a      	bne.n	80031fc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d109      	bne.n	80031a4 <I2S_IRQHandler+0x3a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319a:	2b40      	cmp	r3, #64	; 0x40
 800319c:	d102      	bne.n	80031a4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ffb4 	bl	800310c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b40      	cmp	r3, #64	; 0x40
 80031ac:	d126      	bne.n	80031fc <I2S_IRQHandler+0x92>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d11f      	bne.n	80031fc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f043 0202 	orr.w	r2, r3, #2
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ff50 	bl	800309c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b03      	cmp	r3, #3
 8003206:	d136      	bne.n	8003276 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b02      	cmp	r3, #2
 8003210:	d109      	bne.n	8003226 <I2S_IRQHandler+0xbc>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d102      	bne.n	8003226 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ff45 	bl	80030b0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b08      	cmp	r3, #8
 800322e:	d122      	bne.n	8003276 <I2S_IRQHandler+0x10c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b20      	cmp	r3, #32
 800323c:	d11b      	bne.n	8003276 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800324c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f043 0204 	orr.w	r2, r3, #4
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ff13 	bl	800309c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003276:	bf00      	nop
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d002      	beq.n	80032ac <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
 80032a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032aa:	e160      	b.n	800356e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80032b8:	887b      	ldrh	r3, [r7, #2]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e15a      	b.n	8003578 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e152      	b.n	8003578 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d002      	beq.n	80032fe <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d114      	bne.n	8003328 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 80032fe:	887b      	ldrh	r3, [r7, #2]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003308:	887b      	ldrh	r3, [r7, #2]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8003312:	887b      	ldrh	r3, [r7, #2]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	865a      	strh	r2, [r3, #50]	; 0x32
 8003326:	e00b      	b.n	8003340 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	887a      	ldrh	r2, [r7, #2]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	887a      	ldrh	r2, [r7, #2]
 8003338:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	887a      	ldrh	r2, [r7, #2]
 800333e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2205      	movs	r2, #5
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	4a8b      	ldr	r2, [pc, #556]	; (8003580 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003354:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	4a8a      	ldr	r2, [pc, #552]	; (8003584 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 800335c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	4a89      	ldr	r2, [pc, #548]	; (8003588 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003364:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	4a85      	ldr	r2, [pc, #532]	; (8003580 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 800336c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003372:	4a84      	ldr	r2, [pc, #528]	; (8003584 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003374:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	4a83      	ldr	r2, [pc, #524]	; (8003588 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 800337c:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003388:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003390:	d002      	beq.n	8003398 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d16b      	bne.n	8003470 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a79      	ldr	r2, [pc, #484]	; (800358c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80033aa:	4b79      	ldr	r3, [pc, #484]	; (8003590 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80033ac:	e001      	b.n	80033b2 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80033ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033b2:	330c      	adds	r3, #12
 80033b4:	4619      	mov	r1, r3
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f7ff f8a0 	bl	8002504 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a70      	ldr	r2, [pc, #448]	; (800358c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d101      	bne.n	80033d2 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 80033ce:	4b70      	ldr	r3, [pc, #448]	; (8003590 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80033d0:	e001      	b.n	80033d6 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 80033d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	496b      	ldr	r1, [pc, #428]	; (800358c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80033de:	428b      	cmp	r3, r1
 80033e0:	d101      	bne.n	80033e6 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 80033e2:	4b6b      	ldr	r3, [pc, #428]	; (8003590 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80033e4:	e001      	b.n	80033ea <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 80033e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80033f0:	f107 0308 	add.w	r3, r7, #8
 80033f4:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	6819      	ldr	r1, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	330c      	adds	r3, #12
 8003404:	461a      	mov	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	b29b      	uxth	r3, r3
 800340c:	f7ff f87a 	bl	8002504 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0202 	orr.w	r2, r2, #2
 800341e:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	f000 809e 	beq.w	800356e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a55      	ldr	r2, [pc, #340]	; (800358c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 800343c:	4b54      	ldr	r3, [pc, #336]	; (8003590 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800343e:	e001      	b.n	8003444 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8003440:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4950      	ldr	r1, [pc, #320]	; (800358c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800344c:	428b      	cmp	r3, r1
 800344e:	d101      	bne.n	8003454 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8003450:	4b4f      	ldr	r3, [pc, #316]	; (8003590 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003452:	e001      	b.n	8003458 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8003454:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003458:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800345c:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800346c:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800346e:	e07e      	b.n	800356e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800347e:	d10a      	bne.n	8003496 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003496:	f107 0308 	add.w	r3, r7, #8
 800349a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	6819      	ldr	r1, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a38      	ldr	r2, [pc, #224]	; (800358c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80034ae:	4b38      	ldr	r3, [pc, #224]	; (8003590 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80034b0:	e001      	b.n	80034b6 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80034b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b6:	330c      	adds	r3, #12
 80034b8:	461a      	mov	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f7ff f820 	bl	8002504 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a30      	ldr	r2, [pc, #192]	; (800358c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 80034ce:	4b30      	ldr	r3, [pc, #192]	; (8003590 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80034d0:	e001      	b.n	80034d6 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 80034d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	492b      	ldr	r1, [pc, #172]	; (800358c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80034de:	428b      	cmp	r3, r1
 80034e0:	d101      	bne.n	80034e6 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80034e2:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80034e4:	e001      	b.n	80034ea <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 80034e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ea:	f042 0202 	orr.w	r2, r2, #2
 80034ee:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80034f0:	1d3b      	adds	r3, r7, #4
 80034f2:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	330c      	adds	r3, #12
 80034fe:	4619      	mov	r1, r3
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003508:	b29b      	uxth	r3, r3
 800350a:	f7fe fffb 	bl	8002504 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352c:	d01e      	beq.n	800356c <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a16      	ldr	r2, [pc, #88]	; (800358c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8003538:	4b15      	ldr	r3, [pc, #84]	; (8003590 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800353a:	e001      	b.n	8003540 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 800353c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4911      	ldr	r1, [pc, #68]	; (800358c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003548:	428b      	cmp	r3, r1
 800354a:	d101      	bne.n	8003550 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800354e:	e001      	b.n	8003554 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8003550:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003558:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003568:	61da      	str	r2, [r3, #28]
 800356a:	e000      	b.n	800356e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 800356c:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8003576:	7ffb      	ldrb	r3, [r7, #31]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	0800383d 	.word	0x0800383d
 8003584:	08003859 	.word	0x08003859
 8003588:	08003991 	.word	0x08003991
 800358c:	40003800 	.word	0x40003800
 8003590:	40003400 	.word	0x40003400

08003594 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4aa2      	ldr	r2, [pc, #648]	; (8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d101      	bne.n	80035b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035ae:	4ba2      	ldr	r3, [pc, #648]	; (8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035b0:	e001      	b.n	80035b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a9b      	ldr	r2, [pc, #620]	; (8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d101      	bne.n	80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035cc:	4b9a      	ldr	r3, [pc, #616]	; (8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035ce:	e001      	b.n	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e0:	d004      	beq.n	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 8099 	bne.w	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d107      	bne.n	8003606 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fa05 	bl	8003a10 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d107      	bne.n	8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 faa8 	bl	8003b70 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d13a      	bne.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d035      	beq.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a7e      	ldr	r2, [pc, #504]	; (8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d101      	bne.n	8003642 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800363e:	4b7e      	ldr	r3, [pc, #504]	; (8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003640:	e001      	b.n	8003646 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4979      	ldr	r1, [pc, #484]	; (8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800364e:	428b      	cmp	r3, r1
 8003650:	d101      	bne.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003652:	4b79      	ldr	r3, [pc, #484]	; (8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003654:	e001      	b.n	800365a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003656:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800365e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800366e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f043 0202 	orr.w	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fcfe 	bl	800309c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	f040 80be 	bne.w	8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80b8 	beq.w	8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a59      	ldr	r2, [pc, #356]	; (8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036d2:	4b59      	ldr	r3, [pc, #356]	; (8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036d4:	e001      	b.n	80036da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4954      	ldr	r1, [pc, #336]	; (8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036e2:	428b      	cmp	r3, r1
 80036e4:	d101      	bne.n	80036ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036e6:	4b54      	ldr	r3, [pc, #336]	; (8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036e8:	e001      	b.n	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036f4:	2300      	movs	r3, #0
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f043 0204 	orr.w	r2, r3, #4
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff fcc0 	bl	800309c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800371c:	e084      	b.n	8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b02      	cmp	r3, #2
 8003726:	d107      	bne.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f99e 	bl	8003a74 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f9dd 	bl	8003b0c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003758:	2b40      	cmp	r3, #64	; 0x40
 800375a:	d12f      	bne.n	80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d02a      	beq.n	80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003774:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a2e      	ldr	r2, [pc, #184]	; (8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d101      	bne.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003780:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003782:	e001      	b.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4929      	ldr	r1, [pc, #164]	; (8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003790:	428b      	cmp	r3, r1
 8003792:	d101      	bne.n	8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003794:	4b28      	ldr	r3, [pc, #160]	; (8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003796:	e001      	b.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003798:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800379c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f043 0202 	orr.w	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fc70 	bl	800309c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d131      	bne.n	800382a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d02c      	beq.n	800382a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037dc:	e001      	b.n	80037e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4912      	ldr	r1, [pc, #72]	; (8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ea:	428b      	cmp	r3, r1
 80037ec:	d101      	bne.n	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037f0:	e001      	b.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80037f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800380a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	f043 0204 	orr.w	r2, r3, #4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff fc3b 	bl	800309c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003826:	e000      	b.n	800382a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003828:	bf00      	nop
}
 800382a:	bf00      	nop
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40003800 	.word	0x40003800
 8003838:	40003400 	.word	0x40003400

0800383c <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f7fd fee4 	bl	8001618 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 8084 	bne.w	8003978 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	429a      	cmp	r2, r3
 8003878:	d13c      	bne.n	80038f4 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003888:	d006      	beq.n	8003898 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003894:	2b00      	cmp	r3, #0
 8003896:	d116      	bne.n	80038c6 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a3a      	ldr	r2, [pc, #232]	; (8003988 <I2SEx_TxRxDMACplt+0x130>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <I2SEx_TxRxDMACplt+0x4e>
 80038a2:	4b3a      	ldr	r3, [pc, #232]	; (800398c <I2SEx_TxRxDMACplt+0x134>)
 80038a4:	e001      	b.n	80038aa <I2SEx_TxRxDMACplt+0x52>
 80038a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4935      	ldr	r1, [pc, #212]	; (8003988 <I2SEx_TxRxDMACplt+0x130>)
 80038b2:	428b      	cmp	r3, r1
 80038b4:	d101      	bne.n	80038ba <I2SEx_TxRxDMACplt+0x62>
 80038b6:	4b35      	ldr	r3, [pc, #212]	; (800398c <I2SEx_TxRxDMACplt+0x134>)
 80038b8:	e001      	b.n	80038be <I2SEx_TxRxDMACplt+0x66>
 80038ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	e007      	b.n	80038d6 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7fd fea2 	bl	8001638 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d13c      	bne.n	8003978 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390c:	d006      	beq.n	800391c <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003918:	2b00      	cmp	r3, #0
 800391a:	d108      	bne.n	800392e <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0202 	bic.w	r2, r2, #2
 800392a:	605a      	str	r2, [r3, #4]
 800392c:	e015      	b.n	800395a <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a15      	ldr	r2, [pc, #84]	; (8003988 <I2SEx_TxRxDMACplt+0x130>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <I2SEx_TxRxDMACplt+0xe4>
 8003938:	4b14      	ldr	r3, [pc, #80]	; (800398c <I2SEx_TxRxDMACplt+0x134>)
 800393a:	e001      	b.n	8003940 <I2SEx_TxRxDMACplt+0xe8>
 800393c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4910      	ldr	r1, [pc, #64]	; (8003988 <I2SEx_TxRxDMACplt+0x130>)
 8003948:	428b      	cmp	r3, r1
 800394a:	d101      	bne.n	8003950 <I2SEx_TxRxDMACplt+0xf8>
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <I2SEx_TxRxDMACplt+0x134>)
 800394e:	e001      	b.n	8003954 <I2SEx_TxRxDMACplt+0xfc>
 8003950:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003954:	f022 0202 	bic.w	r2, r2, #2
 8003958:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f7fd fe60 	bl	8001638 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  // Fixes bug - https://github.com/STMicroelectronics/STM32CubeF4/issues/8
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f7fd fe5d 	bl	8001638 <HAL_I2SEx_TxRxCpltCallback>
}
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40003800 	.word	0x40003800
 800398c:	40003400 	.word	0x40003400

08003990 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0203 	bic.w	r2, r2, #3
 80039ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <I2SEx_TxRxDMAError+0x78>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <I2SEx_TxRxDMAError+0x2c>
 80039b8:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <I2SEx_TxRxDMAError+0x7c>)
 80039ba:	e001      	b.n	80039c0 <I2SEx_TxRxDMAError+0x30>
 80039bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4910      	ldr	r1, [pc, #64]	; (8003a08 <I2SEx_TxRxDMAError+0x78>)
 80039c8:	428b      	cmp	r3, r1
 80039ca:	d101      	bne.n	80039d0 <I2SEx_TxRxDMAError+0x40>
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <I2SEx_TxRxDMAError+0x7c>)
 80039ce:	e001      	b.n	80039d4 <I2SEx_TxRxDMAError+0x44>
 80039d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d4:	f022 0203 	bic.w	r2, r2, #3
 80039d8:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	f043 0208 	orr.w	r2, r3, #8
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f7ff fb4e 	bl	800309c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003a00:	bf00      	nop
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40003800 	.word	0x40003800
 8003a0c:	40003400 	.word	0x40003400

08003a10 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	1c99      	adds	r1, r3, #2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6251      	str	r1, [r2, #36]	; 0x24
 8003a22:	881a      	ldrh	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d113      	bne.n	8003a6a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a50:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d106      	bne.n	8003a6a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fd fde7 	bl	8001638 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	1c99      	adds	r1, r3, #2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6251      	str	r1, [r2, #36]	; 0x24
 8003a86:	8819      	ldrh	r1, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <I2SEx_TxISR_I2SExt+0x90>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d101      	bne.n	8003a96 <I2SEx_TxISR_I2SExt+0x22>
 8003a92:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <I2SEx_TxISR_I2SExt+0x94>)
 8003a94:	e001      	b.n	8003a9a <I2SEx_TxISR_I2SExt+0x26>
 8003a96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a9a:	460a      	mov	r2, r1
 8003a9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d121      	bne.n	8003afa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <I2SEx_TxISR_I2SExt+0x90>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d101      	bne.n	8003ac4 <I2SEx_TxISR_I2SExt+0x50>
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <I2SEx_TxISR_I2SExt+0x94>)
 8003ac2:	e001      	b.n	8003ac8 <I2SEx_TxISR_I2SExt+0x54>
 8003ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	490d      	ldr	r1, [pc, #52]	; (8003b04 <I2SEx_TxISR_I2SExt+0x90>)
 8003ad0:	428b      	cmp	r3, r1
 8003ad2:	d101      	bne.n	8003ad8 <I2SEx_TxISR_I2SExt+0x64>
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <I2SEx_TxISR_I2SExt+0x94>)
 8003ad6:	e001      	b.n	8003adc <I2SEx_TxISR_I2SExt+0x68>
 8003ad8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003adc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ae0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d106      	bne.n	8003afa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7fd fd9f 	bl	8001638 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40003800 	.word	0x40003800
 8003b08:	40003400 	.word	0x40003400

08003b0c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68d8      	ldr	r0, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	1c99      	adds	r1, r3, #2
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b24:	b282      	uxth	r2, r0
 8003b26:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d113      	bne.n	8003b68 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b4e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fd fd68 	bl	8001638 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <I2SEx_RxISR_I2SExt+0x90>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d101      	bne.n	8003b86 <I2SEx_RxISR_I2SExt+0x16>
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <I2SEx_RxISR_I2SExt+0x94>)
 8003b84:	e001      	b.n	8003b8a <I2SEx_RxISR_I2SExt+0x1a>
 8003b86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b8a:	68d8      	ldr	r0, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	1c99      	adds	r1, r3, #2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b96:	b282      	uxth	r2, r0
 8003b98:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d121      	bne.n	8003bf6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a12      	ldr	r2, [pc, #72]	; (8003c00 <I2SEx_RxISR_I2SExt+0x90>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <I2SEx_RxISR_I2SExt+0x50>
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <I2SEx_RxISR_I2SExt+0x94>)
 8003bbe:	e001      	b.n	8003bc4 <I2SEx_RxISR_I2SExt+0x54>
 8003bc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	490d      	ldr	r1, [pc, #52]	; (8003c00 <I2SEx_RxISR_I2SExt+0x90>)
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	d101      	bne.n	8003bd4 <I2SEx_RxISR_I2SExt+0x64>
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <I2SEx_RxISR_I2SExt+0x94>)
 8003bd2:	e001      	b.n	8003bd8 <I2SEx_RxISR_I2SExt+0x68>
 8003bd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bdc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fd fd21 	bl	8001638 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40003800 	.word	0x40003800
 8003c04:	40003400 	.word	0x40003400

08003c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e25b      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d075      	beq.n	8003d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c26:	4ba3      	ldr	r3, [pc, #652]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d00c      	beq.n	8003c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c32:	4ba0      	ldr	r3, [pc, #640]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d112      	bne.n	8003c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c3e:	4b9d      	ldr	r3, [pc, #628]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c4a:	d10b      	bne.n	8003c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c4c:	4b99      	ldr	r3, [pc, #612]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d05b      	beq.n	8003d10 <HAL_RCC_OscConfig+0x108>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d157      	bne.n	8003d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e236      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6c:	d106      	bne.n	8003c7c <HAL_RCC_OscConfig+0x74>
 8003c6e:	4b91      	ldr	r3, [pc, #580]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a90      	ldr	r2, [pc, #576]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e01d      	b.n	8003cb8 <HAL_RCC_OscConfig+0xb0>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x98>
 8003c86:	4b8b      	ldr	r3, [pc, #556]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a8a      	ldr	r2, [pc, #552]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	4b88      	ldr	r3, [pc, #544]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a87      	ldr	r2, [pc, #540]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	e00b      	b.n	8003cb8 <HAL_RCC_OscConfig+0xb0>
 8003ca0:	4b84      	ldr	r3, [pc, #528]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a83      	ldr	r2, [pc, #524]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	4b81      	ldr	r3, [pc, #516]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a80      	ldr	r2, [pc, #512]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d013      	beq.n	8003ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fd fff2 	bl	8001ca8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc8:	f7fd ffee 	bl	8001ca8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e1fb      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	4b76      	ldr	r3, [pc, #472]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0xc0>
 8003ce6:	e014      	b.n	8003d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fd ffde 	bl	8001ca8 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fd ffda 	bl	8001ca8 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	; 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e1e7      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d02:	4b6c      	ldr	r3, [pc, #432]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0xe8>
 8003d0e:	e000      	b.n	8003d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d063      	beq.n	8003de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d1e:	4b65      	ldr	r3, [pc, #404]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00b      	beq.n	8003d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d2a:	4b62      	ldr	r3, [pc, #392]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d11c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d36:	4b5f      	ldr	r3, [pc, #380]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d116      	bne.n	8003d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	4b5c      	ldr	r3, [pc, #368]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_RCC_OscConfig+0x152>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d001      	beq.n	8003d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e1bb      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5a:	4b56      	ldr	r3, [pc, #344]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4952      	ldr	r1, [pc, #328]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6e:	e03a      	b.n	8003de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d020      	beq.n	8003dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d78:	4b4f      	ldr	r3, [pc, #316]	; (8003eb8 <HAL_RCC_OscConfig+0x2b0>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7fd ff93 	bl	8001ca8 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d86:	f7fd ff8f 	bl	8001ca8 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e19c      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d98:	4b46      	ldr	r3, [pc, #280]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da4:	4b43      	ldr	r3, [pc, #268]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4940      	ldr	r1, [pc, #256]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	600b      	str	r3, [r1, #0]
 8003db8:	e015      	b.n	8003de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dba:	4b3f      	ldr	r3, [pc, #252]	; (8003eb8 <HAL_RCC_OscConfig+0x2b0>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fd ff72 	bl	8001ca8 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc8:	f7fd ff6e 	bl	8001ca8 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e17b      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dda:	4b36      	ldr	r3, [pc, #216]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d030      	beq.n	8003e54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d016      	beq.n	8003e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dfa:	4b30      	ldr	r3, [pc, #192]	; (8003ebc <HAL_RCC_OscConfig+0x2b4>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e00:	f7fd ff52 	bl	8001ca8 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e08:	f7fd ff4e 	bl	8001ca8 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e15b      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1a:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x200>
 8003e26:	e015      	b.n	8003e54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e28:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <HAL_RCC_OscConfig+0x2b4>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2e:	f7fd ff3b 	bl	8001ca8 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e36:	f7fd ff37 	bl	8001ca8 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e144      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e48:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80a0 	beq.w	8003fa2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10f      	bne.n	8003e92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a0e      	ldr	r2, [pc, #56]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
 8003e82:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCC_OscConfig+0x2b8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d121      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <HAL_RCC_OscConfig+0x2b8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <HAL_RCC_OscConfig+0x2b8>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eaa:	f7fd fefd 	bl	8001ca8 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb0:	e011      	b.n	8003ed6 <HAL_RCC_OscConfig+0x2ce>
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	42470000 	.word	0x42470000
 8003ebc:	42470e80 	.word	0x42470e80
 8003ec0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec4:	f7fd fef0 	bl	8001ca8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e0fd      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed6:	4b81      	ldr	r3, [pc, #516]	; (80040dc <HAL_RCC_OscConfig+0x4d4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d106      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x2f0>
 8003eea:	4b7d      	ldr	r3, [pc, #500]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	4a7c      	ldr	r2, [pc, #496]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef6:	e01c      	b.n	8003f32 <HAL_RCC_OscConfig+0x32a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b05      	cmp	r3, #5
 8003efe:	d10c      	bne.n	8003f1a <HAL_RCC_OscConfig+0x312>
 8003f00:	4b77      	ldr	r3, [pc, #476]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4a76      	ldr	r2, [pc, #472]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003f06:	f043 0304 	orr.w	r3, r3, #4
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0c:	4b74      	ldr	r3, [pc, #464]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a73      	ldr	r2, [pc, #460]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
 8003f18:	e00b      	b.n	8003f32 <HAL_RCC_OscConfig+0x32a>
 8003f1a:	4b71      	ldr	r3, [pc, #452]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a70      	ldr	r2, [pc, #448]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
 8003f26:	4b6e      	ldr	r3, [pc, #440]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	4a6d      	ldr	r2, [pc, #436]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003f2c:	f023 0304 	bic.w	r3, r3, #4
 8003f30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d015      	beq.n	8003f66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3a:	f7fd feb5 	bl	8001ca8 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f42:	f7fd feb1 	bl	8001ca8 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e0bc      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f58:	4b61      	ldr	r3, [pc, #388]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ee      	beq.n	8003f42 <HAL_RCC_OscConfig+0x33a>
 8003f64:	e014      	b.n	8003f90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f66:	f7fd fe9f 	bl	8001ca8 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f6e:	f7fd fe9b 	bl	8001ca8 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e0a6      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f84:	4b56      	ldr	r3, [pc, #344]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1ee      	bne.n	8003f6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d105      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f96:	4b52      	ldr	r3, [pc, #328]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	4a51      	ldr	r2, [pc, #324]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8092 	beq.w	80040d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fac:	4b4c      	ldr	r3, [pc, #304]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d05c      	beq.n	8004072 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d141      	bne.n	8004044 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc0:	4b48      	ldr	r3, [pc, #288]	; (80040e4 <HAL_RCC_OscConfig+0x4dc>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc6:	f7fd fe6f 	bl	8001ca8 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fce:	f7fd fe6b 	bl	8001ca8 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e078      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe0:	4b3f      	ldr	r3, [pc, #252]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f0      	bne.n	8003fce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	019b      	lsls	r3, r3, #6
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	3b01      	subs	r3, #1
 8004006:	041b      	lsls	r3, r3, #16
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	061b      	lsls	r3, r3, #24
 8004010:	4933      	ldr	r1, [pc, #204]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8004012:	4313      	orrs	r3, r2
 8004014:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004016:	4b33      	ldr	r3, [pc, #204]	; (80040e4 <HAL_RCC_OscConfig+0x4dc>)
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fd fe44 	bl	8001ca8 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004024:	f7fd fe40 	bl	8001ca8 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e04d      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x41c>
 8004042:	e045      	b.n	80040d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004044:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <HAL_RCC_OscConfig+0x4dc>)
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404a:	f7fd fe2d 	bl	8001ca8 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004052:	f7fd fe29 	bl	8001ca8 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e036      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004064:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f0      	bne.n	8004052 <HAL_RCC_OscConfig+0x44a>
 8004070:	e02e      	b.n	80040d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e029      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800407e:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <HAL_RCC_OscConfig+0x4d8>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	429a      	cmp	r2, r3
 8004090:	d11c      	bne.n	80040cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409c:	429a      	cmp	r2, r3
 800409e:	d115      	bne.n	80040cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040a6:	4013      	ands	r3, r2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10d      	bne.n	80040cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d106      	bne.n	80040cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40007000 	.word	0x40007000
 80040e0:	40023800 	.word	0x40023800
 80040e4:	42470060 	.word	0x42470060

080040e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0cc      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040fc:	4b68      	ldr	r3, [pc, #416]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d90c      	bls.n	8004124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b65      	ldr	r3, [pc, #404]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b63      	ldr	r3, [pc, #396]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0b8      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d020      	beq.n	8004172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800413c:	4b59      	ldr	r3, [pc, #356]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a58      	ldr	r2, [pc, #352]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004154:	4b53      	ldr	r3, [pc, #332]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4a52      	ldr	r2, [pc, #328]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800415e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004160:	4b50      	ldr	r3, [pc, #320]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	494d      	ldr	r1, [pc, #308]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d044      	beq.n	8004208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d119      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e07f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d003      	beq.n	80041a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a6:	4b3f      	ldr	r3, [pc, #252]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e06f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b6:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e067      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c6:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 0203 	bic.w	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4934      	ldr	r1, [pc, #208]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d8:	f7fd fd66 	bl	8001ca8 <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	e00a      	b.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e0:	f7fd fd62 	bl	8001ca8 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e04f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 020c 	and.w	r2, r3, #12
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	429a      	cmp	r2, r3
 8004206:	d1eb      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d20c      	bcs.n	8004230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e032      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4916      	ldr	r1, [pc, #88]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	490e      	ldr	r1, [pc, #56]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800426e:	f000 f821 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8004272:	4602      	mov	r2, r0
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	490a      	ldr	r1, [pc, #40]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004280:	5ccb      	ldrb	r3, [r1, r3]
 8004282:	fa22 f303 	lsr.w	r3, r2, r3
 8004286:	4a09      	ldr	r2, [pc, #36]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800428a:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fd fcc6 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023c00 	.word	0x40023c00
 80042a4:	40023800 	.word	0x40023800
 80042a8:	08006e80 	.word	0x08006e80
 80042ac:	20000004 	.word	0x20000004
 80042b0:	20000008 	.word	0x20000008

080042b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b4:	b5b0      	push	{r4, r5, r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042ba:	2100      	movs	r1, #0
 80042bc:	6079      	str	r1, [r7, #4]
 80042be:	2100      	movs	r1, #0
 80042c0:	60f9      	str	r1, [r7, #12]
 80042c2:	2100      	movs	r1, #0
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042c6:	2100      	movs	r1, #0
 80042c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ca:	4952      	ldr	r1, [pc, #328]	; (8004414 <HAL_RCC_GetSysClockFreq+0x160>)
 80042cc:	6889      	ldr	r1, [r1, #8]
 80042ce:	f001 010c 	and.w	r1, r1, #12
 80042d2:	2908      	cmp	r1, #8
 80042d4:	d00d      	beq.n	80042f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80042d6:	2908      	cmp	r1, #8
 80042d8:	f200 8094 	bhi.w	8004404 <HAL_RCC_GetSysClockFreq+0x150>
 80042dc:	2900      	cmp	r1, #0
 80042de:	d002      	beq.n	80042e6 <HAL_RCC_GetSysClockFreq+0x32>
 80042e0:	2904      	cmp	r1, #4
 80042e2:	d003      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x38>
 80042e4:	e08e      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e6:	4b4c      	ldr	r3, [pc, #304]	; (8004418 <HAL_RCC_GetSysClockFreq+0x164>)
 80042e8:	60bb      	str	r3, [r7, #8]
       break;
 80042ea:	e08e      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ec:	4b4b      	ldr	r3, [pc, #300]	; (800441c <HAL_RCC_GetSysClockFreq+0x168>)
 80042ee:	60bb      	str	r3, [r7, #8]
      break;
 80042f0:	e08b      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f2:	4948      	ldr	r1, [pc, #288]	; (8004414 <HAL_RCC_GetSysClockFreq+0x160>)
 80042f4:	6849      	ldr	r1, [r1, #4]
 80042f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80042fa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042fc:	4945      	ldr	r1, [pc, #276]	; (8004414 <HAL_RCC_GetSysClockFreq+0x160>)
 80042fe:	6849      	ldr	r1, [r1, #4]
 8004300:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004304:	2900      	cmp	r1, #0
 8004306:	d024      	beq.n	8004352 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004308:	4942      	ldr	r1, [pc, #264]	; (8004414 <HAL_RCC_GetSysClockFreq+0x160>)
 800430a:	6849      	ldr	r1, [r1, #4]
 800430c:	0989      	lsrs	r1, r1, #6
 800430e:	4608      	mov	r0, r1
 8004310:	f04f 0100 	mov.w	r1, #0
 8004314:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004318:	f04f 0500 	mov.w	r5, #0
 800431c:	ea00 0204 	and.w	r2, r0, r4
 8004320:	ea01 0305 	and.w	r3, r1, r5
 8004324:	493d      	ldr	r1, [pc, #244]	; (800441c <HAL_RCC_GetSysClockFreq+0x168>)
 8004326:	fb01 f003 	mul.w	r0, r1, r3
 800432a:	2100      	movs	r1, #0
 800432c:	fb01 f102 	mul.w	r1, r1, r2
 8004330:	1844      	adds	r4, r0, r1
 8004332:	493a      	ldr	r1, [pc, #232]	; (800441c <HAL_RCC_GetSysClockFreq+0x168>)
 8004334:	fba2 0101 	umull	r0, r1, r2, r1
 8004338:	1863      	adds	r3, r4, r1
 800433a:	4619      	mov	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	461a      	mov	r2, r3
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	f7fc fc12 	bl	8000b6c <__aeabi_uldivmod>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4613      	mov	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	e04a      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004352:	4b30      	ldr	r3, [pc, #192]	; (8004414 <HAL_RCC_GetSysClockFreq+0x160>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	461a      	mov	r2, r3
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004362:	f04f 0100 	mov.w	r1, #0
 8004366:	ea02 0400 	and.w	r4, r2, r0
 800436a:	ea03 0501 	and.w	r5, r3, r1
 800436e:	4620      	mov	r0, r4
 8004370:	4629      	mov	r1, r5
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	014b      	lsls	r3, r1, #5
 800437c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004380:	0142      	lsls	r2, r0, #5
 8004382:	4610      	mov	r0, r2
 8004384:	4619      	mov	r1, r3
 8004386:	1b00      	subs	r0, r0, r4
 8004388:	eb61 0105 	sbc.w	r1, r1, r5
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	018b      	lsls	r3, r1, #6
 8004396:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800439a:	0182      	lsls	r2, r0, #6
 800439c:	1a12      	subs	r2, r2, r0
 800439e:	eb63 0301 	sbc.w	r3, r3, r1
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f04f 0100 	mov.w	r1, #0
 80043aa:	00d9      	lsls	r1, r3, #3
 80043ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043b0:	00d0      	lsls	r0, r2, #3
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	1912      	adds	r2, r2, r4
 80043b8:	eb45 0303 	adc.w	r3, r5, r3
 80043bc:	f04f 0000 	mov.w	r0, #0
 80043c0:	f04f 0100 	mov.w	r1, #0
 80043c4:	0299      	lsls	r1, r3, #10
 80043c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043ca:	0290      	lsls	r0, r2, #10
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	f7fc fbc6 	bl	8000b6c <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4613      	mov	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <HAL_RCC_GetSysClockFreq+0x160>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	3301      	adds	r3, #1
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	60bb      	str	r3, [r7, #8]
      break;
 8004402:	e002      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <HAL_RCC_GetSysClockFreq+0x164>)
 8004406:	60bb      	str	r3, [r7, #8]
      break;
 8004408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800440a:	68bb      	ldr	r3, [r7, #8]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bdb0      	pop	{r4, r5, r7, pc}
 8004414:	40023800 	.word	0x40023800
 8004418:	00f42400 	.word	0x00f42400
 800441c:	017d7840 	.word	0x017d7840

08004420 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004444:	2b00      	cmp	r3, #0
 8004446:	d035      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004448:	4b62      	ldr	r3, [pc, #392]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800444e:	f7fd fc2b 	bl	8001ca8 <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004456:	f7fd fc27 	bl	8001ca8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e0b0      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004468:	4b5b      	ldr	r3, [pc, #364]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f0      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	019a      	lsls	r2, r3, #6
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	071b      	lsls	r3, r3, #28
 8004480:	4955      	ldr	r1, [pc, #340]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004488:	4b52      	ldr	r3, [pc, #328]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800448e:	f7fd fc0b 	bl	8001ca8 <HAL_GetTick>
 8004492:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004496:	f7fd fc07 	bl	8001ca8 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e090      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044a8:	4b4b      	ldr	r3, [pc, #300]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8083 	beq.w	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	4b44      	ldr	r3, [pc, #272]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a43      	ldr	r2, [pc, #268]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
 80044d2:	4b41      	ldr	r3, [pc, #260]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044de:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a3e      	ldr	r2, [pc, #248]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044ea:	f7fd fbdd 	bl	8001ca8 <HAL_GetTick>
 80044ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044f2:	f7fd fbd9 	bl	8001ca8 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e062      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004504:	4b35      	ldr	r3, [pc, #212]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004510:	4b31      	ldr	r3, [pc, #196]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004518:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d02f      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	429a      	cmp	r2, r3
 800452c:	d028      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800452e:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004536:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004538:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800453a:	2201      	movs	r2, #1
 800453c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800453e:	4b28      	ldr	r3, [pc, #160]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004544:	4a24      	ldr	r2, [pc, #144]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800454a:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d114      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004556:	f7fd fba7 	bl	8001ca8 <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455c:	e00a      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800455e:	f7fd fba3 	bl	8001ca8 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	; 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e02a      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004574:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ee      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458c:	d10d      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800459e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a2:	490d      	ldr	r1, [pc, #52]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	608b      	str	r3, [r1, #8]
 80045a8:	e005      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045b4:	6093      	str	r3, [r2, #8]
 80045b6:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c2:	4905      	ldr	r1, [pc, #20]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	42470068 	.word	0x42470068
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40007000 	.word	0x40007000
 80045e0:	42470e40 	.word	0x42470e40

080045e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d13e      	bne.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004602:	4b23      	ldr	r3, [pc, #140]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d12f      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004618:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800461a:	617b      	str	r3, [r7, #20]
          break;
 800461c:	e02f      	b.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800461e:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800462a:	d108      	bne.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800462c:	4b18      	ldr	r3, [pc, #96]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004634:	4a18      	ldr	r2, [pc, #96]	; (8004698 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004636:	fbb2 f3f3 	udiv	r3, r2, r3
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	e007      	b.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800463e:	4b14      	ldr	r3, [pc, #80]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004646:	4a15      	ldr	r2, [pc, #84]	; (800469c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800464e:	4b10      	ldr	r3, [pc, #64]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004654:	099b      	lsrs	r3, r3, #6
 8004656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	fb02 f303 	mul.w	r3, r2, r3
 8004660:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004668:	0f1b      	lsrs	r3, r3, #28
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	617b      	str	r3, [r7, #20]
          break;
 8004676:	e002      	b.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
          break;
 800467c:	bf00      	nop
        }
      }
      break;
 800467e:	bf00      	nop
    }
  }
  return frequency;
 8004680:	697b      	ldr	r3, [r7, #20]
}
 8004682:	4618      	mov	r0, r3
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40023800 	.word	0x40023800
 8004694:	00bb8000 	.word	0x00bb8000
 8004698:	017d7840 	.word	0x017d7840
 800469c:	00f42400 	.word	0x00f42400

080046a0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80046a6:	4b24      	ldr	r3, [pc, #144]	; (8004738 <_DoInit+0x98>)
 80046a8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2203      	movs	r2, #3
 80046ae:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2203      	movs	r2, #3
 80046b4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a20      	ldr	r2, [pc, #128]	; (800473c <_DoInit+0x9c>)
 80046ba:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a20      	ldr	r2, [pc, #128]	; (8004740 <_DoInit+0xa0>)
 80046c0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046c8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a17      	ldr	r2, [pc, #92]	; (800473c <_DoInit+0x9c>)
 80046e0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a17      	ldr	r2, [pc, #92]	; (8004744 <_DoInit+0xa4>)
 80046e6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2210      	movs	r2, #16
 80046ec:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3307      	adds	r3, #7
 8004704:	4a10      	ldr	r2, [pc, #64]	; (8004748 <_DoInit+0xa8>)
 8004706:	6810      	ldr	r0, [r2, #0]
 8004708:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800470a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a0e      	ldr	r2, [pc, #56]	; (800474c <_DoInit+0xac>)
 8004712:	6810      	ldr	r0, [r2, #0]
 8004714:	6018      	str	r0, [r3, #0]
 8004716:	8891      	ldrh	r1, [r2, #4]
 8004718:	7992      	ldrb	r2, [r2, #6]
 800471a:	8099      	strh	r1, [r3, #4]
 800471c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800471e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004728:	f3bf 8f5f 	dmb	sy
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	20014630 	.word	0x20014630
 800473c:	08006e68 	.word	0x08006e68
 8004740:	2000009c 	.word	0x2000009c
 8004744:	2000049c 	.word	0x2000049c
 8004748:	08006e74 	.word	0x08006e74
 800474c:	08006e78 	.word	0x08006e78

08004750 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	; 0x28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800475c:	2300      	movs	r3, #0
 800475e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	429a      	cmp	r2, r3
 8004772:	d905      	bls.n	8004780 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
 800477e:	e007      	b.n	8004790 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	69b9      	ldr	r1, [r7, #24]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	1acb      	subs	r3, r1, r3
 800478a:	4413      	add	r3, r2
 800478c:	3b01      	subs	r3, #1
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479a:	4293      	cmp	r3, r2
 800479c:	bf28      	it	cs
 800479e:	4613      	movcs	r3, r2
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80047a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4293      	cmp	r3, r2
 80047a8:	bf28      	it	cs
 80047aa:	4613      	movcs	r3, r2
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	4413      	add	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80047b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	6978      	ldr	r0, [r7, #20]
 80047be:	f001 f971 	bl	8005aa4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80047c2:	6a3a      	ldr	r2, [r7, #32]
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	4413      	add	r3, r2
 80047c8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	4413      	add	r3, r2
 80047d0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	4413      	add	r3, r2
 80047e0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	69fa      	ldr	r2, [r7, #28]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d101      	bne.n	80047f0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80047f0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1b2      	bne.n	8004766 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004800:	6a3b      	ldr	r3, [r7, #32]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3728      	adds	r7, #40	; 0x28
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800480a:	b580      	push	{r7, lr}
 800480c:	b088      	sub	sp, #32
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	429a      	cmp	r2, r3
 800482c:	d911      	bls.n	8004852 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	4413      	add	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	6938      	ldr	r0, [r7, #16]
 800483e:	f001 f931 	bl	8005aa4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004842:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	441a      	add	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004850:	e01f      	b.n	8004892 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	6938      	ldr	r0, [r7, #16]
 8004866:	f001 f91d 	bl	8005aa4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	4413      	add	r3, r2
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4619      	mov	r1, r3
 8004882:	6938      	ldr	r0, [r7, #16]
 8004884:	f001 f90e 	bl	8005aa4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004888:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	60da      	str	r2, [r3, #12]
}
 8004892:	bf00      	nop
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800489a:	b480      	push	{r7}
 800489c:	b087      	sub	sp, #28
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d808      	bhi.n	80048c8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad2      	subs	r2, r2, r3
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4413      	add	r3, r2
 80048c2:	3b01      	subs	r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	e004      	b.n	80048d2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80048d2:	697b      	ldr	r3, [r7, #20]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	4613      	mov	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	4413      	add	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4a1e      	ldr	r2, [pc, #120]	; (8004978 <SEGGER_RTT_WriteNoLock+0x98>)
 80048fe:	4413      	add	r3, r2
 8004900:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d017      	beq.n	800493a <SEGGER_RTT_WriteNoLock+0x5a>
 800490a:	2b01      	cmp	r3, #1
 800490c:	d302      	bcc.n	8004914 <SEGGER_RTT_WriteNoLock+0x34>
 800490e:	2b02      	cmp	r3, #2
 8004910:	d023      	beq.n	800495a <SEGGER_RTT_WriteNoLock+0x7a>
 8004912:	e029      	b.n	8004968 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004914:	6978      	ldr	r0, [r7, #20]
 8004916:	f7ff ffc0 	bl	800489a <_GetAvailWriteSpace>
 800491a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d202      	bcs.n	800492a <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004928:	e021      	b.n	800496e <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	69b9      	ldr	r1, [r7, #24]
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f7ff ff69 	bl	800480a <_WriteNoCheck>
    break;
 8004938:	e019      	b.n	800496e <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800493a:	6978      	ldr	r0, [r7, #20]
 800493c:	f7ff ffad 	bl	800489a <_GetAvailWriteSpace>
 8004940:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4293      	cmp	r3, r2
 8004948:	bf28      	it	cs
 800494a:	4613      	movcs	r3, r2
 800494c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	69b9      	ldr	r1, [r7, #24]
 8004952:	6978      	ldr	r0, [r7, #20]
 8004954:	f7ff ff59 	bl	800480a <_WriteNoCheck>
    break;
 8004958:	e009      	b.n	800496e <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	69b9      	ldr	r1, [r7, #24]
 800495e:	6978      	ldr	r0, [r7, #20]
 8004960:	f7ff fef6 	bl	8004750 <_WriteBlocking>
 8004964:	61f8      	str	r0, [r7, #28]
    break;
 8004966:	e002      	b.n	800496e <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
    break;
 800496c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800496e:	69fb      	ldr	r3, [r7, #28]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20014630 	.word	0x20014630

0800497c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004988:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <SEGGER_RTT_Write+0x48>)
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <SEGGER_RTT_Write+0x1e>
 8004996:	f7ff fe83 	bl	80046a0 <_DoInit>
  SEGGER_RTT_LOCK();
 800499a:	f3ef 8311 	mrs	r3, BASEPRI
 800499e:	f04f 0120 	mov.w	r1, #32
 80049a2:	f381 8811 	msr	BASEPRI, r1
 80049a6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7ff ff97 	bl	80048e0 <SEGGER_RTT_WriteNoLock>
 80049b2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80049ba:	697b      	ldr	r3, [r7, #20]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3720      	adds	r7, #32
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	20014630 	.word	0x20014630

080049c8 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80049d6:	4b33      	ldr	r3, [pc, #204]	; (8004aa4 <SEGGER_RTT_ConfigUpBuffer+0xdc>)
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <SEGGER_RTT_ConfigUpBuffer+0x20>
 80049e4:	f7ff fe5c 	bl	80046a0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80049e8:	4b2e      	ldr	r3, [pc, #184]	; (8004aa4 <SEGGER_RTT_ConfigUpBuffer+0xdc>)
 80049ea:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumUpBuffers) {
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	461a      	mov	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d24c      	bcs.n	8004a92 <SEGGER_RTT_ConfigUpBuffer+0xca>
    SEGGER_RTT_LOCK();
 80049f8:	f3ef 8311 	mrs	r3, BASEPRI
 80049fc:	f04f 0120 	mov.w	r1, #32
 8004a00:	f381 8811 	msr	BASEPRI, r1
 8004a04:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d032      	beq.n	8004a72 <SEGGER_RTT_ConfigUpBuffer+0xaa>
      pRTTCB->aUp[BufferIndex].sName        = sName;
 8004a0c:	6979      	ldr	r1, [r7, #20]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	4613      	mov	r3, r2
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	4413      	add	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	440b      	add	r3, r1
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004a20:	6979      	ldr	r1, [r7, #20]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	4613      	mov	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	440b      	add	r3, r1
 8004a30:	3304      	adds	r3, #4
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004a36:	6979      	ldr	r1, [r7, #20]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	4413      	add	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	440b      	add	r3, r1
 8004a44:	3320      	adds	r3, #32
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004a4a:	6979      	ldr	r1, [r7, #20]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	4413      	add	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	440b      	add	r3, r1
 8004a58:	3328      	adds	r3, #40	; 0x28
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
      pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004a5e:	6979      	ldr	r1, [r7, #20]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4613      	mov	r3, r2
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	4413      	add	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3324      	adds	r3, #36	; 0x24
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aUp[BufferIndex].Flags          = Flags;
 8004a72:	6979      	ldr	r1, [r7, #20]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4613      	mov	r3, r2
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	4413      	add	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	440b      	add	r3, r1
 8004a80:	332c      	adds	r3, #44	; 0x2c
 8004a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a84:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	e002      	b.n	8004a98 <SEGGER_RTT_ConfigUpBuffer+0xd0>
  } else {
    r = -1;
 8004a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a96:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004a98:	69fb      	ldr	r3, [r7, #28]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20014630 	.word	0x20014630

08004aa8 <arm_rfft_fast_init_f32>:
 8004aa8:	084b      	lsrs	r3, r1, #1
 8004aaa:	2b80      	cmp	r3, #128	; 0x80
 8004aac:	b410      	push	{r4}
 8004aae:	8201      	strh	r1, [r0, #16]
 8004ab0:	8003      	strh	r3, [r0, #0]
 8004ab2:	d047      	beq.n	8004b44 <arm_rfft_fast_init_f32+0x9c>
 8004ab4:	d917      	bls.n	8004ae6 <arm_rfft_fast_init_f32+0x3e>
 8004ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aba:	d03d      	beq.n	8004b38 <arm_rfft_fast_init_f32+0x90>
 8004abc:	d929      	bls.n	8004b12 <arm_rfft_fast_init_f32+0x6a>
 8004abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac2:	d020      	beq.n	8004b06 <arm_rfft_fast_init_f32+0x5e>
 8004ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac8:	d113      	bne.n	8004af2 <arm_rfft_fast_init_f32+0x4a>
 8004aca:	4921      	ldr	r1, [pc, #132]	; (8004b50 <arm_rfft_fast_init_f32+0xa8>)
 8004acc:	4a21      	ldr	r2, [pc, #132]	; (8004b54 <arm_rfft_fast_init_f32+0xac>)
 8004ace:	4b22      	ldr	r3, [pc, #136]	; (8004b58 <arm_rfft_fast_init_f32+0xb0>)
 8004ad0:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8004ad4:	8184      	strh	r4, [r0, #12]
 8004ad6:	6081      	str	r1, [r0, #8]
 8004ad8:	6042      	str	r2, [r0, #4]
 8004ada:	6143      	str	r3, [r0, #20]
 8004adc:	2000      	movs	r0, #0
 8004ade:	b240      	sxtb	r0, r0
 8004ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d01c      	beq.n	8004b24 <arm_rfft_fast_init_f32+0x7c>
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d006      	beq.n	8004afc <arm_rfft_fast_init_f32+0x54>
 8004aee:	2b10      	cmp	r3, #16
 8004af0:	d01d      	beq.n	8004b2e <arm_rfft_fast_init_f32+0x86>
 8004af2:	20ff      	movs	r0, #255	; 0xff
 8004af4:	b240      	sxtb	r0, r0
 8004af6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	2438      	movs	r4, #56	; 0x38
 8004afe:	4917      	ldr	r1, [pc, #92]	; (8004b5c <arm_rfft_fast_init_f32+0xb4>)
 8004b00:	4a17      	ldr	r2, [pc, #92]	; (8004b60 <arm_rfft_fast_init_f32+0xb8>)
 8004b02:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <arm_rfft_fast_init_f32+0xbc>)
 8004b04:	e7e6      	b.n	8004ad4 <arm_rfft_fast_init_f32+0x2c>
 8004b06:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8004b0a:	4917      	ldr	r1, [pc, #92]	; (8004b68 <arm_rfft_fast_init_f32+0xc0>)
 8004b0c:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <arm_rfft_fast_init_f32+0xc4>)
 8004b0e:	4b18      	ldr	r3, [pc, #96]	; (8004b70 <arm_rfft_fast_init_f32+0xc8>)
 8004b10:	e7e0      	b.n	8004ad4 <arm_rfft_fast_init_f32+0x2c>
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b16:	d1ec      	bne.n	8004af2 <arm_rfft_fast_init_f32+0x4a>
 8004b18:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8004b1c:	4915      	ldr	r1, [pc, #84]	; (8004b74 <arm_rfft_fast_init_f32+0xcc>)
 8004b1e:	4a16      	ldr	r2, [pc, #88]	; (8004b78 <arm_rfft_fast_init_f32+0xd0>)
 8004b20:	4b16      	ldr	r3, [pc, #88]	; (8004b7c <arm_rfft_fast_init_f32+0xd4>)
 8004b22:	e7d7      	b.n	8004ad4 <arm_rfft_fast_init_f32+0x2c>
 8004b24:	2430      	movs	r4, #48	; 0x30
 8004b26:	4916      	ldr	r1, [pc, #88]	; (8004b80 <arm_rfft_fast_init_f32+0xd8>)
 8004b28:	4a16      	ldr	r2, [pc, #88]	; (8004b84 <arm_rfft_fast_init_f32+0xdc>)
 8004b2a:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <arm_rfft_fast_init_f32+0xe0>)
 8004b2c:	e7d2      	b.n	8004ad4 <arm_rfft_fast_init_f32+0x2c>
 8004b2e:	2414      	movs	r4, #20
 8004b30:	4916      	ldr	r1, [pc, #88]	; (8004b8c <arm_rfft_fast_init_f32+0xe4>)
 8004b32:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <arm_rfft_fast_init_f32+0xe8>)
 8004b34:	4b17      	ldr	r3, [pc, #92]	; (8004b94 <arm_rfft_fast_init_f32+0xec>)
 8004b36:	e7cd      	b.n	8004ad4 <arm_rfft_fast_init_f32+0x2c>
 8004b38:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004b3c:	4916      	ldr	r1, [pc, #88]	; (8004b98 <arm_rfft_fast_init_f32+0xf0>)
 8004b3e:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <arm_rfft_fast_init_f32+0xf4>)
 8004b40:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <arm_rfft_fast_init_f32+0xf8>)
 8004b42:	e7c7      	b.n	8004ad4 <arm_rfft_fast_init_f32+0x2c>
 8004b44:	24d0      	movs	r4, #208	; 0xd0
 8004b46:	4917      	ldr	r1, [pc, #92]	; (8004ba4 <arm_rfft_fast_init_f32+0xfc>)
 8004b48:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <arm_rfft_fast_init_f32+0x100>)
 8004b4a:	4b18      	ldr	r3, [pc, #96]	; (8004bac <arm_rfft_fast_init_f32+0x104>)
 8004b4c:	e7c2      	b.n	8004ad4 <arm_rfft_fast_init_f32+0x2c>
 8004b4e:	bf00      	nop
 8004b50:	08015ca0 	.word	0x08015ca0
 8004b54:	08006e98 	.word	0x08006e98
 8004b58:	0800d008 	.word	0x0800d008
 8004b5c:	0800af98 	.word	0x0800af98
 8004b60:	08017a60 	.word	0x08017a60
 8004b64:	08019f50 	.word	0x08019f50
 8004b68:	08013988 	.word	0x08013988
 8004b6c:	08011888 	.word	0x08011888
 8004b70:	0800b008 	.word	0x0800b008
 8004b74:	08019be0 	.word	0x08019be0
 8004b78:	08011008 	.word	0x08011008
 8004b7c:	08017c60 	.word	0x08017c60
 8004b80:	08014840 	.word	0x08014840
 8004b84:	08013888 	.word	0x08013888
 8004b88:	0800ae98 	.word	0x0800ae98
 8004b8c:	08014798 	.word	0x08014798
 8004b90:	08011808 	.word	0x08011808
 8004b94:	080147c0 	.word	0x080147c0
 8004b98:	08018460 	.word	0x08018460
 8004b9c:	08014ca0 	.word	0x08014ca0
 8004ba0:	080187e0 	.word	0x080187e0
 8004ba4:	0801a150 	.word	0x0801a150
 8004ba8:	080148a0 	.word	0x080148a0
 8004bac:	080197e0 	.word	0x080197e0

08004bb0 <arm_rfft_fast_f32>:
 8004bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb4:	8a06      	ldrh	r6, [r0, #16]
 8004bb6:	0876      	lsrs	r6, r6, #1
 8004bb8:	4607      	mov	r7, r0
 8004bba:	4615      	mov	r5, r2
 8004bbc:	8006      	strh	r6, [r0, #0]
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d15c      	bne.n	8004c7e <arm_rfft_fast_f32+0xce>
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f000 fbe6 	bl	8005398 <arm_cfft_f32>
 8004bcc:	edd4 7a00 	vldr	s15, [r4]
 8004bd0:	ed94 7a01 	vldr	s14, [r4, #4]
 8004bd4:	883e      	ldrh	r6, [r7, #0]
 8004bd6:	6978      	ldr	r0, [r7, #20]
 8004bd8:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004bdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004be0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004be4:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004be8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004bec:	3e01      	subs	r6, #1
 8004bee:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8004bf2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004bf6:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8004bfa:	ed85 7a00 	vstr	s14, [r5]
 8004bfe:	edc5 7a01 	vstr	s15, [r5, #4]
 8004c02:	3010      	adds	r0, #16
 8004c04:	f105 0210 	add.w	r2, r5, #16
 8004c08:	3b08      	subs	r3, #8
 8004c0a:	f104 0110 	add.w	r1, r4, #16
 8004c0e:	ed51 4a02 	vldr	s9, [r1, #-8]
 8004c12:	ed93 5a02 	vldr	s10, [r3, #8]
 8004c16:	ed11 7a01 	vldr	s14, [r1, #-4]
 8004c1a:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004c1e:	edd3 5a03 	vldr	s11, [r3, #12]
 8004c22:	ed50 6a01 	vldr	s13, [r0, #-4]
 8004c26:	ee75 7a64 	vsub.f32	s15, s10, s9
 8004c2a:	ee35 4a87 	vadd.f32	s8, s11, s14
 8004c2e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004c32:	ee77 5a65 	vsub.f32	s11, s14, s11
 8004c36:	ee66 4a27 	vmul.f32	s9, s12, s15
 8004c3a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004c3e:	ee34 5a85 	vadd.f32	s10, s9, s10
 8004c42:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004c46:	ee66 6a84 	vmul.f32	s13, s13, s8
 8004c4a:	ee77 7a25 	vadd.f32	s15, s14, s11
 8004c4e:	ee76 6a85 	vadd.f32	s13, s13, s10
 8004c52:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004c56:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004c5a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004c5e:	3e01      	subs	r6, #1
 8004c60:	ed42 6a02 	vstr	s13, [r2, #-8]
 8004c64:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004c68:	f1a3 0308 	sub.w	r3, r3, #8
 8004c6c:	f101 0108 	add.w	r1, r1, #8
 8004c70:	f100 0008 	add.w	r0, r0, #8
 8004c74:	f102 0208 	add.w	r2, r2, #8
 8004c78:	d1c9      	bne.n	8004c0e <arm_rfft_fast_f32+0x5e>
 8004c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c7e:	edd1 7a00 	vldr	s15, [r1]
 8004c82:	edd1 6a01 	vldr	s13, [r1, #4]
 8004c86:	6941      	ldr	r1, [r0, #20]
 8004c88:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004c90:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004c94:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004c98:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004c9c:	3e01      	subs	r6, #1
 8004c9e:	ed82 7a00 	vstr	s14, [r2]
 8004ca2:	edc2 7a01 	vstr	s15, [r2, #4]
 8004ca6:	00f0      	lsls	r0, r6, #3
 8004ca8:	b3ee      	cbz	r6, 8004d26 <arm_rfft_fast_f32+0x176>
 8004caa:	3808      	subs	r0, #8
 8004cac:	f101 0e10 	add.w	lr, r1, #16
 8004cb0:	4420      	add	r0, r4
 8004cb2:	f104 0110 	add.w	r1, r4, #16
 8004cb6:	f102 0c10 	add.w	ip, r2, #16
 8004cba:	ed90 7a02 	vldr	s14, [r0, #8]
 8004cbe:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004cc2:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8004cc6:	ed90 4a03 	vldr	s8, [r0, #12]
 8004cca:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004cce:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8004cd2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8004cd6:	ee74 4a05 	vadd.f32	s9, s8, s10
 8004cda:	ee26 3a27 	vmul.f32	s6, s12, s15
 8004cde:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004ce2:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004ce6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004cea:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004cee:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004cf2:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004cf6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8004cfa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004cfe:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8004d02:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004d06:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004d0a:	3e01      	subs	r6, #1
 8004d0c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8004d10:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8004d14:	f1a0 0008 	sub.w	r0, r0, #8
 8004d18:	f101 0108 	add.w	r1, r1, #8
 8004d1c:	f10e 0e08 	add.w	lr, lr, #8
 8004d20:	f10c 0c08 	add.w	ip, ip, #8
 8004d24:	d1c9      	bne.n	8004cba <arm_rfft_fast_f32+0x10a>
 8004d26:	4638      	mov	r0, r7
 8004d28:	4629      	mov	r1, r5
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d30:	2301      	movs	r3, #1
 8004d32:	f000 bb31 	b.w	8005398 <arm_cfft_f32>
 8004d36:	bf00      	nop

08004d38 <arm_cfft_radix8by2_f32>:
 8004d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3c:	ed2d 8b08 	vpush	{d8-d11}
 8004d40:	f8b0 e000 	ldrh.w	lr, [r0]
 8004d44:	6842      	ldr	r2, [r0, #4]
 8004d46:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8004d4a:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8004d4e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8004d52:	4607      	mov	r7, r0
 8004d54:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8004d58:	f000 80af 	beq.w	8004eba <arm_cfft_radix8by2_f32+0x182>
 8004d5c:	3310      	adds	r3, #16
 8004d5e:	18ce      	adds	r6, r1, r3
 8004d60:	3210      	adds	r2, #16
 8004d62:	4443      	add	r3, r8
 8004d64:	f101 0510 	add.w	r5, r1, #16
 8004d68:	f108 0410 	add.w	r4, r8, #16
 8004d6c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004d70:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004d74:	ed53 3a03 	vldr	s7, [r3, #-12]
 8004d78:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004d7c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004d80:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004d84:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004d88:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004d8c:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004d90:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004d94:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004d98:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004d9c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004da0:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004da4:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004da8:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004dac:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004db0:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004db4:	ee37 aa27 	vadd.f32	s20, s14, s15
 8004db8:	ee72 9a04 	vadd.f32	s19, s4, s8
 8004dbc:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004dc0:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004dc4:	ee74 aa80 	vadd.f32	s21, s9, s0
 8004dc8:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8004dcc:	ed45 ba04 	vstr	s23, [r5, #-16]
 8004dd0:	ed05 ba03 	vstr	s22, [r5, #-12]
 8004dd4:	ed45 aa02 	vstr	s21, [r5, #-8]
 8004dd8:	ed05 aa01 	vstr	s20, [r5, #-4]
 8004ddc:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004de0:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004de4:	ed06 9a03 	vstr	s18, [r6, #-12]
 8004de8:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004dec:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004df0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004df4:	ed12 6a03 	vldr	s12, [r2, #-12]
 8004df8:	ed52 2a04 	vldr	s5, [r2, #-16]
 8004dfc:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004e00:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004e04:	ee26 8a86 	vmul.f32	s16, s13, s12
 8004e08:	ee24 2a06 	vmul.f32	s4, s8, s12
 8004e0c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8004e10:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004e14:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004e18:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8004e1c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004e20:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004e24:	ee36 6a04 	vadd.f32	s12, s12, s8
 8004e28:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004e2c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8004e30:	ee71 2a88 	vadd.f32	s5, s3, s16
 8004e34:	ed44 6a03 	vstr	s13, [r4, #-12]
 8004e38:	ed44 2a04 	vstr	s5, [r4, #-16]
 8004e3c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8004e40:	ed03 6a03 	vstr	s12, [r3, #-12]
 8004e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e48:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004e4c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004e50:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004e54:	ee35 6a41 	vsub.f32	s12, s10, s2
 8004e58:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004e5c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004e60:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004e64:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8004e68:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004e6c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004e70:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004e74:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004e78:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004e7c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004e80:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004e84:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004e88:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004e8c:	f1be 0e01 	subs.w	lr, lr, #1
 8004e90:	ed44 5a02 	vstr	s11, [r4, #-8]
 8004e94:	f105 0510 	add.w	r5, r5, #16
 8004e98:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004e9c:	f106 0610 	add.w	r6, r6, #16
 8004ea0:	ed03 6a02 	vstr	s12, [r3, #-8]
 8004ea4:	ed03 7a01 	vstr	s14, [r3, #-4]
 8004ea8:	f102 0210 	add.w	r2, r2, #16
 8004eac:	f104 0410 	add.w	r4, r4, #16
 8004eb0:	f103 0310 	add.w	r3, r3, #16
 8004eb4:	f47f af5a 	bne.w	8004d6c <arm_cfft_radix8by2_f32+0x34>
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	fa1f f48c 	uxth.w	r4, ip
 8004ebe:	4608      	mov	r0, r1
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	f000 fae2 	bl	800548c <arm_radix8_butterfly_f32>
 8004ec8:	ecbd 8b08 	vpop	{d8-d11}
 8004ecc:	4640      	mov	r0, r8
 8004ece:	4621      	mov	r1, r4
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed8:	f000 bad8 	b.w	800548c <arm_radix8_butterfly_f32>

08004edc <arm_cfft_radix8by4_f32>:
 8004edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee0:	ed2d 8b0a 	vpush	{d8-d12}
 8004ee4:	8802      	ldrh	r2, [r0, #0]
 8004ee6:	ed91 6a00 	vldr	s12, [r1]
 8004eea:	b08f      	sub	sp, #60	; 0x3c
 8004eec:	460f      	mov	r7, r1
 8004eee:	0852      	lsrs	r2, r2, #1
 8004ef0:	0093      	lsls	r3, r2, #2
 8004ef2:	900c      	str	r0, [sp, #48]	; 0x30
 8004ef4:	9103      	str	r1, [sp, #12]
 8004ef6:	6841      	ldr	r1, [r0, #4]
 8004ef8:	ed97 7a01 	vldr	s14, [r7, #4]
 8004efc:	4638      	mov	r0, r7
 8004efe:	4418      	add	r0, r3
 8004f00:	4606      	mov	r6, r0
 8004f02:	9009      	str	r0, [sp, #36]	; 0x24
 8004f04:	4418      	add	r0, r3
 8004f06:	edd0 6a00 	vldr	s13, [r0]
 8004f0a:	edd6 3a00 	vldr	s7, [r6]
 8004f0e:	edd6 2a01 	vldr	s5, [r6, #4]
 8004f12:	edd0 7a01 	vldr	s15, [r0, #4]
 8004f16:	900a      	str	r0, [sp, #40]	; 0x28
 8004f18:	ee76 5a26 	vadd.f32	s11, s12, s13
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	4625      	mov	r5, r4
 8004f20:	441c      	add	r4, r3
 8004f22:	ed94 4a00 	vldr	s8, [r4]
 8004f26:	ed94 5a01 	vldr	s10, [r4, #4]
 8004f2a:	9401      	str	r4, [sp, #4]
 8004f2c:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8004f30:	4630      	mov	r0, r6
 8004f32:	ee74 4a24 	vadd.f32	s9, s8, s9
 8004f36:	463e      	mov	r6, r7
 8004f38:	ee14 ea90 	vmov	lr, s9
 8004f3c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004f40:	f846 eb08 	str.w	lr, [r6], #8
 8004f44:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004f48:	edd0 4a01 	vldr	s9, [r0, #4]
 8004f4c:	9604      	str	r6, [sp, #16]
 8004f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f52:	9e01      	ldr	r6, [sp, #4]
 8004f54:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8004f58:	ed96 2a01 	vldr	s4, [r6, #4]
 8004f5c:	ee36 7a24 	vadd.f32	s14, s12, s9
 8004f60:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8004f64:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8004f68:	ee36 6a62 	vsub.f32	s12, s12, s5
 8004f6c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004f70:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004f74:	ee73 3a45 	vsub.f32	s7, s6, s10
 8004f78:	4604      	mov	r4, r0
 8004f7a:	ee36 6a45 	vsub.f32	s12, s12, s10
 8004f7e:	ee75 6a26 	vadd.f32	s13, s10, s13
 8004f82:	46a3      	mov	fp, r4
 8004f84:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004f88:	ee34 5a84 	vadd.f32	s10, s9, s8
 8004f8c:	ee13 8a90 	vmov	r8, s7
 8004f90:	46a4      	mov	ip, r4
 8004f92:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8004f96:	ed87 7a01 	vstr	s14, [r7, #4]
 8004f9a:	f84b 8b08 	str.w	r8, [fp], #8
 8004f9e:	f1ac 0704 	sub.w	r7, ip, #4
 8004fa2:	ed8c 5a01 	vstr	s10, [ip, #4]
 8004fa6:	f101 0c08 	add.w	ip, r1, #8
 8004faa:	462c      	mov	r4, r5
 8004fac:	f8cd c014 	str.w	ip, [sp, #20]
 8004fb0:	ee15 ca90 	vmov	ip, s11
 8004fb4:	f844 cb08 	str.w	ip, [r4], #8
 8004fb8:	9407      	str	r4, [sp, #28]
 8004fba:	f101 0410 	add.w	r4, r1, #16
 8004fbe:	ed85 6a01 	vstr	s12, [r5, #4]
 8004fc2:	0852      	lsrs	r2, r2, #1
 8004fc4:	9402      	str	r4, [sp, #8]
 8004fc6:	462c      	mov	r4, r5
 8004fc8:	f101 0518 	add.w	r5, r1, #24
 8004fcc:	920b      	str	r2, [sp, #44]	; 0x2c
 8004fce:	46b2      	mov	sl, r6
 8004fd0:	9506      	str	r5, [sp, #24]
 8004fd2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8004fd6:	3a02      	subs	r2, #2
 8004fd8:	ee16 5a90 	vmov	r5, s13
 8004fdc:	46b6      	mov	lr, r6
 8004fde:	4630      	mov	r0, r6
 8004fe0:	0852      	lsrs	r2, r2, #1
 8004fe2:	f84a 5b08 	str.w	r5, [sl], #8
 8004fe6:	f1a0 0604 	sub.w	r6, r0, #4
 8004fea:	edce 7a01 	vstr	s15, [lr, #4]
 8004fee:	9208      	str	r2, [sp, #32]
 8004ff0:	f000 8130 	beq.w	8005254 <arm_cfft_radix8by4_f32+0x378>
 8004ff4:	4691      	mov	r9, r2
 8004ff6:	9a03      	ldr	r2, [sp, #12]
 8004ff8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004ffc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005000:	3b08      	subs	r3, #8
 8005002:	f102 0510 	add.w	r5, r2, #16
 8005006:	f101 0c20 	add.w	ip, r1, #32
 800500a:	f1a4 020c 	sub.w	r2, r4, #12
 800500e:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8005012:	4433      	add	r3, r6
 8005014:	3410      	adds	r4, #16
 8005016:	4650      	mov	r0, sl
 8005018:	4659      	mov	r1, fp
 800501a:	ed55 3a02 	vldr	s7, [r5, #-8]
 800501e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8005022:	ed91 7a00 	vldr	s14, [r1]
 8005026:	edd0 7a00 	vldr	s15, [r0]
 800502a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800502e:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005032:	edd0 6a01 	vldr	s13, [r0, #4]
 8005036:	ed91 6a01 	vldr	s12, [r1, #4]
 800503a:	ee33 8a85 	vadd.f32	s16, s7, s10
 800503e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8005042:	ee78 4a07 	vadd.f32	s9, s16, s14
 8005046:	ee74 5a65 	vsub.f32	s11, s8, s11
 800504a:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800504e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8005052:	ed45 4a02 	vstr	s9, [r5, #-8]
 8005056:	edd1 4a01 	vldr	s9, [r1, #4]
 800505a:	ed90 4a01 	vldr	s8, [r0, #4]
 800505e:	ee70 4a24 	vadd.f32	s9, s0, s9
 8005062:	ee76 aa05 	vadd.f32	s21, s12, s10
 8005066:	ee74 4a84 	vadd.f32	s9, s9, s8
 800506a:	ee35 aac7 	vsub.f32	s20, s11, s14
 800506e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8005072:	edd6 1a00 	vldr	s3, [r6]
 8005076:	edd7 0a00 	vldr	s1, [r7]
 800507a:	ed92 4a02 	vldr	s8, [r2, #8]
 800507e:	edd3 3a02 	vldr	s7, [r3, #8]
 8005082:	ed93 2a01 	vldr	s4, [r3, #4]
 8005086:	ed16 1a01 	vldr	s2, [r6, #-4]
 800508a:	edd2 2a01 	vldr	s5, [r2, #4]
 800508e:	ed57 9a01 	vldr	s19, [r7, #-4]
 8005092:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8005096:	ee39 3a81 	vadd.f32	s6, s19, s2
 800509a:	ee74 8a84 	vadd.f32	s17, s9, s8
 800509e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80050a2:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80050a6:	ee7a aae6 	vsub.f32	s21, s21, s13
 80050aa:	ee18 aa90 	vmov	sl, s17
 80050ae:	f847 a908 	str.w	sl, [r7], #-8
 80050b2:	edd2 8a01 	vldr	s17, [r2, #4]
 80050b6:	ed93 9a01 	vldr	s18, [r3, #4]
 80050ba:	ee73 8a28 	vadd.f32	s17, s6, s17
 80050be:	ee3a aa27 	vadd.f32	s20, s20, s15
 80050c2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80050c6:	ee74 0a63 	vsub.f32	s1, s8, s7
 80050ca:	edc7 8a01 	vstr	s17, [r7, #4]
 80050ce:	ed18 ba02 	vldr	s22, [r8, #-8]
 80050d2:	ed58 8a01 	vldr	s17, [r8, #-4]
 80050d6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80050da:	ee6a ba28 	vmul.f32	s23, s20, s17
 80050de:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80050e2:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80050e6:	ee30 9a81 	vadd.f32	s18, s1, s2
 80050ea:	ee79 9a82 	vadd.f32	s19, s19, s4
 80050ee:	ee3c ca2b 	vadd.f32	s24, s24, s23
 80050f2:	ee6a aaa8 	vmul.f32	s21, s21, s17
 80050f6:	ee69 baa8 	vmul.f32	s23, s19, s17
 80050fa:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80050fe:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8005102:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005106:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800510a:	ee1c aa10 	vmov	sl, s24
 800510e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8005112:	f841 ab08 	str.w	sl, [r1], #8
 8005116:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800511a:	ee3b bacb 	vsub.f32	s22, s23, s22
 800511e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8005122:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005126:	ed01 aa01 	vstr	s20, [r1, #-4]
 800512a:	edc2 8a01 	vstr	s17, [r2, #4]
 800512e:	ed82 ba02 	vstr	s22, [r2, #8]
 8005132:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8005136:	ee74 3a63 	vsub.f32	s7, s8, s7
 800513a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800513e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8005142:	ee30 0a46 	vsub.f32	s0, s0, s12
 8005146:	ee33 3a42 	vsub.f32	s6, s6, s4
 800514a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800514e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005152:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8005156:	ee63 8a04 	vmul.f32	s17, s6, s8
 800515a:	ee28 aa24 	vmul.f32	s20, s16, s9
 800515e:	ee60 9a04 	vmul.f32	s19, s0, s8
 8005162:	ee28 8a04 	vmul.f32	s16, s16, s8
 8005166:	ee20 0a24 	vmul.f32	s0, s0, s9
 800516a:	ee63 3a84 	vmul.f32	s7, s7, s8
 800516e:	ee39 4a68 	vsub.f32	s8, s18, s17
 8005172:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005176:	ee14 aa10 	vmov	sl, s8
 800517a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800517e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8005182:	ed44 9a02 	vstr	s19, [r4, #-8]
 8005186:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800518a:	ed04 0a01 	vstr	s0, [r4, #-4]
 800518e:	f846 a908 	str.w	sl, [r6], #-8
 8005192:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005196:	ee35 7a87 	vadd.f32	s14, s11, s14
 800519a:	edc6 3a01 	vstr	s7, [r6, #4]
 800519e:	ee76 6a86 	vadd.f32	s13, s13, s12
 80051a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051a6:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80051aa:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80051ae:	ee67 5a86 	vmul.f32	s11, s15, s12
 80051b2:	ee26 5a87 	vmul.f32	s10, s13, s14
 80051b6:	ee72 2a62 	vsub.f32	s5, s4, s5
 80051ba:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80051be:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80051c2:	ee75 5a25 	vadd.f32	s11, s10, s11
 80051c6:	ee62 0a86 	vmul.f32	s1, s5, s12
 80051ca:	ee66 6a86 	vmul.f32	s13, s13, s12
 80051ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051d2:	ee21 6a06 	vmul.f32	s12, s2, s12
 80051d6:	ee62 2a87 	vmul.f32	s5, s5, s14
 80051da:	ee21 1a07 	vmul.f32	s2, s2, s14
 80051de:	ee15 aa90 	vmov	sl, s11
 80051e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80051e6:	f840 ab08 	str.w	sl, [r0], #8
 80051ea:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80051ee:	ee76 2a22 	vadd.f32	s5, s12, s5
 80051f2:	f1b9 0901 	subs.w	r9, r9, #1
 80051f6:	ed40 7a01 	vstr	s15, [r0, #-4]
 80051fa:	f105 0508 	add.w	r5, r5, #8
 80051fe:	ed83 1a02 	vstr	s2, [r3, #8]
 8005202:	edc3 2a01 	vstr	s5, [r3, #4]
 8005206:	f108 0808 	add.w	r8, r8, #8
 800520a:	f1a2 0208 	sub.w	r2, r2, #8
 800520e:	f10c 0c10 	add.w	ip, ip, #16
 8005212:	f104 0408 	add.w	r4, r4, #8
 8005216:	f10e 0e18 	add.w	lr, lr, #24
 800521a:	f1a3 0308 	sub.w	r3, r3, #8
 800521e:	f47f aefc 	bne.w	800501a <arm_cfft_radix8by4_f32+0x13e>
 8005222:	9908      	ldr	r1, [sp, #32]
 8005224:	9802      	ldr	r0, [sp, #8]
 8005226:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800522a:	00cb      	lsls	r3, r1, #3
 800522c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005230:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005234:	9102      	str	r1, [sp, #8]
 8005236:	9904      	ldr	r1, [sp, #16]
 8005238:	4419      	add	r1, r3
 800523a:	9104      	str	r1, [sp, #16]
 800523c:	9905      	ldr	r1, [sp, #20]
 800523e:	4419      	add	r1, r3
 8005240:	9105      	str	r1, [sp, #20]
 8005242:	9907      	ldr	r1, [sp, #28]
 8005244:	449b      	add	fp, r3
 8005246:	4419      	add	r1, r3
 8005248:	449a      	add	sl, r3
 800524a:	9b06      	ldr	r3, [sp, #24]
 800524c:	9107      	str	r1, [sp, #28]
 800524e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005252:	9306      	str	r3, [sp, #24]
 8005254:	9a04      	ldr	r2, [sp, #16]
 8005256:	9807      	ldr	r0, [sp, #28]
 8005258:	edd2 3a00 	vldr	s7, [r2]
 800525c:	ed90 4a00 	vldr	s8, [r0]
 8005260:	eddb 7a00 	vldr	s15, [fp]
 8005264:	ed9a 3a00 	vldr	s6, [sl]
 8005268:	edd2 4a01 	vldr	s9, [r2, #4]
 800526c:	ed90 7a01 	vldr	s14, [r0, #4]
 8005270:	ed9b 2a01 	vldr	s4, [fp, #4]
 8005274:	edda 5a01 	vldr	s11, [sl, #4]
 8005278:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800527c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800527e:	ee73 6a84 	vadd.f32	s13, s7, s8
 8005282:	ee34 6a87 	vadd.f32	s12, s9, s14
 8005286:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800528a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800528e:	ee33 5a05 	vadd.f32	s10, s6, s10
 8005292:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8005296:	ed82 5a00 	vstr	s10, [r2]
 800529a:	ed9b 5a01 	vldr	s10, [fp, #4]
 800529e:	edda 4a01 	vldr	s9, [sl, #4]
 80052a2:	ee36 5a05 	vadd.f32	s10, s12, s10
 80052a6:	ee72 3a04 	vadd.f32	s7, s4, s8
 80052aa:	ee35 5a24 	vadd.f32	s10, s10, s9
 80052ae:	ee77 4a67 	vsub.f32	s9, s14, s15
 80052b2:	ed82 5a01 	vstr	s10, [r2, #4]
 80052b6:	9a05      	ldr	r2, [sp, #20]
 80052b8:	ee34 5a83 	vadd.f32	s10, s9, s6
 80052bc:	edd2 1a00 	vldr	s3, [r2]
 80052c0:	edd2 2a01 	vldr	s5, [r2, #4]
 80052c4:	9a02      	ldr	r2, [sp, #8]
 80052c6:	ee73 3ae5 	vsub.f32	s7, s7, s11
 80052ca:	ee36 6a42 	vsub.f32	s12, s12, s4
 80052ce:	ee63 4aa1 	vmul.f32	s9, s7, s3
 80052d2:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80052d6:	ee65 2a22 	vmul.f32	s5, s10, s5
 80052da:	ee25 5a21 	vmul.f32	s10, s10, s3
 80052de:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80052e2:	ee35 5a63 	vsub.f32	s10, s10, s7
 80052e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80052ea:	edcb 2a00 	vstr	s5, [fp]
 80052ee:	ed8b 5a01 	vstr	s10, [fp, #4]
 80052f2:	edd2 3a01 	vldr	s7, [r2, #4]
 80052f6:	ed92 5a00 	vldr	s10, [r2]
 80052fa:	9a06      	ldr	r2, [sp, #24]
 80052fc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005300:	ee36 6a65 	vsub.f32	s12, s12, s11
 8005304:	ee66 4a85 	vmul.f32	s9, s13, s10
 8005308:	ee26 5a05 	vmul.f32	s10, s12, s10
 800530c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005310:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005314:	ee75 6a66 	vsub.f32	s13, s10, s13
 8005318:	ee34 6a86 	vadd.f32	s12, s9, s12
 800531c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005324:	edc0 6a01 	vstr	s13, [r0, #4]
 8005328:	ed80 6a00 	vstr	s12, [r0]
 800532c:	ed92 6a01 	vldr	s12, [r2, #4]
 8005330:	9803      	ldr	r0, [sp, #12]
 8005332:	ee77 7a43 	vsub.f32	s15, s14, s6
 8005336:	ee75 5a84 	vadd.f32	s11, s11, s8
 800533a:	ed92 7a00 	vldr	s14, [r2]
 800533e:	ee65 6a87 	vmul.f32	s13, s11, s14
 8005342:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005346:	ee65 5a86 	vmul.f32	s11, s11, s12
 800534a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800534e:	ee77 5a65 	vsub.f32	s11, s14, s11
 8005352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005356:	edca 5a01 	vstr	s11, [sl, #4]
 800535a:	edca 7a00 	vstr	s15, [sl]
 800535e:	6872      	ldr	r2, [r6, #4]
 8005360:	4621      	mov	r1, r4
 8005362:	2304      	movs	r3, #4
 8005364:	f000 f892 	bl	800548c <arm_radix8_butterfly_f32>
 8005368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800536a:	6872      	ldr	r2, [r6, #4]
 800536c:	4621      	mov	r1, r4
 800536e:	2304      	movs	r3, #4
 8005370:	f000 f88c 	bl	800548c <arm_radix8_butterfly_f32>
 8005374:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005376:	6872      	ldr	r2, [r6, #4]
 8005378:	4621      	mov	r1, r4
 800537a:	2304      	movs	r3, #4
 800537c:	f000 f886 	bl	800548c <arm_radix8_butterfly_f32>
 8005380:	9801      	ldr	r0, [sp, #4]
 8005382:	6872      	ldr	r2, [r6, #4]
 8005384:	4621      	mov	r1, r4
 8005386:	2304      	movs	r3, #4
 8005388:	b00f      	add	sp, #60	; 0x3c
 800538a:	ecbd 8b0a 	vpop	{d8-d12}
 800538e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005392:	f000 b87b 	b.w	800548c <arm_radix8_butterfly_f32>
 8005396:	bf00      	nop

08005398 <arm_cfft_f32>:
 8005398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800539c:	2a01      	cmp	r2, #1
 800539e:	4606      	mov	r6, r0
 80053a0:	4617      	mov	r7, r2
 80053a2:	460c      	mov	r4, r1
 80053a4:	4698      	mov	r8, r3
 80053a6:	8805      	ldrh	r5, [r0, #0]
 80053a8:	d054      	beq.n	8005454 <arm_cfft_f32+0xbc>
 80053aa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80053ae:	d04c      	beq.n	800544a <arm_cfft_f32+0xb2>
 80053b0:	d916      	bls.n	80053e0 <arm_cfft_f32+0x48>
 80053b2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80053b6:	d01a      	beq.n	80053ee <arm_cfft_f32+0x56>
 80053b8:	d95c      	bls.n	8005474 <arm_cfft_f32+0xdc>
 80053ba:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80053be:	d044      	beq.n	800544a <arm_cfft_f32+0xb2>
 80053c0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80053c4:	d105      	bne.n	80053d2 <arm_cfft_f32+0x3a>
 80053c6:	4620      	mov	r0, r4
 80053c8:	4629      	mov	r1, r5
 80053ca:	6872      	ldr	r2, [r6, #4]
 80053cc:	2301      	movs	r3, #1
 80053ce:	f000 f85d 	bl	800548c <arm_radix8_butterfly_f32>
 80053d2:	f1b8 0f00 	cmp.w	r8, #0
 80053d6:	d111      	bne.n	80053fc <arm_cfft_f32+0x64>
 80053d8:	2f01      	cmp	r7, #1
 80053da:	d016      	beq.n	800540a <arm_cfft_f32+0x72>
 80053dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e0:	2d20      	cmp	r5, #32
 80053e2:	d032      	beq.n	800544a <arm_cfft_f32+0xb2>
 80053e4:	d94a      	bls.n	800547c <arm_cfft_f32+0xe4>
 80053e6:	2d40      	cmp	r5, #64	; 0x40
 80053e8:	d0ed      	beq.n	80053c6 <arm_cfft_f32+0x2e>
 80053ea:	2d80      	cmp	r5, #128	; 0x80
 80053ec:	d1f1      	bne.n	80053d2 <arm_cfft_f32+0x3a>
 80053ee:	4630      	mov	r0, r6
 80053f0:	4621      	mov	r1, r4
 80053f2:	f7ff fca1 	bl	8004d38 <arm_cfft_radix8by2_f32>
 80053f6:	f1b8 0f00 	cmp.w	r8, #0
 80053fa:	d0ed      	beq.n	80053d8 <arm_cfft_f32+0x40>
 80053fc:	4620      	mov	r0, r4
 80053fe:	89b1      	ldrh	r1, [r6, #12]
 8005400:	68b2      	ldr	r2, [r6, #8]
 8005402:	f7fa fee5 	bl	80001d0 <arm_bitreversal_32>
 8005406:	2f01      	cmp	r7, #1
 8005408:	d1e8      	bne.n	80053dc <arm_cfft_f32+0x44>
 800540a:	ee07 5a90 	vmov	s15, r5
 800540e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005412:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005416:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800541a:	2d00      	cmp	r5, #0
 800541c:	d0de      	beq.n	80053dc <arm_cfft_f32+0x44>
 800541e:	f104 0108 	add.w	r1, r4, #8
 8005422:	2300      	movs	r3, #0
 8005424:	3301      	adds	r3, #1
 8005426:	429d      	cmp	r5, r3
 8005428:	f101 0108 	add.w	r1, r1, #8
 800542c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8005430:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005434:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005438:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800543c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005440:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005444:	d1ee      	bne.n	8005424 <arm_cfft_f32+0x8c>
 8005446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800544a:	4630      	mov	r0, r6
 800544c:	4621      	mov	r1, r4
 800544e:	f7ff fd45 	bl	8004edc <arm_cfft_radix8by4_f32>
 8005452:	e7be      	b.n	80053d2 <arm_cfft_f32+0x3a>
 8005454:	b1ad      	cbz	r5, 8005482 <arm_cfft_f32+0xea>
 8005456:	f101 030c 	add.w	r3, r1, #12
 800545a:	2200      	movs	r2, #0
 800545c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005460:	3201      	adds	r2, #1
 8005462:	eef1 7a67 	vneg.f32	s15, s15
 8005466:	4295      	cmp	r5, r2
 8005468:	ed43 7a02 	vstr	s15, [r3, #-8]
 800546c:	f103 0308 	add.w	r3, r3, #8
 8005470:	d1f4      	bne.n	800545c <arm_cfft_f32+0xc4>
 8005472:	e79a      	b.n	80053aa <arm_cfft_f32+0x12>
 8005474:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8005478:	d0a5      	beq.n	80053c6 <arm_cfft_f32+0x2e>
 800547a:	e7aa      	b.n	80053d2 <arm_cfft_f32+0x3a>
 800547c:	2d10      	cmp	r5, #16
 800547e:	d0b6      	beq.n	80053ee <arm_cfft_f32+0x56>
 8005480:	e7a7      	b.n	80053d2 <arm_cfft_f32+0x3a>
 8005482:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005486:	d894      	bhi.n	80053b2 <arm_cfft_f32+0x1a>
 8005488:	e7aa      	b.n	80053e0 <arm_cfft_f32+0x48>
 800548a:	bf00      	nop

0800548c <arm_radix8_butterfly_f32>:
 800548c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005490:	ed2d 8b10 	vpush	{d8-d15}
 8005494:	b09d      	sub	sp, #116	; 0x74
 8005496:	461c      	mov	r4, r3
 8005498:	ed9f bac8 	vldr	s22, [pc, #800]	; 80057bc <arm_radix8_butterfly_f32+0x330>
 800549c:	921a      	str	r2, [sp, #104]	; 0x68
 800549e:	1d03      	adds	r3, r0, #4
 80054a0:	4682      	mov	sl, r0
 80054a2:	4689      	mov	r9, r1
 80054a4:	468b      	mov	fp, r1
 80054a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80054a8:	9400      	str	r4, [sp, #0]
 80054aa:	469e      	mov	lr, r3
 80054ac:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80054b0:	005a      	lsls	r2, r3, #1
 80054b2:	18d6      	adds	r6, r2, r3
 80054b4:	18f5      	adds	r5, r6, r3
 80054b6:	9203      	str	r2, [sp, #12]
 80054b8:	195a      	adds	r2, r3, r5
 80054ba:	18d0      	adds	r0, r2, r3
 80054bc:	00df      	lsls	r7, r3, #3
 80054be:	1819      	adds	r1, r3, r0
 80054c0:	463c      	mov	r4, r7
 80054c2:	9701      	str	r7, [sp, #4]
 80054c4:	4457      	add	r7, sl
 80054c6:	930c      	str	r3, [sp, #48]	; 0x30
 80054c8:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 80054d2:	eb07 0c04 	add.w	ip, r7, r4
 80054d6:	9c00      	ldr	r4, [sp, #0]
 80054d8:	9302      	str	r3, [sp, #8]
 80054da:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 80054de:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 80054e2:	3204      	adds	r2, #4
 80054e4:	3104      	adds	r1, #4
 80054e6:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 80054ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054ee:	f04f 0800 	mov.w	r8, #0
 80054f2:	eddc 7a00 	vldr	s15, [ip]
 80054f6:	edd7 6a00 	vldr	s13, [r7]
 80054fa:	edd6 3a00 	vldr	s7, [r6]
 80054fe:	ed5e aa01 	vldr	s21, [lr, #-4]
 8005502:	edd5 4a00 	vldr	s9, [r5]
 8005506:	ed90 2a00 	vldr	s4, [r0]
 800550a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800550e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8005512:	ee77 8a82 	vadd.f32	s17, s15, s4
 8005516:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800551a:	ee76 1a87 	vadd.f32	s3, s13, s14
 800551e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8005522:	ee31 6a84 	vadd.f32	s12, s3, s8
 8005526:	ee33 5a28 	vadd.f32	s10, s6, s17
 800552a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800552e:	ee75 6a06 	vadd.f32	s13, s10, s12
 8005532:	ee35 5a46 	vsub.f32	s10, s10, s12
 8005536:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800553a:	ed85 5a00 	vstr	s10, [r5]
 800553e:	ed96 1a01 	vldr	s2, [r6, #4]
 8005542:	edd7 5a01 	vldr	s11, [r7, #4]
 8005546:	ed92 aa00 	vldr	s20, [r2]
 800554a:	ed91 6a00 	vldr	s12, [r1]
 800554e:	ed9e 9a00 	vldr	s18, [lr]
 8005552:	ed95 5a01 	vldr	s10, [r5, #4]
 8005556:	eddc 6a01 	vldr	s13, [ip, #4]
 800555a:	edd0 9a01 	vldr	s19, [r0, #4]
 800555e:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8005562:	ee71 2a46 	vsub.f32	s5, s2, s12
 8005566:	ee75 3aca 	vsub.f32	s7, s11, s20
 800556a:	ee37 0a60 	vsub.f32	s0, s14, s1
 800556e:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8005572:	ee37 7a20 	vadd.f32	s14, s14, s1
 8005576:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800557a:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800557e:	ee79 3a05 	vadd.f32	s7, s18, s10
 8005582:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8005586:	ee39 5a45 	vsub.f32	s10, s18, s10
 800558a:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800558e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8005592:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8005596:	ee31 6a06 	vadd.f32	s12, s2, s12
 800559a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800559e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80055a2:	ee62 2a8b 	vmul.f32	s5, s5, s22
 80055a6:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80055aa:	ee33 3a68 	vsub.f32	s6, s6, s17
 80055ae:	ee36 0a88 	vadd.f32	s0, s13, s16
 80055b2:	ee75 8a86 	vadd.f32	s17, s11, s12
 80055b6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80055ba:	ee71 1ac4 	vsub.f32	s3, s3, s8
 80055be:	ee75 6a62 	vsub.f32	s13, s10, s5
 80055c2:	ee33 4ac9 	vsub.f32	s8, s7, s18
 80055c6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80055ca:	ee33 1a89 	vadd.f32	s2, s7, s18
 80055ce:	ee74 5ae0 	vsub.f32	s11, s9, s1
 80055d2:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80055d6:	ee75 4a22 	vadd.f32	s9, s10, s5
 80055da:	ee32 5a27 	vadd.f32	s10, s4, s15
 80055de:	ee72 7a67 	vsub.f32	s15, s4, s15
 80055e2:	ee33 8a06 	vadd.f32	s16, s6, s12
 80055e6:	ee75 2a87 	vadd.f32	s5, s11, s14
 80055ea:	ee31 9a28 	vadd.f32	s18, s2, s17
 80055ee:	ee33 6a46 	vsub.f32	s12, s6, s12
 80055f2:	ee74 0a61 	vsub.f32	s1, s8, s3
 80055f6:	ee33 2a80 	vadd.f32	s4, s7, s0
 80055fa:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80055fe:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8005602:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005606:	ee31 1a68 	vsub.f32	s2, s2, s17
 800560a:	ee34 4a21 	vadd.f32	s8, s8, s3
 800560e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8005612:	ee74 4a85 	vadd.f32	s9, s9, s10
 8005616:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800561a:	44d8      	add	r8, fp
 800561c:	45c1      	cmp	r9, r8
 800561e:	ed8e 9a00 	vstr	s18, [lr]
 8005622:	ed85 1a01 	vstr	s2, [r5, #4]
 8005626:	449e      	add	lr, r3
 8005628:	ed8c 8a00 	vstr	s16, [ip]
 800562c:	441d      	add	r5, r3
 800562e:	ed80 6a00 	vstr	s12, [r0]
 8005632:	edcc 0a01 	vstr	s1, [ip, #4]
 8005636:	ed80 4a01 	vstr	s8, [r0, #4]
 800563a:	449c      	add	ip, r3
 800563c:	ed87 2a00 	vstr	s4, [r7]
 8005640:	4418      	add	r0, r3
 8005642:	ed41 3a01 	vstr	s7, [r1, #-4]
 8005646:	ed42 2a01 	vstr	s5, [r2, #-4]
 800564a:	ed86 7a00 	vstr	s14, [r6]
 800564e:	ed87 3a01 	vstr	s6, [r7, #4]
 8005652:	edc1 4a00 	vstr	s9, [r1]
 8005656:	441f      	add	r7, r3
 8005658:	edc2 5a00 	vstr	s11, [r2]
 800565c:	4419      	add	r1, r3
 800565e:	edc6 6a01 	vstr	s13, [r6, #4]
 8005662:	441a      	add	r2, r3
 8005664:	441e      	add	r6, r3
 8005666:	f63f af44 	bhi.w	80054f2 <arm_radix8_butterfly_f32+0x66>
 800566a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800566c:	2907      	cmp	r1, #7
 800566e:	4620      	mov	r0, r4
 8005670:	f240 81e9 	bls.w	8005a46 <arm_radix8_butterfly_f32+0x5ba>
 8005674:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8005678:	193e      	adds	r6, r7, r4
 800567a:	1935      	adds	r5, r6, r4
 800567c:	9c03      	ldr	r4, [sp, #12]
 800567e:	9000      	str	r0, [sp, #0]
 8005680:	4622      	mov	r2, r4
 8005682:	3201      	adds	r2, #1
 8005684:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005688:	9900      	ldr	r1, [sp, #0]
 800568a:	1828      	adds	r0, r5, r0
 800568c:	eb00 0e01 	add.w	lr, r0, r1
 8005690:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005692:	440a      	add	r2, r1
 8005694:	eb04 0c01 	add.w	ip, r4, r1
 8005698:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800569c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 80056a0:	9a00      	ldr	r2, [sp, #0]
 80056a2:	940f      	str	r4, [sp, #60]	; 0x3c
 80056a4:	00ed      	lsls	r5, r5, #3
 80056a6:	9511      	str	r5, [sp, #68]	; 0x44
 80056a8:	00d5      	lsls	r5, r2, #3
 80056aa:	950d      	str	r5, [sp, #52]	; 0x34
 80056ac:	9d01      	ldr	r5, [sp, #4]
 80056ae:	3508      	adds	r5, #8
 80056b0:	9516      	str	r5, [sp, #88]	; 0x58
 80056b2:	9d02      	ldr	r5, [sp, #8]
 80056b4:	3508      	adds	r5, #8
 80056b6:	0114      	lsls	r4, r2, #4
 80056b8:	9517      	str	r5, [sp, #92]	; 0x5c
 80056ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056bc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80056be:	940e      	str	r4, [sp, #56]	; 0x38
 80056c0:	00c0      	lsls	r0, r0, #3
 80056c2:	9010      	str	r0, [sp, #64]	; 0x40
 80056c4:	18aa      	adds	r2, r5, r2
 80056c6:	9207      	str	r2, [sp, #28]
 80056c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80056cc:	18aa      	adds	r2, r5, r2
 80056ce:	9208      	str	r2, [sp, #32]
 80056d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80056d2:	18aa      	adds	r2, r5, r2
 80056d4:	9209      	str	r2, [sp, #36]	; 0x24
 80056d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80056da:	f10e 0204 	add.w	r2, lr, #4
 80056de:	920a      	str	r2, [sp, #40]	; 0x28
 80056e0:	00c9      	lsls	r1, r1, #3
 80056e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056e4:	310c      	adds	r1, #12
 80056e6:	00f6      	lsls	r6, r6, #3
 80056e8:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 80056ec:	9114      	str	r1, [sp, #80]	; 0x50
 80056ee:	18a9      	adds	r1, r5, r2
 80056f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056f2:	9612      	str	r6, [sp, #72]	; 0x48
 80056f4:	00ff      	lsls	r7, r7, #3
 80056f6:	19ae      	adds	r6, r5, r6
 80056f8:	3008      	adds	r0, #8
 80056fa:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80056fe:	9606      	str	r6, [sp, #24]
 8005700:	9019      	str	r0, [sp, #100]	; 0x64
 8005702:	18aa      	adds	r2, r5, r2
 8005704:	0164      	lsls	r4, r4, #5
 8005706:	19ee      	adds	r6, r5, r7
 8005708:	f10c 000c 	add.w	r0, ip, #12
 800570c:	9713      	str	r7, [sp, #76]	; 0x4c
 800570e:	9604      	str	r6, [sp, #16]
 8005710:	9015      	str	r0, [sp, #84]	; 0x54
 8005712:	9103      	str	r1, [sp, #12]
 8005714:	9205      	str	r2, [sp, #20]
 8005716:	f104 0208 	add.w	r2, r4, #8
 800571a:	9218      	str	r2, [sp, #96]	; 0x60
 800571c:	f04f 0801 	mov.w	r8, #1
 8005720:	2200      	movs	r2, #0
 8005722:	f102 0108 	add.w	r1, r2, #8
 8005726:	460f      	mov	r7, r1
 8005728:	910b      	str	r1, [sp, #44]	; 0x2c
 800572a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800572c:	188e      	adds	r6, r1, r2
 800572e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005730:	188d      	adds	r5, r1, r2
 8005732:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005734:	188c      	adds	r4, r1, r2
 8005736:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005738:	1888      	adds	r0, r1, r2
 800573a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800573c:	eb01 0c02 	add.w	ip, r1, r2
 8005740:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005742:	440a      	add	r2, r1
 8005744:	9903      	ldr	r1, [sp, #12]
 8005746:	edd1 fa00 	vldr	s31, [r1]
 800574a:	9905      	ldr	r1, [sp, #20]
 800574c:	ed91 fa00 	vldr	s30, [r1]
 8005750:	9904      	ldr	r1, [sp, #16]
 8005752:	edd1 ea00 	vldr	s29, [r1]
 8005756:	9906      	ldr	r1, [sp, #24]
 8005758:	ed91 ea00 	vldr	s28, [r1]
 800575c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800575e:	edd1 da00 	vldr	s27, [r1]
 8005762:	9908      	ldr	r1, [sp, #32]
 8005764:	ed91 da00 	vldr	s26, [r1]
 8005768:	9907      	ldr	r1, [sp, #28]
 800576a:	edd1 ca00 	vldr	s25, [r1]
 800576e:	9903      	ldr	r1, [sp, #12]
 8005770:	ed91 ca01 	vldr	s24, [r1, #4]
 8005774:	9905      	ldr	r1, [sp, #20]
 8005776:	edd1 ba01 	vldr	s23, [r1, #4]
 800577a:	9904      	ldr	r1, [sp, #16]
 800577c:	edd1 aa01 	vldr	s21, [r1, #4]
 8005780:	9906      	ldr	r1, [sp, #24]
 8005782:	ed91 aa01 	vldr	s20, [r1, #4]
 8005786:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005788:	edd1 7a01 	vldr	s15, [r1, #4]
 800578c:	9908      	ldr	r1, [sp, #32]
 800578e:	edcd 7a00 	vstr	s15, [sp]
 8005792:	edd1 7a01 	vldr	s15, [r1, #4]
 8005796:	9907      	ldr	r1, [sp, #28]
 8005798:	edcd 7a01 	vstr	s15, [sp, #4]
 800579c:	edd1 7a01 	vldr	s15, [r1, #4]
 80057a0:	eb0a 0e07 	add.w	lr, sl, r7
 80057a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80057a6:	edcd 7a02 	vstr	s15, [sp, #8]
 80057aa:	eb0c 010a 	add.w	r1, ip, sl
 80057ae:	4456      	add	r6, sl
 80057b0:	4455      	add	r5, sl
 80057b2:	4454      	add	r4, sl
 80057b4:	4450      	add	r0, sl
 80057b6:	4452      	add	r2, sl
 80057b8:	46c4      	mov	ip, r8
 80057ba:	e001      	b.n	80057c0 <arm_radix8_butterfly_f32+0x334>
 80057bc:	3f3504f3 	.word	0x3f3504f3
 80057c0:	ed96 5a00 	vldr	s10, [r6]
 80057c4:	ed52 9a01 	vldr	s19, [r2, #-4]
 80057c8:	ed11 6a01 	vldr	s12, [r1, #-4]
 80057cc:	edd0 7a00 	vldr	s15, [r0]
 80057d0:	ed17 7a01 	vldr	s14, [r7, #-4]
 80057d4:	edde 3a00 	vldr	s7, [lr]
 80057d8:	ed94 3a00 	vldr	s6, [r4]
 80057dc:	ed95 2a00 	vldr	s4, [r5]
 80057e0:	ed9e 0a01 	vldr	s0, [lr, #4]
 80057e4:	ee33 8a85 	vadd.f32	s16, s7, s10
 80057e8:	ee32 1a06 	vadd.f32	s2, s4, s12
 80057ec:	ee33 4a29 	vadd.f32	s8, s6, s19
 80057f0:	ee77 4a87 	vadd.f32	s9, s15, s14
 80057f4:	ee78 1a04 	vadd.f32	s3, s16, s8
 80057f8:	ee71 6a24 	vadd.f32	s13, s2, s9
 80057fc:	ee32 2a46 	vsub.f32	s4, s4, s12
 8005800:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8005804:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005808:	ed8e 6a00 	vstr	s12, [lr]
 800580c:	edd0 8a01 	vldr	s17, [r0, #4]
 8005810:	ed95 9a01 	vldr	s18, [r5, #4]
 8005814:	edd1 2a00 	vldr	s5, [r1]
 8005818:	ed97 7a00 	vldr	s14, [r7]
 800581c:	edd4 0a01 	vldr	s1, [r4, #4]
 8005820:	ed96 6a01 	vldr	s12, [r6, #4]
 8005824:	edd2 5a00 	vldr	s11, [r2]
 8005828:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800582c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005830:	ee39 5a62 	vsub.f32	s10, s18, s5
 8005834:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8005838:	ee38 4a44 	vsub.f32	s8, s16, s8
 800583c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8005840:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8005844:	ee79 2a22 	vadd.f32	s5, s18, s5
 8005848:	ee75 8a69 	vsub.f32	s17, s10, s19
 800584c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8005850:	ee35 5a29 	vadd.f32	s10, s10, s19
 8005854:	ee72 7a67 	vsub.f32	s15, s4, s15
 8005858:	ee30 2a06 	vadd.f32	s4, s0, s12
 800585c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8005860:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005864:	ee32 9a08 	vadd.f32	s18, s4, s16
 8005868:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800586c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8005870:	ee71 4a64 	vsub.f32	s9, s2, s9
 8005874:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8005878:	ee32 1a87 	vadd.f32	s2, s5, s14
 800587c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8005880:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8005884:	ee30 6a46 	vsub.f32	s12, s0, s12
 8005888:	ee73 0a29 	vadd.f32	s1, s6, s19
 800588c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8005890:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005894:	ee32 7a64 	vsub.f32	s14, s4, s9
 8005898:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800589c:	ee36 6a68 	vsub.f32	s12, s12, s17
 80058a0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80058a4:	ee75 8a85 	vadd.f32	s17, s11, s10
 80058a8:	ee74 3a22 	vadd.f32	s7, s8, s5
 80058ac:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80058b0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80058b4:	ee79 1a41 	vsub.f32	s3, s18, s2
 80058b8:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80058bc:	ee76 5a43 	vsub.f32	s11, s12, s6
 80058c0:	ee74 2a62 	vsub.f32	s5, s8, s5
 80058c4:	ee72 4a24 	vadd.f32	s9, s4, s9
 80058c8:	ee30 4a60 	vsub.f32	s8, s0, s1
 80058cc:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80058d0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80058d4:	ee77 9a85 	vadd.f32	s19, s15, s10
 80058d8:	ee36 6a03 	vadd.f32	s12, s12, s6
 80058dc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80058e0:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80058e4:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80058e8:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80058ec:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80058f0:	ee39 1a01 	vadd.f32	s2, s18, s2
 80058f4:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80058f8:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80058fc:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8005900:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8005904:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8005908:	ee35 3a03 	vadd.f32	s6, s10, s6
 800590c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8005910:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8005914:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8005918:	ed9d 4a02 	vldr	s8, [sp, #8]
 800591c:	ed8e 1a01 	vstr	s2, [lr, #4]
 8005920:	ee77 3a63 	vsub.f32	s7, s14, s7
 8005924:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8005928:	ed9d 7a01 	vldr	s14, [sp, #4]
 800592c:	ed86 3a00 	vstr	s6, [r6]
 8005930:	ee30 9a89 	vadd.f32	s18, s1, s18
 8005934:	ee32 2a05 	vadd.f32	s4, s4, s10
 8005938:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800593c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8005940:	ee67 2a22 	vmul.f32	s5, s14, s5
 8005944:	ee64 1a00 	vmul.f32	s3, s8, s0
 8005948:	ee27 7a24 	vmul.f32	s14, s14, s9
 800594c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8005950:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8005954:	ee64 8a28 	vmul.f32	s17, s8, s17
 8005958:	ed9d 4a00 	vldr	s8, [sp]
 800595c:	edc6 6a01 	vstr	s13, [r6, #4]
 8005960:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005964:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8005968:	ee64 9a29 	vmul.f32	s19, s8, s19
 800596c:	ee24 4a25 	vmul.f32	s8, s8, s11
 8005970:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005974:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005978:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800597c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8005980:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8005984:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8005988:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800598c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005990:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005994:	ee30 0a68 	vsub.f32	s0, s0, s17
 8005998:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800599c:	ee70 0a84 	vadd.f32	s1, s1, s8
 80059a0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80059a4:	44dc      	add	ip, fp
 80059a6:	45e1      	cmp	r9, ip
 80059a8:	ed84 9a00 	vstr	s18, [r4]
 80059ac:	edc4 3a01 	vstr	s7, [r4, #4]
 80059b0:	449e      	add	lr, r3
 80059b2:	ed02 7a01 	vstr	s14, [r2, #-4]
 80059b6:	edc2 2a00 	vstr	s5, [r2]
 80059ba:	441e      	add	r6, r3
 80059bc:	ed85 2a00 	vstr	s4, [r5]
 80059c0:	ed85 8a01 	vstr	s16, [r5, #4]
 80059c4:	441c      	add	r4, r3
 80059c6:	ed47 1a01 	vstr	s3, [r7, #-4]
 80059ca:	ed87 0a00 	vstr	s0, [r7]
 80059ce:	441a      	add	r2, r3
 80059d0:	ed41 4a01 	vstr	s9, [r1, #-4]
 80059d4:	edc1 9a00 	vstr	s19, [r1]
 80059d8:	441d      	add	r5, r3
 80059da:	edc0 0a00 	vstr	s1, [r0]
 80059de:	441f      	add	r7, r3
 80059e0:	ed80 6a01 	vstr	s12, [r0, #4]
 80059e4:	4419      	add	r1, r3
 80059e6:	4418      	add	r0, r3
 80059e8:	f63f aeea 	bhi.w	80057c0 <arm_radix8_butterfly_f32+0x334>
 80059ec:	9a03      	ldr	r2, [sp, #12]
 80059ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059f0:	440a      	add	r2, r1
 80059f2:	9203      	str	r2, [sp, #12]
 80059f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80059f6:	9a05      	ldr	r2, [sp, #20]
 80059f8:	440a      	add	r2, r1
 80059fa:	9205      	str	r2, [sp, #20]
 80059fc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80059fe:	9a04      	ldr	r2, [sp, #16]
 8005a00:	440a      	add	r2, r1
 8005a02:	9204      	str	r2, [sp, #16]
 8005a04:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005a06:	9a06      	ldr	r2, [sp, #24]
 8005a08:	440a      	add	r2, r1
 8005a0a:	9206      	str	r2, [sp, #24]
 8005a0c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a10:	440a      	add	r2, r1
 8005a12:	9209      	str	r2, [sp, #36]	; 0x24
 8005a14:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005a16:	9a08      	ldr	r2, [sp, #32]
 8005a18:	440a      	add	r2, r1
 8005a1a:	9208      	str	r2, [sp, #32]
 8005a1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005a1e:	9a07      	ldr	r2, [sp, #28]
 8005a20:	440a      	add	r2, r1
 8005a22:	9207      	str	r2, [sp, #28]
 8005a24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a28:	f108 0801 	add.w	r8, r8, #1
 8005a2c:	3208      	adds	r2, #8
 8005a2e:	4588      	cmp	r8, r1
 8005a30:	920a      	str	r2, [sp, #40]	; 0x28
 8005a32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a34:	f47f ae75 	bne.w	8005722 <arm_radix8_butterfly_f32+0x296>
 8005a38:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	46c3      	mov	fp, r8
 8005a40:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8005a44:	e532      	b.n	80054ac <arm_radix8_butterfly_f32+0x20>
 8005a46:	b01d      	add	sp, #116	; 0x74
 8005a48:	ecbd 8b10 	vpop	{d8-d15}
 8005a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a50 <__errno>:
 8005a50:	4b01      	ldr	r3, [pc, #4]	; (8005a58 <__errno+0x8>)
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000010 	.word	0x20000010

08005a5c <__libc_init_array>:
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	4d0d      	ldr	r5, [pc, #52]	; (8005a94 <__libc_init_array+0x38>)
 8005a60:	4c0d      	ldr	r4, [pc, #52]	; (8005a98 <__libc_init_array+0x3c>)
 8005a62:	1b64      	subs	r4, r4, r5
 8005a64:	10a4      	asrs	r4, r4, #2
 8005a66:	2600      	movs	r6, #0
 8005a68:	42a6      	cmp	r6, r4
 8005a6a:	d109      	bne.n	8005a80 <__libc_init_array+0x24>
 8005a6c:	4d0b      	ldr	r5, [pc, #44]	; (8005a9c <__libc_init_array+0x40>)
 8005a6e:	4c0c      	ldr	r4, [pc, #48]	; (8005aa0 <__libc_init_array+0x44>)
 8005a70:	f001 f9ca 	bl	8006e08 <_init>
 8005a74:	1b64      	subs	r4, r4, r5
 8005a76:	10a4      	asrs	r4, r4, #2
 8005a78:	2600      	movs	r6, #0
 8005a7a:	42a6      	cmp	r6, r4
 8005a7c:	d105      	bne.n	8005a8a <__libc_init_array+0x2e>
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a84:	4798      	blx	r3
 8005a86:	3601      	adds	r6, #1
 8005a88:	e7ee      	b.n	8005a68 <__libc_init_array+0xc>
 8005a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8e:	4798      	blx	r3
 8005a90:	3601      	adds	r6, #1
 8005a92:	e7f2      	b.n	8005a7a <__libc_init_array+0x1e>
 8005a94:	0801a3a4 	.word	0x0801a3a4
 8005a98:	0801a3a4 	.word	0x0801a3a4
 8005a9c:	0801a3a4 	.word	0x0801a3a4
 8005aa0:	0801a3a8 	.word	0x0801a3a8

08005aa4 <memcpy>:
 8005aa4:	440a      	add	r2, r1
 8005aa6:	4291      	cmp	r1, r2
 8005aa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005aac:	d100      	bne.n	8005ab0 <memcpy+0xc>
 8005aae:	4770      	bx	lr
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aba:	4291      	cmp	r1, r2
 8005abc:	d1f9      	bne.n	8005ab2 <memcpy+0xe>
 8005abe:	bd10      	pop	{r4, pc}

08005ac0 <memset>:
 8005ac0:	4402      	add	r2, r0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d100      	bne.n	8005aca <memset+0xa>
 8005ac8:	4770      	bx	lr
 8005aca:	f803 1b01 	strb.w	r1, [r3], #1
 8005ace:	e7f9      	b.n	8005ac4 <memset+0x4>

08005ad0 <iprintf>:
 8005ad0:	b40f      	push	{r0, r1, r2, r3}
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <iprintf+0x2c>)
 8005ad4:	b513      	push	{r0, r1, r4, lr}
 8005ad6:	681c      	ldr	r4, [r3, #0]
 8005ad8:	b124      	cbz	r4, 8005ae4 <iprintf+0x14>
 8005ada:	69a3      	ldr	r3, [r4, #24]
 8005adc:	b913      	cbnz	r3, 8005ae4 <iprintf+0x14>
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f000 f866 	bl	8005bb0 <__sinit>
 8005ae4:	ab05      	add	r3, sp, #20
 8005ae6:	9a04      	ldr	r2, [sp, #16]
 8005ae8:	68a1      	ldr	r1, [r4, #8]
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 f983 	bl	8005df8 <_vfiprintf_r>
 8005af2:	b002      	add	sp, #8
 8005af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af8:	b004      	add	sp, #16
 8005afa:	4770      	bx	lr
 8005afc:	20000010 	.word	0x20000010

08005b00 <std>:
 8005b00:	2300      	movs	r3, #0
 8005b02:	b510      	push	{r4, lr}
 8005b04:	4604      	mov	r4, r0
 8005b06:	e9c0 3300 	strd	r3, r3, [r0]
 8005b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b0e:	6083      	str	r3, [r0, #8]
 8005b10:	8181      	strh	r1, [r0, #12]
 8005b12:	6643      	str	r3, [r0, #100]	; 0x64
 8005b14:	81c2      	strh	r2, [r0, #14]
 8005b16:	6183      	str	r3, [r0, #24]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	2208      	movs	r2, #8
 8005b1c:	305c      	adds	r0, #92	; 0x5c
 8005b1e:	f7ff ffcf 	bl	8005ac0 <memset>
 8005b22:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <std+0x38>)
 8005b24:	6263      	str	r3, [r4, #36]	; 0x24
 8005b26:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <std+0x3c>)
 8005b28:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b2a:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <std+0x40>)
 8005b2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b2e:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <std+0x44>)
 8005b30:	6224      	str	r4, [r4, #32]
 8005b32:	6323      	str	r3, [r4, #48]	; 0x30
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	bf00      	nop
 8005b38:	080063a1 	.word	0x080063a1
 8005b3c:	080063c3 	.word	0x080063c3
 8005b40:	080063fb 	.word	0x080063fb
 8005b44:	0800641f 	.word	0x0800641f

08005b48 <_cleanup_r>:
 8005b48:	4901      	ldr	r1, [pc, #4]	; (8005b50 <_cleanup_r+0x8>)
 8005b4a:	f000 b8af 	b.w	8005cac <_fwalk_reent>
 8005b4e:	bf00      	nop
 8005b50:	080066f9 	.word	0x080066f9

08005b54 <__sfmoreglue>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	1e4a      	subs	r2, r1, #1
 8005b58:	2568      	movs	r5, #104	; 0x68
 8005b5a:	4355      	muls	r5, r2
 8005b5c:	460e      	mov	r6, r1
 8005b5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b62:	f000 f8c5 	bl	8005cf0 <_malloc_r>
 8005b66:	4604      	mov	r4, r0
 8005b68:	b140      	cbz	r0, 8005b7c <__sfmoreglue+0x28>
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	e9c0 1600 	strd	r1, r6, [r0]
 8005b70:	300c      	adds	r0, #12
 8005b72:	60a0      	str	r0, [r4, #8]
 8005b74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b78:	f7ff ffa2 	bl	8005ac0 <memset>
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}

08005b80 <__sfp_lock_acquire>:
 8005b80:	4801      	ldr	r0, [pc, #4]	; (8005b88 <__sfp_lock_acquire+0x8>)
 8005b82:	f000 b8b3 	b.w	8005cec <__retarget_lock_acquire_recursive>
 8005b86:	bf00      	nop
 8005b88:	200146e0 	.word	0x200146e0

08005b8c <__sfp_lock_release>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__sfp_lock_release+0x8>)
 8005b8e:	f000 b8ae 	b.w	8005cee <__retarget_lock_release_recursive>
 8005b92:	bf00      	nop
 8005b94:	200146e0 	.word	0x200146e0

08005b98 <__sinit_lock_acquire>:
 8005b98:	4801      	ldr	r0, [pc, #4]	; (8005ba0 <__sinit_lock_acquire+0x8>)
 8005b9a:	f000 b8a7 	b.w	8005cec <__retarget_lock_acquire_recursive>
 8005b9e:	bf00      	nop
 8005ba0:	200146db 	.word	0x200146db

08005ba4 <__sinit_lock_release>:
 8005ba4:	4801      	ldr	r0, [pc, #4]	; (8005bac <__sinit_lock_release+0x8>)
 8005ba6:	f000 b8a2 	b.w	8005cee <__retarget_lock_release_recursive>
 8005baa:	bf00      	nop
 8005bac:	200146db 	.word	0x200146db

08005bb0 <__sinit>:
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	f7ff fff0 	bl	8005b98 <__sinit_lock_acquire>
 8005bb8:	69a3      	ldr	r3, [r4, #24]
 8005bba:	b11b      	cbz	r3, 8005bc4 <__sinit+0x14>
 8005bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc0:	f7ff bff0 	b.w	8005ba4 <__sinit_lock_release>
 8005bc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005bc8:	6523      	str	r3, [r4, #80]	; 0x50
 8005bca:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <__sinit+0x68>)
 8005bcc:	4a13      	ldr	r2, [pc, #76]	; (8005c1c <__sinit+0x6c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005bd2:	42a3      	cmp	r3, r4
 8005bd4:	bf04      	itt	eq
 8005bd6:	2301      	moveq	r3, #1
 8005bd8:	61a3      	streq	r3, [r4, #24]
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f000 f820 	bl	8005c20 <__sfp>
 8005be0:	6060      	str	r0, [r4, #4]
 8005be2:	4620      	mov	r0, r4
 8005be4:	f000 f81c 	bl	8005c20 <__sfp>
 8005be8:	60a0      	str	r0, [r4, #8]
 8005bea:	4620      	mov	r0, r4
 8005bec:	f000 f818 	bl	8005c20 <__sfp>
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	60e0      	str	r0, [r4, #12]
 8005bf4:	2104      	movs	r1, #4
 8005bf6:	6860      	ldr	r0, [r4, #4]
 8005bf8:	f7ff ff82 	bl	8005b00 <std>
 8005bfc:	68a0      	ldr	r0, [r4, #8]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	2109      	movs	r1, #9
 8005c02:	f7ff ff7d 	bl	8005b00 <std>
 8005c06:	68e0      	ldr	r0, [r4, #12]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	2112      	movs	r1, #18
 8005c0c:	f7ff ff78 	bl	8005b00 <std>
 8005c10:	2301      	movs	r3, #1
 8005c12:	61a3      	str	r3, [r4, #24]
 8005c14:	e7d2      	b.n	8005bbc <__sinit+0xc>
 8005c16:	bf00      	nop
 8005c18:	0801a2f0 	.word	0x0801a2f0
 8005c1c:	08005b49 	.word	0x08005b49

08005c20 <__sfp>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	4607      	mov	r7, r0
 8005c24:	f7ff ffac 	bl	8005b80 <__sfp_lock_acquire>
 8005c28:	4b1e      	ldr	r3, [pc, #120]	; (8005ca4 <__sfp+0x84>)
 8005c2a:	681e      	ldr	r6, [r3, #0]
 8005c2c:	69b3      	ldr	r3, [r6, #24]
 8005c2e:	b913      	cbnz	r3, 8005c36 <__sfp+0x16>
 8005c30:	4630      	mov	r0, r6
 8005c32:	f7ff ffbd 	bl	8005bb0 <__sinit>
 8005c36:	3648      	adds	r6, #72	; 0x48
 8005c38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	d503      	bpl.n	8005c48 <__sfp+0x28>
 8005c40:	6833      	ldr	r3, [r6, #0]
 8005c42:	b30b      	cbz	r3, 8005c88 <__sfp+0x68>
 8005c44:	6836      	ldr	r6, [r6, #0]
 8005c46:	e7f7      	b.n	8005c38 <__sfp+0x18>
 8005c48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c4c:	b9d5      	cbnz	r5, 8005c84 <__sfp+0x64>
 8005c4e:	4b16      	ldr	r3, [pc, #88]	; (8005ca8 <__sfp+0x88>)
 8005c50:	60e3      	str	r3, [r4, #12]
 8005c52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c56:	6665      	str	r5, [r4, #100]	; 0x64
 8005c58:	f000 f847 	bl	8005cea <__retarget_lock_init_recursive>
 8005c5c:	f7ff ff96 	bl	8005b8c <__sfp_lock_release>
 8005c60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c68:	6025      	str	r5, [r4, #0]
 8005c6a:	61a5      	str	r5, [r4, #24]
 8005c6c:	2208      	movs	r2, #8
 8005c6e:	4629      	mov	r1, r5
 8005c70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c74:	f7ff ff24 	bl	8005ac0 <memset>
 8005c78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c80:	4620      	mov	r0, r4
 8005c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c84:	3468      	adds	r4, #104	; 0x68
 8005c86:	e7d9      	b.n	8005c3c <__sfp+0x1c>
 8005c88:	2104      	movs	r1, #4
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	f7ff ff62 	bl	8005b54 <__sfmoreglue>
 8005c90:	4604      	mov	r4, r0
 8005c92:	6030      	str	r0, [r6, #0]
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d1d5      	bne.n	8005c44 <__sfp+0x24>
 8005c98:	f7ff ff78 	bl	8005b8c <__sfp_lock_release>
 8005c9c:	230c      	movs	r3, #12
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	e7ee      	b.n	8005c80 <__sfp+0x60>
 8005ca2:	bf00      	nop
 8005ca4:	0801a2f0 	.word	0x0801a2f0
 8005ca8:	ffff0001 	.word	0xffff0001

08005cac <_fwalk_reent>:
 8005cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb0:	4606      	mov	r6, r0
 8005cb2:	4688      	mov	r8, r1
 8005cb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005cb8:	2700      	movs	r7, #0
 8005cba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cbe:	f1b9 0901 	subs.w	r9, r9, #1
 8005cc2:	d505      	bpl.n	8005cd0 <_fwalk_reent+0x24>
 8005cc4:	6824      	ldr	r4, [r4, #0]
 8005cc6:	2c00      	cmp	r4, #0
 8005cc8:	d1f7      	bne.n	8005cba <_fwalk_reent+0xe>
 8005cca:	4638      	mov	r0, r7
 8005ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cd0:	89ab      	ldrh	r3, [r5, #12]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d907      	bls.n	8005ce6 <_fwalk_reent+0x3a>
 8005cd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	d003      	beq.n	8005ce6 <_fwalk_reent+0x3a>
 8005cde:	4629      	mov	r1, r5
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	47c0      	blx	r8
 8005ce4:	4307      	orrs	r7, r0
 8005ce6:	3568      	adds	r5, #104	; 0x68
 8005ce8:	e7e9      	b.n	8005cbe <_fwalk_reent+0x12>

08005cea <__retarget_lock_init_recursive>:
 8005cea:	4770      	bx	lr

08005cec <__retarget_lock_acquire_recursive>:
 8005cec:	4770      	bx	lr

08005cee <__retarget_lock_release_recursive>:
 8005cee:	4770      	bx	lr

08005cf0 <_malloc_r>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	1ccd      	adds	r5, r1, #3
 8005cf4:	f025 0503 	bic.w	r5, r5, #3
 8005cf8:	3508      	adds	r5, #8
 8005cfa:	2d0c      	cmp	r5, #12
 8005cfc:	bf38      	it	cc
 8005cfe:	250c      	movcc	r5, #12
 8005d00:	2d00      	cmp	r5, #0
 8005d02:	4606      	mov	r6, r0
 8005d04:	db01      	blt.n	8005d0a <_malloc_r+0x1a>
 8005d06:	42a9      	cmp	r1, r5
 8005d08:	d903      	bls.n	8005d12 <_malloc_r+0x22>
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	6033      	str	r3, [r6, #0]
 8005d0e:	2000      	movs	r0, #0
 8005d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d12:	f000 fda3 	bl	800685c <__malloc_lock>
 8005d16:	4921      	ldr	r1, [pc, #132]	; (8005d9c <_malloc_r+0xac>)
 8005d18:	680a      	ldr	r2, [r1, #0]
 8005d1a:	4614      	mov	r4, r2
 8005d1c:	b99c      	cbnz	r4, 8005d46 <_malloc_r+0x56>
 8005d1e:	4f20      	ldr	r7, [pc, #128]	; (8005da0 <_malloc_r+0xb0>)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	b923      	cbnz	r3, 8005d2e <_malloc_r+0x3e>
 8005d24:	4621      	mov	r1, r4
 8005d26:	4630      	mov	r0, r6
 8005d28:	f000 fb2a 	bl	8006380 <_sbrk_r>
 8005d2c:	6038      	str	r0, [r7, #0]
 8005d2e:	4629      	mov	r1, r5
 8005d30:	4630      	mov	r0, r6
 8005d32:	f000 fb25 	bl	8006380 <_sbrk_r>
 8005d36:	1c43      	adds	r3, r0, #1
 8005d38:	d123      	bne.n	8005d82 <_malloc_r+0x92>
 8005d3a:	230c      	movs	r3, #12
 8005d3c:	6033      	str	r3, [r6, #0]
 8005d3e:	4630      	mov	r0, r6
 8005d40:	f000 fd92 	bl	8006868 <__malloc_unlock>
 8005d44:	e7e3      	b.n	8005d0e <_malloc_r+0x1e>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	1b5b      	subs	r3, r3, r5
 8005d4a:	d417      	bmi.n	8005d7c <_malloc_r+0x8c>
 8005d4c:	2b0b      	cmp	r3, #11
 8005d4e:	d903      	bls.n	8005d58 <_malloc_r+0x68>
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	441c      	add	r4, r3
 8005d54:	6025      	str	r5, [r4, #0]
 8005d56:	e004      	b.n	8005d62 <_malloc_r+0x72>
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	42a2      	cmp	r2, r4
 8005d5c:	bf0c      	ite	eq
 8005d5e:	600b      	streq	r3, [r1, #0]
 8005d60:	6053      	strne	r3, [r2, #4]
 8005d62:	4630      	mov	r0, r6
 8005d64:	f000 fd80 	bl	8006868 <__malloc_unlock>
 8005d68:	f104 000b 	add.w	r0, r4, #11
 8005d6c:	1d23      	adds	r3, r4, #4
 8005d6e:	f020 0007 	bic.w	r0, r0, #7
 8005d72:	1ac2      	subs	r2, r0, r3
 8005d74:	d0cc      	beq.n	8005d10 <_malloc_r+0x20>
 8005d76:	1a1b      	subs	r3, r3, r0
 8005d78:	50a3      	str	r3, [r4, r2]
 8005d7a:	e7c9      	b.n	8005d10 <_malloc_r+0x20>
 8005d7c:	4622      	mov	r2, r4
 8005d7e:	6864      	ldr	r4, [r4, #4]
 8005d80:	e7cc      	b.n	8005d1c <_malloc_r+0x2c>
 8005d82:	1cc4      	adds	r4, r0, #3
 8005d84:	f024 0403 	bic.w	r4, r4, #3
 8005d88:	42a0      	cmp	r0, r4
 8005d8a:	d0e3      	beq.n	8005d54 <_malloc_r+0x64>
 8005d8c:	1a21      	subs	r1, r4, r0
 8005d8e:	4630      	mov	r0, r6
 8005d90:	f000 faf6 	bl	8006380 <_sbrk_r>
 8005d94:	3001      	adds	r0, #1
 8005d96:	d1dd      	bne.n	8005d54 <_malloc_r+0x64>
 8005d98:	e7cf      	b.n	8005d3a <_malloc_r+0x4a>
 8005d9a:	bf00      	nop
 8005d9c:	200004ac 	.word	0x200004ac
 8005da0:	200004b0 	.word	0x200004b0

08005da4 <__sfputc_r>:
 8005da4:	6893      	ldr	r3, [r2, #8]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	b410      	push	{r4}
 8005dac:	6093      	str	r3, [r2, #8]
 8005dae:	da08      	bge.n	8005dc2 <__sfputc_r+0x1e>
 8005db0:	6994      	ldr	r4, [r2, #24]
 8005db2:	42a3      	cmp	r3, r4
 8005db4:	db01      	blt.n	8005dba <__sfputc_r+0x16>
 8005db6:	290a      	cmp	r1, #10
 8005db8:	d103      	bne.n	8005dc2 <__sfputc_r+0x1e>
 8005dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dbe:	f000 bb33 	b.w	8006428 <__swbuf_r>
 8005dc2:	6813      	ldr	r3, [r2, #0]
 8005dc4:	1c58      	adds	r0, r3, #1
 8005dc6:	6010      	str	r0, [r2, #0]
 8005dc8:	7019      	strb	r1, [r3, #0]
 8005dca:	4608      	mov	r0, r1
 8005dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <__sfputs_r>:
 8005dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	460f      	mov	r7, r1
 8005dd8:	4614      	mov	r4, r2
 8005dda:	18d5      	adds	r5, r2, r3
 8005ddc:	42ac      	cmp	r4, r5
 8005dde:	d101      	bne.n	8005de4 <__sfputs_r+0x12>
 8005de0:	2000      	movs	r0, #0
 8005de2:	e007      	b.n	8005df4 <__sfputs_r+0x22>
 8005de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005de8:	463a      	mov	r2, r7
 8005dea:	4630      	mov	r0, r6
 8005dec:	f7ff ffda 	bl	8005da4 <__sfputc_r>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d1f3      	bne.n	8005ddc <__sfputs_r+0xa>
 8005df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005df8 <_vfiprintf_r>:
 8005df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfc:	460d      	mov	r5, r1
 8005dfe:	b09d      	sub	sp, #116	; 0x74
 8005e00:	4614      	mov	r4, r2
 8005e02:	4698      	mov	r8, r3
 8005e04:	4606      	mov	r6, r0
 8005e06:	b118      	cbz	r0, 8005e10 <_vfiprintf_r+0x18>
 8005e08:	6983      	ldr	r3, [r0, #24]
 8005e0a:	b90b      	cbnz	r3, 8005e10 <_vfiprintf_r+0x18>
 8005e0c:	f7ff fed0 	bl	8005bb0 <__sinit>
 8005e10:	4b89      	ldr	r3, [pc, #548]	; (8006038 <_vfiprintf_r+0x240>)
 8005e12:	429d      	cmp	r5, r3
 8005e14:	d11b      	bne.n	8005e4e <_vfiprintf_r+0x56>
 8005e16:	6875      	ldr	r5, [r6, #4]
 8005e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e1a:	07d9      	lsls	r1, r3, #31
 8005e1c:	d405      	bmi.n	8005e2a <_vfiprintf_r+0x32>
 8005e1e:	89ab      	ldrh	r3, [r5, #12]
 8005e20:	059a      	lsls	r2, r3, #22
 8005e22:	d402      	bmi.n	8005e2a <_vfiprintf_r+0x32>
 8005e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e26:	f7ff ff61 	bl	8005cec <__retarget_lock_acquire_recursive>
 8005e2a:	89ab      	ldrh	r3, [r5, #12]
 8005e2c:	071b      	lsls	r3, r3, #28
 8005e2e:	d501      	bpl.n	8005e34 <_vfiprintf_r+0x3c>
 8005e30:	692b      	ldr	r3, [r5, #16]
 8005e32:	b9eb      	cbnz	r3, 8005e70 <_vfiprintf_r+0x78>
 8005e34:	4629      	mov	r1, r5
 8005e36:	4630      	mov	r0, r6
 8005e38:	f000 fb5a 	bl	80064f0 <__swsetup_r>
 8005e3c:	b1c0      	cbz	r0, 8005e70 <_vfiprintf_r+0x78>
 8005e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e40:	07dc      	lsls	r4, r3, #31
 8005e42:	d50e      	bpl.n	8005e62 <_vfiprintf_r+0x6a>
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e48:	b01d      	add	sp, #116	; 0x74
 8005e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4e:	4b7b      	ldr	r3, [pc, #492]	; (800603c <_vfiprintf_r+0x244>)
 8005e50:	429d      	cmp	r5, r3
 8005e52:	d101      	bne.n	8005e58 <_vfiprintf_r+0x60>
 8005e54:	68b5      	ldr	r5, [r6, #8]
 8005e56:	e7df      	b.n	8005e18 <_vfiprintf_r+0x20>
 8005e58:	4b79      	ldr	r3, [pc, #484]	; (8006040 <_vfiprintf_r+0x248>)
 8005e5a:	429d      	cmp	r5, r3
 8005e5c:	bf08      	it	eq
 8005e5e:	68f5      	ldreq	r5, [r6, #12]
 8005e60:	e7da      	b.n	8005e18 <_vfiprintf_r+0x20>
 8005e62:	89ab      	ldrh	r3, [r5, #12]
 8005e64:	0598      	lsls	r0, r3, #22
 8005e66:	d4ed      	bmi.n	8005e44 <_vfiprintf_r+0x4c>
 8005e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e6a:	f7ff ff40 	bl	8005cee <__retarget_lock_release_recursive>
 8005e6e:	e7e9      	b.n	8005e44 <_vfiprintf_r+0x4c>
 8005e70:	2300      	movs	r3, #0
 8005e72:	9309      	str	r3, [sp, #36]	; 0x24
 8005e74:	2320      	movs	r3, #32
 8005e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e7e:	2330      	movs	r3, #48	; 0x30
 8005e80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006044 <_vfiprintf_r+0x24c>
 8005e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e88:	f04f 0901 	mov.w	r9, #1
 8005e8c:	4623      	mov	r3, r4
 8005e8e:	469a      	mov	sl, r3
 8005e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e94:	b10a      	cbz	r2, 8005e9a <_vfiprintf_r+0xa2>
 8005e96:	2a25      	cmp	r2, #37	; 0x25
 8005e98:	d1f9      	bne.n	8005e8e <_vfiprintf_r+0x96>
 8005e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e9e:	d00b      	beq.n	8005eb8 <_vfiprintf_r+0xc0>
 8005ea0:	465b      	mov	r3, fp
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f7ff ff93 	bl	8005dd2 <__sfputs_r>
 8005eac:	3001      	adds	r0, #1
 8005eae:	f000 80aa 	beq.w	8006006 <_vfiprintf_r+0x20e>
 8005eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eb4:	445a      	add	r2, fp
 8005eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8005eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 80a2 	beq.w	8006006 <_vfiprintf_r+0x20e>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ecc:	f10a 0a01 	add.w	sl, sl, #1
 8005ed0:	9304      	str	r3, [sp, #16]
 8005ed2:	9307      	str	r3, [sp, #28]
 8005ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ed8:	931a      	str	r3, [sp, #104]	; 0x68
 8005eda:	4654      	mov	r4, sl
 8005edc:	2205      	movs	r2, #5
 8005ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee2:	4858      	ldr	r0, [pc, #352]	; (8006044 <_vfiprintf_r+0x24c>)
 8005ee4:	f7fa f9d4 	bl	8000290 <memchr>
 8005ee8:	9a04      	ldr	r2, [sp, #16]
 8005eea:	b9d8      	cbnz	r0, 8005f24 <_vfiprintf_r+0x12c>
 8005eec:	06d1      	lsls	r1, r2, #27
 8005eee:	bf44      	itt	mi
 8005ef0:	2320      	movmi	r3, #32
 8005ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ef6:	0713      	lsls	r3, r2, #28
 8005ef8:	bf44      	itt	mi
 8005efa:	232b      	movmi	r3, #43	; 0x2b
 8005efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f00:	f89a 3000 	ldrb.w	r3, [sl]
 8005f04:	2b2a      	cmp	r3, #42	; 0x2a
 8005f06:	d015      	beq.n	8005f34 <_vfiprintf_r+0x13c>
 8005f08:	9a07      	ldr	r2, [sp, #28]
 8005f0a:	4654      	mov	r4, sl
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	f04f 0c0a 	mov.w	ip, #10
 8005f12:	4621      	mov	r1, r4
 8005f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f18:	3b30      	subs	r3, #48	; 0x30
 8005f1a:	2b09      	cmp	r3, #9
 8005f1c:	d94e      	bls.n	8005fbc <_vfiprintf_r+0x1c4>
 8005f1e:	b1b0      	cbz	r0, 8005f4e <_vfiprintf_r+0x156>
 8005f20:	9207      	str	r2, [sp, #28]
 8005f22:	e014      	b.n	8005f4e <_vfiprintf_r+0x156>
 8005f24:	eba0 0308 	sub.w	r3, r0, r8
 8005f28:	fa09 f303 	lsl.w	r3, r9, r3
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	9304      	str	r3, [sp, #16]
 8005f30:	46a2      	mov	sl, r4
 8005f32:	e7d2      	b.n	8005eda <_vfiprintf_r+0xe2>
 8005f34:	9b03      	ldr	r3, [sp, #12]
 8005f36:	1d19      	adds	r1, r3, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	9103      	str	r1, [sp, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bfbb      	ittet	lt
 8005f40:	425b      	neglt	r3, r3
 8005f42:	f042 0202 	orrlt.w	r2, r2, #2
 8005f46:	9307      	strge	r3, [sp, #28]
 8005f48:	9307      	strlt	r3, [sp, #28]
 8005f4a:	bfb8      	it	lt
 8005f4c:	9204      	strlt	r2, [sp, #16]
 8005f4e:	7823      	ldrb	r3, [r4, #0]
 8005f50:	2b2e      	cmp	r3, #46	; 0x2e
 8005f52:	d10c      	bne.n	8005f6e <_vfiprintf_r+0x176>
 8005f54:	7863      	ldrb	r3, [r4, #1]
 8005f56:	2b2a      	cmp	r3, #42	; 0x2a
 8005f58:	d135      	bne.n	8005fc6 <_vfiprintf_r+0x1ce>
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	1d1a      	adds	r2, r3, #4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	9203      	str	r2, [sp, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bfb8      	it	lt
 8005f66:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f6a:	3402      	adds	r4, #2
 8005f6c:	9305      	str	r3, [sp, #20]
 8005f6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006054 <_vfiprintf_r+0x25c>
 8005f72:	7821      	ldrb	r1, [r4, #0]
 8005f74:	2203      	movs	r2, #3
 8005f76:	4650      	mov	r0, sl
 8005f78:	f7fa f98a 	bl	8000290 <memchr>
 8005f7c:	b140      	cbz	r0, 8005f90 <_vfiprintf_r+0x198>
 8005f7e:	2340      	movs	r3, #64	; 0x40
 8005f80:	eba0 000a 	sub.w	r0, r0, sl
 8005f84:	fa03 f000 	lsl.w	r0, r3, r0
 8005f88:	9b04      	ldr	r3, [sp, #16]
 8005f8a:	4303      	orrs	r3, r0
 8005f8c:	3401      	adds	r4, #1
 8005f8e:	9304      	str	r3, [sp, #16]
 8005f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f94:	482c      	ldr	r0, [pc, #176]	; (8006048 <_vfiprintf_r+0x250>)
 8005f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f9a:	2206      	movs	r2, #6
 8005f9c:	f7fa f978 	bl	8000290 <memchr>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d03f      	beq.n	8006024 <_vfiprintf_r+0x22c>
 8005fa4:	4b29      	ldr	r3, [pc, #164]	; (800604c <_vfiprintf_r+0x254>)
 8005fa6:	bb1b      	cbnz	r3, 8005ff0 <_vfiprintf_r+0x1f8>
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	3307      	adds	r3, #7
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	9303      	str	r3, [sp, #12]
 8005fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb6:	443b      	add	r3, r7
 8005fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fba:	e767      	b.n	8005e8c <_vfiprintf_r+0x94>
 8005fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	e7a5      	b.n	8005f12 <_vfiprintf_r+0x11a>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	3401      	adds	r4, #1
 8005fca:	9305      	str	r3, [sp, #20]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	f04f 0c0a 	mov.w	ip, #10
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd8:	3a30      	subs	r2, #48	; 0x30
 8005fda:	2a09      	cmp	r2, #9
 8005fdc:	d903      	bls.n	8005fe6 <_vfiprintf_r+0x1ee>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0c5      	beq.n	8005f6e <_vfiprintf_r+0x176>
 8005fe2:	9105      	str	r1, [sp, #20]
 8005fe4:	e7c3      	b.n	8005f6e <_vfiprintf_r+0x176>
 8005fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fea:	4604      	mov	r4, r0
 8005fec:	2301      	movs	r3, #1
 8005fee:	e7f0      	b.n	8005fd2 <_vfiprintf_r+0x1da>
 8005ff0:	ab03      	add	r3, sp, #12
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	4b16      	ldr	r3, [pc, #88]	; (8006050 <_vfiprintf_r+0x258>)
 8005ff8:	a904      	add	r1, sp, #16
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f3af 8000 	nop.w
 8006000:	4607      	mov	r7, r0
 8006002:	1c78      	adds	r0, r7, #1
 8006004:	d1d6      	bne.n	8005fb4 <_vfiprintf_r+0x1bc>
 8006006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006008:	07d9      	lsls	r1, r3, #31
 800600a:	d405      	bmi.n	8006018 <_vfiprintf_r+0x220>
 800600c:	89ab      	ldrh	r3, [r5, #12]
 800600e:	059a      	lsls	r2, r3, #22
 8006010:	d402      	bmi.n	8006018 <_vfiprintf_r+0x220>
 8006012:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006014:	f7ff fe6b 	bl	8005cee <__retarget_lock_release_recursive>
 8006018:	89ab      	ldrh	r3, [r5, #12]
 800601a:	065b      	lsls	r3, r3, #25
 800601c:	f53f af12 	bmi.w	8005e44 <_vfiprintf_r+0x4c>
 8006020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006022:	e711      	b.n	8005e48 <_vfiprintf_r+0x50>
 8006024:	ab03      	add	r3, sp, #12
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	462a      	mov	r2, r5
 800602a:	4b09      	ldr	r3, [pc, #36]	; (8006050 <_vfiprintf_r+0x258>)
 800602c:	a904      	add	r1, sp, #16
 800602e:	4630      	mov	r0, r6
 8006030:	f000 f880 	bl	8006134 <_printf_i>
 8006034:	e7e4      	b.n	8006000 <_vfiprintf_r+0x208>
 8006036:	bf00      	nop
 8006038:	0801a314 	.word	0x0801a314
 800603c:	0801a334 	.word	0x0801a334
 8006040:	0801a2f4 	.word	0x0801a2f4
 8006044:	0801a354 	.word	0x0801a354
 8006048:	0801a35e 	.word	0x0801a35e
 800604c:	00000000 	.word	0x00000000
 8006050:	08005dd3 	.word	0x08005dd3
 8006054:	0801a35a 	.word	0x0801a35a

08006058 <_printf_common>:
 8006058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	4616      	mov	r6, r2
 800605e:	4699      	mov	r9, r3
 8006060:	688a      	ldr	r2, [r1, #8]
 8006062:	690b      	ldr	r3, [r1, #16]
 8006064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006068:	4293      	cmp	r3, r2
 800606a:	bfb8      	it	lt
 800606c:	4613      	movlt	r3, r2
 800606e:	6033      	str	r3, [r6, #0]
 8006070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006074:	4607      	mov	r7, r0
 8006076:	460c      	mov	r4, r1
 8006078:	b10a      	cbz	r2, 800607e <_printf_common+0x26>
 800607a:	3301      	adds	r3, #1
 800607c:	6033      	str	r3, [r6, #0]
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	0699      	lsls	r1, r3, #26
 8006082:	bf42      	ittt	mi
 8006084:	6833      	ldrmi	r3, [r6, #0]
 8006086:	3302      	addmi	r3, #2
 8006088:	6033      	strmi	r3, [r6, #0]
 800608a:	6825      	ldr	r5, [r4, #0]
 800608c:	f015 0506 	ands.w	r5, r5, #6
 8006090:	d106      	bne.n	80060a0 <_printf_common+0x48>
 8006092:	f104 0a19 	add.w	sl, r4, #25
 8006096:	68e3      	ldr	r3, [r4, #12]
 8006098:	6832      	ldr	r2, [r6, #0]
 800609a:	1a9b      	subs	r3, r3, r2
 800609c:	42ab      	cmp	r3, r5
 800609e:	dc26      	bgt.n	80060ee <_printf_common+0x96>
 80060a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060a4:	1e13      	subs	r3, r2, #0
 80060a6:	6822      	ldr	r2, [r4, #0]
 80060a8:	bf18      	it	ne
 80060aa:	2301      	movne	r3, #1
 80060ac:	0692      	lsls	r2, r2, #26
 80060ae:	d42b      	bmi.n	8006108 <_printf_common+0xb0>
 80060b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060b4:	4649      	mov	r1, r9
 80060b6:	4638      	mov	r0, r7
 80060b8:	47c0      	blx	r8
 80060ba:	3001      	adds	r0, #1
 80060bc:	d01e      	beq.n	80060fc <_printf_common+0xa4>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	68e5      	ldr	r5, [r4, #12]
 80060c2:	6832      	ldr	r2, [r6, #0]
 80060c4:	f003 0306 	and.w	r3, r3, #6
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	bf08      	it	eq
 80060cc:	1aad      	subeq	r5, r5, r2
 80060ce:	68a3      	ldr	r3, [r4, #8]
 80060d0:	6922      	ldr	r2, [r4, #16]
 80060d2:	bf0c      	ite	eq
 80060d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d8:	2500      	movne	r5, #0
 80060da:	4293      	cmp	r3, r2
 80060dc:	bfc4      	itt	gt
 80060de:	1a9b      	subgt	r3, r3, r2
 80060e0:	18ed      	addgt	r5, r5, r3
 80060e2:	2600      	movs	r6, #0
 80060e4:	341a      	adds	r4, #26
 80060e6:	42b5      	cmp	r5, r6
 80060e8:	d11a      	bne.n	8006120 <_printf_common+0xc8>
 80060ea:	2000      	movs	r0, #0
 80060ec:	e008      	b.n	8006100 <_printf_common+0xa8>
 80060ee:	2301      	movs	r3, #1
 80060f0:	4652      	mov	r2, sl
 80060f2:	4649      	mov	r1, r9
 80060f4:	4638      	mov	r0, r7
 80060f6:	47c0      	blx	r8
 80060f8:	3001      	adds	r0, #1
 80060fa:	d103      	bne.n	8006104 <_printf_common+0xac>
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006104:	3501      	adds	r5, #1
 8006106:	e7c6      	b.n	8006096 <_printf_common+0x3e>
 8006108:	18e1      	adds	r1, r4, r3
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	2030      	movs	r0, #48	; 0x30
 800610e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006112:	4422      	add	r2, r4
 8006114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006118:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800611c:	3302      	adds	r3, #2
 800611e:	e7c7      	b.n	80060b0 <_printf_common+0x58>
 8006120:	2301      	movs	r3, #1
 8006122:	4622      	mov	r2, r4
 8006124:	4649      	mov	r1, r9
 8006126:	4638      	mov	r0, r7
 8006128:	47c0      	blx	r8
 800612a:	3001      	adds	r0, #1
 800612c:	d0e6      	beq.n	80060fc <_printf_common+0xa4>
 800612e:	3601      	adds	r6, #1
 8006130:	e7d9      	b.n	80060e6 <_printf_common+0x8e>
	...

08006134 <_printf_i>:
 8006134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006138:	460c      	mov	r4, r1
 800613a:	4691      	mov	r9, r2
 800613c:	7e27      	ldrb	r7, [r4, #24]
 800613e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006140:	2f78      	cmp	r7, #120	; 0x78
 8006142:	4680      	mov	r8, r0
 8006144:	469a      	mov	sl, r3
 8006146:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800614a:	d807      	bhi.n	800615c <_printf_i+0x28>
 800614c:	2f62      	cmp	r7, #98	; 0x62
 800614e:	d80a      	bhi.n	8006166 <_printf_i+0x32>
 8006150:	2f00      	cmp	r7, #0
 8006152:	f000 80d8 	beq.w	8006306 <_printf_i+0x1d2>
 8006156:	2f58      	cmp	r7, #88	; 0x58
 8006158:	f000 80a3 	beq.w	80062a2 <_printf_i+0x16e>
 800615c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006164:	e03a      	b.n	80061dc <_printf_i+0xa8>
 8006166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800616a:	2b15      	cmp	r3, #21
 800616c:	d8f6      	bhi.n	800615c <_printf_i+0x28>
 800616e:	a001      	add	r0, pc, #4	; (adr r0, 8006174 <_printf_i+0x40>)
 8006170:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006174:	080061cd 	.word	0x080061cd
 8006178:	080061e1 	.word	0x080061e1
 800617c:	0800615d 	.word	0x0800615d
 8006180:	0800615d 	.word	0x0800615d
 8006184:	0800615d 	.word	0x0800615d
 8006188:	0800615d 	.word	0x0800615d
 800618c:	080061e1 	.word	0x080061e1
 8006190:	0800615d 	.word	0x0800615d
 8006194:	0800615d 	.word	0x0800615d
 8006198:	0800615d 	.word	0x0800615d
 800619c:	0800615d 	.word	0x0800615d
 80061a0:	080062ed 	.word	0x080062ed
 80061a4:	08006211 	.word	0x08006211
 80061a8:	080062cf 	.word	0x080062cf
 80061ac:	0800615d 	.word	0x0800615d
 80061b0:	0800615d 	.word	0x0800615d
 80061b4:	0800630f 	.word	0x0800630f
 80061b8:	0800615d 	.word	0x0800615d
 80061bc:	08006211 	.word	0x08006211
 80061c0:	0800615d 	.word	0x0800615d
 80061c4:	0800615d 	.word	0x0800615d
 80061c8:	080062d7 	.word	0x080062d7
 80061cc:	680b      	ldr	r3, [r1, #0]
 80061ce:	1d1a      	adds	r2, r3, #4
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	600a      	str	r2, [r1, #0]
 80061d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061dc:	2301      	movs	r3, #1
 80061de:	e0a3      	b.n	8006328 <_printf_i+0x1f4>
 80061e0:	6825      	ldr	r5, [r4, #0]
 80061e2:	6808      	ldr	r0, [r1, #0]
 80061e4:	062e      	lsls	r6, r5, #24
 80061e6:	f100 0304 	add.w	r3, r0, #4
 80061ea:	d50a      	bpl.n	8006202 <_printf_i+0xce>
 80061ec:	6805      	ldr	r5, [r0, #0]
 80061ee:	600b      	str	r3, [r1, #0]
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	da03      	bge.n	80061fc <_printf_i+0xc8>
 80061f4:	232d      	movs	r3, #45	; 0x2d
 80061f6:	426d      	negs	r5, r5
 80061f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061fc:	485e      	ldr	r0, [pc, #376]	; (8006378 <_printf_i+0x244>)
 80061fe:	230a      	movs	r3, #10
 8006200:	e019      	b.n	8006236 <_printf_i+0x102>
 8006202:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006206:	6805      	ldr	r5, [r0, #0]
 8006208:	600b      	str	r3, [r1, #0]
 800620a:	bf18      	it	ne
 800620c:	b22d      	sxthne	r5, r5
 800620e:	e7ef      	b.n	80061f0 <_printf_i+0xbc>
 8006210:	680b      	ldr	r3, [r1, #0]
 8006212:	6825      	ldr	r5, [r4, #0]
 8006214:	1d18      	adds	r0, r3, #4
 8006216:	6008      	str	r0, [r1, #0]
 8006218:	0628      	lsls	r0, r5, #24
 800621a:	d501      	bpl.n	8006220 <_printf_i+0xec>
 800621c:	681d      	ldr	r5, [r3, #0]
 800621e:	e002      	b.n	8006226 <_printf_i+0xf2>
 8006220:	0669      	lsls	r1, r5, #25
 8006222:	d5fb      	bpl.n	800621c <_printf_i+0xe8>
 8006224:	881d      	ldrh	r5, [r3, #0]
 8006226:	4854      	ldr	r0, [pc, #336]	; (8006378 <_printf_i+0x244>)
 8006228:	2f6f      	cmp	r7, #111	; 0x6f
 800622a:	bf0c      	ite	eq
 800622c:	2308      	moveq	r3, #8
 800622e:	230a      	movne	r3, #10
 8006230:	2100      	movs	r1, #0
 8006232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006236:	6866      	ldr	r6, [r4, #4]
 8006238:	60a6      	str	r6, [r4, #8]
 800623a:	2e00      	cmp	r6, #0
 800623c:	bfa2      	ittt	ge
 800623e:	6821      	ldrge	r1, [r4, #0]
 8006240:	f021 0104 	bicge.w	r1, r1, #4
 8006244:	6021      	strge	r1, [r4, #0]
 8006246:	b90d      	cbnz	r5, 800624c <_printf_i+0x118>
 8006248:	2e00      	cmp	r6, #0
 800624a:	d04d      	beq.n	80062e8 <_printf_i+0x1b4>
 800624c:	4616      	mov	r6, r2
 800624e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006252:	fb03 5711 	mls	r7, r3, r1, r5
 8006256:	5dc7      	ldrb	r7, [r0, r7]
 8006258:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800625c:	462f      	mov	r7, r5
 800625e:	42bb      	cmp	r3, r7
 8006260:	460d      	mov	r5, r1
 8006262:	d9f4      	bls.n	800624e <_printf_i+0x11a>
 8006264:	2b08      	cmp	r3, #8
 8006266:	d10b      	bne.n	8006280 <_printf_i+0x14c>
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	07df      	lsls	r7, r3, #31
 800626c:	d508      	bpl.n	8006280 <_printf_i+0x14c>
 800626e:	6923      	ldr	r3, [r4, #16]
 8006270:	6861      	ldr	r1, [r4, #4]
 8006272:	4299      	cmp	r1, r3
 8006274:	bfde      	ittt	le
 8006276:	2330      	movle	r3, #48	; 0x30
 8006278:	f806 3c01 	strble.w	r3, [r6, #-1]
 800627c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006280:	1b92      	subs	r2, r2, r6
 8006282:	6122      	str	r2, [r4, #16]
 8006284:	f8cd a000 	str.w	sl, [sp]
 8006288:	464b      	mov	r3, r9
 800628a:	aa03      	add	r2, sp, #12
 800628c:	4621      	mov	r1, r4
 800628e:	4640      	mov	r0, r8
 8006290:	f7ff fee2 	bl	8006058 <_printf_common>
 8006294:	3001      	adds	r0, #1
 8006296:	d14c      	bne.n	8006332 <_printf_i+0x1fe>
 8006298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800629c:	b004      	add	sp, #16
 800629e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a2:	4835      	ldr	r0, [pc, #212]	; (8006378 <_printf_i+0x244>)
 80062a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	680e      	ldr	r6, [r1, #0]
 80062ac:	061f      	lsls	r7, r3, #24
 80062ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80062b2:	600e      	str	r6, [r1, #0]
 80062b4:	d514      	bpl.n	80062e0 <_printf_i+0x1ac>
 80062b6:	07d9      	lsls	r1, r3, #31
 80062b8:	bf44      	itt	mi
 80062ba:	f043 0320 	orrmi.w	r3, r3, #32
 80062be:	6023      	strmi	r3, [r4, #0]
 80062c0:	b91d      	cbnz	r5, 80062ca <_printf_i+0x196>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	f023 0320 	bic.w	r3, r3, #32
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	2310      	movs	r3, #16
 80062cc:	e7b0      	b.n	8006230 <_printf_i+0xfc>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	f043 0320 	orr.w	r3, r3, #32
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	2378      	movs	r3, #120	; 0x78
 80062d8:	4828      	ldr	r0, [pc, #160]	; (800637c <_printf_i+0x248>)
 80062da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062de:	e7e3      	b.n	80062a8 <_printf_i+0x174>
 80062e0:	065e      	lsls	r6, r3, #25
 80062e2:	bf48      	it	mi
 80062e4:	b2ad      	uxthmi	r5, r5
 80062e6:	e7e6      	b.n	80062b6 <_printf_i+0x182>
 80062e8:	4616      	mov	r6, r2
 80062ea:	e7bb      	b.n	8006264 <_printf_i+0x130>
 80062ec:	680b      	ldr	r3, [r1, #0]
 80062ee:	6826      	ldr	r6, [r4, #0]
 80062f0:	6960      	ldr	r0, [r4, #20]
 80062f2:	1d1d      	adds	r5, r3, #4
 80062f4:	600d      	str	r5, [r1, #0]
 80062f6:	0635      	lsls	r5, r6, #24
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	d501      	bpl.n	8006300 <_printf_i+0x1cc>
 80062fc:	6018      	str	r0, [r3, #0]
 80062fe:	e002      	b.n	8006306 <_printf_i+0x1d2>
 8006300:	0671      	lsls	r1, r6, #25
 8006302:	d5fb      	bpl.n	80062fc <_printf_i+0x1c8>
 8006304:	8018      	strh	r0, [r3, #0]
 8006306:	2300      	movs	r3, #0
 8006308:	6123      	str	r3, [r4, #16]
 800630a:	4616      	mov	r6, r2
 800630c:	e7ba      	b.n	8006284 <_printf_i+0x150>
 800630e:	680b      	ldr	r3, [r1, #0]
 8006310:	1d1a      	adds	r2, r3, #4
 8006312:	600a      	str	r2, [r1, #0]
 8006314:	681e      	ldr	r6, [r3, #0]
 8006316:	6862      	ldr	r2, [r4, #4]
 8006318:	2100      	movs	r1, #0
 800631a:	4630      	mov	r0, r6
 800631c:	f7f9 ffb8 	bl	8000290 <memchr>
 8006320:	b108      	cbz	r0, 8006326 <_printf_i+0x1f2>
 8006322:	1b80      	subs	r0, r0, r6
 8006324:	6060      	str	r0, [r4, #4]
 8006326:	6863      	ldr	r3, [r4, #4]
 8006328:	6123      	str	r3, [r4, #16]
 800632a:	2300      	movs	r3, #0
 800632c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006330:	e7a8      	b.n	8006284 <_printf_i+0x150>
 8006332:	6923      	ldr	r3, [r4, #16]
 8006334:	4632      	mov	r2, r6
 8006336:	4649      	mov	r1, r9
 8006338:	4640      	mov	r0, r8
 800633a:	47d0      	blx	sl
 800633c:	3001      	adds	r0, #1
 800633e:	d0ab      	beq.n	8006298 <_printf_i+0x164>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	079b      	lsls	r3, r3, #30
 8006344:	d413      	bmi.n	800636e <_printf_i+0x23a>
 8006346:	68e0      	ldr	r0, [r4, #12]
 8006348:	9b03      	ldr	r3, [sp, #12]
 800634a:	4298      	cmp	r0, r3
 800634c:	bfb8      	it	lt
 800634e:	4618      	movlt	r0, r3
 8006350:	e7a4      	b.n	800629c <_printf_i+0x168>
 8006352:	2301      	movs	r3, #1
 8006354:	4632      	mov	r2, r6
 8006356:	4649      	mov	r1, r9
 8006358:	4640      	mov	r0, r8
 800635a:	47d0      	blx	sl
 800635c:	3001      	adds	r0, #1
 800635e:	d09b      	beq.n	8006298 <_printf_i+0x164>
 8006360:	3501      	adds	r5, #1
 8006362:	68e3      	ldr	r3, [r4, #12]
 8006364:	9903      	ldr	r1, [sp, #12]
 8006366:	1a5b      	subs	r3, r3, r1
 8006368:	42ab      	cmp	r3, r5
 800636a:	dcf2      	bgt.n	8006352 <_printf_i+0x21e>
 800636c:	e7eb      	b.n	8006346 <_printf_i+0x212>
 800636e:	2500      	movs	r5, #0
 8006370:	f104 0619 	add.w	r6, r4, #25
 8006374:	e7f5      	b.n	8006362 <_printf_i+0x22e>
 8006376:	bf00      	nop
 8006378:	0801a365 	.word	0x0801a365
 800637c:	0801a376 	.word	0x0801a376

08006380 <_sbrk_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4d06      	ldr	r5, [pc, #24]	; (800639c <_sbrk_r+0x1c>)
 8006384:	2300      	movs	r3, #0
 8006386:	4604      	mov	r4, r0
 8006388:	4608      	mov	r0, r1
 800638a:	602b      	str	r3, [r5, #0]
 800638c:	f7fb fbb0 	bl	8001af0 <_sbrk>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d102      	bne.n	800639a <_sbrk_r+0x1a>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	b103      	cbz	r3, 800639a <_sbrk_r+0x1a>
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	200146e4 	.word	0x200146e4

080063a0 <__sread>:
 80063a0:	b510      	push	{r4, lr}
 80063a2:	460c      	mov	r4, r1
 80063a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a8:	f000 fab4 	bl	8006914 <_read_r>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	bfab      	itete	ge
 80063b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063b2:	89a3      	ldrhlt	r3, [r4, #12]
 80063b4:	181b      	addge	r3, r3, r0
 80063b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063ba:	bfac      	ite	ge
 80063bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80063be:	81a3      	strhlt	r3, [r4, #12]
 80063c0:	bd10      	pop	{r4, pc}

080063c2 <__swrite>:
 80063c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c6:	461f      	mov	r7, r3
 80063c8:	898b      	ldrh	r3, [r1, #12]
 80063ca:	05db      	lsls	r3, r3, #23
 80063cc:	4605      	mov	r5, r0
 80063ce:	460c      	mov	r4, r1
 80063d0:	4616      	mov	r6, r2
 80063d2:	d505      	bpl.n	80063e0 <__swrite+0x1e>
 80063d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d8:	2302      	movs	r3, #2
 80063da:	2200      	movs	r2, #0
 80063dc:	f000 f9c8 	bl	8006770 <_lseek_r>
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	4632      	mov	r2, r6
 80063ee:	463b      	mov	r3, r7
 80063f0:	4628      	mov	r0, r5
 80063f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063f6:	f000 b869 	b.w	80064cc <_write_r>

080063fa <__sseek>:
 80063fa:	b510      	push	{r4, lr}
 80063fc:	460c      	mov	r4, r1
 80063fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006402:	f000 f9b5 	bl	8006770 <_lseek_r>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	bf15      	itete	ne
 800640c:	6560      	strne	r0, [r4, #84]	; 0x54
 800640e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006416:	81a3      	strheq	r3, [r4, #12]
 8006418:	bf18      	it	ne
 800641a:	81a3      	strhne	r3, [r4, #12]
 800641c:	bd10      	pop	{r4, pc}

0800641e <__sclose>:
 800641e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006422:	f000 b8d3 	b.w	80065cc <_close_r>
	...

08006428 <__swbuf_r>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	460e      	mov	r6, r1
 800642c:	4614      	mov	r4, r2
 800642e:	4605      	mov	r5, r0
 8006430:	b118      	cbz	r0, 800643a <__swbuf_r+0x12>
 8006432:	6983      	ldr	r3, [r0, #24]
 8006434:	b90b      	cbnz	r3, 800643a <__swbuf_r+0x12>
 8006436:	f7ff fbbb 	bl	8005bb0 <__sinit>
 800643a:	4b21      	ldr	r3, [pc, #132]	; (80064c0 <__swbuf_r+0x98>)
 800643c:	429c      	cmp	r4, r3
 800643e:	d12b      	bne.n	8006498 <__swbuf_r+0x70>
 8006440:	686c      	ldr	r4, [r5, #4]
 8006442:	69a3      	ldr	r3, [r4, #24]
 8006444:	60a3      	str	r3, [r4, #8]
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	071a      	lsls	r2, r3, #28
 800644a:	d52f      	bpl.n	80064ac <__swbuf_r+0x84>
 800644c:	6923      	ldr	r3, [r4, #16]
 800644e:	b36b      	cbz	r3, 80064ac <__swbuf_r+0x84>
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	6820      	ldr	r0, [r4, #0]
 8006454:	1ac0      	subs	r0, r0, r3
 8006456:	6963      	ldr	r3, [r4, #20]
 8006458:	b2f6      	uxtb	r6, r6
 800645a:	4283      	cmp	r3, r0
 800645c:	4637      	mov	r7, r6
 800645e:	dc04      	bgt.n	800646a <__swbuf_r+0x42>
 8006460:	4621      	mov	r1, r4
 8006462:	4628      	mov	r0, r5
 8006464:	f000 f948 	bl	80066f8 <_fflush_r>
 8006468:	bb30      	cbnz	r0, 80064b8 <__swbuf_r+0x90>
 800646a:	68a3      	ldr	r3, [r4, #8]
 800646c:	3b01      	subs	r3, #1
 800646e:	60a3      	str	r3, [r4, #8]
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	6022      	str	r2, [r4, #0]
 8006476:	701e      	strb	r6, [r3, #0]
 8006478:	6963      	ldr	r3, [r4, #20]
 800647a:	3001      	adds	r0, #1
 800647c:	4283      	cmp	r3, r0
 800647e:	d004      	beq.n	800648a <__swbuf_r+0x62>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	07db      	lsls	r3, r3, #31
 8006484:	d506      	bpl.n	8006494 <__swbuf_r+0x6c>
 8006486:	2e0a      	cmp	r6, #10
 8006488:	d104      	bne.n	8006494 <__swbuf_r+0x6c>
 800648a:	4621      	mov	r1, r4
 800648c:	4628      	mov	r0, r5
 800648e:	f000 f933 	bl	80066f8 <_fflush_r>
 8006492:	b988      	cbnz	r0, 80064b8 <__swbuf_r+0x90>
 8006494:	4638      	mov	r0, r7
 8006496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006498:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <__swbuf_r+0x9c>)
 800649a:	429c      	cmp	r4, r3
 800649c:	d101      	bne.n	80064a2 <__swbuf_r+0x7a>
 800649e:	68ac      	ldr	r4, [r5, #8]
 80064a0:	e7cf      	b.n	8006442 <__swbuf_r+0x1a>
 80064a2:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <__swbuf_r+0xa0>)
 80064a4:	429c      	cmp	r4, r3
 80064a6:	bf08      	it	eq
 80064a8:	68ec      	ldreq	r4, [r5, #12]
 80064aa:	e7ca      	b.n	8006442 <__swbuf_r+0x1a>
 80064ac:	4621      	mov	r1, r4
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 f81e 	bl	80064f0 <__swsetup_r>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d0cb      	beq.n	8006450 <__swbuf_r+0x28>
 80064b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80064bc:	e7ea      	b.n	8006494 <__swbuf_r+0x6c>
 80064be:	bf00      	nop
 80064c0:	0801a314 	.word	0x0801a314
 80064c4:	0801a334 	.word	0x0801a334
 80064c8:	0801a2f4 	.word	0x0801a2f4

080064cc <_write_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4d07      	ldr	r5, [pc, #28]	; (80064ec <_write_r+0x20>)
 80064d0:	4604      	mov	r4, r0
 80064d2:	4608      	mov	r0, r1
 80064d4:	4611      	mov	r1, r2
 80064d6:	2200      	movs	r2, #0
 80064d8:	602a      	str	r2, [r5, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	f7fa ff20 	bl	8001320 <_write>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d102      	bne.n	80064ea <_write_r+0x1e>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	b103      	cbz	r3, 80064ea <_write_r+0x1e>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	200146e4 	.word	0x200146e4

080064f0 <__swsetup_r>:
 80064f0:	4b32      	ldr	r3, [pc, #200]	; (80065bc <__swsetup_r+0xcc>)
 80064f2:	b570      	push	{r4, r5, r6, lr}
 80064f4:	681d      	ldr	r5, [r3, #0]
 80064f6:	4606      	mov	r6, r0
 80064f8:	460c      	mov	r4, r1
 80064fa:	b125      	cbz	r5, 8006506 <__swsetup_r+0x16>
 80064fc:	69ab      	ldr	r3, [r5, #24]
 80064fe:	b913      	cbnz	r3, 8006506 <__swsetup_r+0x16>
 8006500:	4628      	mov	r0, r5
 8006502:	f7ff fb55 	bl	8005bb0 <__sinit>
 8006506:	4b2e      	ldr	r3, [pc, #184]	; (80065c0 <__swsetup_r+0xd0>)
 8006508:	429c      	cmp	r4, r3
 800650a:	d10f      	bne.n	800652c <__swsetup_r+0x3c>
 800650c:	686c      	ldr	r4, [r5, #4]
 800650e:	89a3      	ldrh	r3, [r4, #12]
 8006510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006514:	0719      	lsls	r1, r3, #28
 8006516:	d42c      	bmi.n	8006572 <__swsetup_r+0x82>
 8006518:	06dd      	lsls	r5, r3, #27
 800651a:	d411      	bmi.n	8006540 <__swsetup_r+0x50>
 800651c:	2309      	movs	r3, #9
 800651e:	6033      	str	r3, [r6, #0]
 8006520:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006524:	81a3      	strh	r3, [r4, #12]
 8006526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800652a:	e03e      	b.n	80065aa <__swsetup_r+0xba>
 800652c:	4b25      	ldr	r3, [pc, #148]	; (80065c4 <__swsetup_r+0xd4>)
 800652e:	429c      	cmp	r4, r3
 8006530:	d101      	bne.n	8006536 <__swsetup_r+0x46>
 8006532:	68ac      	ldr	r4, [r5, #8]
 8006534:	e7eb      	b.n	800650e <__swsetup_r+0x1e>
 8006536:	4b24      	ldr	r3, [pc, #144]	; (80065c8 <__swsetup_r+0xd8>)
 8006538:	429c      	cmp	r4, r3
 800653a:	bf08      	it	eq
 800653c:	68ec      	ldreq	r4, [r5, #12]
 800653e:	e7e6      	b.n	800650e <__swsetup_r+0x1e>
 8006540:	0758      	lsls	r0, r3, #29
 8006542:	d512      	bpl.n	800656a <__swsetup_r+0x7a>
 8006544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006546:	b141      	cbz	r1, 800655a <__swsetup_r+0x6a>
 8006548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800654c:	4299      	cmp	r1, r3
 800654e:	d002      	beq.n	8006556 <__swsetup_r+0x66>
 8006550:	4630      	mov	r0, r6
 8006552:	f000 f98f 	bl	8006874 <_free_r>
 8006556:	2300      	movs	r3, #0
 8006558:	6363      	str	r3, [r4, #52]	; 0x34
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006560:	81a3      	strh	r3, [r4, #12]
 8006562:	2300      	movs	r3, #0
 8006564:	6063      	str	r3, [r4, #4]
 8006566:	6923      	ldr	r3, [r4, #16]
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	f043 0308 	orr.w	r3, r3, #8
 8006570:	81a3      	strh	r3, [r4, #12]
 8006572:	6923      	ldr	r3, [r4, #16]
 8006574:	b94b      	cbnz	r3, 800658a <__swsetup_r+0x9a>
 8006576:	89a3      	ldrh	r3, [r4, #12]
 8006578:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800657c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006580:	d003      	beq.n	800658a <__swsetup_r+0x9a>
 8006582:	4621      	mov	r1, r4
 8006584:	4630      	mov	r0, r6
 8006586:	f000 f929 	bl	80067dc <__smakebuf_r>
 800658a:	89a0      	ldrh	r0, [r4, #12]
 800658c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006590:	f010 0301 	ands.w	r3, r0, #1
 8006594:	d00a      	beq.n	80065ac <__swsetup_r+0xbc>
 8006596:	2300      	movs	r3, #0
 8006598:	60a3      	str	r3, [r4, #8]
 800659a:	6963      	ldr	r3, [r4, #20]
 800659c:	425b      	negs	r3, r3
 800659e:	61a3      	str	r3, [r4, #24]
 80065a0:	6923      	ldr	r3, [r4, #16]
 80065a2:	b943      	cbnz	r3, 80065b6 <__swsetup_r+0xc6>
 80065a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065a8:	d1ba      	bne.n	8006520 <__swsetup_r+0x30>
 80065aa:	bd70      	pop	{r4, r5, r6, pc}
 80065ac:	0781      	lsls	r1, r0, #30
 80065ae:	bf58      	it	pl
 80065b0:	6963      	ldrpl	r3, [r4, #20]
 80065b2:	60a3      	str	r3, [r4, #8]
 80065b4:	e7f4      	b.n	80065a0 <__swsetup_r+0xb0>
 80065b6:	2000      	movs	r0, #0
 80065b8:	e7f7      	b.n	80065aa <__swsetup_r+0xba>
 80065ba:	bf00      	nop
 80065bc:	20000010 	.word	0x20000010
 80065c0:	0801a314 	.word	0x0801a314
 80065c4:	0801a334 	.word	0x0801a334
 80065c8:	0801a2f4 	.word	0x0801a2f4

080065cc <_close_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d06      	ldr	r5, [pc, #24]	; (80065e8 <_close_r+0x1c>)
 80065d0:	2300      	movs	r3, #0
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	f7fb fa55 	bl	8001a86 <_close>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_close_r+0x1a>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_close_r+0x1a>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	200146e4 	.word	0x200146e4

080065ec <__sflush_r>:
 80065ec:	898a      	ldrh	r2, [r1, #12]
 80065ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f2:	4605      	mov	r5, r0
 80065f4:	0710      	lsls	r0, r2, #28
 80065f6:	460c      	mov	r4, r1
 80065f8:	d458      	bmi.n	80066ac <__sflush_r+0xc0>
 80065fa:	684b      	ldr	r3, [r1, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	dc05      	bgt.n	800660c <__sflush_r+0x20>
 8006600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	dc02      	bgt.n	800660c <__sflush_r+0x20>
 8006606:	2000      	movs	r0, #0
 8006608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800660c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800660e:	2e00      	cmp	r6, #0
 8006610:	d0f9      	beq.n	8006606 <__sflush_r+0x1a>
 8006612:	2300      	movs	r3, #0
 8006614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006618:	682f      	ldr	r7, [r5, #0]
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	d032      	beq.n	8006684 <__sflush_r+0x98>
 800661e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	075a      	lsls	r2, r3, #29
 8006624:	d505      	bpl.n	8006632 <__sflush_r+0x46>
 8006626:	6863      	ldr	r3, [r4, #4]
 8006628:	1ac0      	subs	r0, r0, r3
 800662a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800662c:	b10b      	cbz	r3, 8006632 <__sflush_r+0x46>
 800662e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006630:	1ac0      	subs	r0, r0, r3
 8006632:	2300      	movs	r3, #0
 8006634:	4602      	mov	r2, r0
 8006636:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006638:	6a21      	ldr	r1, [r4, #32]
 800663a:	4628      	mov	r0, r5
 800663c:	47b0      	blx	r6
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	d106      	bne.n	8006652 <__sflush_r+0x66>
 8006644:	6829      	ldr	r1, [r5, #0]
 8006646:	291d      	cmp	r1, #29
 8006648:	d82c      	bhi.n	80066a4 <__sflush_r+0xb8>
 800664a:	4a2a      	ldr	r2, [pc, #168]	; (80066f4 <__sflush_r+0x108>)
 800664c:	40ca      	lsrs	r2, r1
 800664e:	07d6      	lsls	r6, r2, #31
 8006650:	d528      	bpl.n	80066a4 <__sflush_r+0xb8>
 8006652:	2200      	movs	r2, #0
 8006654:	6062      	str	r2, [r4, #4]
 8006656:	04d9      	lsls	r1, r3, #19
 8006658:	6922      	ldr	r2, [r4, #16]
 800665a:	6022      	str	r2, [r4, #0]
 800665c:	d504      	bpl.n	8006668 <__sflush_r+0x7c>
 800665e:	1c42      	adds	r2, r0, #1
 8006660:	d101      	bne.n	8006666 <__sflush_r+0x7a>
 8006662:	682b      	ldr	r3, [r5, #0]
 8006664:	b903      	cbnz	r3, 8006668 <__sflush_r+0x7c>
 8006666:	6560      	str	r0, [r4, #84]	; 0x54
 8006668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800666a:	602f      	str	r7, [r5, #0]
 800666c:	2900      	cmp	r1, #0
 800666e:	d0ca      	beq.n	8006606 <__sflush_r+0x1a>
 8006670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006674:	4299      	cmp	r1, r3
 8006676:	d002      	beq.n	800667e <__sflush_r+0x92>
 8006678:	4628      	mov	r0, r5
 800667a:	f000 f8fb 	bl	8006874 <_free_r>
 800667e:	2000      	movs	r0, #0
 8006680:	6360      	str	r0, [r4, #52]	; 0x34
 8006682:	e7c1      	b.n	8006608 <__sflush_r+0x1c>
 8006684:	6a21      	ldr	r1, [r4, #32]
 8006686:	2301      	movs	r3, #1
 8006688:	4628      	mov	r0, r5
 800668a:	47b0      	blx	r6
 800668c:	1c41      	adds	r1, r0, #1
 800668e:	d1c7      	bne.n	8006620 <__sflush_r+0x34>
 8006690:	682b      	ldr	r3, [r5, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0c4      	beq.n	8006620 <__sflush_r+0x34>
 8006696:	2b1d      	cmp	r3, #29
 8006698:	d001      	beq.n	800669e <__sflush_r+0xb2>
 800669a:	2b16      	cmp	r3, #22
 800669c:	d101      	bne.n	80066a2 <__sflush_r+0xb6>
 800669e:	602f      	str	r7, [r5, #0]
 80066a0:	e7b1      	b.n	8006606 <__sflush_r+0x1a>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a8:	81a3      	strh	r3, [r4, #12]
 80066aa:	e7ad      	b.n	8006608 <__sflush_r+0x1c>
 80066ac:	690f      	ldr	r7, [r1, #16]
 80066ae:	2f00      	cmp	r7, #0
 80066b0:	d0a9      	beq.n	8006606 <__sflush_r+0x1a>
 80066b2:	0793      	lsls	r3, r2, #30
 80066b4:	680e      	ldr	r6, [r1, #0]
 80066b6:	bf08      	it	eq
 80066b8:	694b      	ldreq	r3, [r1, #20]
 80066ba:	600f      	str	r7, [r1, #0]
 80066bc:	bf18      	it	ne
 80066be:	2300      	movne	r3, #0
 80066c0:	eba6 0807 	sub.w	r8, r6, r7
 80066c4:	608b      	str	r3, [r1, #8]
 80066c6:	f1b8 0f00 	cmp.w	r8, #0
 80066ca:	dd9c      	ble.n	8006606 <__sflush_r+0x1a>
 80066cc:	6a21      	ldr	r1, [r4, #32]
 80066ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066d0:	4643      	mov	r3, r8
 80066d2:	463a      	mov	r2, r7
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b0      	blx	r6
 80066d8:	2800      	cmp	r0, #0
 80066da:	dc06      	bgt.n	80066ea <__sflush_r+0xfe>
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e2:	81a3      	strh	r3, [r4, #12]
 80066e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066e8:	e78e      	b.n	8006608 <__sflush_r+0x1c>
 80066ea:	4407      	add	r7, r0
 80066ec:	eba8 0800 	sub.w	r8, r8, r0
 80066f0:	e7e9      	b.n	80066c6 <__sflush_r+0xda>
 80066f2:	bf00      	nop
 80066f4:	20400001 	.word	0x20400001

080066f8 <_fflush_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	690b      	ldr	r3, [r1, #16]
 80066fc:	4605      	mov	r5, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	b913      	cbnz	r3, 8006708 <_fflush_r+0x10>
 8006702:	2500      	movs	r5, #0
 8006704:	4628      	mov	r0, r5
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	b118      	cbz	r0, 8006712 <_fflush_r+0x1a>
 800670a:	6983      	ldr	r3, [r0, #24]
 800670c:	b90b      	cbnz	r3, 8006712 <_fflush_r+0x1a>
 800670e:	f7ff fa4f 	bl	8005bb0 <__sinit>
 8006712:	4b14      	ldr	r3, [pc, #80]	; (8006764 <_fflush_r+0x6c>)
 8006714:	429c      	cmp	r4, r3
 8006716:	d11b      	bne.n	8006750 <_fflush_r+0x58>
 8006718:	686c      	ldr	r4, [r5, #4]
 800671a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0ef      	beq.n	8006702 <_fflush_r+0xa>
 8006722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006724:	07d0      	lsls	r0, r2, #31
 8006726:	d404      	bmi.n	8006732 <_fflush_r+0x3a>
 8006728:	0599      	lsls	r1, r3, #22
 800672a:	d402      	bmi.n	8006732 <_fflush_r+0x3a>
 800672c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800672e:	f7ff fadd 	bl	8005cec <__retarget_lock_acquire_recursive>
 8006732:	4628      	mov	r0, r5
 8006734:	4621      	mov	r1, r4
 8006736:	f7ff ff59 	bl	80065ec <__sflush_r>
 800673a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800673c:	07da      	lsls	r2, r3, #31
 800673e:	4605      	mov	r5, r0
 8006740:	d4e0      	bmi.n	8006704 <_fflush_r+0xc>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	059b      	lsls	r3, r3, #22
 8006746:	d4dd      	bmi.n	8006704 <_fflush_r+0xc>
 8006748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800674a:	f7ff fad0 	bl	8005cee <__retarget_lock_release_recursive>
 800674e:	e7d9      	b.n	8006704 <_fflush_r+0xc>
 8006750:	4b05      	ldr	r3, [pc, #20]	; (8006768 <_fflush_r+0x70>)
 8006752:	429c      	cmp	r4, r3
 8006754:	d101      	bne.n	800675a <_fflush_r+0x62>
 8006756:	68ac      	ldr	r4, [r5, #8]
 8006758:	e7df      	b.n	800671a <_fflush_r+0x22>
 800675a:	4b04      	ldr	r3, [pc, #16]	; (800676c <_fflush_r+0x74>)
 800675c:	429c      	cmp	r4, r3
 800675e:	bf08      	it	eq
 8006760:	68ec      	ldreq	r4, [r5, #12]
 8006762:	e7da      	b.n	800671a <_fflush_r+0x22>
 8006764:	0801a314 	.word	0x0801a314
 8006768:	0801a334 	.word	0x0801a334
 800676c:	0801a2f4 	.word	0x0801a2f4

08006770 <_lseek_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4d07      	ldr	r5, [pc, #28]	; (8006790 <_lseek_r+0x20>)
 8006774:	4604      	mov	r4, r0
 8006776:	4608      	mov	r0, r1
 8006778:	4611      	mov	r1, r2
 800677a:	2200      	movs	r2, #0
 800677c:	602a      	str	r2, [r5, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	f7fb f9a8 	bl	8001ad4 <_lseek>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_lseek_r+0x1e>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_lseek_r+0x1e>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	200146e4 	.word	0x200146e4

08006794 <__swhatbuf_r>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	460e      	mov	r6, r1
 8006798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800679c:	2900      	cmp	r1, #0
 800679e:	b096      	sub	sp, #88	; 0x58
 80067a0:	4614      	mov	r4, r2
 80067a2:	461d      	mov	r5, r3
 80067a4:	da07      	bge.n	80067b6 <__swhatbuf_r+0x22>
 80067a6:	2300      	movs	r3, #0
 80067a8:	602b      	str	r3, [r5, #0]
 80067aa:	89b3      	ldrh	r3, [r6, #12]
 80067ac:	061a      	lsls	r2, r3, #24
 80067ae:	d410      	bmi.n	80067d2 <__swhatbuf_r+0x3e>
 80067b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067b4:	e00e      	b.n	80067d4 <__swhatbuf_r+0x40>
 80067b6:	466a      	mov	r2, sp
 80067b8:	f000 f8be 	bl	8006938 <_fstat_r>
 80067bc:	2800      	cmp	r0, #0
 80067be:	dbf2      	blt.n	80067a6 <__swhatbuf_r+0x12>
 80067c0:	9a01      	ldr	r2, [sp, #4]
 80067c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067ca:	425a      	negs	r2, r3
 80067cc:	415a      	adcs	r2, r3
 80067ce:	602a      	str	r2, [r5, #0]
 80067d0:	e7ee      	b.n	80067b0 <__swhatbuf_r+0x1c>
 80067d2:	2340      	movs	r3, #64	; 0x40
 80067d4:	2000      	movs	r0, #0
 80067d6:	6023      	str	r3, [r4, #0]
 80067d8:	b016      	add	sp, #88	; 0x58
 80067da:	bd70      	pop	{r4, r5, r6, pc}

080067dc <__smakebuf_r>:
 80067dc:	898b      	ldrh	r3, [r1, #12]
 80067de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067e0:	079d      	lsls	r5, r3, #30
 80067e2:	4606      	mov	r6, r0
 80067e4:	460c      	mov	r4, r1
 80067e6:	d507      	bpl.n	80067f8 <__smakebuf_r+0x1c>
 80067e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	6123      	str	r3, [r4, #16]
 80067f0:	2301      	movs	r3, #1
 80067f2:	6163      	str	r3, [r4, #20]
 80067f4:	b002      	add	sp, #8
 80067f6:	bd70      	pop	{r4, r5, r6, pc}
 80067f8:	ab01      	add	r3, sp, #4
 80067fa:	466a      	mov	r2, sp
 80067fc:	f7ff ffca 	bl	8006794 <__swhatbuf_r>
 8006800:	9900      	ldr	r1, [sp, #0]
 8006802:	4605      	mov	r5, r0
 8006804:	4630      	mov	r0, r6
 8006806:	f7ff fa73 	bl	8005cf0 <_malloc_r>
 800680a:	b948      	cbnz	r0, 8006820 <__smakebuf_r+0x44>
 800680c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006810:	059a      	lsls	r2, r3, #22
 8006812:	d4ef      	bmi.n	80067f4 <__smakebuf_r+0x18>
 8006814:	f023 0303 	bic.w	r3, r3, #3
 8006818:	f043 0302 	orr.w	r3, r3, #2
 800681c:	81a3      	strh	r3, [r4, #12]
 800681e:	e7e3      	b.n	80067e8 <__smakebuf_r+0xc>
 8006820:	4b0d      	ldr	r3, [pc, #52]	; (8006858 <__smakebuf_r+0x7c>)
 8006822:	62b3      	str	r3, [r6, #40]	; 0x28
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	6020      	str	r0, [r4, #0]
 8006828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	9b00      	ldr	r3, [sp, #0]
 8006830:	6163      	str	r3, [r4, #20]
 8006832:	9b01      	ldr	r3, [sp, #4]
 8006834:	6120      	str	r0, [r4, #16]
 8006836:	b15b      	cbz	r3, 8006850 <__smakebuf_r+0x74>
 8006838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800683c:	4630      	mov	r0, r6
 800683e:	f000 f88d 	bl	800695c <_isatty_r>
 8006842:	b128      	cbz	r0, 8006850 <__smakebuf_r+0x74>
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	f023 0303 	bic.w	r3, r3, #3
 800684a:	f043 0301 	orr.w	r3, r3, #1
 800684e:	81a3      	strh	r3, [r4, #12]
 8006850:	89a0      	ldrh	r0, [r4, #12]
 8006852:	4305      	orrs	r5, r0
 8006854:	81a5      	strh	r5, [r4, #12]
 8006856:	e7cd      	b.n	80067f4 <__smakebuf_r+0x18>
 8006858:	08005b49 	.word	0x08005b49

0800685c <__malloc_lock>:
 800685c:	4801      	ldr	r0, [pc, #4]	; (8006864 <__malloc_lock+0x8>)
 800685e:	f7ff ba45 	b.w	8005cec <__retarget_lock_acquire_recursive>
 8006862:	bf00      	nop
 8006864:	200146dc 	.word	0x200146dc

08006868 <__malloc_unlock>:
 8006868:	4801      	ldr	r0, [pc, #4]	; (8006870 <__malloc_unlock+0x8>)
 800686a:	f7ff ba40 	b.w	8005cee <__retarget_lock_release_recursive>
 800686e:	bf00      	nop
 8006870:	200146dc 	.word	0x200146dc

08006874 <_free_r>:
 8006874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006876:	2900      	cmp	r1, #0
 8006878:	d048      	beq.n	800690c <_free_r+0x98>
 800687a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800687e:	9001      	str	r0, [sp, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	f1a1 0404 	sub.w	r4, r1, #4
 8006886:	bfb8      	it	lt
 8006888:	18e4      	addlt	r4, r4, r3
 800688a:	f7ff ffe7 	bl	800685c <__malloc_lock>
 800688e:	4a20      	ldr	r2, [pc, #128]	; (8006910 <_free_r+0x9c>)
 8006890:	9801      	ldr	r0, [sp, #4]
 8006892:	6813      	ldr	r3, [r2, #0]
 8006894:	4615      	mov	r5, r2
 8006896:	b933      	cbnz	r3, 80068a6 <_free_r+0x32>
 8006898:	6063      	str	r3, [r4, #4]
 800689a:	6014      	str	r4, [r2, #0]
 800689c:	b003      	add	sp, #12
 800689e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068a2:	f7ff bfe1 	b.w	8006868 <__malloc_unlock>
 80068a6:	42a3      	cmp	r3, r4
 80068a8:	d90b      	bls.n	80068c2 <_free_r+0x4e>
 80068aa:	6821      	ldr	r1, [r4, #0]
 80068ac:	1862      	adds	r2, r4, r1
 80068ae:	4293      	cmp	r3, r2
 80068b0:	bf04      	itt	eq
 80068b2:	681a      	ldreq	r2, [r3, #0]
 80068b4:	685b      	ldreq	r3, [r3, #4]
 80068b6:	6063      	str	r3, [r4, #4]
 80068b8:	bf04      	itt	eq
 80068ba:	1852      	addeq	r2, r2, r1
 80068bc:	6022      	streq	r2, [r4, #0]
 80068be:	602c      	str	r4, [r5, #0]
 80068c0:	e7ec      	b.n	800689c <_free_r+0x28>
 80068c2:	461a      	mov	r2, r3
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	b10b      	cbz	r3, 80068cc <_free_r+0x58>
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	d9fa      	bls.n	80068c2 <_free_r+0x4e>
 80068cc:	6811      	ldr	r1, [r2, #0]
 80068ce:	1855      	adds	r5, r2, r1
 80068d0:	42a5      	cmp	r5, r4
 80068d2:	d10b      	bne.n	80068ec <_free_r+0x78>
 80068d4:	6824      	ldr	r4, [r4, #0]
 80068d6:	4421      	add	r1, r4
 80068d8:	1854      	adds	r4, r2, r1
 80068da:	42a3      	cmp	r3, r4
 80068dc:	6011      	str	r1, [r2, #0]
 80068de:	d1dd      	bne.n	800689c <_free_r+0x28>
 80068e0:	681c      	ldr	r4, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	6053      	str	r3, [r2, #4]
 80068e6:	4421      	add	r1, r4
 80068e8:	6011      	str	r1, [r2, #0]
 80068ea:	e7d7      	b.n	800689c <_free_r+0x28>
 80068ec:	d902      	bls.n	80068f4 <_free_r+0x80>
 80068ee:	230c      	movs	r3, #12
 80068f0:	6003      	str	r3, [r0, #0]
 80068f2:	e7d3      	b.n	800689c <_free_r+0x28>
 80068f4:	6825      	ldr	r5, [r4, #0]
 80068f6:	1961      	adds	r1, r4, r5
 80068f8:	428b      	cmp	r3, r1
 80068fa:	bf04      	itt	eq
 80068fc:	6819      	ldreq	r1, [r3, #0]
 80068fe:	685b      	ldreq	r3, [r3, #4]
 8006900:	6063      	str	r3, [r4, #4]
 8006902:	bf04      	itt	eq
 8006904:	1949      	addeq	r1, r1, r5
 8006906:	6021      	streq	r1, [r4, #0]
 8006908:	6054      	str	r4, [r2, #4]
 800690a:	e7c7      	b.n	800689c <_free_r+0x28>
 800690c:	b003      	add	sp, #12
 800690e:	bd30      	pop	{r4, r5, pc}
 8006910:	200004ac 	.word	0x200004ac

08006914 <_read_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	4d07      	ldr	r5, [pc, #28]	; (8006934 <_read_r+0x20>)
 8006918:	4604      	mov	r4, r0
 800691a:	4608      	mov	r0, r1
 800691c:	4611      	mov	r1, r2
 800691e:	2200      	movs	r2, #0
 8006920:	602a      	str	r2, [r5, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	f7fb f892 	bl	8001a4c <_read>
 8006928:	1c43      	adds	r3, r0, #1
 800692a:	d102      	bne.n	8006932 <_read_r+0x1e>
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	b103      	cbz	r3, 8006932 <_read_r+0x1e>
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	200146e4 	.word	0x200146e4

08006938 <_fstat_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4d07      	ldr	r5, [pc, #28]	; (8006958 <_fstat_r+0x20>)
 800693c:	2300      	movs	r3, #0
 800693e:	4604      	mov	r4, r0
 8006940:	4608      	mov	r0, r1
 8006942:	4611      	mov	r1, r2
 8006944:	602b      	str	r3, [r5, #0]
 8006946:	f7fb f8aa 	bl	8001a9e <_fstat>
 800694a:	1c43      	adds	r3, r0, #1
 800694c:	d102      	bne.n	8006954 <_fstat_r+0x1c>
 800694e:	682b      	ldr	r3, [r5, #0]
 8006950:	b103      	cbz	r3, 8006954 <_fstat_r+0x1c>
 8006952:	6023      	str	r3, [r4, #0]
 8006954:	bd38      	pop	{r3, r4, r5, pc}
 8006956:	bf00      	nop
 8006958:	200146e4 	.word	0x200146e4

0800695c <_isatty_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4d06      	ldr	r5, [pc, #24]	; (8006978 <_isatty_r+0x1c>)
 8006960:	2300      	movs	r3, #0
 8006962:	4604      	mov	r4, r0
 8006964:	4608      	mov	r0, r1
 8006966:	602b      	str	r3, [r5, #0]
 8006968:	f7fb f8a9 	bl	8001abe <_isatty>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d102      	bne.n	8006976 <_isatty_r+0x1a>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	b103      	cbz	r3, 8006976 <_isatty_r+0x1a>
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	200146e4 	.word	0x200146e4

0800697c <log10f>:
 800697c:	b510      	push	{r4, lr}
 800697e:	ed2d 8b02 	vpush	{d8}
 8006982:	b08a      	sub	sp, #40	; 0x28
 8006984:	eeb0 8a40 	vmov.f32	s16, s0
 8006988:	f000 f8ce 	bl	8006b28 <__ieee754_log10f>
 800698c:	4b35      	ldr	r3, [pc, #212]	; (8006a64 <log10f+0xe8>)
 800698e:	f993 4000 	ldrsb.w	r4, [r3]
 8006992:	1c63      	adds	r3, r4, #1
 8006994:	d009      	beq.n	80069aa <log10f+0x2e>
 8006996:	eeb4 8a48 	vcmp.f32	s16, s16
 800699a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800699e:	d604      	bvs.n	80069aa <log10f+0x2e>
 80069a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80069a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a8:	d903      	bls.n	80069b2 <log10f+0x36>
 80069aa:	b00a      	add	sp, #40	; 0x28
 80069ac:	ecbd 8b02 	vpop	{d8}
 80069b0:	bd10      	pop	{r4, pc}
 80069b2:	4b2d      	ldr	r3, [pc, #180]	; (8006a68 <log10f+0xec>)
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	ee18 0a10 	vmov	r0, s16
 80069ba:	2300      	movs	r3, #0
 80069bc:	9308      	str	r3, [sp, #32]
 80069be:	f7f9 fe1b 	bl	80005f8 <__aeabi_f2d>
 80069c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069ca:	b1e4      	cbz	r4, 8006a06 <log10f+0x8a>
 80069cc:	4b27      	ldr	r3, [pc, #156]	; (8006a6c <log10f+0xf0>)
 80069ce:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80069d2:	2200      	movs	r2, #0
 80069d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069dc:	d138      	bne.n	8006a50 <log10f+0xd4>
 80069de:	2302      	movs	r3, #2
 80069e0:	429c      	cmp	r4, r3
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	d12e      	bne.n	8006a44 <log10f+0xc8>
 80069e6:	f7ff f833 	bl	8005a50 <__errno>
 80069ea:	2322      	movs	r3, #34	; 0x22
 80069ec:	6003      	str	r3, [r0, #0]
 80069ee:	9b08      	ldr	r3, [sp, #32]
 80069f0:	bb0b      	cbnz	r3, 8006a36 <log10f+0xba>
 80069f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069f6:	f7fa f869 	bl	8000acc <__aeabi_d2f>
 80069fa:	ee00 0a10 	vmov	s0, r0
 80069fe:	b00a      	add	sp, #40	; 0x28
 8006a00:	ecbd 8b02 	vpop	{d8}
 8006a04:	bd10      	pop	{r4, pc}
 8006a06:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <log10f+0xf4>)
 8006a08:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006a0c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a18:	d012      	beq.n	8006a40 <log10f+0xc4>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4668      	mov	r0, sp
 8006a20:	f000 f8e6 	bl	8006bf0 <matherr>
 8006a24:	b1c0      	cbz	r0, 8006a58 <log10f+0xdc>
 8006a26:	4813      	ldr	r0, [pc, #76]	; (8006a74 <log10f+0xf8>)
 8006a28:	f000 f8e6 	bl	8006bf8 <nan>
 8006a2c:	9b08      	ldr	r3, [sp, #32]
 8006a2e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0dd      	beq.n	80069f2 <log10f+0x76>
 8006a36:	f7ff f80b 	bl	8005a50 <__errno>
 8006a3a:	9b08      	ldr	r3, [sp, #32]
 8006a3c:	6003      	str	r3, [r0, #0]
 8006a3e:	e7d8      	b.n	80069f2 <log10f+0x76>
 8006a40:	2302      	movs	r3, #2
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	4668      	mov	r0, sp
 8006a46:	f000 f8d3 	bl	8006bf0 <matherr>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d1cf      	bne.n	80069ee <log10f+0x72>
 8006a4e:	e7ca      	b.n	80069e6 <log10f+0x6a>
 8006a50:	2301      	movs	r3, #1
 8006a52:	2c02      	cmp	r4, #2
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	d1e2      	bne.n	8006a1e <log10f+0xa2>
 8006a58:	f7fe fffa 	bl	8005a50 <__errno>
 8006a5c:	2321      	movs	r3, #33	; 0x21
 8006a5e:	6003      	str	r3, [r0, #0]
 8006a60:	e7e1      	b.n	8006a26 <log10f+0xaa>
 8006a62:	bf00      	nop
 8006a64:	20000074 	.word	0x20000074
 8006a68:	0801a388 	.word	0x0801a388
 8006a6c:	fff00000 	.word	0xfff00000
 8006a70:	c7efffff 	.word	0xc7efffff
 8006a74:	0801a390 	.word	0x0801a390

08006a78 <sqrtf>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	ed2d 8b02 	vpush	{d8}
 8006a7e:	b08a      	sub	sp, #40	; 0x28
 8006a80:	eeb0 8a40 	vmov.f32	s16, s0
 8006a84:	f000 f8b0 	bl	8006be8 <__ieee754_sqrtf>
 8006a88:	4b25      	ldr	r3, [pc, #148]	; (8006b20 <sqrtf+0xa8>)
 8006a8a:	f993 4000 	ldrsb.w	r4, [r3]
 8006a8e:	1c63      	adds	r3, r4, #1
 8006a90:	d009      	beq.n	8006aa6 <sqrtf+0x2e>
 8006a92:	eeb4 8a48 	vcmp.f32	s16, s16
 8006a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a9a:	d604      	bvs.n	8006aa6 <sqrtf+0x2e>
 8006a9c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa4:	d403      	bmi.n	8006aae <sqrtf+0x36>
 8006aa6:	b00a      	add	sp, #40	; 0x28
 8006aa8:	ecbd 8b02 	vpop	{d8}
 8006aac:	bd10      	pop	{r4, pc}
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4a1c      	ldr	r2, [pc, #112]	; (8006b24 <sqrtf+0xac>)
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	ee18 0a10 	vmov	r0, s16
 8006ab8:	2300      	movs	r3, #0
 8006aba:	9201      	str	r2, [sp, #4]
 8006abc:	9308      	str	r3, [sp, #32]
 8006abe:	f7f9 fd9b 	bl	80005f8 <__aeabi_f2d>
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006acc:	2300      	movs	r3, #0
 8006ace:	b1bc      	cbz	r4, 8006b00 <sqrtf+0x88>
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	f7f9 ff12 	bl	80008fc <__aeabi_ddiv>
 8006ad8:	2c02      	cmp	r4, #2
 8006ada:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ade:	d111      	bne.n	8006b04 <sqrtf+0x8c>
 8006ae0:	f7fe ffb6 	bl	8005a50 <__errno>
 8006ae4:	2321      	movs	r3, #33	; 0x21
 8006ae6:	6003      	str	r3, [r0, #0]
 8006ae8:	9b08      	ldr	r3, [sp, #32]
 8006aea:	b99b      	cbnz	r3, 8006b14 <sqrtf+0x9c>
 8006aec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006af0:	f7f9 ffec 	bl	8000acc <__aeabi_d2f>
 8006af4:	ee00 0a10 	vmov	s0, r0
 8006af8:	b00a      	add	sp, #40	; 0x28
 8006afa:	ecbd 8b02 	vpop	{d8}
 8006afe:	bd10      	pop	{r4, pc}
 8006b00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b04:	4668      	mov	r0, sp
 8006b06:	f000 f873 	bl	8006bf0 <matherr>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d0e8      	beq.n	8006ae0 <sqrtf+0x68>
 8006b0e:	9b08      	ldr	r3, [sp, #32]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0eb      	beq.n	8006aec <sqrtf+0x74>
 8006b14:	f7fe ff9c 	bl	8005a50 <__errno>
 8006b18:	9b08      	ldr	r3, [sp, #32]
 8006b1a:	6003      	str	r3, [r0, #0]
 8006b1c:	e7e6      	b.n	8006aec <sqrtf+0x74>
 8006b1e:	bf00      	nop
 8006b20:	20000074 	.word	0x20000074
 8006b24:	0801a394 	.word	0x0801a394

08006b28 <__ieee754_log10f>:
 8006b28:	b508      	push	{r3, lr}
 8006b2a:	ee10 3a10 	vmov	r3, s0
 8006b2e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006b32:	ed2d 8b02 	vpush	{d8}
 8006b36:	d02b      	beq.n	8006b90 <__ieee754_log10f+0x68>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	db32      	blt.n	8006ba2 <__ieee754_log10f+0x7a>
 8006b3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006b40:	da41      	bge.n	8006bc6 <__ieee754_log10f+0x9e>
 8006b42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b46:	db35      	blt.n	8006bb4 <__ieee754_log10f+0x8c>
 8006b48:	2100      	movs	r1, #0
 8006b4a:	15da      	asrs	r2, r3, #23
 8006b4c:	3a7f      	subs	r2, #127	; 0x7f
 8006b4e:	440a      	add	r2, r1
 8006b50:	0fd1      	lsrs	r1, r2, #31
 8006b52:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8006b56:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8006b5a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006b5e:	ee07 2a90 	vmov	s15, r2
 8006b62:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8006b66:	ee00 3a10 	vmov	s0, r3
 8006b6a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006b6e:	f000 f84b 	bl	8006c08 <__ieee754_logf>
 8006b72:	eddf 6a17 	vldr	s13, [pc, #92]	; 8006bd0 <__ieee754_log10f+0xa8>
 8006b76:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006bd4 <__ieee754_log10f+0xac>
 8006b7a:	eddf 7a17 	vldr	s15, [pc, #92]	; 8006bd8 <__ieee754_log10f+0xb0>
 8006b7e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006b82:	eea8 0a07 	vfma.f32	s0, s16, s14
 8006b86:	eea8 0a27 	vfma.f32	s0, s16, s15
 8006b8a:	ecbd 8b02 	vpop	{d8}
 8006b8e:	bd08      	pop	{r3, pc}
 8006b90:	ecbd 8b02 	vpop	{d8}
 8006b94:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006bdc <__ieee754_log10f+0xb4>
 8006b98:	eddf 7a11 	vldr	s15, [pc, #68]	; 8006be0 <__ieee754_log10f+0xb8>
 8006b9c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8006ba0:	bd08      	pop	{r3, pc}
 8006ba2:	ecbd 8b02 	vpop	{d8}
 8006ba6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006baa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8006be0 <__ieee754_log10f+0xb8>
 8006bae:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8006bb2:	bd08      	pop	{r3, pc}
 8006bb4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8006be4 <__ieee754_log10f+0xbc>
 8006bb8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006bbc:	f06f 0118 	mvn.w	r1, #24
 8006bc0:	ee17 3a90 	vmov	r3, s15
 8006bc4:	e7c1      	b.n	8006b4a <__ieee754_log10f+0x22>
 8006bc6:	ecbd 8b02 	vpop	{d8}
 8006bca:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006bce:	bd08      	pop	{r3, pc}
 8006bd0:	3ede5bd9 	.word	0x3ede5bd9
 8006bd4:	355427db 	.word	0x355427db
 8006bd8:	3e9a2080 	.word	0x3e9a2080
 8006bdc:	cc000000 	.word	0xcc000000
 8006be0:	00000000 	.word	0x00000000
 8006be4:	4c000000 	.word	0x4c000000

08006be8 <__ieee754_sqrtf>:
 8006be8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop

08006bf0 <matherr>:
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	4770      	bx	lr
 8006bf4:	0000      	movs	r0, r0
	...

08006bf8 <nan>:
 8006bf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006c00 <nan+0x8>
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	00000000 	.word	0x00000000
 8006c04:	7ff80000 	.word	0x7ff80000

08006c08 <__ieee754_logf>:
 8006c08:	ee10 3a10 	vmov	r3, s0
 8006c0c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006c10:	d02d      	beq.n	8006c6e <__ieee754_logf+0x66>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	db32      	blt.n	8006c7c <__ieee754_logf+0x74>
 8006c16:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006c1a:	da3f      	bge.n	8006c9c <__ieee754_logf+0x94>
 8006c1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c20:	b430      	push	{r4, r5}
 8006c22:	db32      	blt.n	8006c8a <__ieee754_logf+0x82>
 8006c24:	2500      	movs	r5, #0
 8006c26:	4868      	ldr	r0, [pc, #416]	; (8006dc8 <__ieee754_logf+0x1c0>)
 8006c28:	4c68      	ldr	r4, [pc, #416]	; (8006dcc <__ieee754_logf+0x1c4>)
 8006c2a:	f3c3 0116 	ubfx	r1, r3, #0, #23
 8006c2e:	4408      	add	r0, r1
 8006c30:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
 8006c34:	15db      	asrs	r3, r3, #23
 8006c36:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
 8006c3a:	3b7f      	subs	r3, #127	; 0x7f
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	442b      	add	r3, r5
 8006c40:	ee00 2a10 	vmov	s0, r2
 8006c44:	f101 050f 	add.w	r5, r1, #15
 8006c48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006c4c:	402c      	ands	r4, r5
 8006c4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006c52:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8006c56:	bb24      	cbnz	r4, 8006ca2 <__ieee754_logf+0x9a>
 8006c58:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c60:	d161      	bne.n	8006d26 <__ieee754_logf+0x11e>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f040 8093 	bne.w	8006d8e <__ieee754_logf+0x186>
 8006c68:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8006dd0 <__ieee754_logf+0x1c8>
 8006c6c:	e059      	b.n	8006d22 <__ieee754_logf+0x11a>
 8006c6e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8006dd4 <__ieee754_logf+0x1cc>
 8006c72:	eddf 7a57 	vldr	s15, [pc, #348]	; 8006dd0 <__ieee754_logf+0x1c8>
 8006c76:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8006c7a:	4770      	bx	lr
 8006c7c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006c80:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8006dd0 <__ieee754_logf+0x1c8>
 8006c84:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8006c88:	4770      	bx	lr
 8006c8a:	eddf 7a53 	vldr	s15, [pc, #332]	; 8006dd8 <__ieee754_logf+0x1d0>
 8006c8e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006c92:	f06f 0518 	mvn.w	r5, #24
 8006c96:	ee17 3a90 	vmov	r3, s15
 8006c9a:	e7c4      	b.n	8006c26 <__ieee754_logf+0x1e>
 8006c9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006ca0:	4770      	bx	lr
 8006ca2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006ca6:	ee30 7a07 	vadd.f32	s14, s0, s14
 8006caa:	ed9f 3a4c 	vldr	s6, [pc, #304]	; 8006ddc <__ieee754_logf+0x1d4>
 8006cae:	eddf 4a4c 	vldr	s9, [pc, #304]	; 8006de0 <__ieee754_logf+0x1d8>
 8006cb2:	eddf 5a4c 	vldr	s11, [pc, #304]	; 8006de4 <__ieee754_logf+0x1dc>
 8006cb6:	eddf 3a4c 	vldr	s7, [pc, #304]	; 8006de8 <__ieee754_logf+0x1e0>
 8006cba:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 8006dec <__ieee754_logf+0x1e4>
 8006cbe:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8006df0 <__ieee754_logf+0x1e8>
 8006cc2:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8006df4 <__ieee754_logf+0x1ec>
 8006cc6:	484c      	ldr	r0, [pc, #304]	; (8006df8 <__ieee754_logf+0x1f0>)
 8006cc8:	ee80 4a07 	vdiv.f32	s8, s0, s14
 8006ccc:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
 8006cd0:	4408      	add	r0, r1
 8006cd2:	f502 7222 	add.w	r2, r2, #648	; 0x288
 8006cd6:	4302      	orrs	r2, r0
 8006cd8:	2a00      	cmp	r2, #0
 8006cda:	ee07 3a10 	vmov	s14, r3
 8006cde:	ee24 6a04 	vmul.f32	s12, s8, s8
 8006ce2:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 8006ce6:	ee26 7a06 	vmul.f32	s14, s12, s12
 8006cea:	eee7 4a03 	vfma.f32	s9, s14, s6
 8006cee:	eea7 5a23 	vfma.f32	s10, s14, s7
 8006cf2:	eee4 5a87 	vfma.f32	s11, s9, s14
 8006cf6:	eee5 6a07 	vfma.f32	s13, s10, s14
 8006cfa:	eee5 7a87 	vfma.f32	s15, s11, s14
 8006cfe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006d02:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006d06:	dd2b      	ble.n	8006d60 <__ieee754_logf+0x158>
 8006d08:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006d0c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006d10:	ee27 7a00 	vmul.f32	s14, s14, s0
 8006d14:	bb53      	cbnz	r3, 8006d6c <__ieee754_logf+0x164>
 8006d16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d1a:	eea7 7ac4 	vfms.f32	s14, s15, s8
 8006d1e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006d22:	bc30      	pop	{r4, r5}
 8006d24:	4770      	bx	lr
 8006d26:	eddf 7a35 	vldr	s15, [pc, #212]	; 8006dfc <__ieee754_logf+0x1f4>
 8006d2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006d2e:	eea0 7a67 	vfms.f32	s14, s0, s15
 8006d32:	eef0 7a47 	vmov.f32	s15, s14
 8006d36:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0ed      	beq.n	8006d1e <__ieee754_logf+0x116>
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8006e00 <__ieee754_logf+0x1f8>
 8006d4a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8006e04 <__ieee754_logf+0x1fc>
 8006d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d52:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8006d56:	ee37 0a40 	vsub.f32	s0, s14, s0
 8006d5a:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 8006d5e:	e7e0      	b.n	8006d22 <__ieee754_logf+0x11a>
 8006d60:	bb13      	cbnz	r3, 8006da8 <__ieee754_logf+0x1a0>
 8006d62:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006d66:	eea7 0ac4 	vfms.f32	s0, s15, s8
 8006d6a:	e7da      	b.n	8006d22 <__ieee754_logf+0x11a>
 8006d6c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006e00 <__ieee754_logf+0x1f8>
 8006d70:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8006e04 <__ieee754_logf+0x1fc>
 8006d74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d78:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8006d7c:	eee7 6a84 	vfma.f32	s13, s15, s8
 8006d80:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006d84:	ee37 0a40 	vsub.f32	s0, s14, s0
 8006d88:	ee92 0a86 	vfnms.f32	s0, s5, s12
 8006d8c:	e7c9      	b.n	8006d22 <__ieee754_logf+0x11a>
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8006e00 <__ieee754_logf+0x1f8>
 8006d96:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8006e04 <__ieee754_logf+0x1fc>
 8006d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d9e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006da2:	eea7 0a87 	vfma.f32	s0, s15, s14
 8006da6:	e7bc      	b.n	8006d22 <__ieee754_logf+0x11a>
 8006da8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006e00 <__ieee754_logf+0x1f8>
 8006dac:	eddf 6a15 	vldr	s13, [pc, #84]	; 8006e04 <__ieee754_logf+0x1fc>
 8006db0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006db4:	ee27 7a62 	vnmul.f32	s14, s14, s5
 8006db8:	eea7 7a84 	vfma.f32	s14, s15, s8
 8006dbc:	ee37 0a40 	vsub.f32	s0, s14, s0
 8006dc0:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 8006dc4:	e7ad      	b.n	8006d22 <__ieee754_logf+0x11a>
 8006dc6:	bf00      	nop
 8006dc8:	004afb20 	.word	0x004afb20
 8006dcc:	007ffff0 	.word	0x007ffff0
 8006dd0:	00000000 	.word	0x00000000
 8006dd4:	cc000000 	.word	0xcc000000
 8006dd8:	4c000000 	.word	0x4c000000
 8006ddc:	3e178897 	.word	0x3e178897
 8006de0:	3e3a3325 	.word	0x3e3a3325
 8006de4:	3e924925 	.word	0x3e924925
 8006de8:	3e1cd04f 	.word	0x3e1cd04f
 8006dec:	3e638e29 	.word	0x3e638e29
 8006df0:	3f2aaaab 	.word	0x3f2aaaab
 8006df4:	3ecccccd 	.word	0x3ecccccd
 8006df8:	ffcf5c30 	.word	0xffcf5c30
 8006dfc:	3eaaaaab 	.word	0x3eaaaaab
 8006e00:	3717f7d1 	.word	0x3717f7d1
 8006e04:	3f317180 	.word	0x3f317180

08006e08 <_init>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	bf00      	nop
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr

08006e14 <_fini>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr
